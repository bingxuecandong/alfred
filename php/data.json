{
	"data": {
		"function": {
			"label": "Functions",
			"elements": {
				"exception.construct": {
					"tokens": [
						"Exception::__construct",
						"Exception::_construct",
						"__construct",
						"::__construct"
					],
					"id": "exception.construct",
					"name": "Exception::__construct",
					"description": "Construct the exception"
				},
				"exception.getmessage": {
					"tokens": [
						"Exception::getMessage",
						"getMessage",
						"::getMessage"
					],
					"id": "exception.getmessage",
					"name": "Exception::getMessage",
					"description": "Gets the Exception message"
				},
				"exception.getprevious": {
					"tokens": [
						"Exception::getPrevious",
						"getPrevious",
						"::getPrevious"
					],
					"id": "exception.getprevious",
					"name": "Exception::getPrevious",
					"description": "Returns previous Exception"
				},
				"exception.getcode": {
					"tokens": [
						"Exception::getCode",
						"getCode",
						"::getCode"
					],
					"id": "exception.getcode",
					"name": "Exception::getCode",
					"description": "Gets the Exception code"
				},
				"exception.getfile": {
					"tokens": [
						"Exception::getFile",
						"getFile",
						"::getFile"
					],
					"id": "exception.getfile",
					"name": "Exception::getFile",
					"description": "Gets the file in which the exception occurred"
				},
				"exception.getline": {
					"tokens": [
						"Exception::getLine",
						"getLine",
						"::getLine"
					],
					"id": "exception.getline",
					"name": "Exception::getLine",
					"description": "Gets the line in which the exception occurred"
				},
				"exception.gettrace": {
					"tokens": [
						"Exception::getTrace",
						"getTrace",
						"::getTrace"
					],
					"id": "exception.gettrace",
					"name": "Exception::getTrace",
					"description": "Gets the stack trace"
				},
				"exception.gettraceasstring": {
					"tokens": [
						"Exception::getTraceAsString",
						"getTraceAsString",
						"::getTraceAsString"
					],
					"id": "exception.gettraceasstring",
					"name": "Exception::getTraceAsString",
					"description": "Gets the stack trace as a string"
				},
				"exception.tostring": {
					"tokens": [
						"Exception::__toString",
						"Exception::_toString",
						"__toString",
						"::__toString"
					],
					"id": "exception.tostring",
					"name": "Exception::__toString",
					"description": "String representation of the exception"
				},
				"exception.clone": {
					"tokens": [
						"Exception::__clone",
						"Exception::_clone",
						"__clone",
						"::__clone"
					],
					"id": "exception.clone",
					"name": "Exception::__clone",
					"description": "Clone the exception"
				},
				"errorexception.construct": {
					"tokens": [
						"ErrorException::__construct",
						"ErrorException::_construct",
						"__construct",
						"::__construct"
					],
					"id": "errorexception.construct",
					"name": "ErrorException::__construct",
					"description": "Constructs the exception"
				},
				"errorexception.getseverity": {
					"tokens": [
						"ErrorException::getSeverity",
						"getSeverity",
						"::getSeverity"
					],
					"id": "errorexception.getseverity",
					"name": "ErrorException::getSeverity",
					"description": "Gets the exception severity"
				},
				"error.construct": {
					"tokens": [
						"Error::__construct",
						"Error::_construct",
						"__construct",
						"::__construct"
					],
					"id": "error.construct",
					"name": "Error::__construct",
					"description": "Construct the error object"
				},
				"error.getmessage": {
					"tokens": [
						"Error::getMessage",
						"getMessage",
						"::getMessage"
					],
					"id": "error.getmessage",
					"name": "Error::getMessage",
					"description": "Gets the error message"
				},
				"error.getprevious": {
					"tokens": [
						"Error::getPrevious",
						"getPrevious",
						"::getPrevious"
					],
					"id": "error.getprevious",
					"name": "Error::getPrevious",
					"description": "Returns previous Throwable"
				},
				"error.getcode": {
					"tokens": [
						"Error::getCode",
						"getCode",
						"::getCode"
					],
					"id": "error.getcode",
					"name": "Error::getCode",
					"description": "Gets the error code"
				},
				"error.getfile": {
					"tokens": [
						"Error::getFile",
						"getFile",
						"::getFile"
					],
					"id": "error.getfile",
					"name": "Error::getFile",
					"description": "Gets the file in which the error occurred"
				},
				"error.getline": {
					"tokens": [
						"Error::getLine",
						"getLine",
						"::getLine"
					],
					"id": "error.getline",
					"name": "Error::getLine",
					"description": "Gets the line in which the error occurred"
				},
				"error.gettrace": {
					"tokens": [
						"Error::getTrace",
						"getTrace",
						"::getTrace"
					],
					"id": "error.gettrace",
					"name": "Error::getTrace",
					"description": "Gets the stack trace"
				},
				"error.gettraceasstring": {
					"tokens": [
						"Error::getTraceAsString",
						"getTraceAsString",
						"::getTraceAsString"
					],
					"id": "error.gettraceasstring",
					"name": "Error::getTraceAsString",
					"description": "Gets the stack trace as a string"
				},
				"error.tostring": {
					"tokens": [
						"Error::__toString",
						"Error::_toString",
						"__toString",
						"::__toString"
					],
					"id": "error.tostring",
					"name": "Error::__toString",
					"description": "String representation of the error"
				},
				"error.clone": {
					"tokens": [
						"Error::__clone",
						"Error::_clone",
						"__clone",
						"::__clone"
					],
					"id": "error.clone",
					"name": "Error::__clone",
					"description": "Clone the error"
				},
				"iterator.current": {
					"tokens": [
						"Iterator::current",
						"current",
						"::current"
					],
					"id": "iterator.current",
					"name": "Iterator::current",
					"description": "Return the current element"
				},
				"iterator.key": {
					"tokens": [
						"Iterator::key",
						"key",
						"::key"
					],
					"id": "iterator.key",
					"name": "Iterator::key",
					"description": "Return the key of the current element"
				},
				"iterator.next": {
					"tokens": [
						"Iterator::next",
						"next",
						"::next"
					],
					"id": "iterator.next",
					"name": "Iterator::next",
					"description": "Move forward to next element"
				},
				"iterator.rewind": {
					"tokens": [
						"Iterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "iterator.rewind",
					"name": "Iterator::rewind",
					"description": "Rewind the Iterator to the first element"
				},
				"iterator.valid": {
					"tokens": [
						"Iterator::valid",
						"valid",
						"::valid"
					],
					"id": "iterator.valid",
					"name": "Iterator::valid",
					"description": "Checks if current position is valid"
				},
				"iteratoraggregate.getiterator": {
					"tokens": [
						"IteratorAggregate::getIterator",
						"getIterator",
						"::getIterator"
					],
					"id": "iteratoraggregate.getiterator",
					"name": "IteratorAggregate::getIterator",
					"description": "Retrieve an external iterator"
				},
				"throwable.getmessage": {
					"tokens": [
						"Throwable::getMessage",
						"getMessage",
						"::getMessage"
					],
					"id": "throwable.getmessage",
					"name": "Throwable::getMessage",
					"description": "Gets the message"
				},
				"throwable.getcode": {
					"tokens": [
						"Throwable::getCode",
						"getCode",
						"::getCode"
					],
					"id": "throwable.getcode",
					"name": "Throwable::getCode",
					"description": "Gets the exception code"
				},
				"throwable.getfile": {
					"tokens": [
						"Throwable::getFile",
						"getFile",
						"::getFile"
					],
					"id": "throwable.getfile",
					"name": "Throwable::getFile",
					"description": "Gets the file in which the exception occurred"
				},
				"throwable.getline": {
					"tokens": [
						"Throwable::getLine",
						"getLine",
						"::getLine"
					],
					"id": "throwable.getline",
					"name": "Throwable::getLine",
					"description": "Gets the line on which the object was instantiated"
				},
				"throwable.gettrace": {
					"tokens": [
						"Throwable::getTrace",
						"getTrace",
						"::getTrace"
					],
					"id": "throwable.gettrace",
					"name": "Throwable::getTrace",
					"description": "Gets the stack trace"
				},
				"throwable.gettraceasstring": {
					"tokens": [
						"Throwable::getTraceAsString",
						"getTraceAsString",
						"::getTraceAsString"
					],
					"id": "throwable.gettraceasstring",
					"name": "Throwable::getTraceAsString",
					"description": "Gets the stack trace as a string"
				},
				"throwable.getprevious": {
					"tokens": [
						"Throwable::getPrevious",
						"getPrevious",
						"::getPrevious"
					],
					"id": "throwable.getprevious",
					"name": "Throwable::getPrevious",
					"description": "Returns the previous Throwable"
				},
				"throwable.tostring": {
					"tokens": [
						"Throwable::__toString",
						"Throwable::_toString",
						"__toString",
						"::__toString"
					],
					"id": "throwable.tostring",
					"name": "Throwable::__toString",
					"description": "Gets a string representation of the thrown object"
				},
				"arrayaccess.offsetexists": {
					"tokens": [
						"ArrayAccess::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "arrayaccess.offsetexists",
					"name": "ArrayAccess::offsetExists",
					"description": "Whether an offset exists"
				},
				"arrayaccess.offsetget": {
					"tokens": [
						"ArrayAccess::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "arrayaccess.offsetget",
					"name": "ArrayAccess::offsetGet",
					"description": "Offset to retrieve"
				},
				"arrayaccess.offsetset": {
					"tokens": [
						"ArrayAccess::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "arrayaccess.offsetset",
					"name": "ArrayAccess::offsetSet",
					"description": "Assign a value to the specified offset"
				},
				"arrayaccess.offsetunset": {
					"tokens": [
						"ArrayAccess::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "arrayaccess.offsetunset",
					"name": "ArrayAccess::offsetUnset",
					"description": "Unset an offset"
				},
				"serializable.serialize": {
					"tokens": [
						"Serializable::serialize",
						"serialize",
						"::serialize"
					],
					"id": "serializable.serialize",
					"name": "Serializable::serialize",
					"description": "String representation of object"
				},
				"serializable.unserialize": {
					"tokens": [
						"Serializable::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "serializable.unserialize",
					"name": "Serializable::unserialize",
					"description": "Constructs the object"
				},
				"closure.construct": {
					"tokens": [
						"Closure::__construct",
						"Closure::_construct",
						"__construct",
						"::__construct"
					],
					"id": "closure.construct",
					"name": "Closure::__construct",
					"description": "Constructor that disallows instantiation"
				},
				"closure.bind": {
					"tokens": [
						"Closure::bind",
						"bind",
						"::bind"
					],
					"id": "closure.bind",
					"name": "Closure::bind",
					"description": "Duplicates a closure with a specific bound object and class scope"
				},
				"closure.bindto": {
					"tokens": [
						"Closure::bindTo",
						"bindTo",
						"::bindTo"
					],
					"id": "closure.bindto",
					"name": "Closure::bindTo",
					"description": "Duplicates the closure with a new bound object and class scope"
				},
				"closure.call": {
					"tokens": [
						"Closure::call",
						"call",
						"::call"
					],
					"id": "closure.call",
					"name": "Closure::call",
					"description": "Binds and calls the closure"
				},
				"generator.current": {
					"tokens": [
						"Generator::current",
						"current",
						"::current"
					],
					"id": "generator.current",
					"name": "Generator::current",
					"description": "Get the yielded value"
				},
				"generator.getreturn": {
					"tokens": [
						"Generator::getReturn",
						"getReturn",
						"::getReturn"
					],
					"id": "generator.getreturn",
					"name": "Generator::getReturn",
					"description": "Get the return value of a generator"
				},
				"generator.key": {
					"tokens": [
						"Generator::key",
						"key",
						"::key"
					],
					"id": "generator.key",
					"name": "Generator::key",
					"description": "Get the yielded key"
				},
				"generator.next": {
					"tokens": [
						"Generator::next",
						"next",
						"::next"
					],
					"id": "generator.next",
					"name": "Generator::next",
					"description": "Resume execution of the generator"
				},
				"generator.rewind": {
					"tokens": [
						"Generator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "generator.rewind",
					"name": "Generator::rewind",
					"description": "Rewind the iterator"
				},
				"generator.send": {
					"tokens": [
						"Generator::send",
						"send",
						"::send"
					],
					"id": "generator.send",
					"name": "Generator::send",
					"description": "Send a value to the generator"
				},
				"generator.throw": {
					"tokens": [
						"Generator::throw",
						"throw",
						"::throw"
					],
					"id": "generator.throw",
					"name": "Generator::throw",
					"description": "Throw an exception into the generator"
				},
				"generator.valid": {
					"tokens": [
						"Generator::valid",
						"valid",
						"::valid"
					],
					"id": "generator.valid",
					"name": "Generator::valid",
					"description": "Check if the iterator has been closed"
				},
				"generator.wakeup": {
					"tokens": [
						"Generator::__wakeup",
						"Generator::_wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "generator.wakeup",
					"name": "Generator::__wakeup",
					"description": "Serialize callback"
				},
				"context.socket": {
					"tokens": [
						"Socket context options"
					],
					"id": "context.socket",
					"name": "Socket context options",
					"description": "Socket context option listing"
				},
				"context.http": {
					"tokens": [
						"HTTP context options"
					],
					"id": "context.http",
					"name": "HTTP context options",
					"description": "HTTP context option listing"
				},
				"context.ftp": {
					"tokens": [
						"FTP context options"
					],
					"id": "context.ftp",
					"name": "FTP context options",
					"description": "FTP context option listing"
				},
				"context.ssl": {
					"tokens": [
						"SSL context options"
					],
					"id": "context.ssl",
					"name": "SSL context options",
					"description": "SSL context option listing"
				},
				"context.curl": {
					"tokens": [
						"CURL context options"
					],
					"id": "context.curl",
					"name": "CURL context options",
					"description": "CURL context option listing"
				},
				"context.phar": {
					"tokens": [
						"Phar context options"
					],
					"id": "context.phar",
					"name": "Phar context options",
					"description": "Phar context option listing"
				},
				"context.mongodb": {
					"tokens": [
						"MongoDB context options"
					],
					"id": "context.mongodb",
					"name": "MongoDB context options",
					"description": "MongoDB context option listing"
				},
				"context.params": {
					"tokens": [
						"Context parameters"
					],
					"id": "context.params",
					"name": "Context parameters",
					"description": "Context parameter listing"
				},
				"wrappers.file": {
					"tokens": [
						"file://"
					],
					"id": "wrappers.file",
					"name": "file://",
					"description": "Accessing local filesystem"
				},
				"wrappers.http": {
					"tokens": [
						"http://"
					],
					"id": "wrappers.http",
					"name": "http://",
					"description": "Accessing HTTP(s) URLs"
				},
				"wrappers.ftp": {
					"tokens": [
						"ftp://"
					],
					"id": "wrappers.ftp",
					"name": "ftp://",
					"description": "Accessing FTP(s) URLs"
				},
				"wrappers.php": {
					"tokens": [
						"php://"
					],
					"id": "wrappers.php",
					"name": "php://",
					"description": "Accessing various I/O streams"
				},
				"wrappers.compression": {
					"tokens": [
						"zlib://"
					],
					"id": "wrappers.compression",
					"name": "zlib://",
					"description": "Compression Streams"
				},
				"wrappers.data": {
					"tokens": [
						"data://"
					],
					"id": "wrappers.data",
					"name": "data://",
					"description": "Data (RFC 2397)"
				},
				"wrappers.glob": {
					"tokens": [
						"glob://"
					],
					"id": "wrappers.glob",
					"name": "glob://",
					"description": "Find pathnames matching pattern"
				},
				"wrappers.phar": {
					"tokens": [
						"phar://"
					],
					"id": "wrappers.phar",
					"name": "phar://",
					"description": "PHP Archive"
				},
				"wrappers.ssh2": {
					"tokens": [
						"ssh2://"
					],
					"id": "wrappers.ssh2",
					"name": "ssh2://",
					"description": "Secure Shell 2"
				},
				"wrappers.rar": {
					"tokens": [
						"rar://"
					],
					"id": "wrappers.rar",
					"name": "rar://",
					"description": "RAR"
				},
				"wrappers.audio": {
					"tokens": [
						"ogg://"
					],
					"id": "wrappers.audio",
					"name": "ogg://",
					"description": "Audio streams"
				},
				"wrappers.expect": {
					"tokens": [
						"expect://"
					],
					"id": "wrappers.expect",
					"name": "expect://",
					"description": "Process Interaction Streams"
				},
				"function.apc-add": {
					"tokens": [
						"apc_add",
						"apcadd"
					],
					"id": "function.apc-add",
					"name": "apc_add",
					"description": "Cache a new variable in the data store"
				},
				"function.apc-bin-dump": {
					"tokens": [
						"apc_bin_dump",
						"apcbin_dump"
					],
					"id": "function.apc-bin-dump",
					"name": "apc_bin_dump",
					"description": "Get a binary dump of the given files and user variables"
				},
				"function.apc-bin-dumpfile": {
					"tokens": [
						"apc_bin_dumpfile",
						"apcbin_dumpfile"
					],
					"id": "function.apc-bin-dumpfile",
					"name": "apc_bin_dumpfile",
					"description": "Output a binary dump of cached files and user variables to a file"
				},
				"function.apc-bin-load": {
					"tokens": [
						"apc_bin_load",
						"apcbin_load"
					],
					"id": "function.apc-bin-load",
					"name": "apc_bin_load",
					"description": "Load a binary dump into the APC file/user cache"
				},
				"function.apc-bin-loadfile": {
					"tokens": [
						"apc_bin_loadfile",
						"apcbin_loadfile"
					],
					"id": "function.apc-bin-loadfile",
					"name": "apc_bin_loadfile",
					"description": "Load a binary dump from a file into the APC file/user cache"
				},
				"function.apc-cache-info": {
					"tokens": [
						"apc_cache_info",
						"apccache_info"
					],
					"id": "function.apc-cache-info",
					"name": "apc_cache_info",
					"description": "Retrieves cached information from APC's data store"
				},
				"function.apc-cas": {
					"tokens": [
						"apc_cas",
						"apccas"
					],
					"id": "function.apc-cas",
					"name": "apc_cas",
					"description": "Updates an old value with a new value"
				},
				"function.apc-clear-cache": {
					"tokens": [
						"apc_clear_cache",
						"apcclear_cache"
					],
					"id": "function.apc-clear-cache",
					"name": "apc_clear_cache",
					"description": "Clears the APC cache"
				},
				"function.apc-compile-file": {
					"tokens": [
						"apc_compile_file",
						"apccompile_file"
					],
					"id": "function.apc-compile-file",
					"name": "apc_compile_file",
					"description": "Stores a file in the bytecode cache, bypassing all filters."
				},
				"function.apc-dec": {
					"tokens": [
						"apc_dec",
						"apcdec"
					],
					"id": "function.apc-dec",
					"name": "apc_dec",
					"description": "Decrease a stored number"
				},
				"function.apc-define-constants": {
					"tokens": [
						"apc_define_constants",
						"apcdefine_constants"
					],
					"id": "function.apc-define-constants",
					"name": "apc_define_constants",
					"description": "Defines a set of constants for retrieval and mass-definition"
				},
				"function.apc-delete-file": {
					"tokens": [
						"apc_delete_file",
						"apcdelete_file"
					],
					"id": "function.apc-delete-file",
					"name": "apc_delete_file",
					"description": "Deletes files from the opcode cache"
				},
				"function.apc-delete": {
					"tokens": [
						"apc_delete",
						"apcdelete"
					],
					"id": "function.apc-delete",
					"name": "apc_delete",
					"description": "Removes a stored variable from the cache"
				},
				"function.apc-exists": {
					"tokens": [
						"apc_exists",
						"apcexists"
					],
					"id": "function.apc-exists",
					"name": "apc_exists",
					"description": "Checks if APC key exists"
				},
				"function.apc-fetch": {
					"tokens": [
						"apc_fetch",
						"apcfetch"
					],
					"id": "function.apc-fetch",
					"name": "apc_fetch",
					"description": "Fetch a stored variable from the cache"
				},
				"function.apc-inc": {
					"tokens": [
						"apc_inc",
						"apcinc"
					],
					"id": "function.apc-inc",
					"name": "apc_inc",
					"description": "Increase a stored number"
				},
				"function.apc-load-constants": {
					"tokens": [
						"apc_load_constants",
						"apcload_constants"
					],
					"id": "function.apc-load-constants",
					"name": "apc_load_constants",
					"description": "Loads a set of constants from the cache"
				},
				"function.apc-sma-info": {
					"tokens": [
						"apc_sma_info",
						"apcsma_info"
					],
					"id": "function.apc-sma-info",
					"name": "apc_sma_info",
					"description": "Retrieves APC's Shared Memory Allocation information"
				},
				"function.apc-store": {
					"tokens": [
						"apc_store",
						"apcstore"
					],
					"id": "function.apc-store",
					"name": "apc_store",
					"description": "Cache a variable in the data store"
				},
				"apciterator.construct": {
					"tokens": [
						"APCIterator::__construct",
						"APCIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "apciterator.construct",
					"name": "APCIterator::__construct",
					"description": "Constructs an APCIterator iterator object"
				},
				"apciterator.current": {
					"tokens": [
						"APCIterator::current",
						"current",
						"::current"
					],
					"id": "apciterator.current",
					"name": "APCIterator::current",
					"description": "Get current item"
				},
				"apciterator.gettotalcount": {
					"tokens": [
						"APCIterator::getTotalCount",
						"getTotalCount",
						"::getTotalCount"
					],
					"id": "apciterator.gettotalcount",
					"name": "APCIterator::getTotalCount",
					"description": "Get total count"
				},
				"apciterator.gettotalhits": {
					"tokens": [
						"APCIterator::getTotalHits",
						"getTotalHits",
						"::getTotalHits"
					],
					"id": "apciterator.gettotalhits",
					"name": "APCIterator::getTotalHits",
					"description": "Get total cache hits"
				},
				"apciterator.gettotalsize": {
					"tokens": [
						"APCIterator::getTotalSize",
						"getTotalSize",
						"::getTotalSize"
					],
					"id": "apciterator.gettotalsize",
					"name": "APCIterator::getTotalSize",
					"description": "Get total cache size"
				},
				"apciterator.key": {
					"tokens": [
						"APCIterator::key",
						"key",
						"::key"
					],
					"id": "apciterator.key",
					"name": "APCIterator::key",
					"description": "Get iterator key"
				},
				"apciterator.next": {
					"tokens": [
						"APCIterator::next",
						"next",
						"::next"
					],
					"id": "apciterator.next",
					"name": "APCIterator::next",
					"description": "Move pointer to next item"
				},
				"apciterator.rewind": {
					"tokens": [
						"APCIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "apciterator.rewind",
					"name": "APCIterator::rewind",
					"description": "Rewinds iterator"
				},
				"apciterator.valid": {
					"tokens": [
						"APCIterator::valid",
						"valid",
						"::valid"
					],
					"id": "apciterator.valid",
					"name": "APCIterator::valid",
					"description": "Checks if current position is valid"
				},
				"function.apcu-add": {
					"tokens": [
						"apcu_add",
						"apcuadd"
					],
					"id": "function.apcu-add",
					"name": "apcu_add",
					"description": "Cache a new variable in the data store"
				},
				"function.apcu-cache-info": {
					"tokens": [
						"apcu_cache_info",
						"apcucache_info"
					],
					"id": "function.apcu-cache-info",
					"name": "apcu_cache_info",
					"description": "Retrieves cached information from APCu's data store"
				},
				"function.apcu-cas": {
					"tokens": [
						"apcu_cas",
						"apcucas"
					],
					"id": "function.apcu-cas",
					"name": "apcu_cas",
					"description": "Updates an old value with a new value"
				},
				"function.apcu-clear-cache": {
					"tokens": [
						"apcu_clear_cache",
						"apcuclear_cache"
					],
					"id": "function.apcu-clear-cache",
					"name": "apcu_clear_cache",
					"description": "Clears the APCu cache"
				},
				"function.apcu-dec": {
					"tokens": [
						"apcu_dec",
						"apcudec"
					],
					"id": "function.apcu-dec",
					"name": "apcu_dec",
					"description": "Decrease a stored number"
				},
				"function.apcu-delete": {
					"tokens": [
						"apcu_delete",
						"apcudelete"
					],
					"id": "function.apcu-delete",
					"name": "apcu_delete",
					"description": "Removes a stored variable from the cache"
				},
				"function.apcu-entry": {
					"tokens": [
						"apcu_entry",
						"apcuentry"
					],
					"id": "function.apcu-entry",
					"name": "apcu_entry",
					"description": "Atomically fetch or generate a cache entry"
				},
				"function.apcu-exists": {
					"tokens": [
						"apcu_exists",
						"apcuexists"
					],
					"id": "function.apcu-exists",
					"name": "apcu_exists",
					"description": "Checks if entry exists"
				},
				"function.apcu-fetch": {
					"tokens": [
						"apcu_fetch",
						"apcufetch"
					],
					"id": "function.apcu-fetch",
					"name": "apcu_fetch",
					"description": "Fetch a stored variable from the cache"
				},
				"function.apcu-inc": {
					"tokens": [
						"apcu_inc",
						"apcuinc"
					],
					"id": "function.apcu-inc",
					"name": "apcu_inc",
					"description": "Increase a stored number"
				},
				"function.apcu-sma-info": {
					"tokens": [
						"apcu_sma_info",
						"apcusma_info"
					],
					"id": "function.apcu-sma-info",
					"name": "apcu_sma_info",
					"description": "Retrieves APCu Shared Memory Allocation information"
				},
				"function.apcu-store": {
					"tokens": [
						"apcu_store",
						"apcustore"
					],
					"id": "function.apcu-store",
					"name": "apcu_store",
					"description": "Cache a variable in the data store"
				},
				"apcuiterator.construct": {
					"tokens": [
						"APCUIterator::__construct",
						"APCUIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "apcuiterator.construct",
					"name": "APCUIterator::__construct",
					"description": "Constructs an APCUIterator iterator object"
				},
				"apcuiterator.current": {
					"tokens": [
						"APCUIterator::current",
						"current",
						"::current"
					],
					"id": "apcuiterator.current",
					"name": "APCUIterator::current",
					"description": "Get current item"
				},
				"apcuiterator.gettotalcount": {
					"tokens": [
						"APCUIterator::getTotalCount",
						"getTotalCount",
						"::getTotalCount"
					],
					"id": "apcuiterator.gettotalcount",
					"name": "APCUIterator::getTotalCount",
					"description": "Get total count"
				},
				"apcuiterator.gettotalhits": {
					"tokens": [
						"APCUIterator::getTotalHits",
						"getTotalHits",
						"::getTotalHits"
					],
					"id": "apcuiterator.gettotalhits",
					"name": "APCUIterator::getTotalHits",
					"description": "Get total cache hits"
				},
				"apcuiterator.gettotalsize": {
					"tokens": [
						"APCUIterator::getTotalSize",
						"getTotalSize",
						"::getTotalSize"
					],
					"id": "apcuiterator.gettotalsize",
					"name": "APCUIterator::getTotalSize",
					"description": "Get total cache size"
				},
				"apcuiterator.key": {
					"tokens": [
						"APCUIterator::key",
						"key",
						"::key"
					],
					"id": "apcuiterator.key",
					"name": "APCUIterator::key",
					"description": "Get iterator key"
				},
				"apcuiterator.next": {
					"tokens": [
						"APCUIterator::next",
						"next",
						"::next"
					],
					"id": "apcuiterator.next",
					"name": "APCUIterator::next",
					"description": "Move pointer to next item"
				},
				"apcuiterator.rewind": {
					"tokens": [
						"APCUIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "apcuiterator.rewind",
					"name": "APCUIterator::rewind",
					"description": "Rewinds iterator"
				},
				"apcuiterator.valid": {
					"tokens": [
						"APCUIterator::valid",
						"valid",
						"::valid"
					],
					"id": "apcuiterator.valid",
					"name": "APCUIterator::valid",
					"description": "Checks if current position is valid"
				},
				"function.apd-breakpoint": {
					"tokens": [
						"apd_breakpoint",
						"apdbreakpoint"
					],
					"id": "function.apd-breakpoint",
					"name": "apd_breakpoint",
					"description": "Stops the interpreter and waits on a CR from the socket"
				},
				"function.apd-callstack": {
					"tokens": [
						"apd_callstack",
						"apdcallstack"
					],
					"id": "function.apd-callstack",
					"name": "apd_callstack",
					"description": "Returns the current call stack as an array"
				},
				"function.apd-clunk": {
					"tokens": [
						"apd_clunk",
						"apdclunk"
					],
					"id": "function.apd-clunk",
					"name": "apd_clunk",
					"description": "Throw a warning and a callstack"
				},
				"function.apd-continue": {
					"tokens": [
						"apd_continue",
						"apdcontinue"
					],
					"id": "function.apd-continue",
					"name": "apd_continue",
					"description": "Restarts the interpreter"
				},
				"function.apd-croak": {
					"tokens": [
						"apd_croak",
						"apdcroak"
					],
					"id": "function.apd-croak",
					"name": "apd_croak",
					"description": "Throw an error, a callstack and then exit"
				},
				"function.apd-dump-function-table": {
					"tokens": [
						"apd_dump_function_table",
						"apddump_function_table"
					],
					"id": "function.apd-dump-function-table",
					"name": "apd_dump_function_table",
					"description": "Outputs the current function table"
				},
				"function.apd-dump-persistent-resources": {
					"tokens": [
						"apd_dump_persistent_resources",
						"apddump_persistent_resources"
					],
					"id": "function.apd-dump-persistent-resources",
					"name": "apd_dump_persistent_resources",
					"description": "Return all persistent resources as an array"
				},
				"function.apd-dump-regular-resources": {
					"tokens": [
						"apd_dump_regular_resources",
						"apddump_regular_resources"
					],
					"id": "function.apd-dump-regular-resources",
					"name": "apd_dump_regular_resources",
					"description": "Return all current regular resources as an array"
				},
				"function.apd-echo": {
					"tokens": [
						"apd_echo",
						"apdecho"
					],
					"id": "function.apd-echo",
					"name": "apd_echo",
					"description": "Echo to the debugging socket"
				},
				"function.apd-get-active-symbols": {
					"tokens": [
						"apd_get_active_symbols",
						"apdget_active_symbols"
					],
					"id": "function.apd-get-active-symbols",
					"name": "apd_get_active_symbols",
					"description": "Get an array of the current variables names in the local scope"
				},
				"function.apd-set-pprof-trace": {
					"tokens": [
						"apd_set_pprof_trace",
						"apdset_pprof_trace"
					],
					"id": "function.apd-set-pprof-trace",
					"name": "apd_set_pprof_trace",
					"description": "Starts the session debugging"
				},
				"function.apd-set-session-trace-socket": {
					"tokens": [
						"apd_set_session_trace_socket",
						"apdset_session_trace_socket"
					],
					"id": "function.apd-set-session-trace-socket",
					"name": "apd_set_session_trace_socket",
					"description": "Starts the remote session debugging"
				},
				"function.apd-set-session-trace": {
					"tokens": [
						"apd_set_session_trace",
						"apdset_session_trace"
					],
					"id": "function.apd-set-session-trace",
					"name": "apd_set_session_trace",
					"description": "Starts the session debugging"
				},
				"function.apd-set-session": {
					"tokens": [
						"apd_set_session",
						"apdset_session"
					],
					"id": "function.apd-set-session",
					"name": "apd_set_session",
					"description": "Changes or sets the current debugging level"
				},
				"function.override-function": {
					"tokens": [
						"override_function",
						"overridefunction"
					],
					"id": "function.override-function",
					"name": "override_function",
					"description": "Overrides built-in functions"
				},
				"function.rename-function": {
					"tokens": [
						"rename_function",
						"renamefunction"
					],
					"id": "function.rename-function",
					"name": "rename_function",
					"description": "Renames orig_name to new_name in the global function table"
				},
				"function.bcompiler-load-exe": {
					"tokens": [
						"bcompiler_load_exe",
						"bcompilerload_exe"
					],
					"id": "function.bcompiler-load-exe",
					"name": "bcompiler_load_exe",
					"description": "Reads and creates classes from a bcompiler exe file"
				},
				"function.bcompiler-load": {
					"tokens": [
						"bcompiler_load",
						"bcompilerload"
					],
					"id": "function.bcompiler-load",
					"name": "bcompiler_load",
					"description": "Reads and creates classes from a bz compressed file"
				},
				"function.bcompiler-parse-class": {
					"tokens": [
						"bcompiler_parse_class",
						"bcompilerparse_class"
					],
					"id": "function.bcompiler-parse-class",
					"name": "bcompiler_parse_class",
					"description": "Reads the bytecodes of a class and calls back to a user function"
				},
				"function.bcompiler-read": {
					"tokens": [
						"bcompiler_read",
						"bcompilerread"
					],
					"id": "function.bcompiler-read",
					"name": "bcompiler_read",
					"description": "Reads and creates classes from a filehandle"
				},
				"function.bcompiler-write-class": {
					"tokens": [
						"bcompiler_write_class",
						"bcompilerwrite_class"
					],
					"id": "function.bcompiler-write-class",
					"name": "bcompiler_write_class",
					"description": "Writes a defined class as bytecodes"
				},
				"function.bcompiler-write-constant": {
					"tokens": [
						"bcompiler_write_constant",
						"bcompilerwrite_constant"
					],
					"id": "function.bcompiler-write-constant",
					"name": "bcompiler_write_constant",
					"description": "Writes a defined constant as bytecodes"
				},
				"function.bcompiler-write-exe-footer": {
					"tokens": [
						"bcompiler_write_exe_footer",
						"bcompilerwrite_exe_footer"
					],
					"id": "function.bcompiler-write-exe-footer",
					"name": "bcompiler_write_exe_footer",
					"description": "Writes the start pos, and sig to the end of a exe type file"
				},
				"function.bcompiler-write-file": {
					"tokens": [
						"bcompiler_write_file",
						"bcompilerwrite_file"
					],
					"id": "function.bcompiler-write-file",
					"name": "bcompiler_write_file",
					"description": "Writes a php source file as bytecodes"
				},
				"function.bcompiler-write-footer": {
					"tokens": [
						"bcompiler_write_footer",
						"bcompilerwrite_footer"
					],
					"id": "function.bcompiler-write-footer",
					"name": "bcompiler_write_footer",
					"description": "Writes the single character \\x00 to indicate End of compiled data"
				},
				"function.bcompiler-write-function": {
					"tokens": [
						"bcompiler_write_function",
						"bcompilerwrite_function"
					],
					"id": "function.bcompiler-write-function",
					"name": "bcompiler_write_function",
					"description": "Writes a defined function as bytecodes"
				},
				"function.bcompiler-write-functions-from-file": {
					"tokens": [
						"bcompiler_write_functions_from_file",
						"bcompilerwrite_functions_from_file"
					],
					"id": "function.bcompiler-write-functions-from-file",
					"name": "bcompiler_write_functions_from_file",
					"description": "Writes all functions defined in a file as bytecodes"
				},
				"function.bcompiler-write-header": {
					"tokens": [
						"bcompiler_write_header",
						"bcompilerwrite_header"
					],
					"id": "function.bcompiler-write-header",
					"name": "bcompiler_write_header",
					"description": "Writes the bcompiler header"
				},
				"function.bcompiler-write-included-filename": {
					"tokens": [
						"bcompiler_write_included_filename",
						"bcompilerwrite_included_filename"
					],
					"id": "function.bcompiler-write-included-filename",
					"name": "bcompiler_write_included_filename",
					"description": "Writes an included file as bytecodes"
				},
				"function.blenc-encrypt": {
					"tokens": [
						"blenc_encrypt",
						"blencencrypt"
					],
					"id": "function.blenc-encrypt",
					"name": "blenc_encrypt",
					"description": "Encrypt a PHP script with BLENC."
				},
				"function.debug-backtrace": {
					"tokens": [
						"debug_backtrace",
						"debugbacktrace"
					],
					"id": "function.debug-backtrace",
					"name": "debug_backtrace",
					"description": "Generates a backtrace"
				},
				"function.debug-print-backtrace": {
					"tokens": [
						"debug_print_backtrace",
						"debugprint_backtrace"
					],
					"id": "function.debug-print-backtrace",
					"name": "debug_print_backtrace",
					"description": "Prints a backtrace"
				},
				"function.error-clear-last": {
					"tokens": [
						"error_clear_last",
						"errorclear_last"
					],
					"id": "function.error-clear-last",
					"name": "error_clear_last",
					"description": "Clear the most recent error"
				},
				"function.error-get-last": {
					"tokens": [
						"error_get_last",
						"errorget_last"
					],
					"id": "function.error-get-last",
					"name": "error_get_last",
					"description": "Get the last occurred error"
				},
				"function.error-log": {
					"tokens": [
						"error_log",
						"errorlog"
					],
					"id": "function.error-log",
					"name": "error_log",
					"description": "Send an error message to the defined error handling routines"
				},
				"function.error-reporting": {
					"tokens": [
						"error_reporting",
						"errorreporting"
					],
					"id": "function.error-reporting",
					"name": "error_reporting",
					"description": "Sets which PHP errors are reported"
				},
				"function.restore-error-handler": {
					"tokens": [
						"restore_error_handler",
						"restoreerror_handler"
					],
					"id": "function.restore-error-handler",
					"name": "restore_error_handler",
					"description": "Restores the previous error handler function"
				},
				"function.restore-exception-handler": {
					"tokens": [
						"restore_exception_handler",
						"restoreexception_handler"
					],
					"id": "function.restore-exception-handler",
					"name": "restore_exception_handler",
					"description": "Restores the previously defined exception handler function"
				},
				"function.set-error-handler": {
					"tokens": [
						"set_error_handler",
						"seterror_handler"
					],
					"id": "function.set-error-handler",
					"name": "set_error_handler",
					"description": "Sets a user-defined error handler function"
				},
				"function.set-exception-handler": {
					"tokens": [
						"set_exception_handler",
						"setexception_handler"
					],
					"id": "function.set-exception-handler",
					"name": "set_exception_handler",
					"description": "Sets a user-defined exception handler function"
				},
				"function.trigger-error": {
					"tokens": [
						"trigger_error",
						"triggererror"
					],
					"id": "function.trigger-error",
					"name": "trigger_error",
					"description": "Generates a user-level error/warning/notice message"
				},
				"function.user-error": {
					"tokens": [
						"user_error",
						"usererror"
					],
					"id": "function.user-error",
					"name": "user_error",
					"description": "Alias of trigger_error"
				},
				"function.inclued-get-data": {
					"tokens": [
						"inclued_get_data",
						"incluedget_data"
					],
					"id": "function.inclued-get-data",
					"name": "inclued_get_data",
					"description": "Get the inclued data"
				},
				"function.opcache-compile-file": {
					"tokens": [
						"opcache_compile_file",
						"opcachecompile_file"
					],
					"id": "function.opcache-compile-file",
					"name": "opcache_compile_file",
					"description": "Compiles and caches a PHP script without executing it"
				},
				"function.opcache-get-configuration": {
					"tokens": [
						"opcache_get_configuration",
						"opcacheget_configuration"
					],
					"id": "function.opcache-get-configuration",
					"name": "opcache_get_configuration",
					"description": "Get configuration information about the cache"
				},
				"function.opcache-get-status": {
					"tokens": [
						"opcache_get_status",
						"opcacheget_status"
					],
					"id": "function.opcache-get-status",
					"name": "opcache_get_status",
					"description": "Get status information about the cache"
				},
				"function.opcache-invalidate": {
					"tokens": [
						"opcache_invalidate",
						"opcacheinvalidate"
					],
					"id": "function.opcache-invalidate",
					"name": "opcache_invalidate",
					"description": "Invalidates a cached script"
				},
				"function.opcache-is-script-cached": {
					"tokens": [
						"opcache_is_script_cached",
						"opcacheis_script_cached"
					],
					"id": "function.opcache-is-script-cached",
					"name": "opcache_is_script_cached",
					"description": "Tells whether a script is cached in OPCache"
				},
				"function.opcache-reset": {
					"tokens": [
						"opcache_reset",
						"opcachereset"
					],
					"id": "function.opcache-reset",
					"name": "opcache_reset",
					"description": "Resets the contents of the opcode cache"
				},
				"function.flush": {
					"tokens": [
						"flush"
					],
					"id": "function.flush",
					"name": "flush",
					"description": "Flush system output buffer"
				},
				"function.ob-clean": {
					"tokens": [
						"ob_clean",
						"obclean"
					],
					"id": "function.ob-clean",
					"name": "ob_clean",
					"description": "Clean (erase) the output buffer"
				},
				"function.ob-end-clean": {
					"tokens": [
						"ob_end_clean",
						"obend_clean"
					],
					"id": "function.ob-end-clean",
					"name": "ob_end_clean",
					"description": "Clean (erase) the output buffer and turn off output buffering"
				},
				"function.ob-end-flush": {
					"tokens": [
						"ob_end_flush",
						"obend_flush"
					],
					"id": "function.ob-end-flush",
					"name": "ob_end_flush",
					"description": "Flush (send) the output buffer and turn off output buffering"
				},
				"function.ob-flush": {
					"tokens": [
						"ob_flush",
						"obflush"
					],
					"id": "function.ob-flush",
					"name": "ob_flush",
					"description": "Flush (send) the output buffer"
				},
				"function.ob-get-clean": {
					"tokens": [
						"ob_get_clean",
						"obget_clean"
					],
					"id": "function.ob-get-clean",
					"name": "ob_get_clean",
					"description": "Get current buffer contents and delete current output buffer"
				},
				"function.ob-get-contents": {
					"tokens": [
						"ob_get_contents",
						"obget_contents"
					],
					"id": "function.ob-get-contents",
					"name": "ob_get_contents",
					"description": "Return the contents of the output buffer"
				},
				"function.ob-get-flush": {
					"tokens": [
						"ob_get_flush",
						"obget_flush"
					],
					"id": "function.ob-get-flush",
					"name": "ob_get_flush",
					"description": "Flush the output buffer, return it as a string and turn off output buffering"
				},
				"function.ob-get-length": {
					"tokens": [
						"ob_get_length",
						"obget_length"
					],
					"id": "function.ob-get-length",
					"name": "ob_get_length",
					"description": "Return the length of the output buffer"
				},
				"function.ob-get-level": {
					"tokens": [
						"ob_get_level",
						"obget_level"
					],
					"id": "function.ob-get-level",
					"name": "ob_get_level",
					"description": "Return the nesting level of the output buffering mechanism"
				},
				"function.ob-get-status": {
					"tokens": [
						"ob_get_status",
						"obget_status"
					],
					"id": "function.ob-get-status",
					"name": "ob_get_status",
					"description": "Get status of output buffers"
				},
				"function.ob-gzhandler": {
					"tokens": [
						"ob_gzhandler",
						"obgzhandler"
					],
					"id": "function.ob-gzhandler",
					"name": "ob_gzhandler",
					"description": "ob_start callback function to gzip output buffer"
				},
				"function.ob-implicit-flush": {
					"tokens": [
						"ob_implicit_flush",
						"obimplicit_flush"
					],
					"id": "function.ob-implicit-flush",
					"name": "ob_implicit_flush",
					"description": "Turn implicit flush on/off"
				},
				"function.ob-list-handlers": {
					"tokens": [
						"ob_list_handlers",
						"oblist_handlers"
					],
					"id": "function.ob-list-handlers",
					"name": "ob_list_handlers",
					"description": "List all output handlers in use"
				},
				"function.ob-start": {
					"tokens": [
						"ob_start",
						"obstart"
					],
					"id": "function.ob-start",
					"name": "ob_start",
					"description": "Turn on output buffering"
				},
				"function.output-add-rewrite-var": {
					"tokens": [
						"output_add_rewrite_var",
						"outputadd_rewrite_var"
					],
					"id": "function.output-add-rewrite-var",
					"name": "output_add_rewrite_var",
					"description": "Add URL rewriter values"
				},
				"function.output-reset-rewrite-vars": {
					"tokens": [
						"output_reset_rewrite_vars",
						"outputreset_rewrite_vars"
					],
					"id": "function.output-reset-rewrite-vars",
					"name": "output_reset_rewrite_vars",
					"description": "Reset URL rewriter values"
				},
				"function.assert-options": {
					"tokens": [
						"assert_options",
						"assertoptions"
					],
					"id": "function.assert-options",
					"name": "assert_options",
					"description": "Set/get the various assert flags"
				},
				"function.assert": {
					"tokens": [
						"assert"
					],
					"id": "function.assert",
					"name": "assert",
					"description": "Checks if assertion is FALSE"
				},
				"function.cli-get-process-title": {
					"tokens": [
						"cli_get_process_title",
						"cliget_process_title"
					],
					"id": "function.cli-get-process-title",
					"name": "cli_get_process_title",
					"description": "Returns the current process title"
				},
				"function.cli-set-process-title": {
					"tokens": [
						"cli_set_process_title",
						"cliset_process_title"
					],
					"id": "function.cli-set-process-title",
					"name": "cli_set_process_title",
					"description": "Sets the process title"
				},
				"function.dl": {
					"tokens": [
						"dl"
					],
					"id": "function.dl",
					"name": "dl",
					"description": "Loads a PHP extension at runtime"
				},
				"function.extension-loaded": {
					"tokens": [
						"extension_loaded",
						"extensionloaded"
					],
					"id": "function.extension-loaded",
					"name": "extension_loaded",
					"description": "Find out whether an extension is loaded"
				},
				"function.gc-collect-cycles": {
					"tokens": [
						"gc_collect_cycles",
						"gccollect_cycles"
					],
					"id": "function.gc-collect-cycles",
					"name": "gc_collect_cycles",
					"description": "Forces collection of any existing garbage cycles"
				},
				"function.gc-disable": {
					"tokens": [
						"gc_disable",
						"gcdisable"
					],
					"id": "function.gc-disable",
					"name": "gc_disable",
					"description": "Deactivates the circular reference collector"
				},
				"function.gc-enable": {
					"tokens": [
						"gc_enable",
						"gcenable"
					],
					"id": "function.gc-enable",
					"name": "gc_enable",
					"description": "Activates the circular reference collector"
				},
				"function.gc-enabled": {
					"tokens": [
						"gc_enabled",
						"gcenabled"
					],
					"id": "function.gc-enabled",
					"name": "gc_enabled",
					"description": "Returns status of the circular reference collector"
				},
				"function.gc-mem-caches": {
					"tokens": [
						"gc_mem_caches",
						"gcmem_caches"
					],
					"id": "function.gc-mem-caches",
					"name": "gc_mem_caches",
					"description": "Reclaims memory used by the Zend Engine memory manager"
				},
				"function.get-cfg-var": {
					"tokens": [
						"get_cfg_var",
						"getcfg_var"
					],
					"id": "function.get-cfg-var",
					"name": "get_cfg_var",
					"description": "Gets the value of a PHP configuration option"
				},
				"function.get-current-user": {
					"tokens": [
						"get_current_user",
						"getcurrent_user"
					],
					"id": "function.get-current-user",
					"name": "get_current_user",
					"description": "Gets the name of the owner of the current PHP script"
				},
				"function.get-defined-constants": {
					"tokens": [
						"get_defined_constants",
						"getdefined_constants"
					],
					"id": "function.get-defined-constants",
					"name": "get_defined_constants",
					"description": "Returns an associative array with the names of all the constants and their values"
				},
				"function.get-extension-funcs": {
					"tokens": [
						"get_extension_funcs",
						"getextension_funcs"
					],
					"id": "function.get-extension-funcs",
					"name": "get_extension_funcs",
					"description": "Returns an array with the names of the functions of a module"
				},
				"function.get-include-path": {
					"tokens": [
						"get_include_path",
						"getinclude_path"
					],
					"id": "function.get-include-path",
					"name": "get_include_path",
					"description": "Gets the current include_path configuration option"
				},
				"function.get-included-files": {
					"tokens": [
						"get_included_files",
						"getincluded_files"
					],
					"id": "function.get-included-files",
					"name": "get_included_files",
					"description": "Returns an array with the names of included or required files"
				},
				"function.get-loaded-extensions": {
					"tokens": [
						"get_loaded_extensions",
						"getloaded_extensions"
					],
					"id": "function.get-loaded-extensions",
					"name": "get_loaded_extensions",
					"description": "Returns an array with the names of all modules compiled and loaded"
				},
				"function.get-magic-quotes-gpc": {
					"tokens": [
						"get_magic_quotes_gpc",
						"getmagic_quotes_gpc"
					],
					"id": "function.get-magic-quotes-gpc",
					"name": "get_magic_quotes_gpc",
					"description": "Gets the current configuration setting of magic_quotes_gpc"
				},
				"function.get-magic-quotes-runtime": {
					"tokens": [
						"get_magic_quotes_runtime",
						"getmagic_quotes_runtime"
					],
					"id": "function.get-magic-quotes-runtime",
					"name": "get_magic_quotes_runtime",
					"description": "Gets the current active configuration setting of magic_quotes_runtime"
				},
				"function.get-required-files": {
					"tokens": [
						"get_required_files",
						"getrequired_files"
					],
					"id": "function.get-required-files",
					"name": "get_required_files",
					"description": "Alias of get_included_files"
				},
				"function.get-resources": {
					"tokens": [
						"get_resources",
						"getresources"
					],
					"id": "function.get-resources",
					"name": "get_resources",
					"description": "Returns active resources"
				},
				"function.getenv": {
					"tokens": [
						"getenv"
					],
					"id": "function.getenv",
					"name": "getenv",
					"description": "Gets the value of an environment variable"
				},
				"function.getlastmod": {
					"tokens": [
						"getlastmod"
					],
					"id": "function.getlastmod",
					"name": "getlastmod",
					"description": "Gets time of last page modification"
				},
				"function.getmygid": {
					"tokens": [
						"getmygid"
					],
					"id": "function.getmygid",
					"name": "getmygid",
					"description": "Get PHP script owner's GID"
				},
				"function.getmyinode": {
					"tokens": [
						"getmyinode"
					],
					"id": "function.getmyinode",
					"name": "getmyinode",
					"description": "Gets the inode of the current script"
				},
				"function.getmypid": {
					"tokens": [
						"getmypid"
					],
					"id": "function.getmypid",
					"name": "getmypid",
					"description": "Gets PHP's process ID"
				},
				"function.getmyuid": {
					"tokens": [
						"getmyuid"
					],
					"id": "function.getmyuid",
					"name": "getmyuid",
					"description": "Gets PHP script owner's UID"
				},
				"function.getopt": {
					"tokens": [
						"getopt"
					],
					"id": "function.getopt",
					"name": "getopt",
					"description": "Gets options from the command line argument list"
				},
				"function.getrusage": {
					"tokens": [
						"getrusage"
					],
					"id": "function.getrusage",
					"name": "getrusage",
					"description": "Gets the current resource usages"
				},
				"function.ini-alter": {
					"tokens": [
						"ini_alter",
						"inialter"
					],
					"id": "function.ini-alter",
					"name": "ini_alter",
					"description": "Alias of ini_set"
				},
				"function.ini-get-all": {
					"tokens": [
						"ini_get_all",
						"iniget_all"
					],
					"id": "function.ini-get-all",
					"name": "ini_get_all",
					"description": "Gets all configuration options"
				},
				"function.ini-get": {
					"tokens": [
						"ini_get",
						"iniget"
					],
					"id": "function.ini-get",
					"name": "ini_get",
					"description": "Gets the value of a configuration option"
				},
				"function.ini-restore": {
					"tokens": [
						"ini_restore",
						"inirestore"
					],
					"id": "function.ini-restore",
					"name": "ini_restore",
					"description": "Restores the value of a configuration option"
				},
				"function.ini-set": {
					"tokens": [
						"ini_set",
						"iniset"
					],
					"id": "function.ini-set",
					"name": "ini_set",
					"description": "Sets the value of a configuration option"
				},
				"function.magic-quotes-runtime": {
					"tokens": [
						"magic_quotes_runtime",
						"magicquotes_runtime"
					],
					"id": "function.magic-quotes-runtime",
					"name": "magic_quotes_runtime",
					"description": "Alias of set_magic_quotes_runtime"
				},
				"function.main": {
					"tokens": [
						"main"
					],
					"id": "function.main",
					"name": "main",
					"description": "Dummy for main"
				},
				"function.memory-get-peak-usage": {
					"tokens": [
						"memory_get_peak_usage",
						"memoryget_peak_usage"
					],
					"id": "function.memory-get-peak-usage",
					"name": "memory_get_peak_usage",
					"description": "Returns the peak of memory allocated by PHP"
				},
				"function.memory-get-usage": {
					"tokens": [
						"memory_get_usage",
						"memoryget_usage"
					],
					"id": "function.memory-get-usage",
					"name": "memory_get_usage",
					"description": "Returns the amount of memory allocated to PHP"
				},
				"function.php-ini-loaded-file": {
					"tokens": [
						"php_ini_loaded_file",
						"phpini_loaded_file"
					],
					"id": "function.php-ini-loaded-file",
					"name": "php_ini_loaded_file",
					"description": "Retrieve a path to the loaded php.ini file"
				},
				"function.php-ini-scanned-files": {
					"tokens": [
						"php_ini_scanned_files",
						"phpini_scanned_files"
					],
					"id": "function.php-ini-scanned-files",
					"name": "php_ini_scanned_files",
					"description": "Return a list of .ini files parsed from the additional ini dir"
				},
				"function.php-logo-guid": {
					"tokens": [
						"php_logo_guid",
						"phplogo_guid"
					],
					"id": "function.php-logo-guid",
					"name": "php_logo_guid",
					"description": "Gets the logo guid"
				},
				"function.php-sapi-name": {
					"tokens": [
						"php_sapi_name",
						"phpsapi_name"
					],
					"id": "function.php-sapi-name",
					"name": "php_sapi_name",
					"description": "Returns the type of interface between web server and PHP"
				},
				"function.php-uname": {
					"tokens": [
						"php_uname",
						"phpuname"
					],
					"id": "function.php-uname",
					"name": "php_uname",
					"description": "Returns information about the operating system PHP is running on"
				},
				"function.phpcredits": {
					"tokens": [
						"phpcredits"
					],
					"id": "function.phpcredits",
					"name": "phpcredits",
					"description": "Prints out the credits for PHP"
				},
				"function.phpinfo": {
					"tokens": [
						"phpinfo"
					],
					"id": "function.phpinfo",
					"name": "phpinfo",
					"description": "Outputs information about PHP's configuration"
				},
				"function.phpversion": {
					"tokens": [
						"phpversion"
					],
					"id": "function.phpversion",
					"name": "phpversion",
					"description": "Gets the current PHP version"
				},
				"function.putenv": {
					"tokens": [
						"putenv"
					],
					"id": "function.putenv",
					"name": "putenv",
					"description": "Sets the value of an environment variable"
				},
				"function.restore-include-path": {
					"tokens": [
						"restore_include_path",
						"restoreinclude_path"
					],
					"id": "function.restore-include-path",
					"name": "restore_include_path",
					"description": "Restores the value of the include_path configuration option"
				},
				"function.set-include-path": {
					"tokens": [
						"set_include_path",
						"setinclude_path"
					],
					"id": "function.set-include-path",
					"name": "set_include_path",
					"description": "Sets the include_path configuration option"
				},
				"function.set-magic-quotes-runtime": {
					"tokens": [
						"set_magic_quotes_runtime",
						"setmagic_quotes_runtime"
					],
					"id": "function.set-magic-quotes-runtime",
					"name": "set_magic_quotes_runtime",
					"description": "Sets the current active configuration setting of magic_quotes_runtime"
				},
				"function.set-time-limit": {
					"tokens": [
						"set_time_limit",
						"settime_limit"
					],
					"id": "function.set-time-limit",
					"name": "set_time_limit",
					"description": "Limits the maximum execution time"
				},
				"function.sys-get-temp-dir": {
					"tokens": [
						"sys_get_temp_dir",
						"sysget_temp_dir"
					],
					"id": "function.sys-get-temp-dir",
					"name": "sys_get_temp_dir",
					"description": "Returns directory path used for temporary files"
				},
				"function.version-compare": {
					"tokens": [
						"version_compare",
						"versioncompare"
					],
					"id": "function.version-compare",
					"name": "version_compare",
					"description": "Compares two &quot;PHP-standardized&quot; version number strings"
				},
				"function.zend-logo-guid": {
					"tokens": [
						"zend_logo_guid",
						"zendlogo_guid"
					],
					"id": "function.zend-logo-guid",
					"name": "zend_logo_guid",
					"description": "Gets the Zend guid"
				},
				"function.zend-thread-id": {
					"tokens": [
						"zend_thread_id",
						"zendthread_id"
					],
					"id": "function.zend-thread-id",
					"name": "zend_thread_id",
					"description": "Returns a unique identifier for the current thread"
				},
				"function.zend-version": {
					"tokens": [
						"zend_version",
						"zendversion"
					],
					"id": "function.zend-version",
					"name": "zend_version",
					"description": "Gets the version of the current Zend engine"
				},
				"runkit.sandbox": {
					"tokens": [
						"Runkit_Sandbox",
						"RunkitSandbox"
					],
					"id": "runkit.sandbox",
					"name": "Runkit_Sandbox",
					"description": "Runkit Sandbox Class -- PHP Virtual Machine"
				},
				"runkit.sandbox-parent": {
					"tokens": [
						"Runkit_Sandbox_Parent",
						"RunkitSandbox_Parent"
					],
					"id": "runkit.sandbox-parent",
					"name": "Runkit_Sandbox_Parent",
					"description": "Runkit Anti-Sandbox Class"
				},
				"function.runkit-class-adopt": {
					"tokens": [
						"runkit_class_adopt",
						"runkitclass_adopt"
					],
					"id": "function.runkit-class-adopt",
					"name": "runkit_class_adopt",
					"description": "Convert a base class to an inherited class, add ancestral methods when appropriate"
				},
				"function.runkit-class-emancipate": {
					"tokens": [
						"runkit_class_emancipate",
						"runkitclass_emancipate"
					],
					"id": "function.runkit-class-emancipate",
					"name": "runkit_class_emancipate",
					"description": "Convert an inherited class to a base class, removes any method whose scope is ancestral"
				},
				"function.runkit-constant-add": {
					"tokens": [
						"runkit_constant_add",
						"runkitconstant_add"
					],
					"id": "function.runkit-constant-add",
					"name": "runkit_constant_add",
					"description": "Similar to define(), but allows defining in class definitions as well"
				},
				"function.runkit-constant-redefine": {
					"tokens": [
						"runkit_constant_redefine",
						"runkitconstant_redefine"
					],
					"id": "function.runkit-constant-redefine",
					"name": "runkit_constant_redefine",
					"description": "Redefine an already defined constant"
				},
				"function.runkit-constant-remove": {
					"tokens": [
						"runkit_constant_remove",
						"runkitconstant_remove"
					],
					"id": "function.runkit-constant-remove",
					"name": "runkit_constant_remove",
					"description": "Remove/Delete an already defined constant"
				},
				"function.runkit-function-add": {
					"tokens": [
						"runkit_function_add",
						"runkitfunction_add"
					],
					"id": "function.runkit-function-add",
					"name": "runkit_function_add",
					"description": "Add a new function, similar to create_function"
				},
				"function.runkit-function-copy": {
					"tokens": [
						"runkit_function_copy",
						"runkitfunction_copy"
					],
					"id": "function.runkit-function-copy",
					"name": "runkit_function_copy",
					"description": "Copy a function to a new function name"
				},
				"function.runkit-function-redefine": {
					"tokens": [
						"runkit_function_redefine",
						"runkitfunction_redefine"
					],
					"id": "function.runkit-function-redefine",
					"name": "runkit_function_redefine",
					"description": "Replace a function definition with a new implementation"
				},
				"function.runkit-function-remove": {
					"tokens": [
						"runkit_function_remove",
						"runkitfunction_remove"
					],
					"id": "function.runkit-function-remove",
					"name": "runkit_function_remove",
					"description": "Remove a function definition"
				},
				"function.runkit-function-rename": {
					"tokens": [
						"runkit_function_rename",
						"runkitfunction_rename"
					],
					"id": "function.runkit-function-rename",
					"name": "runkit_function_rename",
					"description": "Change a function's name"
				},
				"function.runkit-import": {
					"tokens": [
						"runkit_import",
						"runkitimport"
					],
					"id": "function.runkit-import",
					"name": "runkit_import",
					"description": "Process a PHP file importing function and class definitions, overwriting where appropriate"
				},
				"function.runkit-lint-file": {
					"tokens": [
						"runkit_lint_file",
						"runkitlint_file"
					],
					"id": "function.runkit-lint-file",
					"name": "runkit_lint_file",
					"description": "Check the PHP syntax of the specified file"
				},
				"function.runkit-lint": {
					"tokens": [
						"runkit_lint",
						"runkitlint"
					],
					"id": "function.runkit-lint",
					"name": "runkit_lint",
					"description": "Check the PHP syntax of the specified php code"
				},
				"function.runkit-method-add": {
					"tokens": [
						"runkit_method_add",
						"runkitmethod_add"
					],
					"id": "function.runkit-method-add",
					"name": "runkit_method_add",
					"description": "Dynamically adds a new method to a given class"
				},
				"function.runkit-method-copy": {
					"tokens": [
						"runkit_method_copy",
						"runkitmethod_copy"
					],
					"id": "function.runkit-method-copy",
					"name": "runkit_method_copy",
					"description": "Copies a method from class to another"
				},
				"function.runkit-method-redefine": {
					"tokens": [
						"runkit_method_redefine",
						"runkitmethod_redefine"
					],
					"id": "function.runkit-method-redefine",
					"name": "runkit_method_redefine",
					"description": "Dynamically changes the code of the given method"
				},
				"function.runkit-method-remove": {
					"tokens": [
						"runkit_method_remove",
						"runkitmethod_remove"
					],
					"id": "function.runkit-method-remove",
					"name": "runkit_method_remove",
					"description": "Dynamically removes the given method"
				},
				"function.runkit-method-rename": {
					"tokens": [
						"runkit_method_rename",
						"runkitmethod_rename"
					],
					"id": "function.runkit-method-rename",
					"name": "runkit_method_rename",
					"description": "Dynamically changes the name of the given method"
				},
				"function.runkit-return-value-used": {
					"tokens": [
						"runkit_return_value_used",
						"runkitreturn_value_used"
					],
					"id": "function.runkit-return-value-used",
					"name": "runkit_return_value_used",
					"description": "Determines if the current functions return value will be used"
				},
				"function.runkit-sandbox-output-handler": {
					"tokens": [
						"runkit_sandbox_output_handler",
						"runkitsandbox_output_handler"
					],
					"id": "function.runkit-sandbox-output-handler",
					"name": "runkit_sandbox_output_handler",
					"description": "Specify a function to capture and/or process output from a runkit sandbox"
				},
				"function.runkit-superglobals": {
					"tokens": [
						"runkit_superglobals",
						"runkitsuperglobals"
					],
					"id": "function.runkit-superglobals",
					"name": "runkit_superglobals",
					"description": "Return numerically indexed array of registered superglobals"
				},
				"function.uopz-backup": {
					"tokens": [
						"uopz_backup",
						"uopzbackup"
					],
					"id": "function.uopz-backup",
					"name": "uopz_backup",
					"description": "Backup a function"
				},
				"function.uopz-compose": {
					"tokens": [
						"uopz_compose",
						"uopzcompose"
					],
					"id": "function.uopz-compose",
					"name": "uopz_compose",
					"description": "Compose a class"
				},
				"function.uopz-copy": {
					"tokens": [
						"uopz_copy",
						"uopzcopy"
					],
					"id": "function.uopz-copy",
					"name": "uopz_copy",
					"description": "Copy a function"
				},
				"function.uopz-delete": {
					"tokens": [
						"uopz_delete",
						"uopzdelete"
					],
					"id": "function.uopz-delete",
					"name": "uopz_delete",
					"description": "Delete a function"
				},
				"function.uopz-extend": {
					"tokens": [
						"uopz_extend",
						"uopzextend"
					],
					"id": "function.uopz-extend",
					"name": "uopz_extend",
					"description": "Extend a class at runtime"
				},
				"function.uopz-flags": {
					"tokens": [
						"uopz_flags",
						"uopzflags"
					],
					"id": "function.uopz-flags",
					"name": "uopz_flags",
					"description": "Get or set flags on function or class"
				},
				"function.uopz-function": {
					"tokens": [
						"uopz_function",
						"uopzfunction"
					],
					"id": "function.uopz-function",
					"name": "uopz_function",
					"description": "Creates a function at runtime"
				},
				"function.uopz-implement": {
					"tokens": [
						"uopz_implement",
						"uopzimplement"
					],
					"id": "function.uopz-implement",
					"name": "uopz_implement",
					"description": "Implements an interface at runtime"
				},
				"function.uopz-overload": {
					"tokens": [
						"uopz_overload",
						"uopzoverload"
					],
					"id": "function.uopz-overload",
					"name": "uopz_overload",
					"description": "Overload a VM opcode"
				},
				"function.uopz-redefine": {
					"tokens": [
						"uopz_redefine",
						"uopzredefine"
					],
					"id": "function.uopz-redefine",
					"name": "uopz_redefine",
					"description": "Redefine a constant"
				},
				"function.uopz-rename": {
					"tokens": [
						"uopz_rename",
						"uopzrename"
					],
					"id": "function.uopz-rename",
					"name": "uopz_rename",
					"description": "Rename a function at runtime"
				},
				"function.uopz-restore": {
					"tokens": [
						"uopz_restore",
						"uopzrestore"
					],
					"id": "function.uopz-restore",
					"name": "uopz_restore",
					"description": "Restore a previously backed up function"
				},
				"function.uopz-undefine": {
					"tokens": [
						"uopz_undefine",
						"uopzundefine"
					],
					"id": "function.uopz-undefine",
					"name": "uopz_undefine",
					"description": "Undefine a constant"
				},
				"weakref.acquire": {
					"tokens": [
						"Weakref::acquire",
						"acquire",
						"::acquire"
					],
					"id": "weakref.acquire",
					"name": "Weakref::acquire",
					"description": "Acquires a strong reference on that object"
				},
				"weakref.construct": {
					"tokens": [
						"Weakref::__construct",
						"Weakref::_construct",
						"__construct",
						"::__construct"
					],
					"id": "weakref.construct",
					"name": "Weakref::__construct",
					"description": "Constructs a new weak reference"
				},
				"weakref.get": {
					"tokens": [
						"Weakref::get",
						"get",
						"::get"
					],
					"id": "weakref.get",
					"name": "Weakref::get",
					"description": "Returns the object pointed to by the weak reference"
				},
				"weakref.release": {
					"tokens": [
						"Weakref::release",
						"release",
						"::release"
					],
					"id": "weakref.release",
					"name": "Weakref::release",
					"description": "Releases a previously acquired reference"
				},
				"weakref.valid": {
					"tokens": [
						"Weakref::valid",
						"valid",
						"::valid"
					],
					"id": "weakref.valid",
					"name": "Weakref::valid",
					"description": "Checks whether the object referenced still exists"
				},
				"weakmap.construct": {
					"tokens": [
						"WeakMap::__construct",
						"WeakMap::_construct",
						"__construct",
						"::__construct"
					],
					"id": "weakmap.construct",
					"name": "WeakMap::__construct",
					"description": "Constructs a new map"
				},
				"weakmap.count": {
					"tokens": [
						"WeakMap::count",
						"count",
						"::count"
					],
					"id": "weakmap.count",
					"name": "WeakMap::count",
					"description": "Counts the number of live entries in the map"
				},
				"weakmap.current": {
					"tokens": [
						"WeakMap::current",
						"current",
						"::current"
					],
					"id": "weakmap.current",
					"name": "WeakMap::current",
					"description": "Returns the current value under iteration"
				},
				"weakmap.key": {
					"tokens": [
						"WeakMap::key",
						"key",
						"::key"
					],
					"id": "weakmap.key",
					"name": "WeakMap::key",
					"description": "Returns the current key under iteration."
				},
				"weakmap.next": {
					"tokens": [
						"WeakMap::next",
						"next",
						"::next"
					],
					"id": "weakmap.next",
					"name": "WeakMap::next",
					"description": "Advances to the next map element"
				},
				"weakmap.offsetexists": {
					"tokens": [
						"WeakMap::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "weakmap.offsetexists",
					"name": "WeakMap::offsetExists",
					"description": "Checks whether a certain object is in the map"
				},
				"weakmap.offsetget": {
					"tokens": [
						"WeakMap::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "weakmap.offsetget",
					"name": "WeakMap::offsetGet",
					"description": "Returns the value pointed to by a certain object"
				},
				"weakmap.offsetset": {
					"tokens": [
						"WeakMap::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "weakmap.offsetset",
					"name": "WeakMap::offsetSet",
					"description": "Updates the map with a new key-value pair"
				},
				"weakmap.offsetunset": {
					"tokens": [
						"WeakMap::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "weakmap.offsetunset",
					"name": "WeakMap::offsetUnset",
					"description": "Removes an entry from the map"
				},
				"weakmap.rewind": {
					"tokens": [
						"WeakMap::rewind",
						"rewind",
						"::rewind"
					],
					"id": "weakmap.rewind",
					"name": "WeakMap::rewind",
					"description": "Rewinds the iterator to the beginning of the map"
				},
				"weakmap.valid": {
					"tokens": [
						"WeakMap::valid",
						"valid",
						"::valid"
					],
					"id": "weakmap.valid",
					"name": "WeakMap::valid",
					"description": "Returns whether the iterator is still on a valid map element"
				},
				"function.wincache-fcache-fileinfo": {
					"tokens": [
						"wincache_fcache_fileinfo",
						"wincachefcache_fileinfo"
					],
					"id": "function.wincache-fcache-fileinfo",
					"name": "wincache_fcache_fileinfo",
					"description": "Retrieves information about files cached in the file cache"
				},
				"function.wincache-fcache-meminfo": {
					"tokens": [
						"wincache_fcache_meminfo",
						"wincachefcache_meminfo"
					],
					"id": "function.wincache-fcache-meminfo",
					"name": "wincache_fcache_meminfo",
					"description": "Retrieves information about file cache memory usage"
				},
				"function.wincache-lock": {
					"tokens": [
						"wincache_lock",
						"wincachelock"
					],
					"id": "function.wincache-lock",
					"name": "wincache_lock",
					"description": "Acquires an exclusive lock on a given key"
				},
				"function.wincache-ocache-fileinfo": {
					"tokens": [
						"wincache_ocache_fileinfo",
						"wincacheocache_fileinfo"
					],
					"id": "function.wincache-ocache-fileinfo",
					"name": "wincache_ocache_fileinfo",
					"description": "Retrieves information about files cached in the opcode cache"
				},
				"function.wincache-ocache-meminfo": {
					"tokens": [
						"wincache_ocache_meminfo",
						"wincacheocache_meminfo"
					],
					"id": "function.wincache-ocache-meminfo",
					"name": "wincache_ocache_meminfo",
					"description": "Retrieves information about opcode cache memory usage"
				},
				"function.wincache-refresh-if-changed": {
					"tokens": [
						"wincache_refresh_if_changed",
						"wincacherefresh_if_changed"
					],
					"id": "function.wincache-refresh-if-changed",
					"name": "wincache_refresh_if_changed",
					"description": "Refreshes the cache entries for the cached files"
				},
				"function.wincache-rplist-fileinfo": {
					"tokens": [
						"wincache_rplist_fileinfo",
						"wincacherplist_fileinfo"
					],
					"id": "function.wincache-rplist-fileinfo",
					"name": "wincache_rplist_fileinfo",
					"description": "Retrieves information about resolve file path cache"
				},
				"function.wincache-rplist-meminfo": {
					"tokens": [
						"wincache_rplist_meminfo",
						"wincacherplist_meminfo"
					],
					"id": "function.wincache-rplist-meminfo",
					"name": "wincache_rplist_meminfo",
					"description": "Retrieves information about memory usage by the resolve file path cache"
				},
				"function.wincache-scache-info": {
					"tokens": [
						"wincache_scache_info",
						"wincachescache_info"
					],
					"id": "function.wincache-scache-info",
					"name": "wincache_scache_info",
					"description": "Retrieves information about files cached in the session cache"
				},
				"function.wincache-scache-meminfo": {
					"tokens": [
						"wincache_scache_meminfo",
						"wincachescache_meminfo"
					],
					"id": "function.wincache-scache-meminfo",
					"name": "wincache_scache_meminfo",
					"description": "Retrieves information about session cache memory usage"
				},
				"function.wincache-ucache-add": {
					"tokens": [
						"wincache_ucache_add",
						"wincacheucache_add"
					],
					"id": "function.wincache-ucache-add",
					"name": "wincache_ucache_add",
					"description": "Adds a variable in user cache only if variable does not already exist in the cache"
				},
				"function.wincache-ucache-cas": {
					"tokens": [
						"wincache_ucache_cas",
						"wincacheucache_cas"
					],
					"id": "function.wincache-ucache-cas",
					"name": "wincache_ucache_cas",
					"description": "Compares the variable with old value and assigns new value to it"
				},
				"function.wincache-ucache-clear": {
					"tokens": [
						"wincache_ucache_clear",
						"wincacheucache_clear"
					],
					"id": "function.wincache-ucache-clear",
					"name": "wincache_ucache_clear",
					"description": "Deletes entire content of the user cache"
				},
				"function.wincache-ucache-dec": {
					"tokens": [
						"wincache_ucache_dec",
						"wincacheucache_dec"
					],
					"id": "function.wincache-ucache-dec",
					"name": "wincache_ucache_dec",
					"description": "Decrements the value associated with the key"
				},
				"function.wincache-ucache-delete": {
					"tokens": [
						"wincache_ucache_delete",
						"wincacheucache_delete"
					],
					"id": "function.wincache-ucache-delete",
					"name": "wincache_ucache_delete",
					"description": "Deletes variables from the user cache"
				},
				"function.wincache-ucache-exists": {
					"tokens": [
						"wincache_ucache_exists",
						"wincacheucache_exists"
					],
					"id": "function.wincache-ucache-exists",
					"name": "wincache_ucache_exists",
					"description": "Checks if a variable exists in the user cache"
				},
				"function.wincache-ucache-get": {
					"tokens": [
						"wincache_ucache_get",
						"wincacheucache_get"
					],
					"id": "function.wincache-ucache-get",
					"name": "wincache_ucache_get",
					"description": "Gets a variable stored in the user cache"
				},
				"function.wincache-ucache-inc": {
					"tokens": [
						"wincache_ucache_inc",
						"wincacheucache_inc"
					],
					"id": "function.wincache-ucache-inc",
					"name": "wincache_ucache_inc",
					"description": "Increments the value associated with the key"
				},
				"function.wincache-ucache-info": {
					"tokens": [
						"wincache_ucache_info",
						"wincacheucache_info"
					],
					"id": "function.wincache-ucache-info",
					"name": "wincache_ucache_info",
					"description": "Retrieves information about data stored in the user cache"
				},
				"function.wincache-ucache-meminfo": {
					"tokens": [
						"wincache_ucache_meminfo",
						"wincacheucache_meminfo"
					],
					"id": "function.wincache-ucache-meminfo",
					"name": "wincache_ucache_meminfo",
					"description": "Retrieves information about user cache memory usage"
				},
				"function.wincache-ucache-set": {
					"tokens": [
						"wincache_ucache_set",
						"wincacheucache_set"
					],
					"id": "function.wincache-ucache-set",
					"name": "wincache_ucache_set",
					"description": "Adds a variable in user cache and overwrites a variable if it already exists in the cache"
				},
				"function.wincache-unlock": {
					"tokens": [
						"wincache_unlock",
						"wincacheunlock"
					],
					"id": "function.wincache-unlock",
					"name": "wincache_unlock",
					"description": "Releases an exclusive lock on a given key"
				},
				"function.xhprof-disable": {
					"tokens": [
						"xhprof_disable",
						"xhprofdisable"
					],
					"id": "function.xhprof-disable",
					"name": "xhprof_disable",
					"description": "Stops xhprof profiler"
				},
				"function.xhprof-enable": {
					"tokens": [
						"xhprof_enable",
						"xhprofenable"
					],
					"id": "function.xhprof-enable",
					"name": "xhprof_enable",
					"description": "Start xhprof profiler"
				},
				"function.xhprof-sample-disable": {
					"tokens": [
						"xhprof_sample_disable",
						"xhprofsample_disable"
					],
					"id": "function.xhprof-sample-disable",
					"name": "xhprof_sample_disable",
					"description": "Stops xhprof sample profiler"
				},
				"function.xhprof-sample-enable": {
					"tokens": [
						"xhprof_sample_enable",
						"xhprofsample_enable"
					],
					"id": "function.xhprof-sample-enable",
					"name": "xhprof_sample_enable",
					"description": "Start XHProf profiling in sampling mode"
				},
				"function.id3-get-frame-long-name": {
					"tokens": [
						"id3_get_frame_long_name",
						"id3get_frame_long_name"
					],
					"id": "function.id3-get-frame-long-name",
					"name": "id3_get_frame_long_name",
					"description": "Get the long name of an ID3v2 frame"
				},
				"function.id3-get-frame-short-name": {
					"tokens": [
						"id3_get_frame_short_name",
						"id3get_frame_short_name"
					],
					"id": "function.id3-get-frame-short-name",
					"name": "id3_get_frame_short_name",
					"description": "Get the short name of an ID3v2 frame"
				},
				"function.id3-get-genre-id": {
					"tokens": [
						"id3_get_genre_id",
						"id3get_genre_id"
					],
					"id": "function.id3-get-genre-id",
					"name": "id3_get_genre_id",
					"description": "Get the id for a genre"
				},
				"function.id3-get-genre-list": {
					"tokens": [
						"id3_get_genre_list",
						"id3get_genre_list"
					],
					"id": "function.id3-get-genre-list",
					"name": "id3_get_genre_list",
					"description": "Get all possible genre values"
				},
				"function.id3-get-genre-name": {
					"tokens": [
						"id3_get_genre_name",
						"id3get_genre_name"
					],
					"id": "function.id3-get-genre-name",
					"name": "id3_get_genre_name",
					"description": "Get the name for a genre id"
				},
				"function.id3-get-tag": {
					"tokens": [
						"id3_get_tag",
						"id3get_tag"
					],
					"id": "function.id3-get-tag",
					"name": "id3_get_tag",
					"description": "Get all information stored in an ID3 tag"
				},
				"function.id3-get-version": {
					"tokens": [
						"id3_get_version",
						"id3get_version"
					],
					"id": "function.id3-get-version",
					"name": "id3_get_version",
					"description": "Get version of an ID3 tag"
				},
				"function.id3-remove-tag": {
					"tokens": [
						"id3_remove_tag",
						"id3remove_tag"
					],
					"id": "function.id3-remove-tag",
					"name": "id3_remove_tag",
					"description": "Remove an existing ID3 tag"
				},
				"function.id3-set-tag": {
					"tokens": [
						"id3_set_tag",
						"id3set_tag"
					],
					"id": "function.id3-set-tag",
					"name": "id3_set_tag",
					"description": "Update information stored in an ID3 tag"
				},
				"mpegfile.construct": {
					"tokens": [
						"KTaglib_MPEG_File::__construct",
						"KTaglibMPEG_File::__construct",
						"__construct",
						"::__construct"
					],
					"id": "mpegfile.construct",
					"name": "KTaglib_MPEG_File::__construct",
					"description": "Opens a new file"
				},
				"mpegfile.getaudioproperties": {
					"tokens": [
						"KTaglib_MPEG_File::getAudioProperties",
						"KTaglibMPEG_File::getAudioProperties",
						"getAudioProperties",
						"::getAudioProperties"
					],
					"id": "mpegfile.getaudioproperties",
					"name": "KTaglib_MPEG_File::getAudioProperties",
					"description": "Returns an object that provides access to the audio properties"
				},
				"mpegfile.getid3v1tag": {
					"tokens": [
						"KTaglib_MPEG_File::getID3v1Tag",
						"KTaglibMPEG_File::getID3v1Tag",
						"getID3v1Tag",
						"::getID3v1Tag"
					],
					"id": "mpegfile.getid3v1tag",
					"name": "KTaglib_MPEG_File::getID3v1Tag",
					"description": "Returns an object representing an ID3v1 tag"
				},
				"mpegfile.getid3v2tag": {
					"tokens": [
						"KTaglib_MPEG_File::getID3v2Tag",
						"KTaglibMPEG_File::getID3v2Tag",
						"getID3v2Tag",
						"::getID3v2Tag"
					],
					"id": "mpegfile.getid3v2tag",
					"name": "KTaglib_MPEG_File::getID3v2Tag",
					"description": "Returns a ID3v2 object"
				},
				"audioproperties.getbitrate": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::getBitrate",
						"KTaglibMPEG_AudioProperties::getBitrate",
						"getBitrate",
						"::getBitrate"
					],
					"id": "audioproperties.getbitrate",
					"name": "KTaglib_MPEG_AudioProperties::getBitrate",
					"description": "Returns the bitrate of the MPEG file"
				},
				"audioproperties.getchannels": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::getChannels",
						"KTaglibMPEG_AudioProperties::getChannels",
						"getChannels",
						"::getChannels"
					],
					"id": "audioproperties.getchannels",
					"name": "KTaglib_MPEG_AudioProperties::getChannels",
					"description": "Returns the amount of channels of a MPEG file"
				},
				"audioproperties.getlayer": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::getLayer",
						"KTaglibMPEG_AudioProperties::getLayer",
						"getLayer",
						"::getLayer"
					],
					"id": "audioproperties.getlayer",
					"name": "KTaglib_MPEG_AudioProperties::getLayer",
					"description": "Returns the layer of a MPEG file"
				},
				"audioproperties.getlength": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::getLength",
						"KTaglibMPEG_AudioProperties::getLength",
						"getLength",
						"::getLength"
					],
					"id": "audioproperties.getlength",
					"name": "KTaglib_MPEG_AudioProperties::getLength",
					"description": "Returns the length of a MPEG file"
				},
				"audioproperties.getsamplebitrate": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::getSampleBitrate",
						"KTaglibMPEG_AudioProperties::getSampleBitrate",
						"getSampleBitrate",
						"::getSampleBitrate"
					],
					"id": "audioproperties.getsamplebitrate",
					"name": "KTaglib_MPEG_AudioProperties::getSampleBitrate",
					"description": "Returns the sample bitrate of a MPEG file"
				},
				"audioproperties.getversion": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::getVersion",
						"KTaglibMPEG_AudioProperties::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "audioproperties.getversion",
					"name": "KTaglib_MPEG_AudioProperties::getVersion",
					"description": "Returns the version of a MPEG file"
				},
				"audioproperties.iscopyrighted": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::isCopyrighted",
						"KTaglibMPEG_AudioProperties::isCopyrighted",
						"isCopyrighted",
						"::isCopyrighted"
					],
					"id": "audioproperties.iscopyrighted",
					"name": "KTaglib_MPEG_AudioProperties::isCopyrighted",
					"description": "Returns the copyright status of an MPEG file"
				},
				"audioproperties.isoriginal": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::isOriginal",
						"KTaglibMPEG_AudioProperties::isOriginal",
						"isOriginal",
						"::isOriginal"
					],
					"id": "audioproperties.isoriginal",
					"name": "KTaglib_MPEG_AudioProperties::isOriginal",
					"description": "Returns if the file is marked as the original file"
				},
				"audioproperties.isprotectionenabled": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties::isProtectionEnabled",
						"KTaglibMPEG_AudioProperties::isProtectionEnabled",
						"isProtectionEnabled",
						"::isProtectionEnabled"
					],
					"id": "audioproperties.isprotectionenabled",
					"name": "KTaglib_MPEG_AudioProperties::isProtectionEnabled",
					"description": "Returns if protection mechanisms of an MPEG file are enabled"
				},
				"tag.getalbum": {
					"tokens": [
						"KTaglib_Tag::getAlbum",
						"KTaglibTag::getAlbum",
						"getAlbum",
						"::getAlbum"
					],
					"id": "tag.getalbum",
					"name": "KTaglib_Tag::getAlbum",
					"description": "Returns the title string from a ID3 tag"
				},
				"tag.getartist": {
					"tokens": [
						"KTaglib_Tag::getArtist",
						"KTaglibTag::getArtist",
						"getArtist",
						"::getArtist"
					],
					"id": "tag.getartist",
					"name": "KTaglib_Tag::getArtist",
					"description": "Returns the artist string from a ID3 tag"
				},
				"tag.getcomment": {
					"tokens": [
						"KTaglib_Tag::getComment",
						"KTaglibTag::getComment",
						"getComment",
						"::getComment"
					],
					"id": "tag.getcomment",
					"name": "KTaglib_Tag::getComment",
					"description": "Returns the comment from a ID3 tag"
				},
				"tag.getgenre": {
					"tokens": [
						"KTaglib_Tag::getGenre",
						"KTaglibTag::getGenre",
						"getGenre",
						"::getGenre"
					],
					"id": "tag.getgenre",
					"name": "KTaglib_Tag::getGenre",
					"description": "Returns the genre from a ID3 tag"
				},
				"tag.gettitle": {
					"tokens": [
						"KTaglib_Tag::getTitle",
						"KTaglibTag::getTitle",
						"getTitle",
						"::getTitle"
					],
					"id": "tag.gettitle",
					"name": "KTaglib_Tag::getTitle",
					"description": "Returns the title string from a ID3 tag"
				},
				"tag.gettrack": {
					"tokens": [
						"KTaglib_Tag::getTrack",
						"KTaglibTag::getTrack",
						"getTrack",
						"::getTrack"
					],
					"id": "tag.gettrack",
					"name": "KTaglib_Tag::getTrack",
					"description": "Returns the track number from a ID3 tag"
				},
				"tag.getyear": {
					"tokens": [
						"KTaglib_Tag::getYear",
						"KTaglibTag::getYear",
						"getYear",
						"::getYear"
					],
					"id": "tag.getyear",
					"name": "KTaglib_Tag::getYear",
					"description": "Returns the year from a ID3 tag"
				},
				"tag.isempty": {
					"tokens": [
						"KTaglib_Tag::isEmpty",
						"KTaglibTag::isEmpty",
						"isEmpty",
						"::isEmpty"
					],
					"id": "tag.isempty",
					"name": "KTaglib_Tag::isEmpty",
					"description": "Returns true if the tag is empty"
				},
				"id3v2tag.addframe": {
					"tokens": [
						"KTaglib_ID3v2_Tag::addFrame",
						"KTaglibID3v2_Tag::addFrame",
						"addFrame",
						"::addFrame"
					],
					"id": "id3v2tag.addframe",
					"name": "KTaglib_ID3v2_Tag::addFrame",
					"description": "Add a frame to the ID3v2 tag"
				},
				"id3v2tag.getframelist": {
					"tokens": [
						"KTaglib_ID3v2_Tag::getFrameList",
						"KTaglibID3v2_Tag::getFrameList",
						"getFrameList",
						"::getFrameList"
					],
					"id": "id3v2tag.getframelist",
					"name": "KTaglib_ID3v2_Tag::getFrameList",
					"description": "Returns an array of ID3v2 frames, associated with the ID3v2 tag"
				},
				"id3v2frame.getsize": {
					"tokens": [
						"KTaglib_ID3v2_Frame::getSize",
						"KTaglibID3v2_Frame::getSize",
						"getSize",
						"::getSize"
					],
					"id": "id3v2frame.getsize",
					"name": "KTaglib_ID3v2_Frame::getSize",
					"description": "Returns the size of the frame in bytes"
				},
				"id3v2frame.tostring": {
					"tokens": [
						"KTaglib_ID3v2_Frame::__toString",
						"KTaglibID3v2_Frame::__toString",
						"__toString",
						"::__toString"
					],
					"id": "id3v2frame.tostring",
					"name": "KTaglib_ID3v2_Frame::__toString",
					"description": "Returns a string representation of the frame"
				},
				"id3v2attachedpictureframe.getdescription": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::getDescription",
						"KTaglibID3v2_AttachedPictureFrame::getDescription",
						"getDescription",
						"::getDescription"
					],
					"id": "id3v2attachedpictureframe.getdescription",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::getDescription",
					"description": "Returns a description for the picture in a picture frame"
				},
				"id3v2attachedpictureframe.getmimetype": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::getMimeType",
						"KTaglibID3v2_AttachedPictureFrame::getMimeType",
						"getMimeType",
						"::getMimeType"
					],
					"id": "id3v2attachedpictureframe.getmimetype",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::getMimeType",
					"description": "Returns the mime type of the picture"
				},
				"id3v2attachedpictureframe.gettype": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::getType",
						"KTaglibID3v2_AttachedPictureFrame::getType",
						"getType",
						"::getType"
					],
					"id": "id3v2attachedpictureframe.gettype",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::getType",
					"description": "Returns the type of the image"
				},
				"id3v2attachedpictureframe.savepicture": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::savePicture",
						"KTaglibID3v2_AttachedPictureFrame::savePicture",
						"savePicture",
						"::savePicture"
					],
					"id": "id3v2attachedpictureframe.savepicture",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::savePicture",
					"description": "Saves the picture to a file"
				},
				"id3v2attachedpictureframe.setmimetype": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::setMimeType",
						"KTaglibID3v2_AttachedPictureFrame::setMimeType",
						"setMimeType",
						"::setMimeType"
					],
					"id": "id3v2attachedpictureframe.setmimetype",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::setMimeType",
					"description": "Set's the mime type of the picture"
				},
				"id3v2attachedpictureframe.setpicture": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::setPicture",
						"KTaglibID3v2_AttachedPictureFrame::setPicture",
						"setPicture",
						"::setPicture"
					],
					"id": "id3v2attachedpictureframe.setpicture",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::setPicture",
					"description": "Sets the frame picture to the given image"
				},
				"id3v2attachedpictureframe.settype": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame::setType",
						"KTaglibID3v2_AttachedPictureFrame::setType",
						"setType",
						"::setType"
					],
					"id": "id3v2attachedpictureframe.settype",
					"name": "KTaglib_ID3v2_AttachedPictureFrame::setType",
					"description": "Set the type of the image"
				},
				"function.openal-buffer-create": {
					"tokens": [
						"openal_buffer_create",
						"openalbuffer_create"
					],
					"id": "function.openal-buffer-create",
					"name": "openal_buffer_create",
					"description": "Generate OpenAL buffer"
				},
				"function.openal-buffer-data": {
					"tokens": [
						"openal_buffer_data",
						"openalbuffer_data"
					],
					"id": "function.openal-buffer-data",
					"name": "openal_buffer_data",
					"description": "Load a buffer with data"
				},
				"function.openal-buffer-destroy": {
					"tokens": [
						"openal_buffer_destroy",
						"openalbuffer_destroy"
					],
					"id": "function.openal-buffer-destroy",
					"name": "openal_buffer_destroy",
					"description": "Destroys an OpenAL buffer"
				},
				"function.openal-buffer-get": {
					"tokens": [
						"openal_buffer_get",
						"openalbuffer_get"
					],
					"id": "function.openal-buffer-get",
					"name": "openal_buffer_get",
					"description": "Retrieve an OpenAL buffer property"
				},
				"function.openal-buffer-loadwav": {
					"tokens": [
						"openal_buffer_loadwav",
						"openalbuffer_loadwav"
					],
					"id": "function.openal-buffer-loadwav",
					"name": "openal_buffer_loadwav",
					"description": "Load a .wav file into a buffer"
				},
				"function.openal-context-create": {
					"tokens": [
						"openal_context_create",
						"openalcontext_create"
					],
					"id": "function.openal-context-create",
					"name": "openal_context_create",
					"description": "Create an audio processing context"
				},
				"function.openal-context-current": {
					"tokens": [
						"openal_context_current",
						"openalcontext_current"
					],
					"id": "function.openal-context-current",
					"name": "openal_context_current",
					"description": "Make the specified context current"
				},
				"function.openal-context-destroy": {
					"tokens": [
						"openal_context_destroy",
						"openalcontext_destroy"
					],
					"id": "function.openal-context-destroy",
					"name": "openal_context_destroy",
					"description": "Destroys a context"
				},
				"function.openal-context-process": {
					"tokens": [
						"openal_context_process",
						"openalcontext_process"
					],
					"id": "function.openal-context-process",
					"name": "openal_context_process",
					"description": "Process the specified context"
				},
				"function.openal-context-suspend": {
					"tokens": [
						"openal_context_suspend",
						"openalcontext_suspend"
					],
					"id": "function.openal-context-suspend",
					"name": "openal_context_suspend",
					"description": "Suspend the specified context"
				},
				"function.openal-device-close": {
					"tokens": [
						"openal_device_close",
						"openaldevice_close"
					],
					"id": "function.openal-device-close",
					"name": "openal_device_close",
					"description": "Close an OpenAL device"
				},
				"function.openal-device-open": {
					"tokens": [
						"openal_device_open",
						"openaldevice_open"
					],
					"id": "function.openal-device-open",
					"name": "openal_device_open",
					"description": "Initialize the OpenAL audio layer"
				},
				"function.openal-listener-get": {
					"tokens": [
						"openal_listener_get",
						"openallistener_get"
					],
					"id": "function.openal-listener-get",
					"name": "openal_listener_get",
					"description": "Retrieve a listener property"
				},
				"function.openal-listener-set": {
					"tokens": [
						"openal_listener_set",
						"openallistener_set"
					],
					"id": "function.openal-listener-set",
					"name": "openal_listener_set",
					"description": "Set a listener property"
				},
				"function.openal-source-create": {
					"tokens": [
						"openal_source_create",
						"openalsource_create"
					],
					"id": "function.openal-source-create",
					"name": "openal_source_create",
					"description": "Generate a source resource"
				},
				"function.openal-source-destroy": {
					"tokens": [
						"openal_source_destroy",
						"openalsource_destroy"
					],
					"id": "function.openal-source-destroy",
					"name": "openal_source_destroy",
					"description": "Destroy a source resource"
				},
				"function.openal-source-get": {
					"tokens": [
						"openal_source_get",
						"openalsource_get"
					],
					"id": "function.openal-source-get",
					"name": "openal_source_get",
					"description": "Retrieve an OpenAL source property"
				},
				"function.openal-source-pause": {
					"tokens": [
						"openal_source_pause",
						"openalsource_pause"
					],
					"id": "function.openal-source-pause",
					"name": "openal_source_pause",
					"description": "Pause the source"
				},
				"function.openal-source-play": {
					"tokens": [
						"openal_source_play",
						"openalsource_play"
					],
					"id": "function.openal-source-play",
					"name": "openal_source_play",
					"description": "Start playing the source"
				},
				"function.openal-source-rewind": {
					"tokens": [
						"openal_source_rewind",
						"openalsource_rewind"
					],
					"id": "function.openal-source-rewind",
					"name": "openal_source_rewind",
					"description": "Rewind the source"
				},
				"function.openal-source-set": {
					"tokens": [
						"openal_source_set",
						"openalsource_set"
					],
					"id": "function.openal-source-set",
					"name": "openal_source_set",
					"description": "Set source property"
				},
				"function.openal-source-stop": {
					"tokens": [
						"openal_source_stop",
						"openalsource_stop"
					],
					"id": "function.openal-source-stop",
					"name": "openal_source_stop",
					"description": "Stop playing the source"
				},
				"function.openal-stream": {
					"tokens": [
						"openal_stream",
						"openalstream"
					],
					"id": "function.openal-stream",
					"name": "openal_stream",
					"description": "Begin streaming on a source"
				},
				"function.kadm5-chpass-principal": {
					"tokens": [
						"kadm5_chpass_principal",
						"kadm5chpass_principal"
					],
					"id": "function.kadm5-chpass-principal",
					"name": "kadm5_chpass_principal",
					"description": "Changes the principal's password"
				},
				"function.kadm5-create-principal": {
					"tokens": [
						"kadm5_create_principal",
						"kadm5create_principal"
					],
					"id": "function.kadm5-create-principal",
					"name": "kadm5_create_principal",
					"description": "Creates a kerberos principal with the given parameters"
				},
				"function.kadm5-delete-principal": {
					"tokens": [
						"kadm5_delete_principal",
						"kadm5delete_principal"
					],
					"id": "function.kadm5-delete-principal",
					"name": "kadm5_delete_principal",
					"description": "Deletes a kerberos principal"
				},
				"function.kadm5-destroy": {
					"tokens": [
						"kadm5_destroy",
						"kadm5destroy"
					],
					"id": "function.kadm5-destroy",
					"name": "kadm5_destroy",
					"description": "Closes the connection to the admin server and releases all related resources"
				},
				"function.kadm5-flush": {
					"tokens": [
						"kadm5_flush",
						"kadm5flush"
					],
					"id": "function.kadm5-flush",
					"name": "kadm5_flush",
					"description": "Flush all changes to the Kerberos database"
				},
				"function.kadm5-get-policies": {
					"tokens": [
						"kadm5_get_policies",
						"kadm5get_policies"
					],
					"id": "function.kadm5-get-policies",
					"name": "kadm5_get_policies",
					"description": "Gets all policies from the Kerberos database"
				},
				"function.kadm5-get-principal": {
					"tokens": [
						"kadm5_get_principal",
						"kadm5get_principal"
					],
					"id": "function.kadm5-get-principal",
					"name": "kadm5_get_principal",
					"description": "Gets the principal's entries from the Kerberos database"
				},
				"function.kadm5-get-principals": {
					"tokens": [
						"kadm5_get_principals",
						"kadm5get_principals"
					],
					"id": "function.kadm5-get-principals",
					"name": "kadm5_get_principals",
					"description": "Gets all principals from the Kerberos database"
				},
				"function.kadm5-init-with-password": {
					"tokens": [
						"kadm5_init_with_password",
						"kadm5init_with_password"
					],
					"id": "function.kadm5-init-with-password",
					"name": "kadm5_init_with_password",
					"description": "Opens a connection to the KADM5 library"
				},
				"function.kadm5-modify-principal": {
					"tokens": [
						"kadm5_modify_principal",
						"kadm5modify_principal"
					],
					"id": "function.kadm5-modify-principal",
					"name": "kadm5_modify_principal",
					"description": "Modifies a kerberos principal with the given parameters"
				},
				"function.radius-acct-open": {
					"tokens": [
						"radius_acct_open",
						"radiusacct_open"
					],
					"id": "function.radius-acct-open",
					"name": "radius_acct_open",
					"description": "Creates a Radius handle for accounting"
				},
				"function.radius-add-server": {
					"tokens": [
						"radius_add_server",
						"radiusadd_server"
					],
					"id": "function.radius-add-server",
					"name": "radius_add_server",
					"description": "Adds a server"
				},
				"function.radius-auth-open": {
					"tokens": [
						"radius_auth_open",
						"radiusauth_open"
					],
					"id": "function.radius-auth-open",
					"name": "radius_auth_open",
					"description": "Creates a Radius handle for authentication"
				},
				"function.radius-close": {
					"tokens": [
						"radius_close",
						"radiusclose"
					],
					"id": "function.radius-close",
					"name": "radius_close",
					"description": "Frees all ressources"
				},
				"function.radius-config": {
					"tokens": [
						"radius_config",
						"radiusconfig"
					],
					"id": "function.radius-config",
					"name": "radius_config",
					"description": "Causes the library to read the given configuration file"
				},
				"function.radius-create-request": {
					"tokens": [
						"radius_create_request",
						"radiuscreate_request"
					],
					"id": "function.radius-create-request",
					"name": "radius_create_request",
					"description": "Create accounting or authentication request"
				},
				"function.radius-cvt-addr": {
					"tokens": [
						"radius_cvt_addr",
						"radiuscvt_addr"
					],
					"id": "function.radius-cvt-addr",
					"name": "radius_cvt_addr",
					"description": "Converts raw data to IP-Address"
				},
				"function.radius-cvt-int": {
					"tokens": [
						"radius_cvt_int",
						"radiuscvt_int"
					],
					"id": "function.radius-cvt-int",
					"name": "radius_cvt_int",
					"description": "Converts raw data to integer"
				},
				"function.radius-cvt-string": {
					"tokens": [
						"radius_cvt_string",
						"radiuscvt_string"
					],
					"id": "function.radius-cvt-string",
					"name": "radius_cvt_string",
					"description": "Converts raw data to string"
				},
				"function.radius-demangle-mppe-key": {
					"tokens": [
						"radius_demangle_mppe_key",
						"radiusdemangle_mppe_key"
					],
					"id": "function.radius-demangle-mppe-key",
					"name": "radius_demangle_mppe_key",
					"description": "Derives mppe-keys from mangled data"
				},
				"function.radius-demangle": {
					"tokens": [
						"radius_demangle",
						"radiusdemangle"
					],
					"id": "function.radius-demangle",
					"name": "radius_demangle",
					"description": "Demangles data"
				},
				"function.radius-get-attr": {
					"tokens": [
						"radius_get_attr",
						"radiusget_attr"
					],
					"id": "function.radius-get-attr",
					"name": "radius_get_attr",
					"description": "Extracts an attribute"
				},
				"function.radius-get-tagged-attr-data": {
					"tokens": [
						"radius_get_tagged_attr_data",
						"radiusget_tagged_attr_data"
					],
					"id": "function.radius-get-tagged-attr-data",
					"name": "radius_get_tagged_attr_data",
					"description": "Extracts the data from a tagged attribute"
				},
				"function.radius-get-tagged-attr-tag": {
					"tokens": [
						"radius_get_tagged_attr_tag",
						"radiusget_tagged_attr_tag"
					],
					"id": "function.radius-get-tagged-attr-tag",
					"name": "radius_get_tagged_attr_tag",
					"description": "Extracts the tag from a tagged attribute"
				},
				"function.radius-get-vendor-attr": {
					"tokens": [
						"radius_get_vendor_attr",
						"radiusget_vendor_attr"
					],
					"id": "function.radius-get-vendor-attr",
					"name": "radius_get_vendor_attr",
					"description": "Extracts a vendor specific attribute"
				},
				"function.radius-put-addr": {
					"tokens": [
						"radius_put_addr",
						"radiusput_addr"
					],
					"id": "function.radius-put-addr",
					"name": "radius_put_addr",
					"description": "Attaches an IP address attribute"
				},
				"function.radius-put-attr": {
					"tokens": [
						"radius_put_attr",
						"radiusput_attr"
					],
					"id": "function.radius-put-attr",
					"name": "radius_put_attr",
					"description": "Attaches a binary attribute"
				},
				"function.radius-put-int": {
					"tokens": [
						"radius_put_int",
						"radiusput_int"
					],
					"id": "function.radius-put-int",
					"name": "radius_put_int",
					"description": "Attaches an integer attribute"
				},
				"function.radius-put-string": {
					"tokens": [
						"radius_put_string",
						"radiusput_string"
					],
					"id": "function.radius-put-string",
					"name": "radius_put_string",
					"description": "Attaches a string attribute"
				},
				"function.radius-put-vendor-addr": {
					"tokens": [
						"radius_put_vendor_addr",
						"radiusput_vendor_addr"
					],
					"id": "function.radius-put-vendor-addr",
					"name": "radius_put_vendor_addr",
					"description": "Attaches a vendor specific IP address attribute"
				},
				"function.radius-put-vendor-attr": {
					"tokens": [
						"radius_put_vendor_attr",
						"radiusput_vendor_attr"
					],
					"id": "function.radius-put-vendor-attr",
					"name": "radius_put_vendor_attr",
					"description": "Attaches a vendor specific binary attribute"
				},
				"function.radius-put-vendor-int": {
					"tokens": [
						"radius_put_vendor_int",
						"radiusput_vendor_int"
					],
					"id": "function.radius-put-vendor-int",
					"name": "radius_put_vendor_int",
					"description": "Attaches a vendor specific integer attribute"
				},
				"function.radius-put-vendor-string": {
					"tokens": [
						"radius_put_vendor_string",
						"radiusput_vendor_string"
					],
					"id": "function.radius-put-vendor-string",
					"name": "radius_put_vendor_string",
					"description": "Attaches a vendor specific string attribute"
				},
				"function.radius-request-authenticator": {
					"tokens": [
						"radius_request_authenticator",
						"radiusrequest_authenticator"
					],
					"id": "function.radius-request-authenticator",
					"name": "radius_request_authenticator",
					"description": "Returns the request authenticator"
				},
				"function.radius-salt-encrypt-attr": {
					"tokens": [
						"radius_salt_encrypt_attr",
						"radiussalt_encrypt_attr"
					],
					"id": "function.radius-salt-encrypt-attr",
					"name": "radius_salt_encrypt_attr",
					"description": "Salt-encrypts a value"
				},
				"function.radius-send-request": {
					"tokens": [
						"radius_send_request",
						"radiussend_request"
					],
					"id": "function.radius-send-request",
					"name": "radius_send_request",
					"description": "Sends the request and waites for a reply"
				},
				"function.radius-server-secret": {
					"tokens": [
						"radius_server_secret",
						"radiusserver_secret"
					],
					"id": "function.radius-server-secret",
					"name": "radius_server_secret",
					"description": "Returns the shared secret"
				},
				"function.radius-strerror": {
					"tokens": [
						"radius_strerror",
						"radiusstrerror"
					],
					"id": "function.radius-strerror",
					"name": "radius_strerror",
					"description": "Returns an error message"
				},
				"function.ncurses-addch": {
					"tokens": [
						"ncurses_addch",
						"ncursesaddch"
					],
					"id": "function.ncurses-addch",
					"name": "ncurses_addch",
					"description": "Add character at current position and advance cursor"
				},
				"function.ncurses-addchnstr": {
					"tokens": [
						"ncurses_addchnstr",
						"ncursesaddchnstr"
					],
					"id": "function.ncurses-addchnstr",
					"name": "ncurses_addchnstr",
					"description": "Add attributed string with specified length at current position"
				},
				"function.ncurses-addchstr": {
					"tokens": [
						"ncurses_addchstr",
						"ncursesaddchstr"
					],
					"id": "function.ncurses-addchstr",
					"name": "ncurses_addchstr",
					"description": "Add attributed string at current position"
				},
				"function.ncurses-addnstr": {
					"tokens": [
						"ncurses_addnstr",
						"ncursesaddnstr"
					],
					"id": "function.ncurses-addnstr",
					"name": "ncurses_addnstr",
					"description": "Add string with specified length at current position"
				},
				"function.ncurses-addstr": {
					"tokens": [
						"ncurses_addstr",
						"ncursesaddstr"
					],
					"id": "function.ncurses-addstr",
					"name": "ncurses_addstr",
					"description": "Output text at current position"
				},
				"function.ncurses-assume-default-colors": {
					"tokens": [
						"ncurses_assume_default_colors",
						"ncursesassume_default_colors"
					],
					"id": "function.ncurses-assume-default-colors",
					"name": "ncurses_assume_default_colors",
					"description": "Define default colors for color 0"
				},
				"function.ncurses-attroff": {
					"tokens": [
						"ncurses_attroff",
						"ncursesattroff"
					],
					"id": "function.ncurses-attroff",
					"name": "ncurses_attroff",
					"description": "Turn off the given attributes"
				},
				"function.ncurses-attron": {
					"tokens": [
						"ncurses_attron",
						"ncursesattron"
					],
					"id": "function.ncurses-attron",
					"name": "ncurses_attron",
					"description": "Turn on the given attributes"
				},
				"function.ncurses-attrset": {
					"tokens": [
						"ncurses_attrset",
						"ncursesattrset"
					],
					"id": "function.ncurses-attrset",
					"name": "ncurses_attrset",
					"description": "Set given attributes"
				},
				"function.ncurses-baudrate": {
					"tokens": [
						"ncurses_baudrate",
						"ncursesbaudrate"
					],
					"id": "function.ncurses-baudrate",
					"name": "ncurses_baudrate",
					"description": "Returns baudrate of terminal"
				},
				"function.ncurses-beep": {
					"tokens": [
						"ncurses_beep",
						"ncursesbeep"
					],
					"id": "function.ncurses-beep",
					"name": "ncurses_beep",
					"description": "Let the terminal beep"
				},
				"function.ncurses-bkgd": {
					"tokens": [
						"ncurses_bkgd",
						"ncursesbkgd"
					],
					"id": "function.ncurses-bkgd",
					"name": "ncurses_bkgd",
					"description": "Set background property for terminal screen"
				},
				"function.ncurses-bkgdset": {
					"tokens": [
						"ncurses_bkgdset",
						"ncursesbkgdset"
					],
					"id": "function.ncurses-bkgdset",
					"name": "ncurses_bkgdset",
					"description": "Control screen background"
				},
				"function.ncurses-border": {
					"tokens": [
						"ncurses_border",
						"ncursesborder"
					],
					"id": "function.ncurses-border",
					"name": "ncurses_border",
					"description": "Draw a border around the screen using attributed characters"
				},
				"function.ncurses-bottom-panel": {
					"tokens": [
						"ncurses_bottom_panel",
						"ncursesbottom_panel"
					],
					"id": "function.ncurses-bottom-panel",
					"name": "ncurses_bottom_panel",
					"description": "Moves a visible panel to the bottom of the stack"
				},
				"function.ncurses-can-change-color": {
					"tokens": [
						"ncurses_can_change_color",
						"ncursescan_change_color"
					],
					"id": "function.ncurses-can-change-color",
					"name": "ncurses_can_change_color",
					"description": "Checks if terminal color definitions can be changed"
				},
				"function.ncurses-cbreak": {
					"tokens": [
						"ncurses_cbreak",
						"ncursescbreak"
					],
					"id": "function.ncurses-cbreak",
					"name": "ncurses_cbreak",
					"description": "Switch off input buffering"
				},
				"function.ncurses-clear": {
					"tokens": [
						"ncurses_clear",
						"ncursesclear"
					],
					"id": "function.ncurses-clear",
					"name": "ncurses_clear",
					"description": "Clear screen"
				},
				"function.ncurses-clrtobot": {
					"tokens": [
						"ncurses_clrtobot",
						"ncursesclrtobot"
					],
					"id": "function.ncurses-clrtobot",
					"name": "ncurses_clrtobot",
					"description": "Clear screen from current position to bottom"
				},
				"function.ncurses-clrtoeol": {
					"tokens": [
						"ncurses_clrtoeol",
						"ncursesclrtoeol"
					],
					"id": "function.ncurses-clrtoeol",
					"name": "ncurses_clrtoeol",
					"description": "Clear screen from current position to end of line"
				},
				"function.ncurses-color-content": {
					"tokens": [
						"ncurses_color_content",
						"ncursescolor_content"
					],
					"id": "function.ncurses-color-content",
					"name": "ncurses_color_content",
					"description": "Retrieves RGB components of a color"
				},
				"function.ncurses-color-set": {
					"tokens": [
						"ncurses_color_set",
						"ncursescolor_set"
					],
					"id": "function.ncurses-color-set",
					"name": "ncurses_color_set",
					"description": "Set active foreground and background colors"
				},
				"function.ncurses-curs-set": {
					"tokens": [
						"ncurses_curs_set",
						"ncursescurs_set"
					],
					"id": "function.ncurses-curs-set",
					"name": "ncurses_curs_set",
					"description": "Set cursor state"
				},
				"function.ncurses-def-prog-mode": {
					"tokens": [
						"ncurses_def_prog_mode",
						"ncursesdef_prog_mode"
					],
					"id": "function.ncurses-def-prog-mode",
					"name": "ncurses_def_prog_mode",
					"description": "Saves terminals (program) mode"
				},
				"function.ncurses-def-shell-mode": {
					"tokens": [
						"ncurses_def_shell_mode",
						"ncursesdef_shell_mode"
					],
					"id": "function.ncurses-def-shell-mode",
					"name": "ncurses_def_shell_mode",
					"description": "Saves terminals (shell) mode"
				},
				"function.ncurses-define-key": {
					"tokens": [
						"ncurses_define_key",
						"ncursesdefine_key"
					],
					"id": "function.ncurses-define-key",
					"name": "ncurses_define_key",
					"description": "Define a keycode"
				},
				"function.ncurses-del-panel": {
					"tokens": [
						"ncurses_del_panel",
						"ncursesdel_panel"
					],
					"id": "function.ncurses-del-panel",
					"name": "ncurses_del_panel",
					"description": "Remove panel from the stack and delete it (but not the associated window)"
				},
				"function.ncurses-delay-output": {
					"tokens": [
						"ncurses_delay_output",
						"ncursesdelay_output"
					],
					"id": "function.ncurses-delay-output",
					"name": "ncurses_delay_output",
					"description": "Delay output on terminal using padding characters"
				},
				"function.ncurses-delch": {
					"tokens": [
						"ncurses_delch",
						"ncursesdelch"
					],
					"id": "function.ncurses-delch",
					"name": "ncurses_delch",
					"description": "Delete character at current position, move rest of line left"
				},
				"function.ncurses-deleteln": {
					"tokens": [
						"ncurses_deleteln",
						"ncursesdeleteln"
					],
					"id": "function.ncurses-deleteln",
					"name": "ncurses_deleteln",
					"description": "Delete line at current position, move rest of screen up"
				},
				"function.ncurses-delwin": {
					"tokens": [
						"ncurses_delwin",
						"ncursesdelwin"
					],
					"id": "function.ncurses-delwin",
					"name": "ncurses_delwin",
					"description": "Delete a ncurses window"
				},
				"function.ncurses-doupdate": {
					"tokens": [
						"ncurses_doupdate",
						"ncursesdoupdate"
					],
					"id": "function.ncurses-doupdate",
					"name": "ncurses_doupdate",
					"description": "Write all prepared refreshes to terminal"
				},
				"function.ncurses-echo": {
					"tokens": [
						"ncurses_echo",
						"ncursesecho"
					],
					"id": "function.ncurses-echo",
					"name": "ncurses_echo",
					"description": "Activate keyboard input echo"
				},
				"function.ncurses-echochar": {
					"tokens": [
						"ncurses_echochar",
						"ncursesechochar"
					],
					"id": "function.ncurses-echochar",
					"name": "ncurses_echochar",
					"description": "Single character output including refresh"
				},
				"function.ncurses-end": {
					"tokens": [
						"ncurses_end",
						"ncursesend"
					],
					"id": "function.ncurses-end",
					"name": "ncurses_end",
					"description": "Stop using ncurses, clean up the screen"
				},
				"function.ncurses-erase": {
					"tokens": [
						"ncurses_erase",
						"ncurseserase"
					],
					"id": "function.ncurses-erase",
					"name": "ncurses_erase",
					"description": "Erase terminal screen"
				},
				"function.ncurses-erasechar": {
					"tokens": [
						"ncurses_erasechar",
						"ncurseserasechar"
					],
					"id": "function.ncurses-erasechar",
					"name": "ncurses_erasechar",
					"description": "Returns current erase character"
				},
				"function.ncurses-filter": {
					"tokens": [
						"ncurses_filter",
						"ncursesfilter"
					],
					"id": "function.ncurses-filter",
					"name": "ncurses_filter",
					"description": "Set LINES for iniscr() and newterm() to 1"
				},
				"function.ncurses-flash": {
					"tokens": [
						"ncurses_flash",
						"ncursesflash"
					],
					"id": "function.ncurses-flash",
					"name": "ncurses_flash",
					"description": "Flash terminal screen (visual bell)"
				},
				"function.ncurses-flushinp": {
					"tokens": [
						"ncurses_flushinp",
						"ncursesflushinp"
					],
					"id": "function.ncurses-flushinp",
					"name": "ncurses_flushinp",
					"description": "Flush keyboard input buffer"
				},
				"function.ncurses-getch": {
					"tokens": [
						"ncurses_getch",
						"ncursesgetch"
					],
					"id": "function.ncurses-getch",
					"name": "ncurses_getch",
					"description": "Read a character from keyboard"
				},
				"function.ncurses-getmaxyx": {
					"tokens": [
						"ncurses_getmaxyx",
						"ncursesgetmaxyx"
					],
					"id": "function.ncurses-getmaxyx",
					"name": "ncurses_getmaxyx",
					"description": "Returns the size of a window"
				},
				"function.ncurses-getmouse": {
					"tokens": [
						"ncurses_getmouse",
						"ncursesgetmouse"
					],
					"id": "function.ncurses-getmouse",
					"name": "ncurses_getmouse",
					"description": "Reads mouse event"
				},
				"function.ncurses-getyx": {
					"tokens": [
						"ncurses_getyx",
						"ncursesgetyx"
					],
					"id": "function.ncurses-getyx",
					"name": "ncurses_getyx",
					"description": "Returns the current cursor position for a window"
				},
				"function.ncurses-halfdelay": {
					"tokens": [
						"ncurses_halfdelay",
						"ncurseshalfdelay"
					],
					"id": "function.ncurses-halfdelay",
					"name": "ncurses_halfdelay",
					"description": "Put terminal into halfdelay mode"
				},
				"function.ncurses-has-colors": {
					"tokens": [
						"ncurses_has_colors",
						"ncurseshas_colors"
					],
					"id": "function.ncurses-has-colors",
					"name": "ncurses_has_colors",
					"description": "Checks if terminal has color capabilities"
				},
				"function.ncurses-has-ic": {
					"tokens": [
						"ncurses_has_ic",
						"ncurseshas_ic"
					],
					"id": "function.ncurses-has-ic",
					"name": "ncurses_has_ic",
					"description": "Check for insert- and delete-capabilities"
				},
				"function.ncurses-has-il": {
					"tokens": [
						"ncurses_has_il",
						"ncurseshas_il"
					],
					"id": "function.ncurses-has-il",
					"name": "ncurses_has_il",
					"description": "Check for line insert- and delete-capabilities"
				},
				"function.ncurses-has-key": {
					"tokens": [
						"ncurses_has_key",
						"ncurseshas_key"
					],
					"id": "function.ncurses-has-key",
					"name": "ncurses_has_key",
					"description": "Check for presence of a function key on terminal keyboard"
				},
				"function.ncurses-hide-panel": {
					"tokens": [
						"ncurses_hide_panel",
						"ncurseshide_panel"
					],
					"id": "function.ncurses-hide-panel",
					"name": "ncurses_hide_panel",
					"description": "Remove panel from the stack, making it invisible"
				},
				"function.ncurses-hline": {
					"tokens": [
						"ncurses_hline",
						"ncurseshline"
					],
					"id": "function.ncurses-hline",
					"name": "ncurses_hline",
					"description": "Draw a horizontal line at current position using an attributed character and max. n characters long"
				},
				"function.ncurses-inch": {
					"tokens": [
						"ncurses_inch",
						"ncursesinch"
					],
					"id": "function.ncurses-inch",
					"name": "ncurses_inch",
					"description": "Get character and attribute at current position"
				},
				"function.ncurses-init-color": {
					"tokens": [
						"ncurses_init_color",
						"ncursesinit_color"
					],
					"id": "function.ncurses-init-color",
					"name": "ncurses_init_color",
					"description": "Define a terminal color"
				},
				"function.ncurses-init-pair": {
					"tokens": [
						"ncurses_init_pair",
						"ncursesinit_pair"
					],
					"id": "function.ncurses-init-pair",
					"name": "ncurses_init_pair",
					"description": "Define a color pair"
				},
				"function.ncurses-init": {
					"tokens": [
						"ncurses_init",
						"ncursesinit"
					],
					"id": "function.ncurses-init",
					"name": "ncurses_init",
					"description": "Initialize ncurses"
				},
				"function.ncurses-insch": {
					"tokens": [
						"ncurses_insch",
						"ncursesinsch"
					],
					"id": "function.ncurses-insch",
					"name": "ncurses_insch",
					"description": "Insert character moving rest of line including character at current position"
				},
				"function.ncurses-insdelln": {
					"tokens": [
						"ncurses_insdelln",
						"ncursesinsdelln"
					],
					"id": "function.ncurses-insdelln",
					"name": "ncurses_insdelln",
					"description": "Insert lines before current line scrolling down (negative numbers delete and scroll up)"
				},
				"function.ncurses-insertln": {
					"tokens": [
						"ncurses_insertln",
						"ncursesinsertln"
					],
					"id": "function.ncurses-insertln",
					"name": "ncurses_insertln",
					"description": "Insert a line, move rest of screen down"
				},
				"function.ncurses-insstr": {
					"tokens": [
						"ncurses_insstr",
						"ncursesinsstr"
					],
					"id": "function.ncurses-insstr",
					"name": "ncurses_insstr",
					"description": "Insert string at current position, moving rest of line right"
				},
				"function.ncurses-instr": {
					"tokens": [
						"ncurses_instr",
						"ncursesinstr"
					],
					"id": "function.ncurses-instr",
					"name": "ncurses_instr",
					"description": "Reads string from terminal screen"
				},
				"function.ncurses-isendwin": {
					"tokens": [
						"ncurses_isendwin",
						"ncursesisendwin"
					],
					"id": "function.ncurses-isendwin",
					"name": "ncurses_isendwin",
					"description": "Ncurses is in endwin mode, normal screen output may be performed"
				},
				"function.ncurses-keyok": {
					"tokens": [
						"ncurses_keyok",
						"ncurseskeyok"
					],
					"id": "function.ncurses-keyok",
					"name": "ncurses_keyok",
					"description": "Enable or disable a keycode"
				},
				"function.ncurses-keypad": {
					"tokens": [
						"ncurses_keypad",
						"ncurseskeypad"
					],
					"id": "function.ncurses-keypad",
					"name": "ncurses_keypad",
					"description": "Turns keypad on or off"
				},
				"function.ncurses-killchar": {
					"tokens": [
						"ncurses_killchar",
						"ncurseskillchar"
					],
					"id": "function.ncurses-killchar",
					"name": "ncurses_killchar",
					"description": "Returns current line kill character"
				},
				"function.ncurses-longname": {
					"tokens": [
						"ncurses_longname",
						"ncurseslongname"
					],
					"id": "function.ncurses-longname",
					"name": "ncurses_longname",
					"description": "Returns terminals description"
				},
				"function.ncurses-meta": {
					"tokens": [
						"ncurses_meta",
						"ncursesmeta"
					],
					"id": "function.ncurses-meta",
					"name": "ncurses_meta",
					"description": "Enables/Disable 8-bit meta key information"
				},
				"function.ncurses-mouse-trafo": {
					"tokens": [
						"ncurses_mouse_trafo",
						"ncursesmouse_trafo"
					],
					"id": "function.ncurses-mouse-trafo",
					"name": "ncurses_mouse_trafo",
					"description": "Transforms coordinates"
				},
				"function.ncurses-mouseinterval": {
					"tokens": [
						"ncurses_mouseinterval",
						"ncursesmouseinterval"
					],
					"id": "function.ncurses-mouseinterval",
					"name": "ncurses_mouseinterval",
					"description": "Set timeout for mouse button clicks"
				},
				"function.ncurses-mousemask": {
					"tokens": [
						"ncurses_mousemask",
						"ncursesmousemask"
					],
					"id": "function.ncurses-mousemask",
					"name": "ncurses_mousemask",
					"description": "Sets mouse options"
				},
				"function.ncurses-move-panel": {
					"tokens": [
						"ncurses_move_panel",
						"ncursesmove_panel"
					],
					"id": "function.ncurses-move-panel",
					"name": "ncurses_move_panel",
					"description": "Moves a panel so that its upper-left corner is at [startx, starty]"
				},
				"function.ncurses-move": {
					"tokens": [
						"ncurses_move",
						"ncursesmove"
					],
					"id": "function.ncurses-move",
					"name": "ncurses_move",
					"description": "Move output position"
				},
				"function.ncurses-mvaddch": {
					"tokens": [
						"ncurses_mvaddch",
						"ncursesmvaddch"
					],
					"id": "function.ncurses-mvaddch",
					"name": "ncurses_mvaddch",
					"description": "Move current position and add character"
				},
				"function.ncurses-mvaddchnstr": {
					"tokens": [
						"ncurses_mvaddchnstr",
						"ncursesmvaddchnstr"
					],
					"id": "function.ncurses-mvaddchnstr",
					"name": "ncurses_mvaddchnstr",
					"description": "Move position and add attributed string with specified length"
				},
				"function.ncurses-mvaddchstr": {
					"tokens": [
						"ncurses_mvaddchstr",
						"ncursesmvaddchstr"
					],
					"id": "function.ncurses-mvaddchstr",
					"name": "ncurses_mvaddchstr",
					"description": "Move position and add attributed string"
				},
				"function.ncurses-mvaddnstr": {
					"tokens": [
						"ncurses_mvaddnstr",
						"ncursesmvaddnstr"
					],
					"id": "function.ncurses-mvaddnstr",
					"name": "ncurses_mvaddnstr",
					"description": "Move position and add string with specified length"
				},
				"function.ncurses-mvaddstr": {
					"tokens": [
						"ncurses_mvaddstr",
						"ncursesmvaddstr"
					],
					"id": "function.ncurses-mvaddstr",
					"name": "ncurses_mvaddstr",
					"description": "Move position and add string"
				},
				"function.ncurses-mvcur": {
					"tokens": [
						"ncurses_mvcur",
						"ncursesmvcur"
					],
					"id": "function.ncurses-mvcur",
					"name": "ncurses_mvcur",
					"description": "Move cursor immediately"
				},
				"function.ncurses-mvdelch": {
					"tokens": [
						"ncurses_mvdelch",
						"ncursesmvdelch"
					],
					"id": "function.ncurses-mvdelch",
					"name": "ncurses_mvdelch",
					"description": "Move position and delete character, shift rest of line left"
				},
				"function.ncurses-mvgetch": {
					"tokens": [
						"ncurses_mvgetch",
						"ncursesmvgetch"
					],
					"id": "function.ncurses-mvgetch",
					"name": "ncurses_mvgetch",
					"description": "Move position and get character at new position"
				},
				"function.ncurses-mvhline": {
					"tokens": [
						"ncurses_mvhline",
						"ncursesmvhline"
					],
					"id": "function.ncurses-mvhline",
					"name": "ncurses_mvhline",
					"description": "Set new position and draw a horizontal line using an attributed character and max. n characters long"
				},
				"function.ncurses-mvinch": {
					"tokens": [
						"ncurses_mvinch",
						"ncursesmvinch"
					],
					"id": "function.ncurses-mvinch",
					"name": "ncurses_mvinch",
					"description": "Move position and get attributed character at new position"
				},
				"function.ncurses-mvvline": {
					"tokens": [
						"ncurses_mvvline",
						"ncursesmvvline"
					],
					"id": "function.ncurses-mvvline",
					"name": "ncurses_mvvline",
					"description": "Set new position and draw a vertical line using an attributed character and max. n characters long"
				},
				"function.ncurses-mvwaddstr": {
					"tokens": [
						"ncurses_mvwaddstr",
						"ncursesmvwaddstr"
					],
					"id": "function.ncurses-mvwaddstr",
					"name": "ncurses_mvwaddstr",
					"description": "Add string at new position in window"
				},
				"function.ncurses-napms": {
					"tokens": [
						"ncurses_napms",
						"ncursesnapms"
					],
					"id": "function.ncurses-napms",
					"name": "ncurses_napms",
					"description": "Sleep"
				},
				"function.ncurses-new-panel": {
					"tokens": [
						"ncurses_new_panel",
						"ncursesnew_panel"
					],
					"id": "function.ncurses-new-panel",
					"name": "ncurses_new_panel",
					"description": "Create a new panel and associate it with window"
				},
				"function.ncurses-newpad": {
					"tokens": [
						"ncurses_newpad",
						"ncursesnewpad"
					],
					"id": "function.ncurses-newpad",
					"name": "ncurses_newpad",
					"description": "Creates a new pad (window)"
				},
				"function.ncurses-newwin": {
					"tokens": [
						"ncurses_newwin",
						"ncursesnewwin"
					],
					"id": "function.ncurses-newwin",
					"name": "ncurses_newwin",
					"description": "Create a new window"
				},
				"function.ncurses-nl": {
					"tokens": [
						"ncurses_nl",
						"ncursesnl"
					],
					"id": "function.ncurses-nl",
					"name": "ncurses_nl",
					"description": "Translate newline and carriage return / line feed"
				},
				"function.ncurses-nocbreak": {
					"tokens": [
						"ncurses_nocbreak",
						"ncursesnocbreak"
					],
					"id": "function.ncurses-nocbreak",
					"name": "ncurses_nocbreak",
					"description": "Switch terminal to cooked mode"
				},
				"function.ncurses-noecho": {
					"tokens": [
						"ncurses_noecho",
						"ncursesnoecho"
					],
					"id": "function.ncurses-noecho",
					"name": "ncurses_noecho",
					"description": "Switch off keyboard input echo"
				},
				"function.ncurses-nonl": {
					"tokens": [
						"ncurses_nonl",
						"ncursesnonl"
					],
					"id": "function.ncurses-nonl",
					"name": "ncurses_nonl",
					"description": "Do not translate newline and carriage return / line feed"
				},
				"function.ncurses-noqiflush": {
					"tokens": [
						"ncurses_noqiflush",
						"ncursesnoqiflush"
					],
					"id": "function.ncurses-noqiflush",
					"name": "ncurses_noqiflush",
					"description": "Do not flush on signal characters"
				},
				"function.ncurses-noraw": {
					"tokens": [
						"ncurses_noraw",
						"ncursesnoraw"
					],
					"id": "function.ncurses-noraw",
					"name": "ncurses_noraw",
					"description": "Switch terminal out of raw mode"
				},
				"function.ncurses-pair-content": {
					"tokens": [
						"ncurses_pair_content",
						"ncursespair_content"
					],
					"id": "function.ncurses-pair-content",
					"name": "ncurses_pair_content",
					"description": "Retrieves foreground and background colors of a color pair"
				},
				"function.ncurses-panel-above": {
					"tokens": [
						"ncurses_panel_above",
						"ncursespanel_above"
					],
					"id": "function.ncurses-panel-above",
					"name": "ncurses_panel_above",
					"description": "Returns the panel above panel"
				},
				"function.ncurses-panel-below": {
					"tokens": [
						"ncurses_panel_below",
						"ncursespanel_below"
					],
					"id": "function.ncurses-panel-below",
					"name": "ncurses_panel_below",
					"description": "Returns the panel below panel"
				},
				"function.ncurses-panel-window": {
					"tokens": [
						"ncurses_panel_window",
						"ncursespanel_window"
					],
					"id": "function.ncurses-panel-window",
					"name": "ncurses_panel_window",
					"description": "Returns the window associated with panel"
				},
				"function.ncurses-pnoutrefresh": {
					"tokens": [
						"ncurses_pnoutrefresh",
						"ncursespnoutrefresh"
					],
					"id": "function.ncurses-pnoutrefresh",
					"name": "ncurses_pnoutrefresh",
					"description": "Copies a region from a pad into the virtual screen"
				},
				"function.ncurses-prefresh": {
					"tokens": [
						"ncurses_prefresh",
						"ncursesprefresh"
					],
					"id": "function.ncurses-prefresh",
					"name": "ncurses_prefresh",
					"description": "Copies a region from a pad into the virtual screen"
				},
				"function.ncurses-putp": {
					"tokens": [
						"ncurses_putp",
						"ncursesputp"
					],
					"id": "function.ncurses-putp",
					"name": "ncurses_putp",
					"description": "Apply padding information to the string and output it"
				},
				"function.ncurses-qiflush": {
					"tokens": [
						"ncurses_qiflush",
						"ncursesqiflush"
					],
					"id": "function.ncurses-qiflush",
					"name": "ncurses_qiflush",
					"description": "Flush on signal characters"
				},
				"function.ncurses-raw": {
					"tokens": [
						"ncurses_raw",
						"ncursesraw"
					],
					"id": "function.ncurses-raw",
					"name": "ncurses_raw",
					"description": "Switch terminal into raw mode"
				},
				"function.ncurses-refresh": {
					"tokens": [
						"ncurses_refresh",
						"ncursesrefresh"
					],
					"id": "function.ncurses-refresh",
					"name": "ncurses_refresh",
					"description": "Refresh screen"
				},
				"function.ncurses-replace-panel": {
					"tokens": [
						"ncurses_replace_panel",
						"ncursesreplace_panel"
					],
					"id": "function.ncurses-replace-panel",
					"name": "ncurses_replace_panel",
					"description": "Replaces the window associated with panel"
				},
				"function.ncurses-reset-prog-mode": {
					"tokens": [
						"ncurses_reset_prog_mode",
						"ncursesreset_prog_mode"
					],
					"id": "function.ncurses-reset-prog-mode",
					"name": "ncurses_reset_prog_mode",
					"description": "Resets the prog mode saved by def_prog_mode"
				},
				"function.ncurses-reset-shell-mode": {
					"tokens": [
						"ncurses_reset_shell_mode",
						"ncursesreset_shell_mode"
					],
					"id": "function.ncurses-reset-shell-mode",
					"name": "ncurses_reset_shell_mode",
					"description": "Resets the shell mode saved by def_shell_mode"
				},
				"function.ncurses-resetty": {
					"tokens": [
						"ncurses_resetty",
						"ncursesresetty"
					],
					"id": "function.ncurses-resetty",
					"name": "ncurses_resetty",
					"description": "Restores saved terminal state"
				},
				"function.ncurses-savetty": {
					"tokens": [
						"ncurses_savetty",
						"ncursessavetty"
					],
					"id": "function.ncurses-savetty",
					"name": "ncurses_savetty",
					"description": "Saves terminal state"
				},
				"function.ncurses-scr-dump": {
					"tokens": [
						"ncurses_scr_dump",
						"ncursesscr_dump"
					],
					"id": "function.ncurses-scr-dump",
					"name": "ncurses_scr_dump",
					"description": "Dump screen content to file"
				},
				"function.ncurses-scr-init": {
					"tokens": [
						"ncurses_scr_init",
						"ncursesscr_init"
					],
					"id": "function.ncurses-scr-init",
					"name": "ncurses_scr_init",
					"description": "Initialize screen from file dump"
				},
				"function.ncurses-scr-restore": {
					"tokens": [
						"ncurses_scr_restore",
						"ncursesscr_restore"
					],
					"id": "function.ncurses-scr-restore",
					"name": "ncurses_scr_restore",
					"description": "Restore screen from file dump"
				},
				"function.ncurses-scr-set": {
					"tokens": [
						"ncurses_scr_set",
						"ncursesscr_set"
					],
					"id": "function.ncurses-scr-set",
					"name": "ncurses_scr_set",
					"description": "Inherit screen from file dump"
				},
				"function.ncurses-scrl": {
					"tokens": [
						"ncurses_scrl",
						"ncursesscrl"
					],
					"id": "function.ncurses-scrl",
					"name": "ncurses_scrl",
					"description": "Scroll window content up or down without changing current position"
				},
				"function.ncurses-show-panel": {
					"tokens": [
						"ncurses_show_panel",
						"ncursesshow_panel"
					],
					"id": "function.ncurses-show-panel",
					"name": "ncurses_show_panel",
					"description": "Places an invisible panel on top of the stack, making it visible"
				},
				"function.ncurses-slk-attr": {
					"tokens": [
						"ncurses_slk_attr",
						"ncursesslk_attr"
					],
					"id": "function.ncurses-slk-attr",
					"name": "ncurses_slk_attr",
					"description": "Returns current soft label key attribute"
				},
				"function.ncurses-slk-attroff": {
					"tokens": [
						"ncurses_slk_attroff",
						"ncursesslk_attroff"
					],
					"id": "function.ncurses-slk-attroff",
					"name": "ncurses_slk_attroff",
					"description": "Turn off the given attributes for soft function-key labels"
				},
				"function.ncurses-slk-attron": {
					"tokens": [
						"ncurses_slk_attron",
						"ncursesslk_attron"
					],
					"id": "function.ncurses-slk-attron",
					"name": "ncurses_slk_attron",
					"description": "Turn on the given attributes for soft function-key labels"
				},
				"function.ncurses-slk-attrset": {
					"tokens": [
						"ncurses_slk_attrset",
						"ncursesslk_attrset"
					],
					"id": "function.ncurses-slk-attrset",
					"name": "ncurses_slk_attrset",
					"description": "Set given attributes for soft function-key labels"
				},
				"function.ncurses-slk-clear": {
					"tokens": [
						"ncurses_slk_clear",
						"ncursesslk_clear"
					],
					"id": "function.ncurses-slk-clear",
					"name": "ncurses_slk_clear",
					"description": "Clears soft labels from screen"
				},
				"function.ncurses-slk-color": {
					"tokens": [
						"ncurses_slk_color",
						"ncursesslk_color"
					],
					"id": "function.ncurses-slk-color",
					"name": "ncurses_slk_color",
					"description": "Sets color for soft label keys"
				},
				"function.ncurses-slk-init": {
					"tokens": [
						"ncurses_slk_init",
						"ncursesslk_init"
					],
					"id": "function.ncurses-slk-init",
					"name": "ncurses_slk_init",
					"description": "Initializes soft label key functions"
				},
				"function.ncurses-slk-noutrefresh": {
					"tokens": [
						"ncurses_slk_noutrefresh",
						"ncursesslk_noutrefresh"
					],
					"id": "function.ncurses-slk-noutrefresh",
					"name": "ncurses_slk_noutrefresh",
					"description": "Copies soft label keys to virtual screen"
				},
				"function.ncurses-slk-refresh": {
					"tokens": [
						"ncurses_slk_refresh",
						"ncursesslk_refresh"
					],
					"id": "function.ncurses-slk-refresh",
					"name": "ncurses_slk_refresh",
					"description": "Copies soft label keys to screen"
				},
				"function.ncurses-slk-restore": {
					"tokens": [
						"ncurses_slk_restore",
						"ncursesslk_restore"
					],
					"id": "function.ncurses-slk-restore",
					"name": "ncurses_slk_restore",
					"description": "Restores soft label keys"
				},
				"function.ncurses-slk-set": {
					"tokens": [
						"ncurses_slk_set",
						"ncursesslk_set"
					],
					"id": "function.ncurses-slk-set",
					"name": "ncurses_slk_set",
					"description": "Sets function key labels"
				},
				"function.ncurses-slk-touch": {
					"tokens": [
						"ncurses_slk_touch",
						"ncursesslk_touch"
					],
					"id": "function.ncurses-slk-touch",
					"name": "ncurses_slk_touch",
					"description": "Forces output when ncurses_slk_noutrefresh is performed"
				},
				"function.ncurses-standend": {
					"tokens": [
						"ncurses_standend",
						"ncursesstandend"
					],
					"id": "function.ncurses-standend",
					"name": "ncurses_standend",
					"description": "Stop using 'standout' attribute"
				},
				"function.ncurses-standout": {
					"tokens": [
						"ncurses_standout",
						"ncursesstandout"
					],
					"id": "function.ncurses-standout",
					"name": "ncurses_standout",
					"description": "Start using 'standout' attribute"
				},
				"function.ncurses-start-color": {
					"tokens": [
						"ncurses_start_color",
						"ncursesstart_color"
					],
					"id": "function.ncurses-start-color",
					"name": "ncurses_start_color",
					"description": "Initializes color functionality"
				},
				"function.ncurses-termattrs": {
					"tokens": [
						"ncurses_termattrs",
						"ncursestermattrs"
					],
					"id": "function.ncurses-termattrs",
					"name": "ncurses_termattrs",
					"description": "Returns a logical OR of all attribute flags supported by terminal"
				},
				"function.ncurses-termname": {
					"tokens": [
						"ncurses_termname",
						"ncursestermname"
					],
					"id": "function.ncurses-termname",
					"name": "ncurses_termname",
					"description": "Returns terminals (short)-name"
				},
				"function.ncurses-timeout": {
					"tokens": [
						"ncurses_timeout",
						"ncursestimeout"
					],
					"id": "function.ncurses-timeout",
					"name": "ncurses_timeout",
					"description": "Set timeout for special key sequences"
				},
				"function.ncurses-top-panel": {
					"tokens": [
						"ncurses_top_panel",
						"ncursestop_panel"
					],
					"id": "function.ncurses-top-panel",
					"name": "ncurses_top_panel",
					"description": "Moves a visible panel to the top of the stack"
				},
				"function.ncurses-typeahead": {
					"tokens": [
						"ncurses_typeahead",
						"ncursestypeahead"
					],
					"id": "function.ncurses-typeahead",
					"name": "ncurses_typeahead",
					"description": "Specify different filedescriptor for typeahead checking"
				},
				"function.ncurses-ungetch": {
					"tokens": [
						"ncurses_ungetch",
						"ncursesungetch"
					],
					"id": "function.ncurses-ungetch",
					"name": "ncurses_ungetch",
					"description": "Put a character back into the input stream"
				},
				"function.ncurses-ungetmouse": {
					"tokens": [
						"ncurses_ungetmouse",
						"ncursesungetmouse"
					],
					"id": "function.ncurses-ungetmouse",
					"name": "ncurses_ungetmouse",
					"description": "Pushes mouse event to queue"
				},
				"function.ncurses-update-panels": {
					"tokens": [
						"ncurses_update_panels",
						"ncursesupdate_panels"
					],
					"id": "function.ncurses-update-panels",
					"name": "ncurses_update_panels",
					"description": "Refreshes the virtual screen to reflect the relations between panels in the stack"
				},
				"function.ncurses-use-default-colors": {
					"tokens": [
						"ncurses_use_default_colors",
						"ncursesuse_default_colors"
					],
					"id": "function.ncurses-use-default-colors",
					"name": "ncurses_use_default_colors",
					"description": "Assign terminal default colors to color id -1"
				},
				"function.ncurses-use-env": {
					"tokens": [
						"ncurses_use_env",
						"ncursesuse_env"
					],
					"id": "function.ncurses-use-env",
					"name": "ncurses_use_env",
					"description": "Control use of environment information about terminal size"
				},
				"function.ncurses-use-extended-names": {
					"tokens": [
						"ncurses_use_extended_names",
						"ncursesuse_extended_names"
					],
					"id": "function.ncurses-use-extended-names",
					"name": "ncurses_use_extended_names",
					"description": "Control use of extended names in terminfo descriptions"
				},
				"function.ncurses-vidattr": {
					"tokens": [
						"ncurses_vidattr",
						"ncursesvidattr"
					],
					"id": "function.ncurses-vidattr",
					"name": "ncurses_vidattr",
					"description": "Display the string on the terminal in the video attribute mode"
				},
				"function.ncurses-vline": {
					"tokens": [
						"ncurses_vline",
						"ncursesvline"
					],
					"id": "function.ncurses-vline",
					"name": "ncurses_vline",
					"description": "Draw a vertical line at current position using an attributed character and max. n characters long"
				},
				"function.ncurses-waddch": {
					"tokens": [
						"ncurses_waddch",
						"ncurseswaddch"
					],
					"id": "function.ncurses-waddch",
					"name": "ncurses_waddch",
					"description": "Adds character at current position in a window and advance cursor"
				},
				"function.ncurses-waddstr": {
					"tokens": [
						"ncurses_waddstr",
						"ncurseswaddstr"
					],
					"id": "function.ncurses-waddstr",
					"name": "ncurses_waddstr",
					"description": "Outputs text at current postion in window"
				},
				"function.ncurses-wattroff": {
					"tokens": [
						"ncurses_wattroff",
						"ncurseswattroff"
					],
					"id": "function.ncurses-wattroff",
					"name": "ncurses_wattroff",
					"description": "Turns off attributes for a window"
				},
				"function.ncurses-wattron": {
					"tokens": [
						"ncurses_wattron",
						"ncurseswattron"
					],
					"id": "function.ncurses-wattron",
					"name": "ncurses_wattron",
					"description": "Turns on attributes for a window"
				},
				"function.ncurses-wattrset": {
					"tokens": [
						"ncurses_wattrset",
						"ncurseswattrset"
					],
					"id": "function.ncurses-wattrset",
					"name": "ncurses_wattrset",
					"description": "Set the attributes for a window"
				},
				"function.ncurses-wborder": {
					"tokens": [
						"ncurses_wborder",
						"ncurseswborder"
					],
					"id": "function.ncurses-wborder",
					"name": "ncurses_wborder",
					"description": "Draws a border around the window using attributed characters"
				},
				"function.ncurses-wclear": {
					"tokens": [
						"ncurses_wclear",
						"ncurseswclear"
					],
					"id": "function.ncurses-wclear",
					"name": "ncurses_wclear",
					"description": "Clears window"
				},
				"function.ncurses-wcolor-set": {
					"tokens": [
						"ncurses_wcolor_set",
						"ncurseswcolor_set"
					],
					"id": "function.ncurses-wcolor-set",
					"name": "ncurses_wcolor_set",
					"description": "Sets windows color pairings"
				},
				"function.ncurses-werase": {
					"tokens": [
						"ncurses_werase",
						"ncurseswerase"
					],
					"id": "function.ncurses-werase",
					"name": "ncurses_werase",
					"description": "Erase window contents"
				},
				"function.ncurses-wgetch": {
					"tokens": [
						"ncurses_wgetch",
						"ncurseswgetch"
					],
					"id": "function.ncurses-wgetch",
					"name": "ncurses_wgetch",
					"description": "Reads a character from keyboard (window)"
				},
				"function.ncurses-whline": {
					"tokens": [
						"ncurses_whline",
						"ncurseswhline"
					],
					"id": "function.ncurses-whline",
					"name": "ncurses_whline",
					"description": "Draws a horizontal line in a window at current position using an attributed character and max. n characters long"
				},
				"function.ncurses-wmouse-trafo": {
					"tokens": [
						"ncurses_wmouse_trafo",
						"ncurseswmouse_trafo"
					],
					"id": "function.ncurses-wmouse-trafo",
					"name": "ncurses_wmouse_trafo",
					"description": "Transforms window/stdscr coordinates"
				},
				"function.ncurses-wmove": {
					"tokens": [
						"ncurses_wmove",
						"ncurseswmove"
					],
					"id": "function.ncurses-wmove",
					"name": "ncurses_wmove",
					"description": "Moves windows output position"
				},
				"function.ncurses-wnoutrefresh": {
					"tokens": [
						"ncurses_wnoutrefresh",
						"ncurseswnoutrefresh"
					],
					"id": "function.ncurses-wnoutrefresh",
					"name": "ncurses_wnoutrefresh",
					"description": "Copies window to virtual screen"
				},
				"function.ncurses-wrefresh": {
					"tokens": [
						"ncurses_wrefresh",
						"ncurseswrefresh"
					],
					"id": "function.ncurses-wrefresh",
					"name": "ncurses_wrefresh",
					"description": "Refresh window on terminal screen"
				},
				"function.ncurses-wstandend": {
					"tokens": [
						"ncurses_wstandend",
						"ncurseswstandend"
					],
					"id": "function.ncurses-wstandend",
					"name": "ncurses_wstandend",
					"description": "End standout mode for a window"
				},
				"function.ncurses-wstandout": {
					"tokens": [
						"ncurses_wstandout",
						"ncurseswstandout"
					],
					"id": "function.ncurses-wstandout",
					"name": "ncurses_wstandout",
					"description": "Enter standout mode for a window"
				},
				"function.ncurses-wvline": {
					"tokens": [
						"ncurses_wvline",
						"ncurseswvline"
					],
					"id": "function.ncurses-wvline",
					"name": "ncurses_wvline",
					"description": "Draws a vertical line in a window at current position using an attributed character and max. n characters long"
				},
				"function.newt-bell": {
					"tokens": [
						"newt_bell",
						"newtbell"
					],
					"id": "function.newt-bell",
					"name": "newt_bell",
					"description": "Send a beep to the terminal"
				},
				"function.newt-button-bar": {
					"tokens": [
						"newt_button_bar",
						"newtbutton_bar"
					],
					"id": "function.newt-button-bar",
					"name": "newt_button_bar",
					"description": "This function returns a grid containing the buttons created."
				},
				"function.newt-button": {
					"tokens": [
						"newt_button",
						"newtbutton"
					],
					"id": "function.newt-button",
					"name": "newt_button",
					"description": "Create a new button"
				},
				"function.newt-centered-window": {
					"tokens": [
						"newt_centered_window",
						"newtcentered_window"
					],
					"id": "function.newt-centered-window",
					"name": "newt_centered_window",
					"description": "Open a centered window of the specified size"
				},
				"function.newt-checkbox-get-value": {
					"tokens": [
						"newt_checkbox_get_value",
						"newtcheckbox_get_value"
					],
					"id": "function.newt-checkbox-get-value",
					"name": "newt_checkbox_get_value",
					"description": "Retreives value of checkox resource"
				},
				"function.newt-checkbox-set-flags": {
					"tokens": [
						"newt_checkbox_set_flags",
						"newtcheckbox_set_flags"
					],
					"id": "function.newt-checkbox-set-flags",
					"name": "newt_checkbox_set_flags",
					"description": "Configures checkbox resource"
				},
				"function.newt-checkbox-set-value": {
					"tokens": [
						"newt_checkbox_set_value",
						"newtcheckbox_set_value"
					],
					"id": "function.newt-checkbox-set-value",
					"name": "newt_checkbox_set_value",
					"description": "Sets the value of the checkbox"
				},
				"function.newt-checkbox-tree-add-item": {
					"tokens": [
						"newt_checkbox_tree_add_item",
						"newtcheckbox_tree_add_item"
					],
					"id": "function.newt-checkbox-tree-add-item",
					"name": "newt_checkbox_tree_add_item",
					"description": "Adds new item to the checkbox tree"
				},
				"function.newt-checkbox-tree-find-item": {
					"tokens": [
						"newt_checkbox_tree_find_item",
						"newtcheckbox_tree_find_item"
					],
					"id": "function.newt-checkbox-tree-find-item",
					"name": "newt_checkbox_tree_find_item",
					"description": "Finds an item in the checkbox tree"
				},
				"function.newt-checkbox-tree-get-current": {
					"tokens": [
						"newt_checkbox_tree_get_current",
						"newtcheckbox_tree_get_current"
					],
					"id": "function.newt-checkbox-tree-get-current",
					"name": "newt_checkbox_tree_get_current",
					"description": "Returns checkbox tree selected item"
				},
				"function.newt-checkbox-tree-get-entry-value": {
					"tokens": [
						"newt_checkbox_tree_get_entry_value",
						"newtcheckbox_tree_get_entry_value"
					],
					"id": "function.newt-checkbox-tree-get-entry-value",
					"name": "newt_checkbox_tree_get_entry_value",
					"description": "Description"
				},
				"function.newt-checkbox-tree-get-multi-selection": {
					"tokens": [
						"newt_checkbox_tree_get_multi_selection",
						"newtcheckbox_tree_get_multi_selection"
					],
					"id": "function.newt-checkbox-tree-get-multi-selection",
					"name": "newt_checkbox_tree_get_multi_selection",
					"description": "Description"
				},
				"function.newt-checkbox-tree-get-selection": {
					"tokens": [
						"newt_checkbox_tree_get_selection",
						"newtcheckbox_tree_get_selection"
					],
					"id": "function.newt-checkbox-tree-get-selection",
					"name": "newt_checkbox_tree_get_selection",
					"description": "Description"
				},
				"function.newt-checkbox-tree-multi": {
					"tokens": [
						"newt_checkbox_tree_multi",
						"newtcheckbox_tree_multi"
					],
					"id": "function.newt-checkbox-tree-multi",
					"name": "newt_checkbox_tree_multi",
					"description": "Description"
				},
				"function.newt-checkbox-tree-set-current": {
					"tokens": [
						"newt_checkbox_tree_set_current",
						"newtcheckbox_tree_set_current"
					],
					"id": "function.newt-checkbox-tree-set-current",
					"name": "newt_checkbox_tree_set_current",
					"description": "Description"
				},
				"function.newt-checkbox-tree-set-entry-value": {
					"tokens": [
						"newt_checkbox_tree_set_entry_value",
						"newtcheckbox_tree_set_entry_value"
					],
					"id": "function.newt-checkbox-tree-set-entry-value",
					"name": "newt_checkbox_tree_set_entry_value",
					"description": "Description"
				},
				"function.newt-checkbox-tree-set-entry": {
					"tokens": [
						"newt_checkbox_tree_set_entry",
						"newtcheckbox_tree_set_entry"
					],
					"id": "function.newt-checkbox-tree-set-entry",
					"name": "newt_checkbox_tree_set_entry",
					"description": "Description"
				},
				"function.newt-checkbox-tree-set-width": {
					"tokens": [
						"newt_checkbox_tree_set_width",
						"newtcheckbox_tree_set_width"
					],
					"id": "function.newt-checkbox-tree-set-width",
					"name": "newt_checkbox_tree_set_width",
					"description": "Description"
				},
				"function.newt-checkbox-tree": {
					"tokens": [
						"newt_checkbox_tree",
						"newtcheckbox_tree"
					],
					"id": "function.newt-checkbox-tree",
					"name": "newt_checkbox_tree",
					"description": "Description"
				},
				"function.newt-checkbox": {
					"tokens": [
						"newt_checkbox",
						"newtcheckbox"
					],
					"id": "function.newt-checkbox",
					"name": "newt_checkbox",
					"description": "Description"
				},
				"function.newt-clear-key-buffer": {
					"tokens": [
						"newt_clear_key_buffer",
						"newtclear_key_buffer"
					],
					"id": "function.newt-clear-key-buffer",
					"name": "newt_clear_key_buffer",
					"description": "Discards the contents of the terminal's input buffer without\n  waiting for additional input"
				},
				"function.newt-cls": {
					"tokens": [
						"newt_cls",
						"newtcls"
					],
					"id": "function.newt-cls",
					"name": "newt_cls",
					"description": "Description"
				},
				"function.newt-compact-button": {
					"tokens": [
						"newt_compact_button",
						"newtcompact_button"
					],
					"id": "function.newt-compact-button",
					"name": "newt_compact_button",
					"description": "Description"
				},
				"function.newt-component-add-callback": {
					"tokens": [
						"newt_component_add_callback",
						"newtcomponent_add_callback"
					],
					"id": "function.newt-component-add-callback",
					"name": "newt_component_add_callback",
					"description": "Description"
				},
				"function.newt-component-takes-focus": {
					"tokens": [
						"newt_component_takes_focus",
						"newtcomponent_takes_focus"
					],
					"id": "function.newt-component-takes-focus",
					"name": "newt_component_takes_focus",
					"description": "Description"
				},
				"function.newt-create-grid": {
					"tokens": [
						"newt_create_grid",
						"newtcreate_grid"
					],
					"id": "function.newt-create-grid",
					"name": "newt_create_grid",
					"description": "Description"
				},
				"function.newt-cursor-off": {
					"tokens": [
						"newt_cursor_off",
						"newtcursor_off"
					],
					"id": "function.newt-cursor-off",
					"name": "newt_cursor_off",
					"description": "Description"
				},
				"function.newt-cursor-on": {
					"tokens": [
						"newt_cursor_on",
						"newtcursor_on"
					],
					"id": "function.newt-cursor-on",
					"name": "newt_cursor_on",
					"description": "Description"
				},
				"function.newt-delay": {
					"tokens": [
						"newt_delay",
						"newtdelay"
					],
					"id": "function.newt-delay",
					"name": "newt_delay",
					"description": "Description"
				},
				"function.newt-draw-form": {
					"tokens": [
						"newt_draw_form",
						"newtdraw_form"
					],
					"id": "function.newt-draw-form",
					"name": "newt_draw_form",
					"description": "Description"
				},
				"function.newt-draw-root-text": {
					"tokens": [
						"newt_draw_root_text",
						"newtdraw_root_text"
					],
					"id": "function.newt-draw-root-text",
					"name": "newt_draw_root_text",
					"description": "Displays the string text at the position indicated"
				},
				"function.newt-entry-get-value": {
					"tokens": [
						"newt_entry_get_value",
						"newtentry_get_value"
					],
					"id": "function.newt-entry-get-value",
					"name": "newt_entry_get_value",
					"description": "Description"
				},
				"function.newt-entry-set-filter": {
					"tokens": [
						"newt_entry_set_filter",
						"newtentry_set_filter"
					],
					"id": "function.newt-entry-set-filter",
					"name": "newt_entry_set_filter",
					"description": "Description"
				},
				"function.newt-entry-set-flags": {
					"tokens": [
						"newt_entry_set_flags",
						"newtentry_set_flags"
					],
					"id": "function.newt-entry-set-flags",
					"name": "newt_entry_set_flags",
					"description": "Description"
				},
				"function.newt-entry-set": {
					"tokens": [
						"newt_entry_set",
						"newtentry_set"
					],
					"id": "function.newt-entry-set",
					"name": "newt_entry_set",
					"description": "Description"
				},
				"function.newt-entry": {
					"tokens": [
						"newt_entry",
						"newtentry"
					],
					"id": "function.newt-entry",
					"name": "newt_entry",
					"description": "Description"
				},
				"function.newt-finished": {
					"tokens": [
						"newt_finished",
						"newtfinished"
					],
					"id": "function.newt-finished",
					"name": "newt_finished",
					"description": "Uninitializes newt interface"
				},
				"function.newt-form-add-component": {
					"tokens": [
						"newt_form_add_component",
						"newtform_add_component"
					],
					"id": "function.newt-form-add-component",
					"name": "newt_form_add_component",
					"description": "Adds a single component to the form"
				},
				"function.newt-form-add-components": {
					"tokens": [
						"newt_form_add_components",
						"newtform_add_components"
					],
					"id": "function.newt-form-add-components",
					"name": "newt_form_add_components",
					"description": "Add several components to the form"
				},
				"function.newt-form-add-hot-key": {
					"tokens": [
						"newt_form_add_hot_key",
						"newtform_add_hot_key"
					],
					"id": "function.newt-form-add-hot-key",
					"name": "newt_form_add_hot_key",
					"description": "Description"
				},
				"function.newt-form-destroy": {
					"tokens": [
						"newt_form_destroy",
						"newtform_destroy"
					],
					"id": "function.newt-form-destroy",
					"name": "newt_form_destroy",
					"description": "Destroys a form"
				},
				"function.newt-form-get-current": {
					"tokens": [
						"newt_form_get_current",
						"newtform_get_current"
					],
					"id": "function.newt-form-get-current",
					"name": "newt_form_get_current",
					"description": "Description"
				},
				"function.newt-form-run": {
					"tokens": [
						"newt_form_run",
						"newtform_run"
					],
					"id": "function.newt-form-run",
					"name": "newt_form_run",
					"description": "Runs a form"
				},
				"function.newt-form-set-background": {
					"tokens": [
						"newt_form_set_background",
						"newtform_set_background"
					],
					"id": "function.newt-form-set-background",
					"name": "newt_form_set_background",
					"description": "Description"
				},
				"function.newt-form-set-height": {
					"tokens": [
						"newt_form_set_height",
						"newtform_set_height"
					],
					"id": "function.newt-form-set-height",
					"name": "newt_form_set_height",
					"description": "Description"
				},
				"function.newt-form-set-size": {
					"tokens": [
						"newt_form_set_size",
						"newtform_set_size"
					],
					"id": "function.newt-form-set-size",
					"name": "newt_form_set_size",
					"description": "Description"
				},
				"function.newt-form-set-timer": {
					"tokens": [
						"newt_form_set_timer",
						"newtform_set_timer"
					],
					"id": "function.newt-form-set-timer",
					"name": "newt_form_set_timer",
					"description": "Description"
				},
				"function.newt-form-set-width": {
					"tokens": [
						"newt_form_set_width",
						"newtform_set_width"
					],
					"id": "function.newt-form-set-width",
					"name": "newt_form_set_width",
					"description": "Description"
				},
				"function.newt-form-watch-fd": {
					"tokens": [
						"newt_form_watch_fd",
						"newtform_watch_fd"
					],
					"id": "function.newt-form-watch-fd",
					"name": "newt_form_watch_fd",
					"description": "Description"
				},
				"function.newt-form": {
					"tokens": [
						"newt_form",
						"newtform"
					],
					"id": "function.newt-form",
					"name": "newt_form",
					"description": "Create a form"
				},
				"function.newt-get-screen-size": {
					"tokens": [
						"newt_get_screen_size",
						"newtget_screen_size"
					],
					"id": "function.newt-get-screen-size",
					"name": "newt_get_screen_size",
					"description": "Fills in the passed references with the current size of the\n  terminal"
				},
				"function.newt-grid-add-components-to-form": {
					"tokens": [
						"newt_grid_add_components_to_form",
						"newtgrid_add_components_to_form"
					],
					"id": "function.newt-grid-add-components-to-form",
					"name": "newt_grid_add_components_to_form",
					"description": "Description"
				},
				"function.newt-grid-basic-window": {
					"tokens": [
						"newt_grid_basic_window",
						"newtgrid_basic_window"
					],
					"id": "function.newt-grid-basic-window",
					"name": "newt_grid_basic_window",
					"description": "Description"
				},
				"function.newt-grid-free": {
					"tokens": [
						"newt_grid_free",
						"newtgrid_free"
					],
					"id": "function.newt-grid-free",
					"name": "newt_grid_free",
					"description": "Description"
				},
				"function.newt-grid-get-size": {
					"tokens": [
						"newt_grid_get_size",
						"newtgrid_get_size"
					],
					"id": "function.newt-grid-get-size",
					"name": "newt_grid_get_size",
					"description": "Description"
				},
				"function.newt-grid-h-close-stacked": {
					"tokens": [
						"newt_grid_h_close_stacked",
						"newtgrid_h_close_stacked"
					],
					"id": "function.newt-grid-h-close-stacked",
					"name": "newt_grid_h_close_stacked",
					"description": "Description"
				},
				"function.newt-grid-h-stacked": {
					"tokens": [
						"newt_grid_h_stacked",
						"newtgrid_h_stacked"
					],
					"id": "function.newt-grid-h-stacked",
					"name": "newt_grid_h_stacked",
					"description": "Description"
				},
				"function.newt-grid-place": {
					"tokens": [
						"newt_grid_place",
						"newtgrid_place"
					],
					"id": "function.newt-grid-place",
					"name": "newt_grid_place",
					"description": "Description"
				},
				"function.newt-grid-set-field": {
					"tokens": [
						"newt_grid_set_field",
						"newtgrid_set_field"
					],
					"id": "function.newt-grid-set-field",
					"name": "newt_grid_set_field",
					"description": "Description"
				},
				"function.newt-grid-simple-window": {
					"tokens": [
						"newt_grid_simple_window",
						"newtgrid_simple_window"
					],
					"id": "function.newt-grid-simple-window",
					"name": "newt_grid_simple_window",
					"description": "Description"
				},
				"function.newt-grid-v-close-stacked": {
					"tokens": [
						"newt_grid_v_close_stacked",
						"newtgrid_v_close_stacked"
					],
					"id": "function.newt-grid-v-close-stacked",
					"name": "newt_grid_v_close_stacked",
					"description": "Description"
				},
				"function.newt-grid-v-stacked": {
					"tokens": [
						"newt_grid_v_stacked",
						"newtgrid_v_stacked"
					],
					"id": "function.newt-grid-v-stacked",
					"name": "newt_grid_v_stacked",
					"description": "Description"
				},
				"function.newt-grid-wrapped-window-at": {
					"tokens": [
						"newt_grid_wrapped_window_at",
						"newtgrid_wrapped_window_at"
					],
					"id": "function.newt-grid-wrapped-window-at",
					"name": "newt_grid_wrapped_window_at",
					"description": "Description"
				},
				"function.newt-grid-wrapped-window": {
					"tokens": [
						"newt_grid_wrapped_window",
						"newtgrid_wrapped_window"
					],
					"id": "function.newt-grid-wrapped-window",
					"name": "newt_grid_wrapped_window",
					"description": "Description"
				},
				"function.newt-init": {
					"tokens": [
						"newt_init",
						"newtinit"
					],
					"id": "function.newt-init",
					"name": "newt_init",
					"description": "Initialize newt"
				},
				"function.newt-label-set-text": {
					"tokens": [
						"newt_label_set_text",
						"newtlabel_set_text"
					],
					"id": "function.newt-label-set-text",
					"name": "newt_label_set_text",
					"description": "Description"
				},
				"function.newt-label": {
					"tokens": [
						"newt_label",
						"newtlabel"
					],
					"id": "function.newt-label",
					"name": "newt_label",
					"description": "Description"
				},
				"function.newt-listbox-append-entry": {
					"tokens": [
						"newt_listbox_append_entry",
						"newtlistbox_append_entry"
					],
					"id": "function.newt-listbox-append-entry",
					"name": "newt_listbox_append_entry",
					"description": "Description"
				},
				"function.newt-listbox-clear-selection": {
					"tokens": [
						"newt_listbox_clear_selection",
						"newtlistbox_clear_selection"
					],
					"id": "function.newt-listbox-clear-selection",
					"name": "newt_listbox_clear_selection",
					"description": "Description"
				},
				"function.newt-listbox-clear": {
					"tokens": [
						"newt_listbox_clear",
						"newtlistbox_clear"
					],
					"id": "function.newt-listbox-clear",
					"name": "newt_listbox_clear",
					"description": "Description"
				},
				"function.newt-listbox-delete-entry": {
					"tokens": [
						"newt_listbox_delete_entry",
						"newtlistbox_delete_entry"
					],
					"id": "function.newt-listbox-delete-entry",
					"name": "newt_listbox_delete_entry",
					"description": "Description"
				},
				"function.newt-listbox-get-current": {
					"tokens": [
						"newt_listbox_get_current",
						"newtlistbox_get_current"
					],
					"id": "function.newt-listbox-get-current",
					"name": "newt_listbox_get_current",
					"description": "Description"
				},
				"function.newt-listbox-get-selection": {
					"tokens": [
						"newt_listbox_get_selection",
						"newtlistbox_get_selection"
					],
					"id": "function.newt-listbox-get-selection",
					"name": "newt_listbox_get_selection",
					"description": "Description"
				},
				"function.newt-listbox-insert-entry": {
					"tokens": [
						"newt_listbox_insert_entry",
						"newtlistbox_insert_entry"
					],
					"id": "function.newt-listbox-insert-entry",
					"name": "newt_listbox_insert_entry",
					"description": "Description"
				},
				"function.newt-listbox-item-count": {
					"tokens": [
						"newt_listbox_item_count",
						"newtlistbox_item_count"
					],
					"id": "function.newt-listbox-item-count",
					"name": "newt_listbox_item_count",
					"description": "Description"
				},
				"function.newt-listbox-select-item": {
					"tokens": [
						"newt_listbox_select_item",
						"newtlistbox_select_item"
					],
					"id": "function.newt-listbox-select-item",
					"name": "newt_listbox_select_item",
					"description": "Description"
				},
				"function.newt-listbox-set-current-by-key": {
					"tokens": [
						"newt_listbox_set_current_by_key",
						"newtlistbox_set_current_by_key"
					],
					"id": "function.newt-listbox-set-current-by-key",
					"name": "newt_listbox_set_current_by_key",
					"description": "Description"
				},
				"function.newt-listbox-set-current": {
					"tokens": [
						"newt_listbox_set_current",
						"newtlistbox_set_current"
					],
					"id": "function.newt-listbox-set-current",
					"name": "newt_listbox_set_current",
					"description": "Description"
				},
				"function.newt-listbox-set-data": {
					"tokens": [
						"newt_listbox_set_data",
						"newtlistbox_set_data"
					],
					"id": "function.newt-listbox-set-data",
					"name": "newt_listbox_set_data",
					"description": "Description"
				},
				"function.newt-listbox-set-entry": {
					"tokens": [
						"newt_listbox_set_entry",
						"newtlistbox_set_entry"
					],
					"id": "function.newt-listbox-set-entry",
					"name": "newt_listbox_set_entry",
					"description": "Description"
				},
				"function.newt-listbox-set-width": {
					"tokens": [
						"newt_listbox_set_width",
						"newtlistbox_set_width"
					],
					"id": "function.newt-listbox-set-width",
					"name": "newt_listbox_set_width",
					"description": "Description"
				},
				"function.newt-listbox": {
					"tokens": [
						"newt_listbox",
						"newtlistbox"
					],
					"id": "function.newt-listbox",
					"name": "newt_listbox",
					"description": "Description"
				},
				"function.newt-listitem-get-data": {
					"tokens": [
						"newt_listitem_get_data",
						"newtlistitem_get_data"
					],
					"id": "function.newt-listitem-get-data",
					"name": "newt_listitem_get_data",
					"description": "Description"
				},
				"function.newt-listitem-set": {
					"tokens": [
						"newt_listitem_set",
						"newtlistitem_set"
					],
					"id": "function.newt-listitem-set",
					"name": "newt_listitem_set",
					"description": "Description"
				},
				"function.newt-listitem": {
					"tokens": [
						"newt_listitem",
						"newtlistitem"
					],
					"id": "function.newt-listitem",
					"name": "newt_listitem",
					"description": "Description"
				},
				"function.newt-open-window": {
					"tokens": [
						"newt_open_window",
						"newtopen_window"
					],
					"id": "function.newt-open-window",
					"name": "newt_open_window",
					"description": "Open a window of the specified size and position"
				},
				"function.newt-pop-help-line": {
					"tokens": [
						"newt_pop_help_line",
						"newtpop_help_line"
					],
					"id": "function.newt-pop-help-line",
					"name": "newt_pop_help_line",
					"description": "Replaces the current help line with the one from the stack"
				},
				"function.newt-pop-window": {
					"tokens": [
						"newt_pop_window",
						"newtpop_window"
					],
					"id": "function.newt-pop-window",
					"name": "newt_pop_window",
					"description": "Removes the top window from the display"
				},
				"function.newt-push-help-line": {
					"tokens": [
						"newt_push_help_line",
						"newtpush_help_line"
					],
					"id": "function.newt-push-help-line",
					"name": "newt_push_help_line",
					"description": "Saves the current help line on a stack, and displays the new line"
				},
				"function.newt-radio-get-current": {
					"tokens": [
						"newt_radio_get_current",
						"newtradio_get_current"
					],
					"id": "function.newt-radio-get-current",
					"name": "newt_radio_get_current",
					"description": "Description"
				},
				"function.newt-radiobutton": {
					"tokens": [
						"newt_radiobutton",
						"newtradiobutton"
					],
					"id": "function.newt-radiobutton",
					"name": "newt_radiobutton",
					"description": "Description"
				},
				"function.newt-redraw-help-line": {
					"tokens": [
						"newt_redraw_help_line",
						"newtredraw_help_line"
					],
					"id": "function.newt-redraw-help-line",
					"name": "newt_redraw_help_line",
					"description": "Description"
				},
				"function.newt-reflow-text": {
					"tokens": [
						"newt_reflow_text",
						"newtreflow_text"
					],
					"id": "function.newt-reflow-text",
					"name": "newt_reflow_text",
					"description": "Description"
				},
				"function.newt-refresh": {
					"tokens": [
						"newt_refresh",
						"newtrefresh"
					],
					"id": "function.newt-refresh",
					"name": "newt_refresh",
					"description": "Updates modified portions of the screen"
				},
				"function.newt-resize-screen": {
					"tokens": [
						"newt_resize_screen",
						"newtresize_screen"
					],
					"id": "function.newt-resize-screen",
					"name": "newt_resize_screen",
					"description": "Description"
				},
				"function.newt-resume": {
					"tokens": [
						"newt_resume",
						"newtresume"
					],
					"id": "function.newt-resume",
					"name": "newt_resume",
					"description": "Resume using the newt interface after calling\n  newt_suspend"
				},
				"function.newt-run-form": {
					"tokens": [
						"newt_run_form",
						"newtrun_form"
					],
					"id": "function.newt-run-form",
					"name": "newt_run_form",
					"description": "Runs a form"
				},
				"function.newt-scale-set": {
					"tokens": [
						"newt_scale_set",
						"newtscale_set"
					],
					"id": "function.newt-scale-set",
					"name": "newt_scale_set",
					"description": "Description"
				},
				"function.newt-scale": {
					"tokens": [
						"newt_scale",
						"newtscale"
					],
					"id": "function.newt-scale",
					"name": "newt_scale",
					"description": "Description"
				},
				"function.newt-scrollbar-set": {
					"tokens": [
						"newt_scrollbar_set",
						"newtscrollbar_set"
					],
					"id": "function.newt-scrollbar-set",
					"name": "newt_scrollbar_set",
					"description": "Description"
				},
				"function.newt-set-help-callback": {
					"tokens": [
						"newt_set_help_callback",
						"newtset_help_callback"
					],
					"id": "function.newt-set-help-callback",
					"name": "newt_set_help_callback",
					"description": "Description"
				},
				"function.newt-set-suspend-callback": {
					"tokens": [
						"newt_set_suspend_callback",
						"newtset_suspend_callback"
					],
					"id": "function.newt-set-suspend-callback",
					"name": "newt_set_suspend_callback",
					"description": "Set a callback function which gets invoked when user\n  presses the suspend key"
				},
				"function.newt-suspend": {
					"tokens": [
						"newt_suspend",
						"newtsuspend"
					],
					"id": "function.newt-suspend",
					"name": "newt_suspend",
					"description": "Tells newt to return the terminal to its initial state"
				},
				"function.newt-textbox-get-num-lines": {
					"tokens": [
						"newt_textbox_get_num_lines",
						"newttextbox_get_num_lines"
					],
					"id": "function.newt-textbox-get-num-lines",
					"name": "newt_textbox_get_num_lines",
					"description": "Description"
				},
				"function.newt-textbox-reflowed": {
					"tokens": [
						"newt_textbox_reflowed",
						"newttextbox_reflowed"
					],
					"id": "function.newt-textbox-reflowed",
					"name": "newt_textbox_reflowed",
					"description": "Description"
				},
				"function.newt-textbox-set-height": {
					"tokens": [
						"newt_textbox_set_height",
						"newttextbox_set_height"
					],
					"id": "function.newt-textbox-set-height",
					"name": "newt_textbox_set_height",
					"description": "Description"
				},
				"function.newt-textbox-set-text": {
					"tokens": [
						"newt_textbox_set_text",
						"newttextbox_set_text"
					],
					"id": "function.newt-textbox-set-text",
					"name": "newt_textbox_set_text",
					"description": "Description"
				},
				"function.newt-textbox": {
					"tokens": [
						"newt_textbox",
						"newttextbox"
					],
					"id": "function.newt-textbox",
					"name": "newt_textbox",
					"description": "Description"
				},
				"function.newt-vertical-scrollbar": {
					"tokens": [
						"newt_vertical_scrollbar",
						"newtvertical_scrollbar"
					],
					"id": "function.newt-vertical-scrollbar",
					"name": "newt_vertical_scrollbar",
					"description": "Description"
				},
				"function.newt-wait-for-key": {
					"tokens": [
						"newt_wait_for_key",
						"newtwait_for_key"
					],
					"id": "function.newt-wait-for-key",
					"name": "newt_wait_for_key",
					"description": "Doesn't return until a key has been pressed"
				},
				"function.newt-win-choice": {
					"tokens": [
						"newt_win_choice",
						"newtwin_choice"
					],
					"id": "function.newt-win-choice",
					"name": "newt_win_choice",
					"description": "Description"
				},
				"function.newt-win-entries": {
					"tokens": [
						"newt_win_entries",
						"newtwin_entries"
					],
					"id": "function.newt-win-entries",
					"name": "newt_win_entries",
					"description": "Description"
				},
				"function.newt-win-menu": {
					"tokens": [
						"newt_win_menu",
						"newtwin_menu"
					],
					"id": "function.newt-win-menu",
					"name": "newt_win_menu",
					"description": "Description"
				},
				"function.newt-win-message": {
					"tokens": [
						"newt_win_message",
						"newtwin_message"
					],
					"id": "function.newt-win-message",
					"name": "newt_win_message",
					"description": "Description"
				},
				"function.newt-win-messagev": {
					"tokens": [
						"newt_win_messagev",
						"newtwin_messagev"
					],
					"id": "function.newt-win-messagev",
					"name": "newt_win_messagev",
					"description": "Description"
				},
				"function.newt-win-ternary": {
					"tokens": [
						"newt_win_ternary",
						"newtwin_ternary"
					],
					"id": "function.newt-win-ternary",
					"name": "newt_win_ternary",
					"description": "Description"
				},
				"function.readline-add-history": {
					"tokens": [
						"readline_add_history",
						"readlineadd_history"
					],
					"id": "function.readline-add-history",
					"name": "readline_add_history",
					"description": "Adds a line to the history"
				},
				"function.readline-callback-handler-install": {
					"tokens": [
						"readline_callback_handler_install",
						"readlinecallback_handler_install"
					],
					"id": "function.readline-callback-handler-install",
					"name": "readline_callback_handler_install",
					"description": "Initializes the readline callback interface and terminal, prints the prompt and returns immediately"
				},
				"function.readline-callback-handler-remove": {
					"tokens": [
						"readline_callback_handler_remove",
						"readlinecallback_handler_remove"
					],
					"id": "function.readline-callback-handler-remove",
					"name": "readline_callback_handler_remove",
					"description": "Removes a previously installed callback handler and restores terminal settings"
				},
				"function.readline-callback-read-char": {
					"tokens": [
						"readline_callback_read_char",
						"readlinecallback_read_char"
					],
					"id": "function.readline-callback-read-char",
					"name": "readline_callback_read_char",
					"description": "Reads a character and informs the readline callback interface when a line is received"
				},
				"function.readline-clear-history": {
					"tokens": [
						"readline_clear_history",
						"readlineclear_history"
					],
					"id": "function.readline-clear-history",
					"name": "readline_clear_history",
					"description": "Clears the history"
				},
				"function.readline-completion-function": {
					"tokens": [
						"readline_completion_function",
						"readlinecompletion_function"
					],
					"id": "function.readline-completion-function",
					"name": "readline_completion_function",
					"description": "Registers a completion function"
				},
				"function.readline-info": {
					"tokens": [
						"readline_info",
						"readlineinfo"
					],
					"id": "function.readline-info",
					"name": "readline_info",
					"description": "Gets/sets various internal readline variables"
				},
				"function.readline-list-history": {
					"tokens": [
						"readline_list_history",
						"readlinelist_history"
					],
					"id": "function.readline-list-history",
					"name": "readline_list_history",
					"description": "Lists the history"
				},
				"function.readline-on-new-line": {
					"tokens": [
						"readline_on_new_line",
						"readlineon_new_line"
					],
					"id": "function.readline-on-new-line",
					"name": "readline_on_new_line",
					"description": "Inform readline that the cursor has moved to a new line"
				},
				"function.readline-read-history": {
					"tokens": [
						"readline_read_history",
						"readlineread_history"
					],
					"id": "function.readline-read-history",
					"name": "readline_read_history",
					"description": "Reads the history"
				},
				"function.readline-redisplay": {
					"tokens": [
						"readline_redisplay",
						"readlineredisplay"
					],
					"id": "function.readline-redisplay",
					"name": "readline_redisplay",
					"description": "Redraws the display"
				},
				"function.readline-write-history": {
					"tokens": [
						"readline_write_history",
						"readlinewrite_history"
					],
					"id": "function.readline-write-history",
					"name": "readline_write_history",
					"description": "Writes the history"
				},
				"function.readline": {
					"tokens": [
						"readline"
					],
					"id": "function.readline",
					"name": "readline",
					"description": "Reads a line"
				},
				"function.bzclose": {
					"tokens": [
						"bzclose"
					],
					"id": "function.bzclose",
					"name": "bzclose",
					"description": "Close a bzip2 file"
				},
				"function.bzcompress": {
					"tokens": [
						"bzcompress"
					],
					"id": "function.bzcompress",
					"name": "bzcompress",
					"description": "Compress a string into bzip2 encoded data"
				},
				"function.bzdecompress": {
					"tokens": [
						"bzdecompress"
					],
					"id": "function.bzdecompress",
					"name": "bzdecompress",
					"description": "Decompresses bzip2 encoded data"
				},
				"function.bzerrno": {
					"tokens": [
						"bzerrno"
					],
					"id": "function.bzerrno",
					"name": "bzerrno",
					"description": "Returns a bzip2 error number"
				},
				"function.bzerror": {
					"tokens": [
						"bzerror"
					],
					"id": "function.bzerror",
					"name": "bzerror",
					"description": "Returns the bzip2 error number and error string in an array"
				},
				"function.bzerrstr": {
					"tokens": [
						"bzerrstr"
					],
					"id": "function.bzerrstr",
					"name": "bzerrstr",
					"description": "Returns a bzip2 error string"
				},
				"function.bzflush": {
					"tokens": [
						"bzflush"
					],
					"id": "function.bzflush",
					"name": "bzflush",
					"description": "Force a write of all buffered data"
				},
				"function.bzopen": {
					"tokens": [
						"bzopen"
					],
					"id": "function.bzopen",
					"name": "bzopen",
					"description": "Opens a bzip2 compressed file"
				},
				"function.bzread": {
					"tokens": [
						"bzread"
					],
					"id": "function.bzread",
					"name": "bzread",
					"description": "Binary safe bzip2 file read"
				},
				"function.bzwrite": {
					"tokens": [
						"bzwrite"
					],
					"id": "function.bzwrite",
					"name": "bzwrite",
					"description": "Binary safe bzip2 file write"
				},
				"function.lzf-compress": {
					"tokens": [
						"lzf_compress",
						"lzfcompress"
					],
					"id": "function.lzf-compress",
					"name": "lzf_compress",
					"description": "LZF compression"
				},
				"function.lzf-decompress": {
					"tokens": [
						"lzf_decompress",
						"lzfdecompress"
					],
					"id": "function.lzf-decompress",
					"name": "lzf_decompress",
					"description": "LZF decompression"
				},
				"function.lzf-optimized-for": {
					"tokens": [
						"lzf_optimized_for",
						"lzfoptimized_for"
					],
					"id": "function.lzf-optimized-for",
					"name": "lzf_optimized_for",
					"description": "Determines what LZF extension was optimized for"
				},
				"phar.addemptydir": {
					"tokens": [
						"Phar::addEmptyDir",
						"addEmptyDir",
						"::addEmptyDir"
					],
					"id": "phar.addemptydir",
					"name": "Phar::addEmptyDir",
					"description": "Add an empty directory to the phar archive"
				},
				"phar.addfile": {
					"tokens": [
						"Phar::addFile",
						"addFile",
						"::addFile"
					],
					"id": "phar.addfile",
					"name": "Phar::addFile",
					"description": "Add a file from the filesystem to the phar archive"
				},
				"phar.addfromstring": {
					"tokens": [
						"Phar::addFromString",
						"addFromString",
						"::addFromString"
					],
					"id": "phar.addfromstring",
					"name": "Phar::addFromString",
					"description": "Add a file from a string to the phar archive"
				},
				"phar.apiversion": {
					"tokens": [
						"Phar::apiVersion",
						"apiVersion",
						"::apiVersion"
					],
					"id": "phar.apiversion",
					"name": "Phar::apiVersion",
					"description": "Returns the api version"
				},
				"phar.buildfromdirectory": {
					"tokens": [
						"Phar::buildFromDirectory",
						"buildFromDirectory",
						"::buildFromDirectory"
					],
					"id": "phar.buildfromdirectory",
					"name": "Phar::buildFromDirectory",
					"description": "Construct a phar archive from the files within a directory."
				},
				"phar.buildfromiterator": {
					"tokens": [
						"Phar::buildFromIterator",
						"buildFromIterator",
						"::buildFromIterator"
					],
					"id": "phar.buildfromiterator",
					"name": "Phar::buildFromIterator",
					"description": "Construct a phar archive from an iterator."
				},
				"phar.cancompress": {
					"tokens": [
						"Phar::canCompress",
						"canCompress",
						"::canCompress"
					],
					"id": "phar.cancompress",
					"name": "Phar::canCompress",
					"description": "Returns whether phar extension supports compression using either zlib or bzip2"
				},
				"phar.canwrite": {
					"tokens": [
						"Phar::canWrite",
						"canWrite",
						"::canWrite"
					],
					"id": "phar.canwrite",
					"name": "Phar::canWrite",
					"description": "Returns whether phar extension supports writing and creating phars"
				},
				"phar.compress": {
					"tokens": [
						"Phar::compress",
						"compress",
						"::compress"
					],
					"id": "phar.compress",
					"name": "Phar::compress",
					"description": "Compresses the entire Phar archive using Gzip or Bzip2 compression"
				},
				"phar.compressallfilesbzip2": {
					"tokens": [
						"Phar::compressAllFilesBZIP2",
						"compressAllFilesBZIP2",
						"::compressAllFilesBZIP2"
					],
					"id": "phar.compressallfilesbzip2",
					"name": "Phar::compressAllFilesBZIP2",
					"description": "Compresses all files in the current Phar archive using Bzip2 compression"
				},
				"phar.compressallfilesgz": {
					"tokens": [
						"Phar::compressAllFilesGZ",
						"compressAllFilesGZ",
						"::compressAllFilesGZ"
					],
					"id": "phar.compressallfilesgz",
					"name": "Phar::compressAllFilesGZ",
					"description": "Compresses all files in the current Phar archive using Gzip compression"
				},
				"phar.compressfiles": {
					"tokens": [
						"Phar::compressFiles",
						"compressFiles",
						"::compressFiles"
					],
					"id": "phar.compressfiles",
					"name": "Phar::compressFiles",
					"description": "Compresses all files in the current Phar archive"
				},
				"phar.construct": {
					"tokens": [
						"Phar::__construct",
						"Phar::_construct",
						"__construct",
						"::__construct"
					],
					"id": "phar.construct",
					"name": "Phar::__construct",
					"description": "Construct a Phar archive object"
				},
				"phar.converttodata": {
					"tokens": [
						"Phar::convertToData",
						"convertToData",
						"::convertToData"
					],
					"id": "phar.converttodata",
					"name": "Phar::convertToData",
					"description": "Convert a phar archive to a non-executable tar or zip file"
				},
				"phar.converttoexecutable": {
					"tokens": [
						"Phar::convertToExecutable",
						"convertToExecutable",
						"::convertToExecutable"
					],
					"id": "phar.converttoexecutable",
					"name": "Phar::convertToExecutable",
					"description": "Convert a phar archive to another executable phar archive file format"
				},
				"phar.copy": {
					"tokens": [
						"Phar::copy",
						"copy",
						"::copy"
					],
					"id": "phar.copy",
					"name": "Phar::copy",
					"description": "Copy a file internal to the phar archive to another new file within the phar"
				},
				"phar.count": {
					"tokens": [
						"Phar::count",
						"count",
						"::count"
					],
					"id": "phar.count",
					"name": "Phar::count",
					"description": "Returns the number of entries (files) in the Phar archive"
				},
				"phar.createdefaultstub": {
					"tokens": [
						"Phar::createDefaultStub",
						"createDefaultStub",
						"::createDefaultStub"
					],
					"id": "phar.createdefaultstub",
					"name": "Phar::createDefaultStub",
					"description": "Create a phar-file format specific stub"
				},
				"phar.decompress": {
					"tokens": [
						"Phar::decompress",
						"decompress",
						"::decompress"
					],
					"id": "phar.decompress",
					"name": "Phar::decompress",
					"description": "Decompresses the entire Phar archive"
				},
				"phar.decompressfiles": {
					"tokens": [
						"Phar::decompressFiles",
						"decompressFiles",
						"::decompressFiles"
					],
					"id": "phar.decompressfiles",
					"name": "Phar::decompressFiles",
					"description": "Decompresses all files in the current Phar archive"
				},
				"phar.delmetadata": {
					"tokens": [
						"Phar::delMetadata",
						"delMetadata",
						"::delMetadata"
					],
					"id": "phar.delmetadata",
					"name": "Phar::delMetadata",
					"description": "Deletes the global metadata of the phar"
				},
				"phar.delete": {
					"tokens": [
						"Phar::delete",
						"delete",
						"::delete"
					],
					"id": "phar.delete",
					"name": "Phar::delete",
					"description": "Delete a file within a phar archive"
				},
				"phar.extractto": {
					"tokens": [
						"Phar::extractTo",
						"extractTo",
						"::extractTo"
					],
					"id": "phar.extractto",
					"name": "Phar::extractTo",
					"description": "Extract the contents of a phar archive to a directory"
				},
				"phar.getmetadata": {
					"tokens": [
						"Phar::getMetadata",
						"getMetadata",
						"::getMetadata"
					],
					"id": "phar.getmetadata",
					"name": "Phar::getMetadata",
					"description": "Returns phar archive meta-data"
				},
				"phar.getmodified": {
					"tokens": [
						"Phar::getModified",
						"getModified",
						"::getModified"
					],
					"id": "phar.getmodified",
					"name": "Phar::getModified",
					"description": "Return whether phar was modified"
				},
				"phar.getsignature": {
					"tokens": [
						"Phar::getSignature",
						"getSignature",
						"::getSignature"
					],
					"id": "phar.getsignature",
					"name": "Phar::getSignature",
					"description": "Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive"
				},
				"phar.getstub": {
					"tokens": [
						"Phar::getStub",
						"getStub",
						"::getStub"
					],
					"id": "phar.getstub",
					"name": "Phar::getStub",
					"description": "Return the PHP loader or bootstrap stub of a Phar archive"
				},
				"phar.getsupportedcompression": {
					"tokens": [
						"Phar::getSupportedCompression",
						"getSupportedCompression",
						"::getSupportedCompression"
					],
					"id": "phar.getsupportedcompression",
					"name": "Phar::getSupportedCompression",
					"description": "Return array of supported compression algorithms"
				},
				"phar.getsupportedsignatures": {
					"tokens": [
						"Phar::getSupportedSignatures",
						"getSupportedSignatures",
						"::getSupportedSignatures"
					],
					"id": "phar.getsupportedsignatures",
					"name": "Phar::getSupportedSignatures",
					"description": "Return array of supported signature types"
				},
				"phar.getversion": {
					"tokens": [
						"Phar::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "phar.getversion",
					"name": "Phar::getVersion",
					"description": "Return version info of Phar archive"
				},
				"phar.hasmetadata": {
					"tokens": [
						"Phar::hasMetadata",
						"hasMetadata",
						"::hasMetadata"
					],
					"id": "phar.hasmetadata",
					"name": "Phar::hasMetadata",
					"description": "Returns whether phar has global meta-data"
				},
				"phar.interceptfilefuncs": {
					"tokens": [
						"Phar::interceptFileFuncs",
						"interceptFileFuncs",
						"::interceptFileFuncs"
					],
					"id": "phar.interceptfilefuncs",
					"name": "Phar::interceptFileFuncs",
					"description": "instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions"
				},
				"phar.isbuffering": {
					"tokens": [
						"Phar::isBuffering",
						"isBuffering",
						"::isBuffering"
					],
					"id": "phar.isbuffering",
					"name": "Phar::isBuffering",
					"description": "Used to determine whether Phar write operations are being buffered, or are flushing directly to disk"
				},
				"phar.iscompressed": {
					"tokens": [
						"Phar::isCompressed",
						"isCompressed",
						"::isCompressed"
					],
					"id": "phar.iscompressed",
					"name": "Phar::isCompressed",
					"description": "Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)"
				},
				"phar.isfileformat": {
					"tokens": [
						"Phar::isFileFormat",
						"isFileFormat",
						"::isFileFormat"
					],
					"id": "phar.isfileformat",
					"name": "Phar::isFileFormat",
					"description": "Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter"
				},
				"phar.isvalidpharfilename": {
					"tokens": [
						"Phar::isValidPharFilename",
						"isValidPharFilename",
						"::isValidPharFilename"
					],
					"id": "phar.isvalidpharfilename",
					"name": "Phar::isValidPharFilename",
					"description": "Returns whether the given filename is a valid phar filename"
				},
				"phar.iswritable": {
					"tokens": [
						"Phar::isWritable",
						"isWritable",
						"::isWritable"
					],
					"id": "phar.iswritable",
					"name": "Phar::isWritable",
					"description": "Returns true if the phar archive can be modified"
				},
				"phar.loadphar": {
					"tokens": [
						"Phar::loadPhar",
						"loadPhar",
						"::loadPhar"
					],
					"id": "phar.loadphar",
					"name": "Phar::loadPhar",
					"description": "Loads any phar archive with an alias"
				},
				"phar.mapphar": {
					"tokens": [
						"Phar::mapPhar",
						"mapPhar",
						"::mapPhar"
					],
					"id": "phar.mapphar",
					"name": "Phar::mapPhar",
					"description": "Reads the currently executed file (a phar) and registers its manifest"
				},
				"phar.mount": {
					"tokens": [
						"Phar::mount",
						"mount",
						"::mount"
					],
					"id": "phar.mount",
					"name": "Phar::mount",
					"description": "Mount an external path or file to a virtual location within the phar archive"
				},
				"phar.mungserver": {
					"tokens": [
						"Phar::mungServer",
						"mungServer",
						"::mungServer"
					],
					"id": "phar.mungserver",
					"name": "Phar::mungServer",
					"description": "Defines a list of up to 4 $_SERVER variables that should be modified for execution"
				},
				"phar.offsetexists": {
					"tokens": [
						"Phar::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "phar.offsetexists",
					"name": "Phar::offsetExists",
					"description": "determines whether a file exists in the phar"
				},
				"phar.offsetget": {
					"tokens": [
						"Phar::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "phar.offsetget",
					"name": "Phar::offsetGet",
					"description": "Gets a PharFileInfo object for a specific file"
				},
				"phar.offsetset": {
					"tokens": [
						"Phar::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "phar.offsetset",
					"name": "Phar::offsetSet",
					"description": "set the contents of an internal file to those of an external file"
				},
				"phar.offsetunset": {
					"tokens": [
						"Phar::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "phar.offsetunset",
					"name": "Phar::offsetUnset",
					"description": "remove a file from a phar"
				},
				"phar.running": {
					"tokens": [
						"Phar::running",
						"running",
						"::running"
					],
					"id": "phar.running",
					"name": "Phar::running",
					"description": "Returns the full path on disk or full phar URL to the currently executing Phar archive"
				},
				"phar.setalias": {
					"tokens": [
						"Phar::setAlias",
						"setAlias",
						"::setAlias"
					],
					"id": "phar.setalias",
					"name": "Phar::setAlias",
					"description": "Set the alias for the Phar archive"
				},
				"phar.setdefaultstub": {
					"tokens": [
						"Phar::setDefaultStub",
						"setDefaultStub",
						"::setDefaultStub"
					],
					"id": "phar.setdefaultstub",
					"name": "Phar::setDefaultStub",
					"description": "Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader"
				},
				"phar.setmetadata": {
					"tokens": [
						"Phar::setMetadata",
						"setMetadata",
						"::setMetadata"
					],
					"id": "phar.setmetadata",
					"name": "Phar::setMetadata",
					"description": "Sets phar archive meta-data"
				},
				"phar.setsignaturealgorithm": {
					"tokens": [
						"Phar::setSignatureAlgorithm",
						"setSignatureAlgorithm",
						"::setSignatureAlgorithm"
					],
					"id": "phar.setsignaturealgorithm",
					"name": "Phar::setSignatureAlgorithm",
					"description": "set the signature algorithm for a phar and apply it."
				},
				"phar.setstub": {
					"tokens": [
						"Phar::setStub",
						"setStub",
						"::setStub"
					],
					"id": "phar.setstub",
					"name": "Phar::setStub",
					"description": "Used to set the PHP loader or bootstrap stub of a Phar archive"
				},
				"phar.startbuffering": {
					"tokens": [
						"Phar::startBuffering",
						"startBuffering",
						"::startBuffering"
					],
					"id": "phar.startbuffering",
					"name": "Phar::startBuffering",
					"description": "Start buffering Phar write operations, do not modify the Phar object on disk"
				},
				"phar.stopbuffering": {
					"tokens": [
						"Phar::stopBuffering",
						"stopBuffering",
						"::stopBuffering"
					],
					"id": "phar.stopbuffering",
					"name": "Phar::stopBuffering",
					"description": "Stop buffering write requests to the Phar archive, and save changes to disk"
				},
				"phar.uncompressallfiles": {
					"tokens": [
						"Phar::uncompressAllFiles",
						"uncompressAllFiles",
						"::uncompressAllFiles"
					],
					"id": "phar.uncompressallfiles",
					"name": "Phar::uncompressAllFiles",
					"description": "Uncompresses all files in the current Phar archive"
				},
				"phar.unlinkarchive": {
					"tokens": [
						"Phar::unlinkArchive",
						"unlinkArchive",
						"::unlinkArchive"
					],
					"id": "phar.unlinkarchive",
					"name": "Phar::unlinkArchive",
					"description": "Completely remove a phar archive from disk and from memory"
				},
				"phar.webphar": {
					"tokens": [
						"Phar::webPhar",
						"webPhar",
						"::webPhar"
					],
					"id": "phar.webphar",
					"name": "Phar::webPhar",
					"description": "mapPhar for web-based phars. front controller for web applications"
				},
				"phardata.addemptydir": {
					"tokens": [
						"PharData::addEmptyDir",
						"addEmptyDir",
						"::addEmptyDir"
					],
					"id": "phardata.addemptydir",
					"name": "PharData::addEmptyDir",
					"description": "Add an empty directory to the tar/zip archive"
				},
				"phardata.addfile": {
					"tokens": [
						"PharData::addFile",
						"addFile",
						"::addFile"
					],
					"id": "phardata.addfile",
					"name": "PharData::addFile",
					"description": "Add a file from the filesystem to the tar/zip archive"
				},
				"phardata.addfromstring": {
					"tokens": [
						"PharData::addFromString",
						"addFromString",
						"::addFromString"
					],
					"id": "phardata.addfromstring",
					"name": "PharData::addFromString",
					"description": "Add a file from the filesystem to the tar/zip archive"
				},
				"phardata.buildfromdirectory": {
					"tokens": [
						"PharData::buildFromDirectory",
						"buildFromDirectory",
						"::buildFromDirectory"
					],
					"id": "phardata.buildfromdirectory",
					"name": "PharData::buildFromDirectory",
					"description": "Construct a tar/zip archive from the files within a directory."
				},
				"phardata.buildfromiterator": {
					"tokens": [
						"PharData::buildFromIterator",
						"buildFromIterator",
						"::buildFromIterator"
					],
					"id": "phardata.buildfromiterator",
					"name": "PharData::buildFromIterator",
					"description": "Construct a tar or zip archive from an iterator."
				},
				"phardata.compress": {
					"tokens": [
						"PharData::compress",
						"compress",
						"::compress"
					],
					"id": "phardata.compress",
					"name": "PharData::compress",
					"description": "Compresses the entire tar/zip archive using Gzip or Bzip2 compression"
				},
				"phardata.compressfiles": {
					"tokens": [
						"PharData::compressFiles",
						"compressFiles",
						"::compressFiles"
					],
					"id": "phardata.compressfiles",
					"name": "PharData::compressFiles",
					"description": "Compresses all files in the current tar/zip archive"
				},
				"phardata.construct": {
					"tokens": [
						"PharData::__construct",
						"PharData::_construct",
						"__construct",
						"::__construct"
					],
					"id": "phardata.construct",
					"name": "PharData::__construct",
					"description": "Construct a non-executable tar or zip archive object"
				},
				"phardata.converttodata": {
					"tokens": [
						"PharData::convertToData",
						"convertToData",
						"::convertToData"
					],
					"id": "phardata.converttodata",
					"name": "PharData::convertToData",
					"description": "Convert a phar archive to a non-executable tar or zip file"
				},
				"phardata.converttoexecutable": {
					"tokens": [
						"PharData::convertToExecutable",
						"convertToExecutable",
						"::convertToExecutable"
					],
					"id": "phardata.converttoexecutable",
					"name": "PharData::convertToExecutable",
					"description": "Convert a non-executable tar/zip archive to an executable phar archive"
				},
				"phardata.copy": {
					"tokens": [
						"PharData::copy",
						"copy",
						"::copy"
					],
					"id": "phardata.copy",
					"name": "PharData::copy",
					"description": "Copy a file internal to the phar archive to another new file within the phar"
				},
				"phardata.decompress": {
					"tokens": [
						"PharData::decompress",
						"decompress",
						"::decompress"
					],
					"id": "phardata.decompress",
					"name": "PharData::decompress",
					"description": "Decompresses the entire Phar archive"
				},
				"phardata.decompressfiles": {
					"tokens": [
						"PharData::decompressFiles",
						"decompressFiles",
						"::decompressFiles"
					],
					"id": "phardata.decompressfiles",
					"name": "PharData::decompressFiles",
					"description": "Decompresses all files in the current zip archive"
				},
				"phardata.delmetadata": {
					"tokens": [
						"PharData::delMetadata",
						"delMetadata",
						"::delMetadata"
					],
					"id": "phardata.delmetadata",
					"name": "PharData::delMetadata",
					"description": "Deletes the global metadata of a zip archive"
				},
				"phardata.delete": {
					"tokens": [
						"PharData::delete",
						"delete",
						"::delete"
					],
					"id": "phardata.delete",
					"name": "PharData::delete",
					"description": "Delete a file within a tar/zip archive"
				},
				"phardata.extractto": {
					"tokens": [
						"PharData::extractTo",
						"extractTo",
						"::extractTo"
					],
					"id": "phardata.extractto",
					"name": "PharData::extractTo",
					"description": "Extract the contents of a tar/zip archive to a directory"
				},
				"phardata.iswritable": {
					"tokens": [
						"PharData::isWritable",
						"isWritable",
						"::isWritable"
					],
					"id": "phardata.iswritable",
					"name": "PharData::isWritable",
					"description": "Returns true if the tar/zip archive can be modified"
				},
				"phardata.offsetset": {
					"tokens": [
						"PharData::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "phardata.offsetset",
					"name": "PharData::offsetSet",
					"description": "set the contents of a file within the tar/zip to those of an external file or string"
				},
				"phardata.offsetunset": {
					"tokens": [
						"PharData::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "phardata.offsetunset",
					"name": "PharData::offsetUnset",
					"description": "remove a file from a tar/zip archive"
				},
				"phardata.setalias": {
					"tokens": [
						"PharData::setAlias",
						"setAlias",
						"::setAlias"
					],
					"id": "phardata.setalias",
					"name": "PharData::setAlias",
					"description": "dummy function (Phar::setAlias is not valid for PharData)"
				},
				"phardata.setdefaultstub": {
					"tokens": [
						"PharData::setDefaultStub",
						"setDefaultStub",
						"::setDefaultStub"
					],
					"id": "phardata.setdefaultstub",
					"name": "PharData::setDefaultStub",
					"description": "dummy function (Phar::setDefaultStub is not valid for PharData)"
				},
				"phardata.setmetadata": {
					"tokens": [
						"Phar::setMetadata",
						"setMetadata",
						"::setMetadata"
					],
					"id": "phardata.setmetadata",
					"name": "Phar::setMetadata",
					"description": "Sets phar archive meta-data"
				},
				"phardata.setsignaturealgorithm": {
					"tokens": [
						"Phar::setSignatureAlgorithm",
						"setSignatureAlgorithm",
						"::setSignatureAlgorithm"
					],
					"id": "phardata.setsignaturealgorithm",
					"name": "Phar::setSignatureAlgorithm",
					"description": "set the signature algorithm for a phar and apply it."
				},
				"phardata.setstub": {
					"tokens": [
						"PharData::setStub",
						"setStub",
						"::setStub"
					],
					"id": "phardata.setstub",
					"name": "PharData::setStub",
					"description": "dummy function (Phar::setStub is not valid for PharData)"
				},
				"pharfileinfo.chmod": {
					"tokens": [
						"PharFileInfo::chmod",
						"chmod",
						"::chmod"
					],
					"id": "pharfileinfo.chmod",
					"name": "PharFileInfo::chmod",
					"description": "Sets file-specific permission bits"
				},
				"pharfileinfo.compress": {
					"tokens": [
						"PharFileInfo::compress",
						"compress",
						"::compress"
					],
					"id": "pharfileinfo.compress",
					"name": "PharFileInfo::compress",
					"description": "Compresses the current Phar entry with either zlib or bzip2 compression"
				},
				"pharfileinfo.construct": {
					"tokens": [
						"PharFileInfo::__construct",
						"PharFileInfo::_construct",
						"__construct",
						"::__construct"
					],
					"id": "pharfileinfo.construct",
					"name": "PharFileInfo::__construct",
					"description": "Construct a Phar entry object"
				},
				"pharfileinfo.decompress": {
					"tokens": [
						"PharFileInfo::decompress",
						"decompress",
						"::decompress"
					],
					"id": "pharfileinfo.decompress",
					"name": "PharFileInfo::decompress",
					"description": "Decompresses the current Phar entry within the phar"
				},
				"pharfileinfo.delmetadata": {
					"tokens": [
						"PharFileInfo::delMetadata",
						"delMetadata",
						"::delMetadata"
					],
					"id": "pharfileinfo.delmetadata",
					"name": "PharFileInfo::delMetadata",
					"description": "Deletes the metadata of the entry"
				},
				"pharfileinfo.getcrc32": {
					"tokens": [
						"PharFileInfo::getCRC32",
						"getCRC32",
						"::getCRC32"
					],
					"id": "pharfileinfo.getcrc32",
					"name": "PharFileInfo::getCRC32",
					"description": "Returns CRC32 code or throws an exception if CRC has not been verified"
				},
				"pharfileinfo.getcompressedsize": {
					"tokens": [
						"PharFileInfo::getCompressedSize",
						"getCompressedSize",
						"::getCompressedSize"
					],
					"id": "pharfileinfo.getcompressedsize",
					"name": "PharFileInfo::getCompressedSize",
					"description": "Returns the actual size of the file (with compression) inside the Phar archive"
				},
				"pharfileinfo.getmetadata": {
					"tokens": [
						"PharFileInfo::getMetadata",
						"getMetadata",
						"::getMetadata"
					],
					"id": "pharfileinfo.getmetadata",
					"name": "PharFileInfo::getMetadata",
					"description": "Returns file-specific meta-data saved with a file"
				},
				"pharfileinfo.getpharflags": {
					"tokens": [
						"PharFileInfo::getPharFlags",
						"getPharFlags",
						"::getPharFlags"
					],
					"id": "pharfileinfo.getpharflags",
					"name": "PharFileInfo::getPharFlags",
					"description": "Returns the Phar file entry flags"
				},
				"pharfileinfo.hasmetadata": {
					"tokens": [
						"PharFileInfo::hasMetadata",
						"hasMetadata",
						"::hasMetadata"
					],
					"id": "pharfileinfo.hasmetadata",
					"name": "PharFileInfo::hasMetadata",
					"description": "Returns the metadata of the entry"
				},
				"pharfileinfo.iscrcchecked": {
					"tokens": [
						"PharFileInfo::isCRCChecked",
						"isCRCChecked",
						"::isCRCChecked"
					],
					"id": "pharfileinfo.iscrcchecked",
					"name": "PharFileInfo::isCRCChecked",
					"description": "Returns whether file entry has had its CRC verified"
				},
				"pharfileinfo.iscompressed": {
					"tokens": [
						"PharFileInfo::isCompressed",
						"isCompressed",
						"::isCompressed"
					],
					"id": "pharfileinfo.iscompressed",
					"name": "PharFileInfo::isCompressed",
					"description": "Returns whether the entry is compressed"
				},
				"pharfileinfo.iscompressedbzip2": {
					"tokens": [
						"PharFileInfo::isCompressedBZIP2",
						"isCompressedBZIP2",
						"::isCompressedBZIP2"
					],
					"id": "pharfileinfo.iscompressedbzip2",
					"name": "PharFileInfo::isCompressedBZIP2",
					"description": "Returns whether the entry is compressed using bzip2"
				},
				"pharfileinfo.iscompressedgz": {
					"tokens": [
						"PharFileInfo::isCompressedGZ",
						"isCompressedGZ",
						"::isCompressedGZ"
					],
					"id": "pharfileinfo.iscompressedgz",
					"name": "PharFileInfo::isCompressedGZ",
					"description": "Returns whether the entry is compressed using gz"
				},
				"pharfileinfo.setcompressedbzip2": {
					"tokens": [
						"PharFileInfo::setCompressedBZIP2",
						"setCompressedBZIP2",
						"::setCompressedBZIP2"
					],
					"id": "pharfileinfo.setcompressedbzip2",
					"name": "PharFileInfo::setCompressedBZIP2",
					"description": "Compresses the current Phar entry within the phar using Bzip2 compression"
				},
				"pharfileinfo.setcompressedgz": {
					"tokens": [
						"PharFileInfo::setCompressedGZ",
						"setCompressedGZ",
						"::setCompressedGZ"
					],
					"id": "pharfileinfo.setcompressedgz",
					"name": "PharFileInfo::setCompressedGZ",
					"description": "Compresses the current Phar entry within the phar using gz compression"
				},
				"pharfileinfo.setmetadata": {
					"tokens": [
						"PharFileInfo::setMetadata",
						"setMetadata",
						"::setMetadata"
					],
					"id": "pharfileinfo.setmetadata",
					"name": "PharFileInfo::setMetadata",
					"description": "Sets file-specific meta-data saved with a file"
				},
				"pharfileinfo.setuncompressed": {
					"tokens": [
						"PharFileInfo::setUncompressed",
						"setUncompressed",
						"::setUncompressed"
					],
					"id": "pharfileinfo.setuncompressed",
					"name": "PharFileInfo::setUncompressed",
					"description": "Uncompresses the current Phar entry within the phar, if it is compressed"
				},
				"pharexception.intro.unused": {
					"tokens": [
						"PharException"
					],
					"id": "pharexception.intro.unused",
					"name": "PharException",
					"description": "The PharException class provides a phar-specific exception class\n    for try/catch blocks."
				},
				"function.rar-wrapper-cache-stats": {
					"tokens": [
						"rar_wrapper_cache_stats",
						"rarwrapper_cache_stats"
					],
					"id": "function.rar-wrapper-cache-stats",
					"name": "rar_wrapper_cache_stats",
					"description": "Cache hits and misses for the URL wrapper"
				},
				"rararchive.close": {
					"tokens": [
						"RarArchive::close",
						"close",
						"::close"
					],
					"id": "rararchive.close",
					"name": "RarArchive::close",
					"description": "Close RAR archive and free all resources"
				},
				"rararchive.getcomment": {
					"tokens": [
						"RarArchive::getComment",
						"getComment",
						"::getComment"
					],
					"id": "rararchive.getcomment",
					"name": "RarArchive::getComment",
					"description": "Get comment text from the RAR archive"
				},
				"rararchive.getentries": {
					"tokens": [
						"RarArchive::getEntries",
						"getEntries",
						"::getEntries"
					],
					"id": "rararchive.getentries",
					"name": "RarArchive::getEntries",
					"description": "Get full list of entries from the RAR archive"
				},
				"rararchive.getentry": {
					"tokens": [
						"RarArchive::getEntry",
						"getEntry",
						"::getEntry"
					],
					"id": "rararchive.getentry",
					"name": "RarArchive::getEntry",
					"description": "Get entry object from the RAR archive"
				},
				"rararchive.isbroken": {
					"tokens": [
						"RarArchive::isBroken",
						"isBroken",
						"::isBroken"
					],
					"id": "rararchive.isbroken",
					"name": "RarArchive::isBroken",
					"description": "Test whether an archive is broken (incomplete)"
				},
				"rararchive.issolid": {
					"tokens": [
						"RarArchive::isSolid",
						"isSolid",
						"::isSolid"
					],
					"id": "rararchive.issolid",
					"name": "RarArchive::isSolid",
					"description": "Check whether the RAR archive is solid"
				},
				"rararchive.open": {
					"tokens": [
						"RarArchive::open",
						"open",
						"::open"
					],
					"id": "rararchive.open",
					"name": "RarArchive::open",
					"description": "Open RAR archive"
				},
				"rararchive.setallowbroken": {
					"tokens": [
						"RarArchive::setAllowBroken",
						"setAllowBroken",
						"::setAllowBroken"
					],
					"id": "rararchive.setallowbroken",
					"name": "RarArchive::setAllowBroken",
					"description": "Whether opening broken archives is allowed"
				},
				"rararchive.tostring": {
					"tokens": [
						"RarArchive::__toString",
						"RarArchive::_toString",
						"__toString",
						"::__toString"
					],
					"id": "rararchive.tostring",
					"name": "RarArchive::__toString",
					"description": "Get text representation"
				},
				"rarentry.extract": {
					"tokens": [
						"RarEntry::extract",
						"extract",
						"::extract"
					],
					"id": "rarentry.extract",
					"name": "RarEntry::extract",
					"description": "Extract entry from the archive"
				},
				"rarentry.getattr": {
					"tokens": [
						"RarEntry::getAttr",
						"getAttr",
						"::getAttr"
					],
					"id": "rarentry.getattr",
					"name": "RarEntry::getAttr",
					"description": "Get attributes of the entry"
				},
				"rarentry.getcrc": {
					"tokens": [
						"RarEntry::getCrc",
						"getCrc",
						"::getCrc"
					],
					"id": "rarentry.getcrc",
					"name": "RarEntry::getCrc",
					"description": "Get CRC of the entry"
				},
				"rarentry.getfiletime": {
					"tokens": [
						"RarEntry::getFileTime",
						"getFileTime",
						"::getFileTime"
					],
					"id": "rarentry.getfiletime",
					"name": "RarEntry::getFileTime",
					"description": "Get entry last modification time"
				},
				"rarentry.gethostos": {
					"tokens": [
						"RarEntry::getHostOs",
						"getHostOs",
						"::getHostOs"
					],
					"id": "rarentry.gethostos",
					"name": "RarEntry::getHostOs",
					"description": "Get entry host OS"
				},
				"rarentry.getmethod": {
					"tokens": [
						"RarEntry::getMethod",
						"getMethod",
						"::getMethod"
					],
					"id": "rarentry.getmethod",
					"name": "RarEntry::getMethod",
					"description": "Get pack method of the entry"
				},
				"rarentry.getname": {
					"tokens": [
						"RarEntry::getName",
						"getName",
						"::getName"
					],
					"id": "rarentry.getname",
					"name": "RarEntry::getName",
					"description": "Get name of the entry"
				},
				"rarentry.getpackedsize": {
					"tokens": [
						"RarEntry::getPackedSize",
						"getPackedSize",
						"::getPackedSize"
					],
					"id": "rarentry.getpackedsize",
					"name": "RarEntry::getPackedSize",
					"description": "Get packed size of the entry"
				},
				"rarentry.getstream": {
					"tokens": [
						"RarEntry::getStream",
						"getStream",
						"::getStream"
					],
					"id": "rarentry.getstream",
					"name": "RarEntry::getStream",
					"description": "Get file handler for entry"
				},
				"rarentry.getunpackedsize": {
					"tokens": [
						"RarEntry::getUnpackedSize",
						"getUnpackedSize",
						"::getUnpackedSize"
					],
					"id": "rarentry.getunpackedsize",
					"name": "RarEntry::getUnpackedSize",
					"description": "Get unpacked size of the entry"
				},
				"rarentry.getversion": {
					"tokens": [
						"RarEntry::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "rarentry.getversion",
					"name": "RarEntry::getVersion",
					"description": "Get minimum version of RAR program required to unpack the entry"
				},
				"rarentry.isdirectory": {
					"tokens": [
						"RarEntry::isDirectory",
						"isDirectory",
						"::isDirectory"
					],
					"id": "rarentry.isdirectory",
					"name": "RarEntry::isDirectory",
					"description": "Test whether an entry represents a directory"
				},
				"rarentry.isencrypted": {
					"tokens": [
						"RarEntry::isEncrypted",
						"isEncrypted",
						"::isEncrypted"
					],
					"id": "rarentry.isencrypted",
					"name": "RarEntry::isEncrypted",
					"description": "Test whether an entry is encrypted"
				},
				"rarentry.tostring": {
					"tokens": [
						"RarEntry::__toString",
						"RarEntry::_toString",
						"__toString",
						"::__toString"
					],
					"id": "rarentry.tostring",
					"name": "RarEntry::__toString",
					"description": "Get text representation of entry"
				},
				"rarexception.isusingexceptions": {
					"tokens": [
						"RarException::isUsingExceptions",
						"isUsingExceptions",
						"::isUsingExceptions"
					],
					"id": "rarexception.isusingexceptions",
					"name": "RarException::isUsingExceptions",
					"description": "Check whether error handling with exceptions is in use"
				},
				"rarexception.setusingexceptions": {
					"tokens": [
						"RarException::setUsingExceptions",
						"setUsingExceptions",
						"::setUsingExceptions"
					],
					"id": "rarexception.setusingexceptions",
					"name": "RarException::setUsingExceptions",
					"description": "Activate and deactivate error handling with exceptions"
				},
				"ziparchive.addemptydir": {
					"tokens": [
						"ZipArchive::addEmptyDir",
						"addEmptyDir",
						"::addEmptyDir"
					],
					"id": "ziparchive.addemptydir",
					"name": "ZipArchive::addEmptyDir",
					"description": "Add a new directory"
				},
				"ziparchive.addfile": {
					"tokens": [
						"ZipArchive::addFile",
						"addFile",
						"::addFile"
					],
					"id": "ziparchive.addfile",
					"name": "ZipArchive::addFile",
					"description": "Adds a file to a ZIP archive from the given path"
				},
				"ziparchive.addfromstring": {
					"tokens": [
						"ZipArchive::addFromString",
						"addFromString",
						"::addFromString"
					],
					"id": "ziparchive.addfromstring",
					"name": "ZipArchive::addFromString",
					"description": "Add a file to a ZIP archive using its contents"
				},
				"ziparchive.addglob": {
					"tokens": [
						"ZipArchive::addGlob",
						"addGlob",
						"::addGlob"
					],
					"id": "ziparchive.addglob",
					"name": "ZipArchive::addGlob",
					"description": "Add files from a directory by glob pattern"
				},
				"ziparchive.addpattern": {
					"tokens": [
						"ZipArchive::addPattern",
						"addPattern",
						"::addPattern"
					],
					"id": "ziparchive.addpattern",
					"name": "ZipArchive::addPattern",
					"description": "Add files from a directory by PCRE pattern"
				},
				"ziparchive.close": {
					"tokens": [
						"ZipArchive::close",
						"close",
						"::close"
					],
					"id": "ziparchive.close",
					"name": "ZipArchive::close",
					"description": "Close the active archive (opened or newly created)"
				},
				"ziparchive.deleteindex": {
					"tokens": [
						"ZipArchive::deleteIndex",
						"deleteIndex",
						"::deleteIndex"
					],
					"id": "ziparchive.deleteindex",
					"name": "ZipArchive::deleteIndex",
					"description": "delete an entry in the archive using its index"
				},
				"ziparchive.deletename": {
					"tokens": [
						"ZipArchive::deleteName",
						"deleteName",
						"::deleteName"
					],
					"id": "ziparchive.deletename",
					"name": "ZipArchive::deleteName",
					"description": "delete an entry in the archive using its name"
				},
				"ziparchive.extractto": {
					"tokens": [
						"ZipArchive::extractTo",
						"extractTo",
						"::extractTo"
					],
					"id": "ziparchive.extractto",
					"name": "ZipArchive::extractTo",
					"description": "Extract the archive contents"
				},
				"ziparchive.getarchivecomment": {
					"tokens": [
						"ZipArchive::getArchiveComment",
						"getArchiveComment",
						"::getArchiveComment"
					],
					"id": "ziparchive.getarchivecomment",
					"name": "ZipArchive::getArchiveComment",
					"description": "Returns the Zip archive comment"
				},
				"ziparchive.getcommentindex": {
					"tokens": [
						"ZipArchive::getCommentIndex",
						"getCommentIndex",
						"::getCommentIndex"
					],
					"id": "ziparchive.getcommentindex",
					"name": "ZipArchive::getCommentIndex",
					"description": "Returns the comment of an entry using the entry index"
				},
				"ziparchive.getcommentname": {
					"tokens": [
						"ZipArchive::getCommentName",
						"getCommentName",
						"::getCommentName"
					],
					"id": "ziparchive.getcommentname",
					"name": "ZipArchive::getCommentName",
					"description": "Returns the comment of an entry using the entry name"
				},
				"ziparchive.getexternalattributesindex": {
					"tokens": [
						"ZipArchive::getExternalAttributesIndex",
						"getExternalAttributesIndex",
						"::getExternalAttributesIndex"
					],
					"id": "ziparchive.getexternalattributesindex",
					"name": "ZipArchive::getExternalAttributesIndex",
					"description": "Retrieve the external attributes of an entry defined by its index"
				},
				"ziparchive.getexternalattributesname": {
					"tokens": [
						"ZipArchive::getExternalAttributesName",
						"getExternalAttributesName",
						"::getExternalAttributesName"
					],
					"id": "ziparchive.getexternalattributesname",
					"name": "ZipArchive::getExternalAttributesName",
					"description": "Retrieve the external attributes of an entry defined by its name"
				},
				"ziparchive.getfromindex": {
					"tokens": [
						"ZipArchive::getFromIndex",
						"getFromIndex",
						"::getFromIndex"
					],
					"id": "ziparchive.getfromindex",
					"name": "ZipArchive::getFromIndex",
					"description": "Returns the entry contents using its index"
				},
				"ziparchive.getfromname": {
					"tokens": [
						"ZipArchive::getFromName",
						"getFromName",
						"::getFromName"
					],
					"id": "ziparchive.getfromname",
					"name": "ZipArchive::getFromName",
					"description": "Returns the entry contents using its name"
				},
				"ziparchive.getnameindex": {
					"tokens": [
						"ZipArchive::getNameIndex",
						"getNameIndex",
						"::getNameIndex"
					],
					"id": "ziparchive.getnameindex",
					"name": "ZipArchive::getNameIndex",
					"description": "Returns the name of an entry using its index"
				},
				"ziparchive.getstatusstring": {
					"tokens": [
						"ZipArchive::getStatusString",
						"getStatusString",
						"::getStatusString"
					],
					"id": "ziparchive.getstatusstring",
					"name": "ZipArchive::getStatusString",
					"description": "Returns the status error message, system and/or zip messages"
				},
				"ziparchive.getstream": {
					"tokens": [
						"ZipArchive::getStream",
						"getStream",
						"::getStream"
					],
					"id": "ziparchive.getstream",
					"name": "ZipArchive::getStream",
					"description": "Get a file handler to the entry defined by its name (read only)."
				},
				"ziparchive.locatename": {
					"tokens": [
						"ZipArchive::locateName",
						"locateName",
						"::locateName"
					],
					"id": "ziparchive.locatename",
					"name": "ZipArchive::locateName",
					"description": "Returns the index of the entry in the archive"
				},
				"ziparchive.open": {
					"tokens": [
						"ZipArchive::open",
						"open",
						"::open"
					],
					"id": "ziparchive.open",
					"name": "ZipArchive::open",
					"description": "Open a ZIP file archive"
				},
				"ziparchive.renameindex": {
					"tokens": [
						"ZipArchive::renameIndex",
						"renameIndex",
						"::renameIndex"
					],
					"id": "ziparchive.renameindex",
					"name": "ZipArchive::renameIndex",
					"description": "Renames an entry defined by its index"
				},
				"ziparchive.renamename": {
					"tokens": [
						"ZipArchive::renameName",
						"renameName",
						"::renameName"
					],
					"id": "ziparchive.renamename",
					"name": "ZipArchive::renameName",
					"description": "Renames an entry defined by its name"
				},
				"ziparchive.setarchivecomment": {
					"tokens": [
						"ZipArchive::setArchiveComment",
						"setArchiveComment",
						"::setArchiveComment"
					],
					"id": "ziparchive.setarchivecomment",
					"name": "ZipArchive::setArchiveComment",
					"description": "Set the comment of a ZIP archive"
				},
				"ziparchive.setcommentindex": {
					"tokens": [
						"ZipArchive::setCommentIndex",
						"setCommentIndex",
						"::setCommentIndex"
					],
					"id": "ziparchive.setcommentindex",
					"name": "ZipArchive::setCommentIndex",
					"description": "Set the comment of an entry defined by its index"
				},
				"ziparchive.setcommentname": {
					"tokens": [
						"ZipArchive::setCommentName",
						"setCommentName",
						"::setCommentName"
					],
					"id": "ziparchive.setcommentname",
					"name": "ZipArchive::setCommentName",
					"description": "Set the comment of an entry defined by its name"
				},
				"ziparchive.setcompressionindex": {
					"tokens": [
						"ZipArchive::setCompressionIndex",
						"setCompressionIndex",
						"::setCompressionIndex"
					],
					"id": "ziparchive.setcompressionindex",
					"name": "ZipArchive::setCompressionIndex",
					"description": "Set the compression method of an entry defined by its index"
				},
				"ziparchive.setcompressionname": {
					"tokens": [
						"ZipArchive::setCompressionName",
						"setCompressionName",
						"::setCompressionName"
					],
					"id": "ziparchive.setcompressionname",
					"name": "ZipArchive::setCompressionName",
					"description": "Set the compression method of an entry defined by its name"
				},
				"ziparchive.setexternalattributesindex": {
					"tokens": [
						"ZipArchive::setExternalAttributesIndex",
						"setExternalAttributesIndex",
						"::setExternalAttributesIndex"
					],
					"id": "ziparchive.setexternalattributesindex",
					"name": "ZipArchive::setExternalAttributesIndex",
					"description": "Set the external attributes of an entry defined by its index"
				},
				"ziparchive.setexternalattributesname": {
					"tokens": [
						"ZipArchive::setExternalAttributesName",
						"setExternalAttributesName",
						"::setExternalAttributesName"
					],
					"id": "ziparchive.setexternalattributesname",
					"name": "ZipArchive::setExternalAttributesName",
					"description": "Set the external attributes of an entry defined by its name"
				},
				"ziparchive.setpassword": {
					"tokens": [
						"ZipArchive::setPassword",
						"setPassword",
						"::setPassword"
					],
					"id": "ziparchive.setpassword",
					"name": "ZipArchive::setPassword",
					"description": "Set the password for the active archive"
				},
				"ziparchive.statindex": {
					"tokens": [
						"ZipArchive::statIndex",
						"statIndex",
						"::statIndex"
					],
					"id": "ziparchive.statindex",
					"name": "ZipArchive::statIndex",
					"description": "Get the details of an entry defined by its index."
				},
				"ziparchive.statname": {
					"tokens": [
						"ZipArchive::statName",
						"statName",
						"::statName"
					],
					"id": "ziparchive.statname",
					"name": "ZipArchive::statName",
					"description": "Get the details of an entry defined by its name."
				},
				"ziparchive.unchangeall": {
					"tokens": [
						"ZipArchive::unchangeAll",
						"unchangeAll",
						"::unchangeAll"
					],
					"id": "ziparchive.unchangeall",
					"name": "ZipArchive::unchangeAll",
					"description": "Undo all changes done in the archive"
				},
				"ziparchive.unchangearchive": {
					"tokens": [
						"ZipArchive::unchangeArchive",
						"unchangeArchive",
						"::unchangeArchive"
					],
					"id": "ziparchive.unchangearchive",
					"name": "ZipArchive::unchangeArchive",
					"description": "Revert all global changes done in the archive."
				},
				"ziparchive.unchangeindex": {
					"tokens": [
						"ZipArchive::unchangeIndex",
						"unchangeIndex",
						"::unchangeIndex"
					],
					"id": "ziparchive.unchangeindex",
					"name": "ZipArchive::unchangeIndex",
					"description": "Revert all changes done to an entry at the given index"
				},
				"ziparchive.unchangename": {
					"tokens": [
						"ZipArchive::unchangeName",
						"unchangeName",
						"::unchangeName"
					],
					"id": "ziparchive.unchangename",
					"name": "ZipArchive::unchangeName",
					"description": "Revert all changes done to an entry with the given name."
				},
				"function.zip-close": {
					"tokens": [
						"zip_close",
						"zipclose"
					],
					"id": "function.zip-close",
					"name": "zip_close",
					"description": "Close a ZIP file archive"
				},
				"function.zip-entry-close": {
					"tokens": [
						"zip_entry_close",
						"zipentry_close"
					],
					"id": "function.zip-entry-close",
					"name": "zip_entry_close",
					"description": "Close a directory entry"
				},
				"function.zip-entry-compressedsize": {
					"tokens": [
						"zip_entry_compressedsize",
						"zipentry_compressedsize"
					],
					"id": "function.zip-entry-compressedsize",
					"name": "zip_entry_compressedsize",
					"description": "Retrieve the compressed size of a directory entry"
				},
				"function.zip-entry-compressionmethod": {
					"tokens": [
						"zip_entry_compressionmethod",
						"zipentry_compressionmethod"
					],
					"id": "function.zip-entry-compressionmethod",
					"name": "zip_entry_compressionmethod",
					"description": "Retrieve the compression method of a directory entry"
				},
				"function.zip-entry-filesize": {
					"tokens": [
						"zip_entry_filesize",
						"zipentry_filesize"
					],
					"id": "function.zip-entry-filesize",
					"name": "zip_entry_filesize",
					"description": "Retrieve the actual file size of a directory entry"
				},
				"function.zip-entry-name": {
					"tokens": [
						"zip_entry_name",
						"zipentry_name"
					],
					"id": "function.zip-entry-name",
					"name": "zip_entry_name",
					"description": "Retrieve the name of a directory entry"
				},
				"function.zip-entry-open": {
					"tokens": [
						"zip_entry_open",
						"zipentry_open"
					],
					"id": "function.zip-entry-open",
					"name": "zip_entry_open",
					"description": "Open a directory entry for reading"
				},
				"function.zip-entry-read": {
					"tokens": [
						"zip_entry_read",
						"zipentry_read"
					],
					"id": "function.zip-entry-read",
					"name": "zip_entry_read",
					"description": "Read from an open directory entry"
				},
				"function.zip-open": {
					"tokens": [
						"zip_open",
						"zipopen"
					],
					"id": "function.zip-open",
					"name": "zip_open",
					"description": "Open a ZIP file archive"
				},
				"function.zip-read": {
					"tokens": [
						"zip_read",
						"zipread"
					],
					"id": "function.zip-read",
					"name": "zip_read",
					"description": "Read next entry in a ZIP file archive"
				},
				"function.gzclose": {
					"tokens": [
						"gzclose"
					],
					"id": "function.gzclose",
					"name": "gzclose",
					"description": "Close an open gz-file pointer"
				},
				"function.gzcompress": {
					"tokens": [
						"gzcompress"
					],
					"id": "function.gzcompress",
					"name": "gzcompress",
					"description": "Compress a string"
				},
				"function.gzdecode": {
					"tokens": [
						"gzdecode"
					],
					"id": "function.gzdecode",
					"name": "gzdecode",
					"description": "Decodes a gzip compressed string"
				},
				"function.gzdeflate": {
					"tokens": [
						"gzdeflate"
					],
					"id": "function.gzdeflate",
					"name": "gzdeflate",
					"description": "Deflate a string"
				},
				"function.gzencode": {
					"tokens": [
						"gzencode"
					],
					"id": "function.gzencode",
					"name": "gzencode",
					"description": "Create a gzip compressed string"
				},
				"function.gzeof": {
					"tokens": [
						"gzeof"
					],
					"id": "function.gzeof",
					"name": "gzeof",
					"description": "Test for EOF on a gz-file pointer"
				},
				"function.gzfile": {
					"tokens": [
						"gzfile"
					],
					"id": "function.gzfile",
					"name": "gzfile",
					"description": "Read entire gz-file into an array"
				},
				"function.gzgetc": {
					"tokens": [
						"gzgetc"
					],
					"id": "function.gzgetc",
					"name": "gzgetc",
					"description": "Get character from gz-file pointer"
				},
				"function.gzgets": {
					"tokens": [
						"gzgets"
					],
					"id": "function.gzgets",
					"name": "gzgets",
					"description": "Get line from file pointer"
				},
				"function.gzgetss": {
					"tokens": [
						"gzgetss"
					],
					"id": "function.gzgetss",
					"name": "gzgetss",
					"description": "Get line from gz-file pointer and strip HTML tags"
				},
				"function.gzinflate": {
					"tokens": [
						"gzinflate"
					],
					"id": "function.gzinflate",
					"name": "gzinflate",
					"description": "Inflate a deflated string"
				},
				"function.gzopen": {
					"tokens": [
						"gzopen"
					],
					"id": "function.gzopen",
					"name": "gzopen",
					"description": "Open gz-file"
				},
				"function.gzpassthru": {
					"tokens": [
						"gzpassthru"
					],
					"id": "function.gzpassthru",
					"name": "gzpassthru",
					"description": "Output all remaining data on a gz-file pointer"
				},
				"function.gzputs": {
					"tokens": [
						"gzputs"
					],
					"id": "function.gzputs",
					"name": "gzputs",
					"description": "Alias of gzwrite"
				},
				"function.gzread": {
					"tokens": [
						"gzread"
					],
					"id": "function.gzread",
					"name": "gzread",
					"description": "Binary-safe gz-file read"
				},
				"function.gzrewind": {
					"tokens": [
						"gzrewind"
					],
					"id": "function.gzrewind",
					"name": "gzrewind",
					"description": "Rewind the position of a gz-file pointer"
				},
				"function.gzseek": {
					"tokens": [
						"gzseek"
					],
					"id": "function.gzseek",
					"name": "gzseek",
					"description": "Seek on a gz-file pointer"
				},
				"function.gztell": {
					"tokens": [
						"gztell"
					],
					"id": "function.gztell",
					"name": "gztell",
					"description": "Tell gz-file pointer read/write position"
				},
				"function.gzuncompress": {
					"tokens": [
						"gzuncompress"
					],
					"id": "function.gzuncompress",
					"name": "gzuncompress",
					"description": "Uncompress a compressed string"
				},
				"function.gzwrite": {
					"tokens": [
						"gzwrite"
					],
					"id": "function.gzwrite",
					"name": "gzwrite",
					"description": "Binary-safe gz-file write"
				},
				"function.readgzfile": {
					"tokens": [
						"readgzfile"
					],
					"id": "function.readgzfile",
					"name": "readgzfile",
					"description": "Output a gz-file"
				},
				"function.zlib-decode": {
					"tokens": [
						"zlib_decode",
						"zlibdecode"
					],
					"id": "function.zlib-decode",
					"name": "zlib_decode",
					"description": "Uncompress any raw/gzip/zlib encoded data"
				},
				"function.zlib-encode": {
					"tokens": [
						"zlib_encode",
						"zlibencode"
					],
					"id": "function.zlib-encode",
					"name": "zlib_encode",
					"description": "Compress data with the specified encoding"
				},
				"function.zlib-get-coding-type": {
					"tokens": [
						"zlib_get_coding_type",
						"zlibget_coding_type"
					],
					"id": "function.zlib-get-coding-type",
					"name": "zlib_get_coding_type",
					"description": "Returns the coding type used for output compression"
				},
				"function.m-checkstatus": {
					"tokens": [
						"m_checkstatus",
						"mcheckstatus"
					],
					"id": "function.m-checkstatus",
					"name": "m_checkstatus",
					"description": "Check to see if a transaction has completed"
				},
				"function.m-completeauthorizations": {
					"tokens": [
						"m_completeauthorizations",
						"mcompleteauthorizations"
					],
					"id": "function.m-completeauthorizations",
					"name": "m_completeauthorizations",
					"description": "Number of complete authorizations in queue, returning an array of their identifiers"
				},
				"function.m-connect": {
					"tokens": [
						"m_connect",
						"mconnect"
					],
					"id": "function.m-connect",
					"name": "m_connect",
					"description": "Establish the connection to MCVE"
				},
				"function.m-connectionerror": {
					"tokens": [
						"m_connectionerror",
						"mconnectionerror"
					],
					"id": "function.m-connectionerror",
					"name": "m_connectionerror",
					"description": "Get a textual representation of why a connection failed"
				},
				"function.m-deletetrans": {
					"tokens": [
						"m_deletetrans",
						"mdeletetrans"
					],
					"id": "function.m-deletetrans",
					"name": "m_deletetrans",
					"description": "Delete specified transaction from MCVE_CONN structure"
				},
				"function.m-destroyconn": {
					"tokens": [
						"m_destroyconn",
						"mdestroyconn"
					],
					"id": "function.m-destroyconn",
					"name": "m_destroyconn",
					"description": "Destroy the connection and MCVE_CONN structure"
				},
				"function.m-destroyengine": {
					"tokens": [
						"m_destroyengine",
						"mdestroyengine"
					],
					"id": "function.m-destroyengine",
					"name": "m_destroyengine",
					"description": "Free memory associated with IP/SSL connectivity"
				},
				"function.m-getcell": {
					"tokens": [
						"m_getcell",
						"mgetcell"
					],
					"id": "function.m-getcell",
					"name": "m_getcell",
					"description": "Get a specific cell from a comma delimited response by column name"
				},
				"function.m-getcellbynum": {
					"tokens": [
						"m_getcellbynum",
						"mgetcellbynum"
					],
					"id": "function.m-getcellbynum",
					"name": "m_getcellbynum",
					"description": "Get a specific cell from a comma delimited response by column number"
				},
				"function.m-getcommadelimited": {
					"tokens": [
						"m_getcommadelimited",
						"mgetcommadelimited"
					],
					"id": "function.m-getcommadelimited",
					"name": "m_getcommadelimited",
					"description": "Get the RAW comma delimited data returned from MCVE"
				},
				"function.m-getheader": {
					"tokens": [
						"m_getheader",
						"mgetheader"
					],
					"id": "function.m-getheader",
					"name": "m_getheader",
					"description": "Get the name of the column in a comma-delimited response"
				},
				"function.m-initconn": {
					"tokens": [
						"m_initconn",
						"minitconn"
					],
					"id": "function.m-initconn",
					"name": "m_initconn",
					"description": "Create and initialize an MCVE_CONN structure"
				},
				"function.m-initengine": {
					"tokens": [
						"m_initengine",
						"minitengine"
					],
					"id": "function.m-initengine",
					"name": "m_initengine",
					"description": "Ready the client for IP/SSL Communication"
				},
				"function.m-iscommadelimited": {
					"tokens": [
						"m_iscommadelimited",
						"miscommadelimited"
					],
					"id": "function.m-iscommadelimited",
					"name": "m_iscommadelimited",
					"description": "Checks to see if response is comma delimited"
				},
				"function.m-maxconntimeout": {
					"tokens": [
						"m_maxconntimeout",
						"mmaxconntimeout"
					],
					"id": "function.m-maxconntimeout",
					"name": "m_maxconntimeout",
					"description": "The maximum amount of time the API will attempt a connection to MCVE"
				},
				"function.m-monitor": {
					"tokens": [
						"m_monitor",
						"mmonitor"
					],
					"id": "function.m-monitor",
					"name": "m_monitor",
					"description": "Perform communication with MCVE (send/receive data) Non-blocking"
				},
				"function.m-numcolumns": {
					"tokens": [
						"m_numcolumns",
						"mnumcolumns"
					],
					"id": "function.m-numcolumns",
					"name": "m_numcolumns",
					"description": "Number of columns returned in a comma delimited response"
				},
				"function.m-numrows": {
					"tokens": [
						"m_numrows",
						"mnumrows"
					],
					"id": "function.m-numrows",
					"name": "m_numrows",
					"description": "Number of rows returned in a comma delimited response"
				},
				"function.m-parsecommadelimited": {
					"tokens": [
						"m_parsecommadelimited",
						"mparsecommadelimited"
					],
					"id": "function.m-parsecommadelimited",
					"name": "m_parsecommadelimited",
					"description": "Parse the comma delimited response so m_getcell, etc will work"
				},
				"function.m-responsekeys": {
					"tokens": [
						"m_responsekeys",
						"mresponsekeys"
					],
					"id": "function.m-responsekeys",
					"name": "m_responsekeys",
					"description": "Returns array of strings which represents the keys that can be used\n for response parameters on this transaction"
				},
				"function.m-responseparam": {
					"tokens": [
						"m_responseparam",
						"mresponseparam"
					],
					"id": "function.m-responseparam",
					"name": "m_responseparam",
					"description": "Get a custom response parameter"
				},
				"function.m-returnstatus": {
					"tokens": [
						"m_returnstatus",
						"mreturnstatus"
					],
					"id": "function.m-returnstatus",
					"name": "m_returnstatus",
					"description": "Check to see if the transaction was successful"
				},
				"function.m-setblocking": {
					"tokens": [
						"m_setblocking",
						"msetblocking"
					],
					"id": "function.m-setblocking",
					"name": "m_setblocking",
					"description": "Set blocking/non-blocking mode for connection"
				},
				"function.m-setdropfile": {
					"tokens": [
						"m_setdropfile",
						"msetdropfile"
					],
					"id": "function.m-setdropfile",
					"name": "m_setdropfile",
					"description": "Set the connection method to Drop-File"
				},
				"function.m-setip": {
					"tokens": [
						"m_setip",
						"msetip"
					],
					"id": "function.m-setip",
					"name": "m_setip",
					"description": "Set the connection method to IP"
				},
				"function.m-setssl-cafile": {
					"tokens": [
						"m_setssl_cafile",
						"msetssl_cafile"
					],
					"id": "function.m-setssl-cafile",
					"name": "m_setssl_cafile",
					"description": "Set SSL CA (Certificate Authority) file for verification of server\n certificate"
				},
				"function.m-setssl-files": {
					"tokens": [
						"m_setssl_files",
						"msetssl_files"
					],
					"id": "function.m-setssl-files",
					"name": "m_setssl_files",
					"description": "Set certificate key files and certificates if server requires client certificate\n verification"
				},
				"function.m-setssl": {
					"tokens": [
						"m_setssl",
						"msetssl"
					],
					"id": "function.m-setssl",
					"name": "m_setssl",
					"description": "Set the connection method to SSL"
				},
				"function.m-settimeout": {
					"tokens": [
						"m_settimeout",
						"msettimeout"
					],
					"id": "function.m-settimeout",
					"name": "m_settimeout",
					"description": "Set maximum transaction time (per trans)"
				},
				"function.m-sslcert-gen-hash": {
					"tokens": [
						"m_sslcert_gen_hash",
						"msslcert_gen_hash"
					],
					"id": "function.m-sslcert-gen-hash",
					"name": "m_sslcert_gen_hash",
					"description": "Generate hash for SSL client certificate verification"
				},
				"function.m-transactionssent": {
					"tokens": [
						"m_transactionssent",
						"mtransactionssent"
					],
					"id": "function.m-transactionssent",
					"name": "m_transactionssent",
					"description": "Check to see if outgoing buffer is clear"
				},
				"function.m-transinqueue": {
					"tokens": [
						"m_transinqueue",
						"mtransinqueue"
					],
					"id": "function.m-transinqueue",
					"name": "m_transinqueue",
					"description": "Number of transactions in client-queue"
				},
				"function.m-transkeyval": {
					"tokens": [
						"m_transkeyval",
						"mtranskeyval"
					],
					"id": "function.m-transkeyval",
					"name": "m_transkeyval",
					"description": "Add key/value pair to a transaction. Replaces deprecated transparam()"
				},
				"function.m-transnew": {
					"tokens": [
						"m_transnew",
						"mtransnew"
					],
					"id": "function.m-transnew",
					"name": "m_transnew",
					"description": "Start a new transaction"
				},
				"function.m-transsend": {
					"tokens": [
						"m_transsend",
						"mtranssend"
					],
					"id": "function.m-transsend",
					"name": "m_transsend",
					"description": "Finalize and send the transaction"
				},
				"function.m-uwait": {
					"tokens": [
						"m_uwait",
						"muwait"
					],
					"id": "function.m-uwait",
					"name": "m_uwait",
					"description": "Wait x microsecs"
				},
				"function.m-validateidentifier": {
					"tokens": [
						"m_validateidentifier",
						"mvalidateidentifier"
					],
					"id": "function.m-validateidentifier",
					"name": "m_validateidentifier",
					"description": "Whether or not to validate the passed identifier on any transaction it is passed to"
				},
				"function.m-verifyconnection": {
					"tokens": [
						"m_verifyconnection",
						"mverifyconnection"
					],
					"id": "function.m-verifyconnection",
					"name": "m_verifyconnection",
					"description": "Set whether or not to PING upon connect to verify connection"
				},
				"function.m-verifysslcert": {
					"tokens": [
						"m_verifysslcert",
						"mverifysslcert"
					],
					"id": "function.m-verifysslcert",
					"name": "m_verifysslcert",
					"description": "Set whether or not to verify the server ssl certificate"
				},
				"function.calcul-hmac": {
					"tokens": [
						"calcul_hmac",
						"calculhmac"
					],
					"id": "function.calcul-hmac",
					"name": "calcul_hmac",
					"description": "Obtain a hmac key (needs 8 arguments)"
				},
				"function.calculhmac": {
					"tokens": [
						"calculhmac"
					],
					"id": "function.calculhmac",
					"name": "calculhmac",
					"description": "Obtain a hmac key (needs 2 arguments)"
				},
				"function.nthmac": {
					"tokens": [
						"nthmac"
					],
					"id": "function.nthmac",
					"name": "nthmac",
					"description": "Obtain a nthmac key (needs 2 arguments)"
				},
				"function.signeurlpaiement": {
					"tokens": [
						"signeurlpaiement"
					],
					"id": "function.signeurlpaiement",
					"name": "signeurlpaiement",
					"description": "Obtain the payment url (needs 2 arguments)"
				},
				"function.crack-check": {
					"tokens": [
						"crack_check",
						"crackcheck"
					],
					"id": "function.crack-check",
					"name": "crack_check",
					"description": "Performs an obscure check with the given password"
				},
				"function.crack-closedict": {
					"tokens": [
						"crack_closedict",
						"crackclosedict"
					],
					"id": "function.crack-closedict",
					"name": "crack_closedict",
					"description": "Closes an open CrackLib dictionary"
				},
				"function.crack-getlastmessage": {
					"tokens": [
						"crack_getlastmessage",
						"crackgetlastmessage"
					],
					"id": "function.crack-getlastmessage",
					"name": "crack_getlastmessage",
					"description": "Returns the message from the last obscure check"
				},
				"function.crack-opendict": {
					"tokens": [
						"crack_opendict",
						"crackopendict"
					],
					"id": "function.crack-opendict",
					"name": "crack_opendict",
					"description": "Opens a new CrackLib dictionary"
				},
				"function.random-bytes": {
					"tokens": [
						"random_bytes",
						"randombytes"
					],
					"id": "function.random-bytes",
					"name": "random_bytes",
					"description": "Generates cryptographically secure pseudo-random bytes"
				},
				"function.random-int": {
					"tokens": [
						"random_int",
						"randomint"
					],
					"id": "function.random-int",
					"name": "random_int",
					"description": "Generates cryptographically secure pseudo-random integers"
				},
				"function.hash-algos": {
					"tokens": [
						"hash_algos",
						"hashalgos"
					],
					"id": "function.hash-algos",
					"name": "hash_algos",
					"description": "Return a list of registered hashing algorithms"
				},
				"function.hash-copy": {
					"tokens": [
						"hash_copy",
						"hashcopy"
					],
					"id": "function.hash-copy",
					"name": "hash_copy",
					"description": "Copy hashing context"
				},
				"function.hash-equals": {
					"tokens": [
						"hash_equals",
						"hashequals"
					],
					"id": "function.hash-equals",
					"name": "hash_equals",
					"description": "Timing attack safe string comparison"
				},
				"function.hash-file": {
					"tokens": [
						"hash_file",
						"hashfile"
					],
					"id": "function.hash-file",
					"name": "hash_file",
					"description": "Generate a hash value using the contents of a given file"
				},
				"function.hash-final": {
					"tokens": [
						"hash_final",
						"hashfinal"
					],
					"id": "function.hash-final",
					"name": "hash_final",
					"description": "Finalize an incremental hash and return resulting digest"
				},
				"function.hash-hmac-file": {
					"tokens": [
						"hash_hmac_file",
						"hashhmac_file"
					],
					"id": "function.hash-hmac-file",
					"name": "hash_hmac_file",
					"description": "Generate a keyed hash value using the HMAC method and the contents of a given file"
				},
				"function.hash-hmac": {
					"tokens": [
						"hash_hmac",
						"hashhmac"
					],
					"id": "function.hash-hmac",
					"name": "hash_hmac",
					"description": "Generate a keyed hash value using the HMAC method"
				},
				"function.hash-init": {
					"tokens": [
						"hash_init",
						"hashinit"
					],
					"id": "function.hash-init",
					"name": "hash_init",
					"description": "Initialize an incremental hashing context"
				},
				"function.hash-pbkdf2": {
					"tokens": [
						"hash_pbkdf2",
						"hashpbkdf2"
					],
					"id": "function.hash-pbkdf2",
					"name": "hash_pbkdf2",
					"description": "Generate a PBKDF2 key derivation of a supplied password"
				},
				"function.hash-update-file": {
					"tokens": [
						"hash_update_file",
						"hashupdate_file"
					],
					"id": "function.hash-update-file",
					"name": "hash_update_file",
					"description": "Pump data into an active hashing context from a file"
				},
				"function.hash-update-stream": {
					"tokens": [
						"hash_update_stream",
						"hashupdate_stream"
					],
					"id": "function.hash-update-stream",
					"name": "hash_update_stream",
					"description": "Pump data into an active hashing context from an open stream"
				},
				"function.hash-update": {
					"tokens": [
						"hash_update",
						"hashupdate"
					],
					"id": "function.hash-update",
					"name": "hash_update",
					"description": "Pump data into an active hashing context"
				},
				"function.hash": {
					"tokens": [
						"hash"
					],
					"id": "function.hash",
					"name": "hash",
					"description": "Generate a hash value (message digest)"
				},
				"function.mcrypt-cbc": {
					"tokens": [
						"mcrypt_cbc",
						"mcryptcbc"
					],
					"id": "function.mcrypt-cbc",
					"name": "mcrypt_cbc",
					"description": "Encrypts/decrypts data in CBC mode"
				},
				"function.mcrypt-cfb": {
					"tokens": [
						"mcrypt_cfb",
						"mcryptcfb"
					],
					"id": "function.mcrypt-cfb",
					"name": "mcrypt_cfb",
					"description": "Encrypts/decrypts data in CFB mode"
				},
				"function.mcrypt-create-iv": {
					"tokens": [
						"mcrypt_create_iv",
						"mcryptcreate_iv"
					],
					"id": "function.mcrypt-create-iv",
					"name": "mcrypt_create_iv",
					"description": "Creates an initialization vector (IV) from a random source"
				},
				"function.mcrypt-decrypt": {
					"tokens": [
						"mcrypt_decrypt",
						"mcryptdecrypt"
					],
					"id": "function.mcrypt-decrypt",
					"name": "mcrypt_decrypt",
					"description": "Decrypts crypttext with given parameters"
				},
				"function.mcrypt-ecb": {
					"tokens": [
						"mcrypt_ecb",
						"mcryptecb"
					],
					"id": "function.mcrypt-ecb",
					"name": "mcrypt_ecb",
					"description": "Deprecated: Encrypts/decrypts data in ECB mode"
				},
				"function.mcrypt-enc-get-algorithms-name": {
					"tokens": [
						"mcrypt_enc_get_algorithms_name",
						"mcryptenc_get_algorithms_name"
					],
					"id": "function.mcrypt-enc-get-algorithms-name",
					"name": "mcrypt_enc_get_algorithms_name",
					"description": "Returns the name of the opened algorithm"
				},
				"function.mcrypt-enc-get-block-size": {
					"tokens": [
						"mcrypt_enc_get_block_size",
						"mcryptenc_get_block_size"
					],
					"id": "function.mcrypt-enc-get-block-size",
					"name": "mcrypt_enc_get_block_size",
					"description": "Returns the blocksize of the opened algorithm"
				},
				"function.mcrypt-enc-get-iv-size": {
					"tokens": [
						"mcrypt_enc_get_iv_size",
						"mcryptenc_get_iv_size"
					],
					"id": "function.mcrypt-enc-get-iv-size",
					"name": "mcrypt_enc_get_iv_size",
					"description": "Returns the size of the IV of the opened algorithm"
				},
				"function.mcrypt-enc-get-key-size": {
					"tokens": [
						"mcrypt_enc_get_key_size",
						"mcryptenc_get_key_size"
					],
					"id": "function.mcrypt-enc-get-key-size",
					"name": "mcrypt_enc_get_key_size",
					"description": "Returns the maximum supported keysize of the opened mode"
				},
				"function.mcrypt-enc-get-modes-name": {
					"tokens": [
						"mcrypt_enc_get_modes_name",
						"mcryptenc_get_modes_name"
					],
					"id": "function.mcrypt-enc-get-modes-name",
					"name": "mcrypt_enc_get_modes_name",
					"description": "Returns the name of the opened mode"
				},
				"function.mcrypt-enc-get-supported-key-sizes": {
					"tokens": [
						"mcrypt_enc_get_supported_key_sizes",
						"mcryptenc_get_supported_key_sizes"
					],
					"id": "function.mcrypt-enc-get-supported-key-sizes",
					"name": "mcrypt_enc_get_supported_key_sizes",
					"description": "Returns an array with the supported keysizes of the opened algorithm"
				},
				"function.mcrypt-enc-is-block-algorithm-mode": {
					"tokens": [
						"mcrypt_enc_is_block_algorithm_mode",
						"mcryptenc_is_block_algorithm_mode"
					],
					"id": "function.mcrypt-enc-is-block-algorithm-mode",
					"name": "mcrypt_enc_is_block_algorithm_mode",
					"description": "Checks whether the encryption of the opened mode works on blocks"
				},
				"function.mcrypt-enc-is-block-algorithm": {
					"tokens": [
						"mcrypt_enc_is_block_algorithm",
						"mcryptenc_is_block_algorithm"
					],
					"id": "function.mcrypt-enc-is-block-algorithm",
					"name": "mcrypt_enc_is_block_algorithm",
					"description": "Checks whether the algorithm of the opened mode is a block algorithm"
				},
				"function.mcrypt-enc-is-block-mode": {
					"tokens": [
						"mcrypt_enc_is_block_mode",
						"mcryptenc_is_block_mode"
					],
					"id": "function.mcrypt-enc-is-block-mode",
					"name": "mcrypt_enc_is_block_mode",
					"description": "Checks whether the opened mode outputs blocks"
				},
				"function.mcrypt-enc-self-test": {
					"tokens": [
						"mcrypt_enc_self_test",
						"mcryptenc_self_test"
					],
					"id": "function.mcrypt-enc-self-test",
					"name": "mcrypt_enc_self_test",
					"description": "Runs a self test on the opened module"
				},
				"function.mcrypt-encrypt": {
					"tokens": [
						"mcrypt_encrypt",
						"mcryptencrypt"
					],
					"id": "function.mcrypt-encrypt",
					"name": "mcrypt_encrypt",
					"description": "Encrypts plaintext with given parameters"
				},
				"function.mcrypt-generic-deinit": {
					"tokens": [
						"mcrypt_generic_deinit",
						"mcryptgeneric_deinit"
					],
					"id": "function.mcrypt-generic-deinit",
					"name": "mcrypt_generic_deinit",
					"description": "This function deinitializes an encryption module"
				},
				"function.mcrypt-generic-end": {
					"tokens": [
						"mcrypt_generic_end",
						"mcryptgeneric_end"
					],
					"id": "function.mcrypt-generic-end",
					"name": "mcrypt_generic_end",
					"description": "This function terminates encryption"
				},
				"function.mcrypt-generic-init": {
					"tokens": [
						"mcrypt_generic_init",
						"mcryptgeneric_init"
					],
					"id": "function.mcrypt-generic-init",
					"name": "mcrypt_generic_init",
					"description": "This function initializes all buffers needed for encryption"
				},
				"function.mcrypt-generic": {
					"tokens": [
						"mcrypt_generic",
						"mcryptgeneric"
					],
					"id": "function.mcrypt-generic",
					"name": "mcrypt_generic",
					"description": "This function encrypts data"
				},
				"function.mcrypt-get-block-size": {
					"tokens": [
						"mcrypt_get_block_size",
						"mcryptget_block_size"
					],
					"id": "function.mcrypt-get-block-size",
					"name": "mcrypt_get_block_size",
					"description": "Gets the block size of the specified cipher"
				},
				"function.mcrypt-get-cipher-name": {
					"tokens": [
						"mcrypt_get_cipher_name",
						"mcryptget_cipher_name"
					],
					"id": "function.mcrypt-get-cipher-name",
					"name": "mcrypt_get_cipher_name",
					"description": "Gets the name of the specified cipher"
				},
				"function.mcrypt-get-iv-size": {
					"tokens": [
						"mcrypt_get_iv_size",
						"mcryptget_iv_size"
					],
					"id": "function.mcrypt-get-iv-size",
					"name": "mcrypt_get_iv_size",
					"description": "Returns the size of the IV belonging to a specific cipher/mode combination"
				},
				"function.mcrypt-get-key-size": {
					"tokens": [
						"mcrypt_get_key_size",
						"mcryptget_key_size"
					],
					"id": "function.mcrypt-get-key-size",
					"name": "mcrypt_get_key_size",
					"description": "Gets the key size of the specified cipher"
				},
				"function.mcrypt-list-algorithms": {
					"tokens": [
						"mcrypt_list_algorithms",
						"mcryptlist_algorithms"
					],
					"id": "function.mcrypt-list-algorithms",
					"name": "mcrypt_list_algorithms",
					"description": "Gets an array of all supported ciphers"
				},
				"function.mcrypt-list-modes": {
					"tokens": [
						"mcrypt_list_modes",
						"mcryptlist_modes"
					],
					"id": "function.mcrypt-list-modes",
					"name": "mcrypt_list_modes",
					"description": "Gets an array of all supported modes"
				},
				"function.mcrypt-module-close": {
					"tokens": [
						"mcrypt_module_close",
						"mcryptmodule_close"
					],
					"id": "function.mcrypt-module-close",
					"name": "mcrypt_module_close",
					"description": "Closes the mcrypt module"
				},
				"function.mcrypt-module-get-algo-block-size": {
					"tokens": [
						"mcrypt_module_get_algo_block_size",
						"mcryptmodule_get_algo_block_size"
					],
					"id": "function.mcrypt-module-get-algo-block-size",
					"name": "mcrypt_module_get_algo_block_size",
					"description": "Returns the blocksize of the specified algorithm"
				},
				"function.mcrypt-module-get-algo-key-size": {
					"tokens": [
						"mcrypt_module_get_algo_key_size",
						"mcryptmodule_get_algo_key_size"
					],
					"id": "function.mcrypt-module-get-algo-key-size",
					"name": "mcrypt_module_get_algo_key_size",
					"description": "Returns the maximum supported keysize of the opened mode"
				},
				"function.mcrypt-module-get-supported-key-sizes": {
					"tokens": [
						"mcrypt_module_get_supported_key_sizes",
						"mcryptmodule_get_supported_key_sizes"
					],
					"id": "function.mcrypt-module-get-supported-key-sizes",
					"name": "mcrypt_module_get_supported_key_sizes",
					"description": "Returns an array with the supported keysizes of the opened algorithm"
				},
				"function.mcrypt-module-is-block-algorithm-mode": {
					"tokens": [
						"mcrypt_module_is_block_algorithm_mode",
						"mcryptmodule_is_block_algorithm_mode"
					],
					"id": "function.mcrypt-module-is-block-algorithm-mode",
					"name": "mcrypt_module_is_block_algorithm_mode",
					"description": "Returns if the specified module is a block algorithm or not"
				},
				"function.mcrypt-module-is-block-algorithm": {
					"tokens": [
						"mcrypt_module_is_block_algorithm",
						"mcryptmodule_is_block_algorithm"
					],
					"id": "function.mcrypt-module-is-block-algorithm",
					"name": "mcrypt_module_is_block_algorithm",
					"description": "This function checks whether the specified algorithm is a block algorithm"
				},
				"function.mcrypt-module-is-block-mode": {
					"tokens": [
						"mcrypt_module_is_block_mode",
						"mcryptmodule_is_block_mode"
					],
					"id": "function.mcrypt-module-is-block-mode",
					"name": "mcrypt_module_is_block_mode",
					"description": "Returns if the specified mode outputs blocks or not"
				},
				"function.mcrypt-module-open": {
					"tokens": [
						"mcrypt_module_open",
						"mcryptmodule_open"
					],
					"id": "function.mcrypt-module-open",
					"name": "mcrypt_module_open",
					"description": "Opens the module of the algorithm and the mode to be used"
				},
				"function.mcrypt-module-self-test": {
					"tokens": [
						"mcrypt_module_self_test",
						"mcryptmodule_self_test"
					],
					"id": "function.mcrypt-module-self-test",
					"name": "mcrypt_module_self_test",
					"description": "This function runs a self test on the specified module"
				},
				"function.mcrypt-ofb": {
					"tokens": [
						"mcrypt_ofb",
						"mcryptofb"
					],
					"id": "function.mcrypt-ofb",
					"name": "mcrypt_ofb",
					"description": "Encrypts/decrypts data in OFB mode"
				},
				"function.mdecrypt-generic": {
					"tokens": [
						"mdecrypt_generic",
						"mdecryptgeneric"
					],
					"id": "function.mdecrypt-generic",
					"name": "mdecrypt_generic",
					"description": "Decrypts data"
				},
				"function.mhash-count": {
					"tokens": [
						"mhash_count",
						"mhashcount"
					],
					"id": "function.mhash-count",
					"name": "mhash_count",
					"description": "Gets the highest available hash ID"
				},
				"function.mhash-get-block-size": {
					"tokens": [
						"mhash_get_block_size",
						"mhashget_block_size"
					],
					"id": "function.mhash-get-block-size",
					"name": "mhash_get_block_size",
					"description": "Gets the block size of the specified hash"
				},
				"function.mhash-get-hash-name": {
					"tokens": [
						"mhash_get_hash_name",
						"mhashget_hash_name"
					],
					"id": "function.mhash-get-hash-name",
					"name": "mhash_get_hash_name",
					"description": "Gets the name of the specified hash"
				},
				"function.mhash-keygen-s2k": {
					"tokens": [
						"mhash_keygen_s2k",
						"mhashkeygen_s2k"
					],
					"id": "function.mhash-keygen-s2k",
					"name": "mhash_keygen_s2k",
					"description": "Generates a key"
				},
				"function.mhash": {
					"tokens": [
						"mhash"
					],
					"id": "function.mhash",
					"name": "mhash",
					"description": "Computes hash"
				},
				"function.openssl-cipher-iv-length": {
					"tokens": [
						"openssl_cipher_iv_length",
						"opensslcipher_iv_length"
					],
					"id": "function.openssl-cipher-iv-length",
					"name": "openssl_cipher_iv_length",
					"description": "Gets the cipher iv length"
				},
				"function.openssl-csr-export-to-file": {
					"tokens": [
						"openssl_csr_export_to_file",
						"opensslcsr_export_to_file"
					],
					"id": "function.openssl-csr-export-to-file",
					"name": "openssl_csr_export_to_file",
					"description": "Exports a CSR to a file"
				},
				"function.openssl-csr-export": {
					"tokens": [
						"openssl_csr_export",
						"opensslcsr_export"
					],
					"id": "function.openssl-csr-export",
					"name": "openssl_csr_export",
					"description": "Exports a CSR as a string"
				},
				"function.openssl-csr-get-public-key": {
					"tokens": [
						"openssl_csr_get_public_key",
						"opensslcsr_get_public_key"
					],
					"id": "function.openssl-csr-get-public-key",
					"name": "openssl_csr_get_public_key",
					"description": "Returns the public key of a CERT"
				},
				"function.openssl-csr-get-subject": {
					"tokens": [
						"openssl_csr_get_subject",
						"opensslcsr_get_subject"
					],
					"id": "function.openssl-csr-get-subject",
					"name": "openssl_csr_get_subject",
					"description": "Returns the subject of a CERT"
				},
				"function.openssl-csr-new": {
					"tokens": [
						"openssl_csr_new",
						"opensslcsr_new"
					],
					"id": "function.openssl-csr-new",
					"name": "openssl_csr_new",
					"description": "Generates a CSR"
				},
				"function.openssl-csr-sign": {
					"tokens": [
						"openssl_csr_sign",
						"opensslcsr_sign"
					],
					"id": "function.openssl-csr-sign",
					"name": "openssl_csr_sign",
					"description": "Sign a CSR with another certificate (or itself) and generate a certificate"
				},
				"function.openssl-decrypt": {
					"tokens": [
						"openssl_decrypt",
						"openssldecrypt"
					],
					"id": "function.openssl-decrypt",
					"name": "openssl_decrypt",
					"description": "Decrypts data"
				},
				"function.openssl-dh-compute-key": {
					"tokens": [
						"openssl_dh_compute_key",
						"openssldh_compute_key"
					],
					"id": "function.openssl-dh-compute-key",
					"name": "openssl_dh_compute_key",
					"description": "Computes shared secret for public value of remote DH key and local DH key"
				},
				"function.openssl-digest": {
					"tokens": [
						"openssl_digest",
						"openssldigest"
					],
					"id": "function.openssl-digest",
					"name": "openssl_digest",
					"description": "Computes a digest"
				},
				"function.openssl-encrypt": {
					"tokens": [
						"openssl_encrypt",
						"opensslencrypt"
					],
					"id": "function.openssl-encrypt",
					"name": "openssl_encrypt",
					"description": "Encrypts data"
				},
				"function.openssl-error-string": {
					"tokens": [
						"openssl_error_string",
						"opensslerror_string"
					],
					"id": "function.openssl-error-string",
					"name": "openssl_error_string",
					"description": "Return openSSL error message"
				},
				"function.openssl-free-key": {
					"tokens": [
						"openssl_free_key",
						"opensslfree_key"
					],
					"id": "function.openssl-free-key",
					"name": "openssl_free_key",
					"description": "Free key resource"
				},
				"function.openssl-get-cert-locations": {
					"tokens": [
						"openssl_get_cert_locations",
						"opensslget_cert_locations"
					],
					"id": "function.openssl-get-cert-locations",
					"name": "openssl_get_cert_locations",
					"description": "Retrieve the available certificate locations"
				},
				"function.openssl-get-cipher-methods": {
					"tokens": [
						"openssl_get_cipher_methods",
						"opensslget_cipher_methods"
					],
					"id": "function.openssl-get-cipher-methods",
					"name": "openssl_get_cipher_methods",
					"description": "Gets available cipher methods"
				},
				"function.openssl-get-md-methods": {
					"tokens": [
						"openssl_get_md_methods",
						"opensslget_md_methods"
					],
					"id": "function.openssl-get-md-methods",
					"name": "openssl_get_md_methods",
					"description": "Gets available digest methods"
				},
				"function.openssl-get-privatekey": {
					"tokens": [
						"openssl_get_privatekey",
						"opensslget_privatekey"
					],
					"id": "function.openssl-get-privatekey",
					"name": "openssl_get_privatekey",
					"description": "Alias of openssl_pkey_get_private"
				},
				"function.openssl-get-publickey": {
					"tokens": [
						"openssl_get_publickey",
						"opensslget_publickey"
					],
					"id": "function.openssl-get-publickey",
					"name": "openssl_get_publickey",
					"description": "Alias of openssl_pkey_get_public"
				},
				"function.openssl-open": {
					"tokens": [
						"openssl_open",
						"opensslopen"
					],
					"id": "function.openssl-open",
					"name": "openssl_open",
					"description": "Open sealed data"
				},
				"function.openssl-pbkdf2": {
					"tokens": [
						"openssl_pbkdf2",
						"opensslpbkdf2"
					],
					"id": "function.openssl-pbkdf2",
					"name": "openssl_pbkdf2",
					"description": "Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1"
				},
				"function.openssl-pkcs12-export-to-file": {
					"tokens": [
						"openssl_pkcs12_export_to_file",
						"opensslpkcs12_export_to_file"
					],
					"id": "function.openssl-pkcs12-export-to-file",
					"name": "openssl_pkcs12_export_to_file",
					"description": "Exports a PKCS#12 Compatible Certificate Store File"
				},
				"function.openssl-pkcs12-export": {
					"tokens": [
						"openssl_pkcs12_export",
						"opensslpkcs12_export"
					],
					"id": "function.openssl-pkcs12-export",
					"name": "openssl_pkcs12_export",
					"description": "Exports a PKCS#12 Compatible Certificate Store File to variable."
				},
				"function.openssl-pkcs12-read": {
					"tokens": [
						"openssl_pkcs12_read",
						"opensslpkcs12_read"
					],
					"id": "function.openssl-pkcs12-read",
					"name": "openssl_pkcs12_read",
					"description": "Parse a PKCS#12 Certificate Store into an array"
				},
				"function.openssl-pkcs7-decrypt": {
					"tokens": [
						"openssl_pkcs7_decrypt",
						"opensslpkcs7_decrypt"
					],
					"id": "function.openssl-pkcs7-decrypt",
					"name": "openssl_pkcs7_decrypt",
					"description": "Decrypts an S/MIME encrypted message"
				},
				"function.openssl-pkcs7-encrypt": {
					"tokens": [
						"openssl_pkcs7_encrypt",
						"opensslpkcs7_encrypt"
					],
					"id": "function.openssl-pkcs7-encrypt",
					"name": "openssl_pkcs7_encrypt",
					"description": "Encrypt an S/MIME message"
				},
				"function.openssl-pkcs7-sign": {
					"tokens": [
						"openssl_pkcs7_sign",
						"opensslpkcs7_sign"
					],
					"id": "function.openssl-pkcs7-sign",
					"name": "openssl_pkcs7_sign",
					"description": "Sign an S/MIME message"
				},
				"function.openssl-pkcs7-verify": {
					"tokens": [
						"openssl_pkcs7_verify",
						"opensslpkcs7_verify"
					],
					"id": "function.openssl-pkcs7-verify",
					"name": "openssl_pkcs7_verify",
					"description": "Verifies the signature of an S/MIME signed message"
				},
				"function.openssl-pkey-export-to-file": {
					"tokens": [
						"openssl_pkey_export_to_file",
						"opensslpkey_export_to_file"
					],
					"id": "function.openssl-pkey-export-to-file",
					"name": "openssl_pkey_export_to_file",
					"description": "Gets an exportable representation of a key into a file"
				},
				"function.openssl-pkey-export": {
					"tokens": [
						"openssl_pkey_export",
						"opensslpkey_export"
					],
					"id": "function.openssl-pkey-export",
					"name": "openssl_pkey_export",
					"description": "Gets an exportable representation of a key into a string"
				},
				"function.openssl-pkey-free": {
					"tokens": [
						"openssl_pkey_free",
						"opensslpkey_free"
					],
					"id": "function.openssl-pkey-free",
					"name": "openssl_pkey_free",
					"description": "Frees a private key"
				},
				"function.openssl-pkey-get-details": {
					"tokens": [
						"openssl_pkey_get_details",
						"opensslpkey_get_details"
					],
					"id": "function.openssl-pkey-get-details",
					"name": "openssl_pkey_get_details",
					"description": "Returns an array with the key details"
				},
				"function.openssl-pkey-get-private": {
					"tokens": [
						"openssl_pkey_get_private",
						"opensslpkey_get_private"
					],
					"id": "function.openssl-pkey-get-private",
					"name": "openssl_pkey_get_private",
					"description": "Get a private key"
				},
				"function.openssl-pkey-get-public": {
					"tokens": [
						"openssl_pkey_get_public",
						"opensslpkey_get_public"
					],
					"id": "function.openssl-pkey-get-public",
					"name": "openssl_pkey_get_public",
					"description": "Extract public key from certificate and prepare it for use"
				},
				"function.openssl-pkey-new": {
					"tokens": [
						"openssl_pkey_new",
						"opensslpkey_new"
					],
					"id": "function.openssl-pkey-new",
					"name": "openssl_pkey_new",
					"description": "Generates a new private key"
				},
				"function.openssl-private-decrypt": {
					"tokens": [
						"openssl_private_decrypt",
						"opensslprivate_decrypt"
					],
					"id": "function.openssl-private-decrypt",
					"name": "openssl_private_decrypt",
					"description": "Decrypts data with private key"
				},
				"function.openssl-private-encrypt": {
					"tokens": [
						"openssl_private_encrypt",
						"opensslprivate_encrypt"
					],
					"id": "function.openssl-private-encrypt",
					"name": "openssl_private_encrypt",
					"description": "Encrypts data with private key"
				},
				"function.openssl-public-decrypt": {
					"tokens": [
						"openssl_public_decrypt",
						"opensslpublic_decrypt"
					],
					"id": "function.openssl-public-decrypt",
					"name": "openssl_public_decrypt",
					"description": "Decrypts data with public key"
				},
				"function.openssl-public-encrypt": {
					"tokens": [
						"openssl_public_encrypt",
						"opensslpublic_encrypt"
					],
					"id": "function.openssl-public-encrypt",
					"name": "openssl_public_encrypt",
					"description": "Encrypts data with public key"
				},
				"function.openssl-random-pseudo-bytes": {
					"tokens": [
						"openssl_random_pseudo_bytes",
						"opensslrandom_pseudo_bytes"
					],
					"id": "function.openssl-random-pseudo-bytes",
					"name": "openssl_random_pseudo_bytes",
					"description": "Generate a pseudo-random string of bytes"
				},
				"function.openssl-seal": {
					"tokens": [
						"openssl_seal",
						"opensslseal"
					],
					"id": "function.openssl-seal",
					"name": "openssl_seal",
					"description": "Seal (encrypt) data"
				},
				"function.openssl-sign": {
					"tokens": [
						"openssl_sign",
						"opensslsign"
					],
					"id": "function.openssl-sign",
					"name": "openssl_sign",
					"description": "Generate signature"
				},
				"function.openssl-spki-export-challenge": {
					"tokens": [
						"openssl_spki_export_challenge",
						"opensslspki_export_challenge"
					],
					"id": "function.openssl-spki-export-challenge",
					"name": "openssl_spki_export_challenge",
					"description": "Exports the challenge assoicated with a signed public key and challenge"
				},
				"function.openssl-spki-export": {
					"tokens": [
						"openssl_spki_export",
						"opensslspki_export"
					],
					"id": "function.openssl-spki-export",
					"name": "openssl_spki_export",
					"description": "Exports a valid PEM formatted public key signed public key and challenge"
				},
				"function.openssl-spki-new": {
					"tokens": [
						"openssl_spki_new",
						"opensslspki_new"
					],
					"id": "function.openssl-spki-new",
					"name": "openssl_spki_new",
					"description": "Generate a new signed public key and challenge"
				},
				"function.openssl-spki-verify": {
					"tokens": [
						"openssl_spki_verify",
						"opensslspki_verify"
					],
					"id": "function.openssl-spki-verify",
					"name": "openssl_spki_verify",
					"description": "Verifies a signed public key and challenge"
				},
				"function.openssl-verify": {
					"tokens": [
						"openssl_verify",
						"opensslverify"
					],
					"id": "function.openssl-verify",
					"name": "openssl_verify",
					"description": "Verify signature"
				},
				"function.openssl-x509-check-private-key": {
					"tokens": [
						"openssl_x509_check_private_key",
						"opensslx509_check_private_key"
					],
					"id": "function.openssl-x509-check-private-key",
					"name": "openssl_x509_check_private_key",
					"description": "Checks if a private key corresponds to a certificate"
				},
				"function.openssl-x509-checkpurpose": {
					"tokens": [
						"openssl_x509_checkpurpose",
						"opensslx509_checkpurpose"
					],
					"id": "function.openssl-x509-checkpurpose",
					"name": "openssl_x509_checkpurpose",
					"description": "Verifies if a certificate can be used for a particular purpose"
				},
				"function.openssl-x509-export-to-file": {
					"tokens": [
						"openssl_x509_export_to_file",
						"opensslx509_export_to_file"
					],
					"id": "function.openssl-x509-export-to-file",
					"name": "openssl_x509_export_to_file",
					"description": "Exports a certificate to file"
				},
				"function.openssl-x509-export": {
					"tokens": [
						"openssl_x509_export",
						"opensslx509_export"
					],
					"id": "function.openssl-x509-export",
					"name": "openssl_x509_export",
					"description": "Exports a certificate as a string"
				},
				"function.openssl-x509-fingerprint": {
					"tokens": [
						"openssl_x509_fingerprint",
						"opensslx509_fingerprint"
					],
					"id": "function.openssl-x509-fingerprint",
					"name": "openssl_x509_fingerprint",
					"description": "Calculates the fingerprint, or digest, of a given X.509 certificate"
				},
				"function.openssl-x509-free": {
					"tokens": [
						"openssl_x509_free",
						"opensslx509_free"
					],
					"id": "function.openssl-x509-free",
					"name": "openssl_x509_free",
					"description": "Free certificate resource"
				},
				"function.openssl-x509-parse": {
					"tokens": [
						"openssl_x509_parse",
						"opensslx509_parse"
					],
					"id": "function.openssl-x509-parse",
					"name": "openssl_x509_parse",
					"description": "Parse an X509 certificate and return the information as an array"
				},
				"function.openssl-x509-read": {
					"tokens": [
						"openssl_x509_read",
						"opensslx509_read"
					],
					"id": "function.openssl-x509-read",
					"name": "openssl_x509_read",
					"description": "Parse an X.509 certificate and return a resource identifier for\n  it"
				},
				"function.password-get-info": {
					"tokens": [
						"password_get_info",
						"passwordget_info"
					],
					"id": "function.password-get-info",
					"name": "password_get_info",
					"description": "Returns information about the given hash"
				},
				"function.password-hash": {
					"tokens": [
						"password_hash",
						"passwordhash"
					],
					"id": "function.password-hash",
					"name": "password_hash",
					"description": "Creates a password hash"
				},
				"function.password-needs-rehash": {
					"tokens": [
						"password_needs_rehash",
						"passwordneeds_rehash"
					],
					"id": "function.password-needs-rehash",
					"name": "password_needs_rehash",
					"description": "Checks if the given hash matches the given options"
				},
				"function.password-verify": {
					"tokens": [
						"password_verify",
						"passwordverify"
					],
					"id": "function.password-verify",
					"name": "password_verify",
					"description": "Verifies that a password matches a hash"
				},
				"function.dba-close": {
					"tokens": [
						"dba_close",
						"dbaclose"
					],
					"id": "function.dba-close",
					"name": "dba_close",
					"description": "Close a DBA database"
				},
				"function.dba-delete": {
					"tokens": [
						"dba_delete",
						"dbadelete"
					],
					"id": "function.dba-delete",
					"name": "dba_delete",
					"description": "Delete DBA entry specified by key"
				},
				"function.dba-exists": {
					"tokens": [
						"dba_exists",
						"dbaexists"
					],
					"id": "function.dba-exists",
					"name": "dba_exists",
					"description": "Check whether key exists"
				},
				"function.dba-fetch": {
					"tokens": [
						"dba_fetch",
						"dbafetch"
					],
					"id": "function.dba-fetch",
					"name": "dba_fetch",
					"description": "Fetch data specified by key"
				},
				"function.dba-firstkey": {
					"tokens": [
						"dba_firstkey",
						"dbafirstkey"
					],
					"id": "function.dba-firstkey",
					"name": "dba_firstkey",
					"description": "Fetch first key"
				},
				"function.dba-handlers": {
					"tokens": [
						"dba_handlers",
						"dbahandlers"
					],
					"id": "function.dba-handlers",
					"name": "dba_handlers",
					"description": "List all the handlers available"
				},
				"function.dba-insert": {
					"tokens": [
						"dba_insert",
						"dbainsert"
					],
					"id": "function.dba-insert",
					"name": "dba_insert",
					"description": "Insert entry"
				},
				"function.dba-key-split": {
					"tokens": [
						"dba_key_split",
						"dbakey_split"
					],
					"id": "function.dba-key-split",
					"name": "dba_key_split",
					"description": "Splits a key in string representation into array representation"
				},
				"function.dba-list": {
					"tokens": [
						"dba_list",
						"dbalist"
					],
					"id": "function.dba-list",
					"name": "dba_list",
					"description": "List all open database files"
				},
				"function.dba-nextkey": {
					"tokens": [
						"dba_nextkey",
						"dbanextkey"
					],
					"id": "function.dba-nextkey",
					"name": "dba_nextkey",
					"description": "Fetch next key"
				},
				"function.dba-open": {
					"tokens": [
						"dba_open",
						"dbaopen"
					],
					"id": "function.dba-open",
					"name": "dba_open",
					"description": "Open database"
				},
				"function.dba-optimize": {
					"tokens": [
						"dba_optimize",
						"dbaoptimize"
					],
					"id": "function.dba-optimize",
					"name": "dba_optimize",
					"description": "Optimize database"
				},
				"function.dba-popen": {
					"tokens": [
						"dba_popen",
						"dbapopen"
					],
					"id": "function.dba-popen",
					"name": "dba_popen",
					"description": "Open database persistently"
				},
				"function.dba-replace": {
					"tokens": [
						"dba_replace",
						"dbareplace"
					],
					"id": "function.dba-replace",
					"name": "dba_replace",
					"description": "Replace or insert entry"
				},
				"function.dba-sync": {
					"tokens": [
						"dba_sync",
						"dbasync"
					],
					"id": "function.dba-sync",
					"name": "dba_sync",
					"description": "Synchronize database"
				},
				"function.dbx-close": {
					"tokens": [
						"dbx_close",
						"dbxclose"
					],
					"id": "function.dbx-close",
					"name": "dbx_close",
					"description": "Close an open connection/database"
				},
				"function.dbx-compare": {
					"tokens": [
						"dbx_compare",
						"dbxcompare"
					],
					"id": "function.dbx-compare",
					"name": "dbx_compare",
					"description": "Compare two rows for sorting purposes"
				},
				"function.dbx-connect": {
					"tokens": [
						"dbx_connect",
						"dbxconnect"
					],
					"id": "function.dbx-connect",
					"name": "dbx_connect",
					"description": "Open a connection/database"
				},
				"function.dbx-error": {
					"tokens": [
						"dbx_error",
						"dbxerror"
					],
					"id": "function.dbx-error",
					"name": "dbx_error",
					"description": "Report the error message of the latest function call in the module"
				},
				"function.dbx-escape-string": {
					"tokens": [
						"dbx_escape_string",
						"dbxescape_string"
					],
					"id": "function.dbx-escape-string",
					"name": "dbx_escape_string",
					"description": "Escape a string so it can safely be used in an sql-statement"
				},
				"function.dbx-fetch-row": {
					"tokens": [
						"dbx_fetch_row",
						"dbxfetch_row"
					],
					"id": "function.dbx-fetch-row",
					"name": "dbx_fetch_row",
					"description": "Fetches rows from a query-result that had the \n  DBX_RESULT_UNBUFFERED flag set"
				},
				"function.dbx-query": {
					"tokens": [
						"dbx_query",
						"dbxquery"
					],
					"id": "function.dbx-query",
					"name": "dbx_query",
					"description": "Send a query and fetch all results (if any)"
				},
				"function.dbx-sort": {
					"tokens": [
						"dbx_sort",
						"dbxsort"
					],
					"id": "function.dbx-sort",
					"name": "dbx_sort",
					"description": "Sort a result from a dbx_query by a custom sort function"
				},
				"function.odbc-autocommit": {
					"tokens": [
						"odbc_autocommit",
						"odbcautocommit"
					],
					"id": "function.odbc-autocommit",
					"name": "odbc_autocommit",
					"description": "Toggle autocommit behaviour"
				},
				"function.odbc-binmode": {
					"tokens": [
						"odbc_binmode",
						"odbcbinmode"
					],
					"id": "function.odbc-binmode",
					"name": "odbc_binmode",
					"description": "Handling of binary column data"
				},
				"function.odbc-close-all": {
					"tokens": [
						"odbc_close_all",
						"odbcclose_all"
					],
					"id": "function.odbc-close-all",
					"name": "odbc_close_all",
					"description": "Close all ODBC connections"
				},
				"function.odbc-close": {
					"tokens": [
						"odbc_close",
						"odbcclose"
					],
					"id": "function.odbc-close",
					"name": "odbc_close",
					"description": "Close an ODBC connection"
				},
				"function.odbc-columnprivileges": {
					"tokens": [
						"odbc_columnprivileges",
						"odbccolumnprivileges"
					],
					"id": "function.odbc-columnprivileges",
					"name": "odbc_columnprivileges",
					"description": "Lists columns and associated privileges for the given table"
				},
				"function.odbc-columns": {
					"tokens": [
						"odbc_columns",
						"odbccolumns"
					],
					"id": "function.odbc-columns",
					"name": "odbc_columns",
					"description": "Lists the column names in specified tables"
				},
				"function.odbc-commit": {
					"tokens": [
						"odbc_commit",
						"odbccommit"
					],
					"id": "function.odbc-commit",
					"name": "odbc_commit",
					"description": "Commit an ODBC transaction"
				},
				"function.odbc-connect": {
					"tokens": [
						"odbc_connect",
						"odbcconnect"
					],
					"id": "function.odbc-connect",
					"name": "odbc_connect",
					"description": "Connect to a datasource"
				},
				"function.odbc-cursor": {
					"tokens": [
						"odbc_cursor",
						"odbccursor"
					],
					"id": "function.odbc-cursor",
					"name": "odbc_cursor",
					"description": "Get cursorname"
				},
				"function.odbc-data-source": {
					"tokens": [
						"odbc_data_source",
						"odbcdata_source"
					],
					"id": "function.odbc-data-source",
					"name": "odbc_data_source",
					"description": "Returns information about a current connection"
				},
				"function.odbc-do": {
					"tokens": [
						"odbc_do",
						"odbcdo"
					],
					"id": "function.odbc-do",
					"name": "odbc_do",
					"description": "Alias of odbc_exec"
				},
				"function.odbc-error": {
					"tokens": [
						"odbc_error",
						"odbcerror"
					],
					"id": "function.odbc-error",
					"name": "odbc_error",
					"description": "Get the last error code"
				},
				"function.odbc-errormsg": {
					"tokens": [
						"odbc_errormsg",
						"odbcerrormsg"
					],
					"id": "function.odbc-errormsg",
					"name": "odbc_errormsg",
					"description": "Get the last error message"
				},
				"function.odbc-exec": {
					"tokens": [
						"odbc_exec",
						"odbcexec"
					],
					"id": "function.odbc-exec",
					"name": "odbc_exec",
					"description": "Prepare and execute an SQL statement"
				},
				"function.odbc-execute": {
					"tokens": [
						"odbc_execute",
						"odbcexecute"
					],
					"id": "function.odbc-execute",
					"name": "odbc_execute",
					"description": "Execute a prepared statement"
				},
				"function.odbc-fetch-array": {
					"tokens": [
						"odbc_fetch_array",
						"odbcfetch_array"
					],
					"id": "function.odbc-fetch-array",
					"name": "odbc_fetch_array",
					"description": "Fetch a result row as an associative array"
				},
				"function.odbc-fetch-into": {
					"tokens": [
						"odbc_fetch_into",
						"odbcfetch_into"
					],
					"id": "function.odbc-fetch-into",
					"name": "odbc_fetch_into",
					"description": "Fetch one result row into array"
				},
				"function.odbc-fetch-object": {
					"tokens": [
						"odbc_fetch_object",
						"odbcfetch_object"
					],
					"id": "function.odbc-fetch-object",
					"name": "odbc_fetch_object",
					"description": "Fetch a result row as an object"
				},
				"function.odbc-fetch-row": {
					"tokens": [
						"odbc_fetch_row",
						"odbcfetch_row"
					],
					"id": "function.odbc-fetch-row",
					"name": "odbc_fetch_row",
					"description": "Fetch a row"
				},
				"function.odbc-field-len": {
					"tokens": [
						"odbc_field_len",
						"odbcfield_len"
					],
					"id": "function.odbc-field-len",
					"name": "odbc_field_len",
					"description": "Get the length (precision) of a field"
				},
				"function.odbc-field-name": {
					"tokens": [
						"odbc_field_name",
						"odbcfield_name"
					],
					"id": "function.odbc-field-name",
					"name": "odbc_field_name",
					"description": "Get the columnname"
				},
				"function.odbc-field-num": {
					"tokens": [
						"odbc_field_num",
						"odbcfield_num"
					],
					"id": "function.odbc-field-num",
					"name": "odbc_field_num",
					"description": "Return column number"
				},
				"function.odbc-field-precision": {
					"tokens": [
						"odbc_field_precision",
						"odbcfield_precision"
					],
					"id": "function.odbc-field-precision",
					"name": "odbc_field_precision",
					"description": "Alias of odbc_field_len"
				},
				"function.odbc-field-scale": {
					"tokens": [
						"odbc_field_scale",
						"odbcfield_scale"
					],
					"id": "function.odbc-field-scale",
					"name": "odbc_field_scale",
					"description": "Get the scale of a field"
				},
				"function.odbc-field-type": {
					"tokens": [
						"odbc_field_type",
						"odbcfield_type"
					],
					"id": "function.odbc-field-type",
					"name": "odbc_field_type",
					"description": "Datatype of a field"
				},
				"function.odbc-foreignkeys": {
					"tokens": [
						"odbc_foreignkeys",
						"odbcforeignkeys"
					],
					"id": "function.odbc-foreignkeys",
					"name": "odbc_foreignkeys",
					"description": "Retrieves a list of foreign keys"
				},
				"function.odbc-free-result": {
					"tokens": [
						"odbc_free_result",
						"odbcfree_result"
					],
					"id": "function.odbc-free-result",
					"name": "odbc_free_result",
					"description": "Free resources associated with a result"
				},
				"function.odbc-gettypeinfo": {
					"tokens": [
						"odbc_gettypeinfo",
						"odbcgettypeinfo"
					],
					"id": "function.odbc-gettypeinfo",
					"name": "odbc_gettypeinfo",
					"description": "Retrieves information about data types supported by the data source"
				},
				"function.odbc-longreadlen": {
					"tokens": [
						"odbc_longreadlen",
						"odbclongreadlen"
					],
					"id": "function.odbc-longreadlen",
					"name": "odbc_longreadlen",
					"description": "Handling of LONG columns"
				},
				"function.odbc-next-result": {
					"tokens": [
						"odbc_next_result",
						"odbcnext_result"
					],
					"id": "function.odbc-next-result",
					"name": "odbc_next_result",
					"description": "Checks if multiple results are available"
				},
				"function.odbc-num-fields": {
					"tokens": [
						"odbc_num_fields",
						"odbcnum_fields"
					],
					"id": "function.odbc-num-fields",
					"name": "odbc_num_fields",
					"description": "Number of columns in a result"
				},
				"function.odbc-num-rows": {
					"tokens": [
						"odbc_num_rows",
						"odbcnum_rows"
					],
					"id": "function.odbc-num-rows",
					"name": "odbc_num_rows",
					"description": "Number of rows in a result"
				},
				"function.odbc-pconnect": {
					"tokens": [
						"odbc_pconnect",
						"odbcpconnect"
					],
					"id": "function.odbc-pconnect",
					"name": "odbc_pconnect",
					"description": "Open a persistent database connection"
				},
				"function.odbc-prepare": {
					"tokens": [
						"odbc_prepare",
						"odbcprepare"
					],
					"id": "function.odbc-prepare",
					"name": "odbc_prepare",
					"description": "Prepares a statement for execution"
				},
				"function.odbc-primarykeys": {
					"tokens": [
						"odbc_primarykeys",
						"odbcprimarykeys"
					],
					"id": "function.odbc-primarykeys",
					"name": "odbc_primarykeys",
					"description": "Gets the primary keys for a table"
				},
				"function.odbc-procedurecolumns": {
					"tokens": [
						"odbc_procedurecolumns",
						"odbcprocedurecolumns"
					],
					"id": "function.odbc-procedurecolumns",
					"name": "odbc_procedurecolumns",
					"description": "Retrieve information about parameters to procedures"
				},
				"function.odbc-procedures": {
					"tokens": [
						"odbc_procedures",
						"odbcprocedures"
					],
					"id": "function.odbc-procedures",
					"name": "odbc_procedures",
					"description": "Get the list of procedures stored in a specific data source"
				},
				"function.odbc-result-all": {
					"tokens": [
						"odbc_result_all",
						"odbcresult_all"
					],
					"id": "function.odbc-result-all",
					"name": "odbc_result_all",
					"description": "Print result as HTML table"
				},
				"function.odbc-result": {
					"tokens": [
						"odbc_result",
						"odbcresult"
					],
					"id": "function.odbc-result",
					"name": "odbc_result",
					"description": "Get result data"
				},
				"function.odbc-rollback": {
					"tokens": [
						"odbc_rollback",
						"odbcrollback"
					],
					"id": "function.odbc-rollback",
					"name": "odbc_rollback",
					"description": "Rollback a transaction"
				},
				"function.odbc-setoption": {
					"tokens": [
						"odbc_setoption",
						"odbcsetoption"
					],
					"id": "function.odbc-setoption",
					"name": "odbc_setoption",
					"description": "Adjust ODBC settings"
				},
				"function.odbc-specialcolumns": {
					"tokens": [
						"odbc_specialcolumns",
						"odbcspecialcolumns"
					],
					"id": "function.odbc-specialcolumns",
					"name": "odbc_specialcolumns",
					"description": "Retrieves special columns"
				},
				"function.odbc-statistics": {
					"tokens": [
						"odbc_statistics",
						"odbcstatistics"
					],
					"id": "function.odbc-statistics",
					"name": "odbc_statistics",
					"description": "Retrieve statistics about a table"
				},
				"function.odbc-tableprivileges": {
					"tokens": [
						"odbc_tableprivileges",
						"odbctableprivileges"
					],
					"id": "function.odbc-tableprivileges",
					"name": "odbc_tableprivileges",
					"description": "Lists tables and the privileges associated with each table"
				},
				"function.odbc-tables": {
					"tokens": [
						"odbc_tables",
						"odbctables"
					],
					"id": "function.odbc-tables",
					"name": "odbc_tables",
					"description": "Get the list of table names stored in a specific data source"
				},
				"pdo.begintransaction": {
					"tokens": [
						"PDO::beginTransaction",
						"beginTransaction",
						"::beginTransaction"
					],
					"id": "pdo.begintransaction",
					"name": "PDO::beginTransaction",
					"description": "Initiates a transaction"
				},
				"pdo.commit": {
					"tokens": [
						"PDO::commit",
						"commit",
						"::commit"
					],
					"id": "pdo.commit",
					"name": "PDO::commit",
					"description": "Commits a transaction"
				},
				"pdo.construct": {
					"tokens": [
						"PDO::__construct",
						"PDO::_construct",
						"__construct",
						"::__construct"
					],
					"id": "pdo.construct",
					"name": "PDO::__construct",
					"description": "Creates a PDO instance representing a connection to a database"
				},
				"pdo.errorcode": {
					"tokens": [
						"PDO::errorCode",
						"errorCode",
						"::errorCode"
					],
					"id": "pdo.errorcode",
					"name": "PDO::errorCode",
					"description": "Fetch the SQLSTATE associated with the last operation on the database handle"
				},
				"pdo.errorinfo": {
					"tokens": [
						"PDO::errorInfo",
						"errorInfo",
						"::errorInfo"
					],
					"id": "pdo.errorinfo",
					"name": "PDO::errorInfo",
					"description": "Fetch extended error information associated with the last operation on the database handle"
				},
				"pdo.exec": {
					"tokens": [
						"PDO::exec",
						"exec",
						"::exec"
					],
					"id": "pdo.exec",
					"name": "PDO::exec",
					"description": "Execute an SQL statement and return the number of affected rows"
				},
				"pdo.getattribute": {
					"tokens": [
						"PDO::getAttribute",
						"getAttribute",
						"::getAttribute"
					],
					"id": "pdo.getattribute",
					"name": "PDO::getAttribute",
					"description": "Retrieve a database connection attribute"
				},
				"pdo.getavailabledrivers": {
					"tokens": [
						"PDO::getAvailableDrivers",
						"getAvailableDrivers",
						"::getAvailableDrivers"
					],
					"id": "pdo.getavailabledrivers",
					"name": "PDO::getAvailableDrivers",
					"description": "Return an array of available PDO drivers"
				},
				"pdo.intransaction": {
					"tokens": [
						"PDO::inTransaction",
						"inTransaction",
						"::inTransaction"
					],
					"id": "pdo.intransaction",
					"name": "PDO::inTransaction",
					"description": "Checks if inside a transaction"
				},
				"pdo.lastinsertid": {
					"tokens": [
						"PDO::lastInsertId",
						"lastInsertId",
						"::lastInsertId"
					],
					"id": "pdo.lastinsertid",
					"name": "PDO::lastInsertId",
					"description": "Returns the ID of the last inserted row or sequence value"
				},
				"pdo.prepare": {
					"tokens": [
						"PDO::prepare",
						"prepare",
						"::prepare"
					],
					"id": "pdo.prepare",
					"name": "PDO::prepare",
					"description": "Prepares a statement for execution and returns a statement object"
				},
				"pdo.query": {
					"tokens": [
						"PDO::query",
						"query",
						"::query"
					],
					"id": "pdo.query",
					"name": "PDO::query",
					"description": "Executes an SQL statement, returning a result set as a PDOStatement object"
				},
				"pdo.quote": {
					"tokens": [
						"PDO::quote",
						"quote",
						"::quote"
					],
					"id": "pdo.quote",
					"name": "PDO::quote",
					"description": "Quotes a string for use in a query."
				},
				"pdo.rollback": {
					"tokens": [
						"PDO::rollBack",
						"rollBack",
						"::rollBack"
					],
					"id": "pdo.rollback",
					"name": "PDO::rollBack",
					"description": "Rolls back a transaction"
				},
				"pdo.setattribute": {
					"tokens": [
						"PDO::setAttribute",
						"setAttribute",
						"::setAttribute"
					],
					"id": "pdo.setattribute",
					"name": "PDO::setAttribute",
					"description": "Set an attribute"
				},
				"pdostatement.bindcolumn": {
					"tokens": [
						"PDOStatement::bindColumn",
						"bindColumn",
						"::bindColumn"
					],
					"id": "pdostatement.bindcolumn",
					"name": "PDOStatement::bindColumn",
					"description": "Bind a column to a PHP variable"
				},
				"pdostatement.bindparam": {
					"tokens": [
						"PDOStatement::bindParam",
						"bindParam",
						"::bindParam"
					],
					"id": "pdostatement.bindparam",
					"name": "PDOStatement::bindParam",
					"description": "Binds a parameter to the specified variable name"
				},
				"pdostatement.bindvalue": {
					"tokens": [
						"PDOStatement::bindValue",
						"bindValue",
						"::bindValue"
					],
					"id": "pdostatement.bindvalue",
					"name": "PDOStatement::bindValue",
					"description": "Binds a value to a parameter"
				},
				"pdostatement.closecursor": {
					"tokens": [
						"PDOStatement::closeCursor",
						"closeCursor",
						"::closeCursor"
					],
					"id": "pdostatement.closecursor",
					"name": "PDOStatement::closeCursor",
					"description": "Closes the cursor, enabling the statement to be executed again."
				},
				"pdostatement.columncount": {
					"tokens": [
						"PDOStatement::columnCount",
						"columnCount",
						"::columnCount"
					],
					"id": "pdostatement.columncount",
					"name": "PDOStatement::columnCount",
					"description": "Returns the number of columns in the result set"
				},
				"pdostatement.debugdumpparams": {
					"tokens": [
						"PDOStatement::debugDumpParams",
						"debugDumpParams",
						"::debugDumpParams"
					],
					"id": "pdostatement.debugdumpparams",
					"name": "PDOStatement::debugDumpParams",
					"description": "Dump an SQL prepared command"
				},
				"pdostatement.errorcode": {
					"tokens": [
						"PDOStatement::errorCode",
						"errorCode",
						"::errorCode"
					],
					"id": "pdostatement.errorcode",
					"name": "PDOStatement::errorCode",
					"description": "Fetch the SQLSTATE associated with the last operation on the statement handle"
				},
				"pdostatement.errorinfo": {
					"tokens": [
						"PDOStatement::errorInfo",
						"errorInfo",
						"::errorInfo"
					],
					"id": "pdostatement.errorinfo",
					"name": "PDOStatement::errorInfo",
					"description": "Fetch extended error information associated with the last operation on the statement handle"
				},
				"pdostatement.execute": {
					"tokens": [
						"PDOStatement::execute",
						"execute",
						"::execute"
					],
					"id": "pdostatement.execute",
					"name": "PDOStatement::execute",
					"description": "Executes a prepared statement"
				},
				"pdostatement.fetch": {
					"tokens": [
						"PDOStatement::fetch",
						"fetch",
						"::fetch"
					],
					"id": "pdostatement.fetch",
					"name": "PDOStatement::fetch",
					"description": "Fetches the next row from a result set"
				},
				"pdostatement.fetchall": {
					"tokens": [
						"PDOStatement::fetchAll",
						"fetchAll",
						"::fetchAll"
					],
					"id": "pdostatement.fetchall",
					"name": "PDOStatement::fetchAll",
					"description": "Returns an array containing all of the result set rows"
				},
				"pdostatement.fetchcolumn": {
					"tokens": [
						"PDOStatement::fetchColumn",
						"fetchColumn",
						"::fetchColumn"
					],
					"id": "pdostatement.fetchcolumn",
					"name": "PDOStatement::fetchColumn",
					"description": "Returns a single column from the next row of a result set"
				},
				"pdostatement.fetchobject": {
					"tokens": [
						"PDOStatement::fetchObject",
						"fetchObject",
						"::fetchObject"
					],
					"id": "pdostatement.fetchobject",
					"name": "PDOStatement::fetchObject",
					"description": "Fetches the next row and returns it as an object."
				},
				"pdostatement.getattribute": {
					"tokens": [
						"PDOStatement::getAttribute",
						"getAttribute",
						"::getAttribute"
					],
					"id": "pdostatement.getattribute",
					"name": "PDOStatement::getAttribute",
					"description": "Retrieve a statement attribute"
				},
				"pdostatement.getcolumnmeta": {
					"tokens": [
						"PDOStatement::getColumnMeta",
						"getColumnMeta",
						"::getColumnMeta"
					],
					"id": "pdostatement.getcolumnmeta",
					"name": "PDOStatement::getColumnMeta",
					"description": "Returns metadata for a column in a result set"
				},
				"pdostatement.nextrowset": {
					"tokens": [
						"PDOStatement::nextRowset",
						"nextRowset",
						"::nextRowset"
					],
					"id": "pdostatement.nextrowset",
					"name": "PDOStatement::nextRowset",
					"description": "Advances to the next rowset in a multi-rowset statement handle"
				},
				"pdostatement.rowcount": {
					"tokens": [
						"PDOStatement::rowCount",
						"rowCount",
						"::rowCount"
					],
					"id": "pdostatement.rowcount",
					"name": "PDOStatement::rowCount",
					"description": "Returns the number of rows affected by the last SQL statement"
				},
				"pdostatement.setattribute": {
					"tokens": [
						"PDOStatement::setAttribute",
						"setAttribute",
						"::setAttribute"
					],
					"id": "pdostatement.setattribute",
					"name": "PDOStatement::setAttribute",
					"description": "Set a statement attribute"
				},
				"pdostatement.setfetchmode": {
					"tokens": [
						"PDOStatement::setFetchMode",
						"setFetchMode",
						"::setFetchMode"
					],
					"id": "pdostatement.setfetchmode",
					"name": "PDOStatement::setFetchMode",
					"description": "Set the default fetch mode for this statement"
				},
				"ref.pdo-cubrid.connection": {
					"tokens": [
						"PDO_CUBRID DSN",
						"PDOCUBRID DSN"
					],
					"id": "ref.pdo-cubrid.connection",
					"name": "PDO_CUBRID DSN",
					"description": "Connecting to CUBRID databases"
				},
				"pdo.cubrid-schema": {
					"tokens": [
						"PDO::cubrid_schema",
						"PDO::cubridschema",
						"cubrid_schema",
						"::cubrid_schema"
					],
					"id": "pdo.cubrid-schema",
					"name": "PDO::cubrid_schema",
					"description": "Get the requested schema information"
				},
				"ref.pdo-dblib.connection": {
					"tokens": [
						"PDO_DBLIB DSN",
						"PDODBLIB DSN"
					],
					"id": "ref.pdo-dblib.connection",
					"name": "PDO_DBLIB DSN",
					"description": "Connecting to Microsoft SQL Server and Sybase databases"
				},
				"ref.pdo-firebird.connection": {
					"tokens": [
						"PDO_FIREBIRD DSN",
						"PDOFIREBIRD DSN"
					],
					"id": "ref.pdo-firebird.connection",
					"name": "PDO_FIREBIRD DSN",
					"description": "Connecting to Firebird databases"
				},
				"ref.pdo-ibm.connection": {
					"tokens": [
						"PDO_IBM DSN",
						"PDOIBM DSN"
					],
					"id": "ref.pdo-ibm.connection",
					"name": "PDO_IBM DSN",
					"description": "Connecting to IBM databases"
				},
				"ref.pdo-informix.connection": {
					"tokens": [
						"PDO_INFORMIX DSN",
						"PDOINFORMIX DSN"
					],
					"id": "ref.pdo-informix.connection",
					"name": "PDO_INFORMIX DSN",
					"description": "Connecting to Informix databases"
				},
				"ref.pdo-mysql.connection": {
					"tokens": [
						"PDO_MYSQL DSN",
						"PDOMYSQL DSN"
					],
					"id": "ref.pdo-mysql.connection",
					"name": "PDO_MYSQL DSN",
					"description": "Connecting to MySQL databases"
				},
				"ref.pdo-sqlsrv.connection": {
					"tokens": [
						"PDO_SQLSRV DSN",
						"PDOSQLSRV DSN"
					],
					"id": "ref.pdo-sqlsrv.connection",
					"name": "PDO_SQLSRV DSN",
					"description": "Connecting to MS SQL Server and SQL Azure databases"
				},
				"ref.pdo-oci.connection": {
					"tokens": [
						"PDO_OCI DSN",
						"PDOOCI DSN"
					],
					"id": "ref.pdo-oci.connection",
					"name": "PDO_OCI DSN",
					"description": "Connecting to Oracle databases"
				},
				"ref.pdo-odbc.connection": {
					"tokens": [
						"PDO_ODBC DSN",
						"PDOODBC DSN"
					],
					"id": "ref.pdo-odbc.connection",
					"name": "PDO_ODBC DSN",
					"description": "Connecting to ODBC or DB2 databases"
				},
				"ref.pdo-pgsql.connection": {
					"tokens": [
						"PDO_PGSQL DSN",
						"PDOPGSQL DSN"
					],
					"id": "ref.pdo-pgsql.connection",
					"name": "PDO_PGSQL DSN",
					"description": "Connecting to PostgreSQL databases"
				},
				"pdo.pgsqlcopyfromarray": {
					"tokens": [
						"PDO::pgsqlCopyFromArray",
						"pgsqlCopyFromArray",
						"::pgsqlCopyFromArray"
					],
					"id": "pdo.pgsqlcopyfromarray",
					"name": "PDO::pgsqlCopyFromArray",
					"description": "Copy data from PHP array into table"
				},
				"pdo.pgsqlcopyfromfile": {
					"tokens": [
						"PDO::pgsqlCopyFromFile",
						"pgsqlCopyFromFile",
						"::pgsqlCopyFromFile"
					],
					"id": "pdo.pgsqlcopyfromfile",
					"name": "PDO::pgsqlCopyFromFile",
					"description": "Copy data from file into table"
				},
				"pdo.pgsqlcopytoarray": {
					"tokens": [
						"PDO::pgsqlCopyToArray",
						"pgsqlCopyToArray",
						"::pgsqlCopyToArray"
					],
					"id": "pdo.pgsqlcopytoarray",
					"name": "PDO::pgsqlCopyToArray",
					"description": "Copy data from database table into PHP array"
				},
				"pdo.pgsqlcopytofile": {
					"tokens": [
						"PDO::pgsqlCopyToFile",
						"pgsqlCopyToFile",
						"::pgsqlCopyToFile"
					],
					"id": "pdo.pgsqlcopytofile",
					"name": "PDO::pgsqlCopyToFile",
					"description": "Copy data from table into file"
				},
				"pdo.pgsqlgetnotify": {
					"tokens": [
						"PDO::pgsqlGetNotify",
						"pgsqlGetNotify",
						"::pgsqlGetNotify"
					],
					"id": "pdo.pgsqlgetnotify",
					"name": "PDO::pgsqlGetNotify",
					"description": "Get asynchronous notification"
				},
				"pdo.pgsqlgetpid": {
					"tokens": [
						"PDO::pgsqlGetPid",
						"pgsqlGetPid",
						"::pgsqlGetPid"
					],
					"id": "pdo.pgsqlgetpid",
					"name": "PDO::pgsqlGetPid",
					"description": "Get the server PID"
				},
				"pdo.pgsqllobcreate": {
					"tokens": [
						"PDO::pgsqlLOBCreate",
						"pgsqlLOBCreate",
						"::pgsqlLOBCreate"
					],
					"id": "pdo.pgsqllobcreate",
					"name": "PDO::pgsqlLOBCreate",
					"description": "Creates a new large object"
				},
				"pdo.pgsqllobopen": {
					"tokens": [
						"PDO::pgsqlLOBOpen",
						"pgsqlLOBOpen",
						"::pgsqlLOBOpen"
					],
					"id": "pdo.pgsqllobopen",
					"name": "PDO::pgsqlLOBOpen",
					"description": "Opens an existing large object stream"
				},
				"pdo.pgsqllobunlink": {
					"tokens": [
						"PDO::pgsqlLOBUnlink",
						"pgsqlLOBUnlink",
						"::pgsqlLOBUnlink"
					],
					"id": "pdo.pgsqllobunlink",
					"name": "PDO::pgsqlLOBUnlink",
					"description": "Deletes the large object"
				},
				"ref.pdo-sqlite.connection": {
					"tokens": [
						"PDO_SQLITE DSN",
						"PDOSQLITE DSN"
					],
					"id": "ref.pdo-sqlite.connection",
					"name": "PDO_SQLITE DSN",
					"description": "Connecting to SQLite databases"
				},
				"pdo.sqlitecreateaggregate": {
					"tokens": [
						"PDO::sqliteCreateAggregate",
						"sqliteCreateAggregate",
						"::sqliteCreateAggregate"
					],
					"id": "pdo.sqlitecreateaggregate",
					"name": "PDO::sqliteCreateAggregate",
					"description": "Registers an aggregating User Defined Function for use in SQL statements"
				},
				"pdo.sqlitecreatecollation": {
					"tokens": [
						"PDO::sqliteCreateCollation",
						"sqliteCreateCollation",
						"::sqliteCreateCollation"
					],
					"id": "pdo.sqlitecreatecollation",
					"name": "PDO::sqliteCreateCollation",
					"description": "Registers a User Defined Function for use as a collating function in SQL statements"
				},
				"pdo.sqlitecreatefunction": {
					"tokens": [
						"PDO::sqliteCreateFunction",
						"sqliteCreateFunction",
						"::sqliteCreateFunction"
					],
					"id": "pdo.sqlitecreatefunction",
					"name": "PDO::sqliteCreateFunction",
					"description": "Registers a User Defined Function for use in SQL statements"
				},
				"ref.pdo-4d.connection": {
					"tokens": [
						"PDO_4D DSN",
						"PDO4D DSN"
					],
					"id": "ref.pdo-4d.connection",
					"name": "PDO_4D DSN",
					"description": "Connecting to 4D SQL server"
				},
				"pdo-4d.constants": {
					"tokens": [
						"Constants for PDO_4D",
						"Constants for PDO4D"
					],
					"id": "pdo-4d.constants",
					"name": "Constants for PDO_4D",
					"description": "Constants for PDO_4D"
				},
				"pdo-4d.sqltypes": {
					"tokens": [
						"SQL types with PDO_4D and PHP",
						"SQL types with PDO4D and PHP"
					],
					"id": "pdo-4d.sqltypes",
					"name": "SQL types with PDO_4D and PHP",
					"description": "SQL types with PDO_4D and PHP"
				},
				"ref.pdo-4d.sql4d": {
					"tokens": [
						"SQL acceptable by 4D"
					],
					"id": "ref.pdo-4d.sql4d",
					"name": "SQL acceptable by 4D",
					"description": "PDO and SQL 4D"
				},
				"pdo-4d.examples": {
					"tokens": [
						"Examples with PDO_4D",
						"Examples with PDO4D"
					],
					"id": "pdo-4d.examples",
					"name": "Examples with PDO_4D",
					"description": "Examples PDO_4D"
				},
				"function.cubrid-bind": {
					"tokens": [
						"cubrid_bind",
						"cubridbind"
					],
					"id": "function.cubrid-bind",
					"name": "cubrid_bind",
					"description": "Bind variables to a prepared statement as parameters"
				},
				"function.cubrid-close-prepare": {
					"tokens": [
						"cubrid_close_prepare",
						"cubridclose_prepare"
					],
					"id": "function.cubrid-close-prepare",
					"name": "cubrid_close_prepare",
					"description": "Close the request handle"
				},
				"function.cubrid-close-request": {
					"tokens": [
						"cubrid_close_request",
						"cubridclose_request"
					],
					"id": "function.cubrid-close-request",
					"name": "cubrid_close_request",
					"description": "Close the request handle"
				},
				"function.cubrid-col-get": {
					"tokens": [
						"cubrid_col_get",
						"cubridcol_get"
					],
					"id": "function.cubrid-col-get",
					"name": "cubrid_col_get",
					"description": "Get contents of collection type column using OID"
				},
				"function.cubrid-col-size": {
					"tokens": [
						"cubrid_col_size",
						"cubridcol_size"
					],
					"id": "function.cubrid-col-size",
					"name": "cubrid_col_size",
					"description": "Get the number of elements in collection type column using OID"
				},
				"function.cubrid-column-names": {
					"tokens": [
						"cubrid_column_names",
						"cubridcolumn_names"
					],
					"id": "function.cubrid-column-names",
					"name": "cubrid_column_names",
					"description": "Get the column names in result"
				},
				"function.cubrid-column-types": {
					"tokens": [
						"cubrid_column_types",
						"cubridcolumn_types"
					],
					"id": "function.cubrid-column-types",
					"name": "cubrid_column_types",
					"description": "Get column types in result"
				},
				"function.cubrid-commit": {
					"tokens": [
						"cubrid_commit",
						"cubridcommit"
					],
					"id": "function.cubrid-commit",
					"name": "cubrid_commit",
					"description": "Commit a transaction"
				},
				"function.cubrid-connect-with-url": {
					"tokens": [
						"cubrid_connect_with_url",
						"cubridconnect_with_url"
					],
					"id": "function.cubrid-connect-with-url",
					"name": "cubrid_connect_with_url",
					"description": "Establish the environment for connecting to CUBRID server"
				},
				"function.cubrid-connect": {
					"tokens": [
						"cubrid_connect",
						"cubridconnect"
					],
					"id": "function.cubrid-connect",
					"name": "cubrid_connect",
					"description": "Open a connection to a CUBRID Server"
				},
				"function.cubrid-current-oid": {
					"tokens": [
						"cubrid_current_oid",
						"cubridcurrent_oid"
					],
					"id": "function.cubrid-current-oid",
					"name": "cubrid_current_oid",
					"description": "Get OID of the current cursor location"
				},
				"function.cubrid-disconnect": {
					"tokens": [
						"cubrid_disconnect",
						"cubriddisconnect"
					],
					"id": "function.cubrid-disconnect",
					"name": "cubrid_disconnect",
					"description": "Close a database connection"
				},
				"function.cubrid-drop": {
					"tokens": [
						"cubrid_drop",
						"cubriddrop"
					],
					"id": "function.cubrid-drop",
					"name": "cubrid_drop",
					"description": "Delete an instance using OID"
				},
				"function.cubrid-error-code-facility": {
					"tokens": [
						"cubrid_error_code_facility",
						"cubriderror_code_facility"
					],
					"id": "function.cubrid-error-code-facility",
					"name": "cubrid_error_code_facility",
					"description": "Get the facility code of error"
				},
				"function.cubrid-error-code": {
					"tokens": [
						"cubrid_error_code",
						"cubriderror_code"
					],
					"id": "function.cubrid-error-code",
					"name": "cubrid_error_code",
					"description": "Get error code for the most recent function call"
				},
				"function.cubrid-error-msg": {
					"tokens": [
						"cubrid_error_msg",
						"cubriderror_msg"
					],
					"id": "function.cubrid-error-msg",
					"name": "cubrid_error_msg",
					"description": "Get last error message for the most recent function call"
				},
				"function.cubrid-execute": {
					"tokens": [
						"cubrid_execute",
						"cubridexecute"
					],
					"id": "function.cubrid-execute",
					"name": "cubrid_execute",
					"description": "Execute a prepared SQL statement"
				},
				"function.cubrid-fetch": {
					"tokens": [
						"cubrid_fetch",
						"cubridfetch"
					],
					"id": "function.cubrid-fetch",
					"name": "cubrid_fetch",
					"description": "Fetch the next row from a result set"
				},
				"function.cubrid-free-result": {
					"tokens": [
						"cubrid_free_result",
						"cubridfree_result"
					],
					"id": "function.cubrid-free-result",
					"name": "cubrid_free_result",
					"description": "Free the memory occupied by the result data"
				},
				"function.cubrid-get-autocommit": {
					"tokens": [
						"cubrid_get_autocommit",
						"cubridget_autocommit"
					],
					"id": "function.cubrid-get-autocommit",
					"name": "cubrid_get_autocommit",
					"description": "Get auto-commit mode of the connection"
				},
				"function.cubrid-get-charset": {
					"tokens": [
						"cubrid_get_charset",
						"cubridget_charset"
					],
					"id": "function.cubrid-get-charset",
					"name": "cubrid_get_charset",
					"description": "Return the current CUBRID connection charset"
				},
				"function.cubrid-get-class-name": {
					"tokens": [
						"cubrid_get_class_name",
						"cubridget_class_name"
					],
					"id": "function.cubrid-get-class-name",
					"name": "cubrid_get_class_name",
					"description": "Get the class name using OID"
				},
				"function.cubrid-get-client-info": {
					"tokens": [
						"cubrid_get_client_info",
						"cubridget_client_info"
					],
					"id": "function.cubrid-get-client-info",
					"name": "cubrid_get_client_info",
					"description": "Return the client library version"
				},
				"function.cubrid-get-db-parameter": {
					"tokens": [
						"cubrid_get_db_parameter",
						"cubridget_db_parameter"
					],
					"id": "function.cubrid-get-db-parameter",
					"name": "cubrid_get_db_parameter",
					"description": "Returns the CUBRID database parameters"
				},
				"function.cubrid-get-query-timeout": {
					"tokens": [
						"cubrid_get_query_timeout",
						"cubridget_query_timeout"
					],
					"id": "function.cubrid-get-query-timeout",
					"name": "cubrid_get_query_timeout",
					"description": "Get the query timeout value of the request"
				},
				"function.cubrid-get-server-info": {
					"tokens": [
						"cubrid_get_server_info",
						"cubridget_server_info"
					],
					"id": "function.cubrid-get-server-info",
					"name": "cubrid_get_server_info",
					"description": "Return the CUBRID server version"
				},
				"function.cubrid-get": {
					"tokens": [
						"cubrid_get",
						"cubridget"
					],
					"id": "function.cubrid-get",
					"name": "cubrid_get",
					"description": "Get a column using OID"
				},
				"function.cubrid-insert-id": {
					"tokens": [
						"cubrid_insert_id",
						"cubridinsert_id"
					],
					"id": "function.cubrid-insert-id",
					"name": "cubrid_insert_id",
					"description": "Return the ID generated for the last updated AUTO_INCREMENT column"
				},
				"function.cubrid-is-instance": {
					"tokens": [
						"cubrid_is_instance",
						"cubridis_instance"
					],
					"id": "function.cubrid-is-instance",
					"name": "cubrid_is_instance",
					"description": "Check whether the instance pointed by OID exists"
				},
				"function.cubrid-lob-close": {
					"tokens": [
						"cubrid_lob_close",
						"cubridlob_close"
					],
					"id": "function.cubrid-lob-close",
					"name": "cubrid_lob_close",
					"description": "Close BLOB/CLOB data"
				},
				"function.cubrid-lob-export": {
					"tokens": [
						"cubrid_lob_export",
						"cubridlob_export"
					],
					"id": "function.cubrid-lob-export",
					"name": "cubrid_lob_export",
					"description": "Export BLOB/CLOB data to file"
				},
				"function.cubrid-lob-get": {
					"tokens": [
						"cubrid_lob_get",
						"cubridlob_get"
					],
					"id": "function.cubrid-lob-get",
					"name": "cubrid_lob_get",
					"description": "Get BLOB/CLOB data"
				},
				"function.cubrid-lob-send": {
					"tokens": [
						"cubrid_lob_send",
						"cubridlob_send"
					],
					"id": "function.cubrid-lob-send",
					"name": "cubrid_lob_send",
					"description": "Read BLOB/CLOB data and send straight to browser"
				},
				"function.cubrid-lob-size": {
					"tokens": [
						"cubrid_lob_size",
						"cubridlob_size"
					],
					"id": "function.cubrid-lob-size",
					"name": "cubrid_lob_size",
					"description": "Get BLOB/CLOB data size"
				},
				"function.cubrid-lob2-bind": {
					"tokens": [
						"cubrid_lob2_bind",
						"cubridlob2_bind"
					],
					"id": "function.cubrid-lob2-bind",
					"name": "cubrid_lob2_bind",
					"description": "Bind a lob object or a string as a lob object to a prepared statement as parameters."
				},
				"function.cubrid-lob2-close": {
					"tokens": [
						"cubrid_lob2_close",
						"cubridlob2_close"
					],
					"id": "function.cubrid-lob2-close",
					"name": "cubrid_lob2_close",
					"description": "Close LOB object."
				},
				"function.cubrid-lob2-export": {
					"tokens": [
						"cubrid_lob2_export",
						"cubridlob2_export"
					],
					"id": "function.cubrid-lob2-export",
					"name": "cubrid_lob2_export",
					"description": "Export the lob object to a file."
				},
				"function.cubrid-lob2-import": {
					"tokens": [
						"cubrid_lob2_import",
						"cubridlob2_import"
					],
					"id": "function.cubrid-lob2-import",
					"name": "cubrid_lob2_import",
					"description": "Import BLOB/CLOB data from a file."
				},
				"function.cubrid-lob2-new": {
					"tokens": [
						"cubrid_lob2_new",
						"cubridlob2_new"
					],
					"id": "function.cubrid-lob2-new",
					"name": "cubrid_lob2_new",
					"description": "Create a lob object."
				},
				"function.cubrid-lob2-read": {
					"tokens": [
						"cubrid_lob2_read",
						"cubridlob2_read"
					],
					"id": "function.cubrid-lob2-read",
					"name": "cubrid_lob2_read",
					"description": "Read from BLOB/CLOB data."
				},
				"function.cubrid-lob2-seek64": {
					"tokens": [
						"cubrid_lob2_seek64",
						"cubridlob2_seek64"
					],
					"id": "function.cubrid-lob2-seek64",
					"name": "cubrid_lob2_seek64",
					"description": "Move the cursor of a lob object."
				},
				"function.cubrid-lob2-seek": {
					"tokens": [
						"cubrid_lob2_seek",
						"cubridlob2_seek"
					],
					"id": "function.cubrid-lob2-seek",
					"name": "cubrid_lob2_seek",
					"description": "Move the cursor of a lob object."
				},
				"function.cubrid-lob2-size64": {
					"tokens": [
						"cubrid_lob2_size64",
						"cubridlob2_size64"
					],
					"id": "function.cubrid-lob2-size64",
					"name": "cubrid_lob2_size64",
					"description": "Get a lob object's size."
				},
				"function.cubrid-lob2-size": {
					"tokens": [
						"cubrid_lob2_size",
						"cubridlob2_size"
					],
					"id": "function.cubrid-lob2-size",
					"name": "cubrid_lob2_size",
					"description": "Get a lob object's size."
				},
				"function.cubrid-lob2-tell64": {
					"tokens": [
						"cubrid_lob2_tell64",
						"cubridlob2_tell64"
					],
					"id": "function.cubrid-lob2-tell64",
					"name": "cubrid_lob2_tell64",
					"description": "Tell the cursor position of the LOB object."
				},
				"function.cubrid-lob2-tell": {
					"tokens": [
						"cubrid_lob2_tell",
						"cubridlob2_tell"
					],
					"id": "function.cubrid-lob2-tell",
					"name": "cubrid_lob2_tell",
					"description": "Tell the cursor position of the LOB object."
				},
				"function.cubrid-lob2-write": {
					"tokens": [
						"cubrid_lob2_write",
						"cubridlob2_write"
					],
					"id": "function.cubrid-lob2-write",
					"name": "cubrid_lob2_write",
					"description": "Write to a lob object."
				},
				"function.cubrid-lock-read": {
					"tokens": [
						"cubrid_lock_read",
						"cubridlock_read"
					],
					"id": "function.cubrid-lock-read",
					"name": "cubrid_lock_read",
					"description": "Set a read lock on the given OID"
				},
				"function.cubrid-lock-write": {
					"tokens": [
						"cubrid_lock_write",
						"cubridlock_write"
					],
					"id": "function.cubrid-lock-write",
					"name": "cubrid_lock_write",
					"description": "Set a write lock on the given OID"
				},
				"function.cubrid-move-cursor": {
					"tokens": [
						"cubrid_move_cursor",
						"cubridmove_cursor"
					],
					"id": "function.cubrid-move-cursor",
					"name": "cubrid_move_cursor",
					"description": "Move the cursor in the result"
				},
				"function.cubrid-next-result": {
					"tokens": [
						"cubrid_next_result",
						"cubridnext_result"
					],
					"id": "function.cubrid-next-result",
					"name": "cubrid_next_result",
					"description": "Get result of next query when executing multiple SQL statements"
				},
				"function.cubrid-num-cols": {
					"tokens": [
						"cubrid_num_cols",
						"cubridnum_cols"
					],
					"id": "function.cubrid-num-cols",
					"name": "cubrid_num_cols",
					"description": "Return the number of columns in the result set"
				},
				"function.cubrid-num-rows": {
					"tokens": [
						"cubrid_num_rows",
						"cubridnum_rows"
					],
					"id": "function.cubrid-num-rows",
					"name": "cubrid_num_rows",
					"description": "Get the number of rows in the result set"
				},
				"function.cubrid-pconnect-with-url": {
					"tokens": [
						"cubrid_pconnect_with_url",
						"cubridpconnect_with_url"
					],
					"id": "function.cubrid-pconnect-with-url",
					"name": "cubrid_pconnect_with_url",
					"description": "Open a persistent connection to CUBRID server"
				},
				"function.cubrid-pconnect": {
					"tokens": [
						"cubrid_pconnect",
						"cubridpconnect"
					],
					"id": "function.cubrid-pconnect",
					"name": "cubrid_pconnect",
					"description": "Open a persistent connection to a CUBRID server"
				},
				"function.cubrid-prepare": {
					"tokens": [
						"cubrid_prepare",
						"cubridprepare"
					],
					"id": "function.cubrid-prepare",
					"name": "cubrid_prepare",
					"description": "Prepare a SQL statement for execution"
				},
				"function.cubrid-put": {
					"tokens": [
						"cubrid_put",
						"cubridput"
					],
					"id": "function.cubrid-put",
					"name": "cubrid_put",
					"description": "Update a column using OID"
				},
				"function.cubrid-rollback": {
					"tokens": [
						"cubrid_rollback",
						"cubridrollback"
					],
					"id": "function.cubrid-rollback",
					"name": "cubrid_rollback",
					"description": "Roll back a transaction"
				},
				"function.cubrid-schema": {
					"tokens": [
						"cubrid_schema",
						"cubridschema"
					],
					"id": "function.cubrid-schema",
					"name": "cubrid_schema",
					"description": "Get the requested schema information"
				},
				"function.cubrid-seq-drop": {
					"tokens": [
						"cubrid_seq_drop",
						"cubridseq_drop"
					],
					"id": "function.cubrid-seq-drop",
					"name": "cubrid_seq_drop",
					"description": "Delete an element from sequence type column using OID"
				},
				"function.cubrid-seq-insert": {
					"tokens": [
						"cubrid_seq_insert",
						"cubridseq_insert"
					],
					"id": "function.cubrid-seq-insert",
					"name": "cubrid_seq_insert",
					"description": "Insert an element to a sequence type column using OID"
				},
				"function.cubrid-seq-put": {
					"tokens": [
						"cubrid_seq_put",
						"cubridseq_put"
					],
					"id": "function.cubrid-seq-put",
					"name": "cubrid_seq_put",
					"description": "Update the element value of sequence type column using OID"
				},
				"function.cubrid-set-add": {
					"tokens": [
						"cubrid_set_add",
						"cubridset_add"
					],
					"id": "function.cubrid-set-add",
					"name": "cubrid_set_add",
					"description": "Insert a single element to set type column using OID"
				},
				"function.cubrid-set-autocommit": {
					"tokens": [
						"cubrid_set_autocommit",
						"cubridset_autocommit"
					],
					"id": "function.cubrid-set-autocommit",
					"name": "cubrid_set_autocommit",
					"description": "Set autocommit mode of the connection"
				},
				"function.cubrid-set-db-parameter": {
					"tokens": [
						"cubrid_set_db_parameter",
						"cubridset_db_parameter"
					],
					"id": "function.cubrid-set-db-parameter",
					"name": "cubrid_set_db_parameter",
					"description": "Sets the CUBRID database parameters"
				},
				"function.cubrid-set-drop": {
					"tokens": [
						"cubrid_set_drop",
						"cubridset_drop"
					],
					"id": "function.cubrid-set-drop",
					"name": "cubrid_set_drop",
					"description": "Delete an element from set type column using OID"
				},
				"function.cubrid-set-query-timeout": {
					"tokens": [
						"cubrid_set_query_timeout",
						"cubridset_query_timeout"
					],
					"id": "function.cubrid-set-query-timeout",
					"name": "cubrid_set_query_timeout",
					"description": "Set the timeout time of query execution"
				},
				"function.cubrid-version": {
					"tokens": [
						"cubrid_version",
						"cubridversion"
					],
					"id": "function.cubrid-version",
					"name": "cubrid_version",
					"description": "Get the CUBRID PHP module's version"
				},
				"function.cubrid-affected-rows": {
					"tokens": [
						"cubrid_affected_rows",
						"cubridaffected_rows"
					],
					"id": "function.cubrid-affected-rows",
					"name": "cubrid_affected_rows",
					"description": "Return the number of rows affected by the last SQL statement"
				},
				"function.cubrid-client-encoding": {
					"tokens": [
						"cubrid_client_encoding",
						"cubridclient_encoding"
					],
					"id": "function.cubrid-client-encoding",
					"name": "cubrid_client_encoding",
					"description": "Return the current CUBRID connection charset"
				},
				"function.cubrid-close": {
					"tokens": [
						"cubrid_close",
						"cubridclose"
					],
					"id": "function.cubrid-close",
					"name": "cubrid_close",
					"description": "Close CUBRID connection"
				},
				"function.cubrid-data-seek": {
					"tokens": [
						"cubrid_data_seek",
						"cubriddata_seek"
					],
					"id": "function.cubrid-data-seek",
					"name": "cubrid_data_seek",
					"description": "Move the internal row pointer of the CUBRID result"
				},
				"function.cubrid-db-name": {
					"tokens": [
						"cubrid_db_name",
						"cubriddb_name"
					],
					"id": "function.cubrid-db-name",
					"name": "cubrid_db_name",
					"description": "Get db name from results of cubrid_list_dbs"
				},
				"function.cubrid-errno": {
					"tokens": [
						"cubrid_errno",
						"cubriderrno"
					],
					"id": "function.cubrid-errno",
					"name": "cubrid_errno",
					"description": "Return the numerical value of the error message from previous CUBRID operation"
				},
				"function.cubrid-error": {
					"tokens": [
						"cubrid_error",
						"cubriderror"
					],
					"id": "function.cubrid-error",
					"name": "cubrid_error",
					"description": "Get the error message"
				},
				"function.cubrid-fetch-array": {
					"tokens": [
						"cubrid_fetch_array",
						"cubridfetch_array"
					],
					"id": "function.cubrid-fetch-array",
					"name": "cubrid_fetch_array",
					"description": "Fetch a result row as an associative array, a numeric array, or both"
				},
				"function.cubrid-fetch-assoc": {
					"tokens": [
						"cubrid_fetch_assoc",
						"cubridfetch_assoc"
					],
					"id": "function.cubrid-fetch-assoc",
					"name": "cubrid_fetch_assoc",
					"description": "Return the associative array that corresponds to the fetched row"
				},
				"function.cubrid-fetch-field": {
					"tokens": [
						"cubrid_fetch_field",
						"cubridfetch_field"
					],
					"id": "function.cubrid-fetch-field",
					"name": "cubrid_fetch_field",
					"description": "Get column information from a result and return as an object"
				},
				"function.cubrid-fetch-lengths": {
					"tokens": [
						"cubrid_fetch_lengths",
						"cubridfetch_lengths"
					],
					"id": "function.cubrid-fetch-lengths",
					"name": "cubrid_fetch_lengths",
					"description": "Return an array with the lengths of the values of each field from the current row"
				},
				"function.cubrid-fetch-object": {
					"tokens": [
						"cubrid_fetch_object",
						"cubridfetch_object"
					],
					"id": "function.cubrid-fetch-object",
					"name": "cubrid_fetch_object",
					"description": "Fetche the next row and returns it as an object"
				},
				"function.cubrid-fetch-row": {
					"tokens": [
						"cubrid_fetch_row",
						"cubridfetch_row"
					],
					"id": "function.cubrid-fetch-row",
					"name": "cubrid_fetch_row",
					"description": "Return a numerical array with the values of the current row"
				},
				"function.cubrid-field-flags": {
					"tokens": [
						"cubrid_field_flags",
						"cubridfield_flags"
					],
					"id": "function.cubrid-field-flags",
					"name": "cubrid_field_flags",
					"description": "Return a string with the flags of the given field offset"
				},
				"function.cubrid-field-len": {
					"tokens": [
						"cubrid_field_len",
						"cubridfield_len"
					],
					"id": "function.cubrid-field-len",
					"name": "cubrid_field_len",
					"description": "Get the maximum length of the specified field"
				},
				"function.cubrid-field-name": {
					"tokens": [
						"cubrid_field_name",
						"cubridfield_name"
					],
					"id": "function.cubrid-field-name",
					"name": "cubrid_field_name",
					"description": "Return the name of the specified field index"
				},
				"function.cubrid-field-seek": {
					"tokens": [
						"cubrid_field_seek",
						"cubridfield_seek"
					],
					"id": "function.cubrid-field-seek",
					"name": "cubrid_field_seek",
					"description": "Move the result set cursor to the specified field offset"
				},
				"function.cubrid-field-table": {
					"tokens": [
						"cubrid_field_table",
						"cubridfield_table"
					],
					"id": "function.cubrid-field-table",
					"name": "cubrid_field_table",
					"description": "Return the name of the table of the specified field"
				},
				"function.cubrid-field-type": {
					"tokens": [
						"cubrid_field_type",
						"cubridfield_type"
					],
					"id": "function.cubrid-field-type",
					"name": "cubrid_field_type",
					"description": "Return the type of the column corresponding to the given field offset"
				},
				"function.cubrid-list-dbs": {
					"tokens": [
						"cubrid_list_dbs",
						"cubridlist_dbs"
					],
					"id": "function.cubrid-list-dbs",
					"name": "cubrid_list_dbs",
					"description": "Return an array with the list of all existing CUBRID databases"
				},
				"function.cubrid-num-fields": {
					"tokens": [
						"cubrid_num_fields",
						"cubridnum_fields"
					],
					"id": "function.cubrid-num-fields",
					"name": "cubrid_num_fields",
					"description": "Return the number of columns in the result set"
				},
				"function.cubrid-ping": {
					"tokens": [
						"cubrid_ping",
						"cubridping"
					],
					"id": "function.cubrid-ping",
					"name": "cubrid_ping",
					"description": "Ping a server connection or reconnect if there is no connection"
				},
				"function.cubrid-query": {
					"tokens": [
						"cubrid_query",
						"cubridquery"
					],
					"id": "function.cubrid-query",
					"name": "cubrid_query",
					"description": "Send a CUBRID query"
				},
				"function.cubrid-real-escape-string": {
					"tokens": [
						"cubrid_real_escape_string",
						"cubridreal_escape_string"
					],
					"id": "function.cubrid-real-escape-string",
					"name": "cubrid_real_escape_string",
					"description": "Escape special characters in a string for use in an SQL statement"
				},
				"function.cubrid-result": {
					"tokens": [
						"cubrid_result",
						"cubridresult"
					],
					"id": "function.cubrid-result",
					"name": "cubrid_result",
					"description": "Return the value of a specific field in a specific row"
				},
				"function.cubrid-unbuffered-query": {
					"tokens": [
						"cubrid_unbuffered_query",
						"cubridunbuffered_query"
					],
					"id": "function.cubrid-unbuffered-query",
					"name": "cubrid_unbuffered_query",
					"description": "Perform a query without fetching the results into memory"
				},
				"function.cubrid-load-from-glo": {
					"tokens": [
						"cubrid_load_from_glo",
						"cubridload_from_glo"
					],
					"id": "function.cubrid-load-from-glo",
					"name": "cubrid_load_from_glo",
					"description": "Read data from a GLO instance and save it in a file"
				},
				"function.cubrid-new-glo": {
					"tokens": [
						"cubrid_new_glo",
						"cubridnew_glo"
					],
					"id": "function.cubrid-new-glo",
					"name": "cubrid_new_glo",
					"description": "Create a glo instance"
				},
				"function.cubrid-save-to-glo": {
					"tokens": [
						"cubrid_save_to_glo",
						"cubridsave_to_glo"
					],
					"id": "function.cubrid-save-to-glo",
					"name": "cubrid_save_to_glo",
					"description": "Save requested file in a GLO instance"
				},
				"function.cubrid-send-glo": {
					"tokens": [
						"cubrid_send_glo",
						"cubridsend_glo"
					],
					"id": "function.cubrid-send-glo",
					"name": "cubrid_send_glo",
					"description": "Read data from glo and send it to std output"
				},
				"function.dbplus-add": {
					"tokens": [
						"dbplus_add",
						"dbplusadd"
					],
					"id": "function.dbplus-add",
					"name": "dbplus_add",
					"description": "Add a tuple to a relation"
				},
				"function.dbplus-aql": {
					"tokens": [
						"dbplus_aql",
						"dbplusaql"
					],
					"id": "function.dbplus-aql",
					"name": "dbplus_aql",
					"description": "Perform AQL query"
				},
				"function.dbplus-chdir": {
					"tokens": [
						"dbplus_chdir",
						"dbpluschdir"
					],
					"id": "function.dbplus-chdir",
					"name": "dbplus_chdir",
					"description": "Get/Set database virtual current directory"
				},
				"function.dbplus-close": {
					"tokens": [
						"dbplus_close",
						"dbplusclose"
					],
					"id": "function.dbplus-close",
					"name": "dbplus_close",
					"description": "Close a relation"
				},
				"function.dbplus-curr": {
					"tokens": [
						"dbplus_curr",
						"dbpluscurr"
					],
					"id": "function.dbplus-curr",
					"name": "dbplus_curr",
					"description": "Get current tuple from relation"
				},
				"function.dbplus-errcode": {
					"tokens": [
						"dbplus_errcode",
						"dbpluserrcode"
					],
					"id": "function.dbplus-errcode",
					"name": "dbplus_errcode",
					"description": "Get error string for given errorcode or last error"
				},
				"function.dbplus-errno": {
					"tokens": [
						"dbplus_errno",
						"dbpluserrno"
					],
					"id": "function.dbplus-errno",
					"name": "dbplus_errno",
					"description": "Get error code for last operation"
				},
				"function.dbplus-find": {
					"tokens": [
						"dbplus_find",
						"dbplusfind"
					],
					"id": "function.dbplus-find",
					"name": "dbplus_find",
					"description": "Set a constraint on a relation"
				},
				"function.dbplus-first": {
					"tokens": [
						"dbplus_first",
						"dbplusfirst"
					],
					"id": "function.dbplus-first",
					"name": "dbplus_first",
					"description": "Get first tuple from relation"
				},
				"function.dbplus-flush": {
					"tokens": [
						"dbplus_flush",
						"dbplusflush"
					],
					"id": "function.dbplus-flush",
					"name": "dbplus_flush",
					"description": "Flush all changes made on a relation"
				},
				"function.dbplus-freealllocks": {
					"tokens": [
						"dbplus_freealllocks",
						"dbplusfreealllocks"
					],
					"id": "function.dbplus-freealllocks",
					"name": "dbplus_freealllocks",
					"description": "Free all locks held by this client"
				},
				"function.dbplus-freelock": {
					"tokens": [
						"dbplus_freelock",
						"dbplusfreelock"
					],
					"id": "function.dbplus-freelock",
					"name": "dbplus_freelock",
					"description": "Release write lock on tuple"
				},
				"function.dbplus-freerlocks": {
					"tokens": [
						"dbplus_freerlocks",
						"dbplusfreerlocks"
					],
					"id": "function.dbplus-freerlocks",
					"name": "dbplus_freerlocks",
					"description": "Free all tuple locks on given relation"
				},
				"function.dbplus-getlock": {
					"tokens": [
						"dbplus_getlock",
						"dbplusgetlock"
					],
					"id": "function.dbplus-getlock",
					"name": "dbplus_getlock",
					"description": "Get a write lock on a tuple"
				},
				"function.dbplus-getunique": {
					"tokens": [
						"dbplus_getunique",
						"dbplusgetunique"
					],
					"id": "function.dbplus-getunique",
					"name": "dbplus_getunique",
					"description": "Get an id number unique to a relation"
				},
				"function.dbplus-info": {
					"tokens": [
						"dbplus_info",
						"dbplusinfo"
					],
					"id": "function.dbplus-info",
					"name": "dbplus_info",
					"description": "Get information about a relation"
				},
				"function.dbplus-last": {
					"tokens": [
						"dbplus_last",
						"dbpluslast"
					],
					"id": "function.dbplus-last",
					"name": "dbplus_last",
					"description": "Get last tuple from relation"
				},
				"function.dbplus-lockrel": {
					"tokens": [
						"dbplus_lockrel",
						"dbpluslockrel"
					],
					"id": "function.dbplus-lockrel",
					"name": "dbplus_lockrel",
					"description": "Request write lock on relation"
				},
				"function.dbplus-next": {
					"tokens": [
						"dbplus_next",
						"dbplusnext"
					],
					"id": "function.dbplus-next",
					"name": "dbplus_next",
					"description": "Get next tuple from relation"
				},
				"function.dbplus-open": {
					"tokens": [
						"dbplus_open",
						"dbplusopen"
					],
					"id": "function.dbplus-open",
					"name": "dbplus_open",
					"description": "Open relation file"
				},
				"function.dbplus-prev": {
					"tokens": [
						"dbplus_prev",
						"dbplusprev"
					],
					"id": "function.dbplus-prev",
					"name": "dbplus_prev",
					"description": "Get previous tuple from relation"
				},
				"function.dbplus-rchperm": {
					"tokens": [
						"dbplus_rchperm",
						"dbplusrchperm"
					],
					"id": "function.dbplus-rchperm",
					"name": "dbplus_rchperm",
					"description": "Change relation permissions"
				},
				"function.dbplus-rcreate": {
					"tokens": [
						"dbplus_rcreate",
						"dbplusrcreate"
					],
					"id": "function.dbplus-rcreate",
					"name": "dbplus_rcreate",
					"description": "Creates a new DB++ relation"
				},
				"function.dbplus-rcrtexact": {
					"tokens": [
						"dbplus_rcrtexact",
						"dbplusrcrtexact"
					],
					"id": "function.dbplus-rcrtexact",
					"name": "dbplus_rcrtexact",
					"description": "Creates an exact but empty copy of a relation including indices"
				},
				"function.dbplus-rcrtlike": {
					"tokens": [
						"dbplus_rcrtlike",
						"dbplusrcrtlike"
					],
					"id": "function.dbplus-rcrtlike",
					"name": "dbplus_rcrtlike",
					"description": "Creates an empty copy of a relation with default indices"
				},
				"function.dbplus-resolve": {
					"tokens": [
						"dbplus_resolve",
						"dbplusresolve"
					],
					"id": "function.dbplus-resolve",
					"name": "dbplus_resolve",
					"description": "Resolve host information for relation"
				},
				"function.dbplus-restorepos": {
					"tokens": [
						"dbplus_restorepos",
						"dbplusrestorepos"
					],
					"id": "function.dbplus-restorepos",
					"name": "dbplus_restorepos",
					"description": "Restore position"
				},
				"function.dbplus-rkeys": {
					"tokens": [
						"dbplus_rkeys",
						"dbplusrkeys"
					],
					"id": "function.dbplus-rkeys",
					"name": "dbplus_rkeys",
					"description": "Specify new primary key for a relation"
				},
				"function.dbplus-ropen": {
					"tokens": [
						"dbplus_ropen",
						"dbplusropen"
					],
					"id": "function.dbplus-ropen",
					"name": "dbplus_ropen",
					"description": "Open relation file local"
				},
				"function.dbplus-rquery": {
					"tokens": [
						"dbplus_rquery",
						"dbplusrquery"
					],
					"id": "function.dbplus-rquery",
					"name": "dbplus_rquery",
					"description": "Perform local (raw) AQL query"
				},
				"function.dbplus-rrename": {
					"tokens": [
						"dbplus_rrename",
						"dbplusrrename"
					],
					"id": "function.dbplus-rrename",
					"name": "dbplus_rrename",
					"description": "Rename a relation"
				},
				"function.dbplus-rsecindex": {
					"tokens": [
						"dbplus_rsecindex",
						"dbplusrsecindex"
					],
					"id": "function.dbplus-rsecindex",
					"name": "dbplus_rsecindex",
					"description": "Create a new secondary index for a relation"
				},
				"function.dbplus-runlink": {
					"tokens": [
						"dbplus_runlink",
						"dbplusrunlink"
					],
					"id": "function.dbplus-runlink",
					"name": "dbplus_runlink",
					"description": "Remove relation from filesystem"
				},
				"function.dbplus-rzap": {
					"tokens": [
						"dbplus_rzap",
						"dbplusrzap"
					],
					"id": "function.dbplus-rzap",
					"name": "dbplus_rzap",
					"description": "Remove all tuples from relation"
				},
				"function.dbplus-savepos": {
					"tokens": [
						"dbplus_savepos",
						"dbplussavepos"
					],
					"id": "function.dbplus-savepos",
					"name": "dbplus_savepos",
					"description": "Save position"
				},
				"function.dbplus-setindex": {
					"tokens": [
						"dbplus_setindex",
						"dbplussetindex"
					],
					"id": "function.dbplus-setindex",
					"name": "dbplus_setindex",
					"description": "Set index"
				},
				"function.dbplus-setindexbynumber": {
					"tokens": [
						"dbplus_setindexbynumber",
						"dbplussetindexbynumber"
					],
					"id": "function.dbplus-setindexbynumber",
					"name": "dbplus_setindexbynumber",
					"description": "Set index by number"
				},
				"function.dbplus-sql": {
					"tokens": [
						"dbplus_sql",
						"dbplussql"
					],
					"id": "function.dbplus-sql",
					"name": "dbplus_sql",
					"description": "Perform SQL query"
				},
				"function.dbplus-tcl": {
					"tokens": [
						"dbplus_tcl",
						"dbplustcl"
					],
					"id": "function.dbplus-tcl",
					"name": "dbplus_tcl",
					"description": "Execute TCL code on server side"
				},
				"function.dbplus-tremove": {
					"tokens": [
						"dbplus_tremove",
						"dbplustremove"
					],
					"id": "function.dbplus-tremove",
					"name": "dbplus_tremove",
					"description": "Remove tuple and return new current tuple"
				},
				"function.dbplus-undo": {
					"tokens": [
						"dbplus_undo",
						"dbplusundo"
					],
					"id": "function.dbplus-undo",
					"name": "dbplus_undo",
					"description": "Undo"
				},
				"function.dbplus-undoprepare": {
					"tokens": [
						"dbplus_undoprepare",
						"dbplusundoprepare"
					],
					"id": "function.dbplus-undoprepare",
					"name": "dbplus_undoprepare",
					"description": "Prepare undo"
				},
				"function.dbplus-unlockrel": {
					"tokens": [
						"dbplus_unlockrel",
						"dbplusunlockrel"
					],
					"id": "function.dbplus-unlockrel",
					"name": "dbplus_unlockrel",
					"description": "Give up write lock on relation"
				},
				"function.dbplus-unselect": {
					"tokens": [
						"dbplus_unselect",
						"dbplusunselect"
					],
					"id": "function.dbplus-unselect",
					"name": "dbplus_unselect",
					"description": "Remove a constraint from relation"
				},
				"function.dbplus-update": {
					"tokens": [
						"dbplus_update",
						"dbplusupdate"
					],
					"id": "function.dbplus-update",
					"name": "dbplus_update",
					"description": "Update specified tuple in relation"
				},
				"function.dbplus-xlockrel": {
					"tokens": [
						"dbplus_xlockrel",
						"dbplusxlockrel"
					],
					"id": "function.dbplus-xlockrel",
					"name": "dbplus_xlockrel",
					"description": "Request exclusive lock on relation"
				},
				"function.dbplus-xunlockrel": {
					"tokens": [
						"dbplus_xunlockrel",
						"dbplusxunlockrel"
					],
					"id": "function.dbplus-xunlockrel",
					"name": "dbplus_xunlockrel",
					"description": "Free exclusive lock on relation"
				},
				"function.dbase-add-record": {
					"tokens": [
						"dbase_add_record",
						"dbaseadd_record"
					],
					"id": "function.dbase-add-record",
					"name": "dbase_add_record",
					"description": "Adds a record to a database"
				},
				"function.dbase-close": {
					"tokens": [
						"dbase_close",
						"dbaseclose"
					],
					"id": "function.dbase-close",
					"name": "dbase_close",
					"description": "Closes a database"
				},
				"function.dbase-create": {
					"tokens": [
						"dbase_create",
						"dbasecreate"
					],
					"id": "function.dbase-create",
					"name": "dbase_create",
					"description": "Creates a database"
				},
				"function.dbase-delete-record": {
					"tokens": [
						"dbase_delete_record",
						"dbasedelete_record"
					],
					"id": "function.dbase-delete-record",
					"name": "dbase_delete_record",
					"description": "Deletes a record from a database"
				},
				"function.dbase-get-header-info": {
					"tokens": [
						"dbase_get_header_info",
						"dbaseget_header_info"
					],
					"id": "function.dbase-get-header-info",
					"name": "dbase_get_header_info",
					"description": "Gets the header info of a database"
				},
				"function.dbase-get-record-with-names": {
					"tokens": [
						"dbase_get_record_with_names",
						"dbaseget_record_with_names"
					],
					"id": "function.dbase-get-record-with-names",
					"name": "dbase_get_record_with_names",
					"description": "Gets a record from a database as an associative array"
				},
				"function.dbase-get-record": {
					"tokens": [
						"dbase_get_record",
						"dbaseget_record"
					],
					"id": "function.dbase-get-record",
					"name": "dbase_get_record",
					"description": "Gets a record from a database as an indexed array"
				},
				"function.dbase-numfields": {
					"tokens": [
						"dbase_numfields",
						"dbasenumfields"
					],
					"id": "function.dbase-numfields",
					"name": "dbase_numfields",
					"description": "Gets the number of fields of a database"
				},
				"function.dbase-numrecords": {
					"tokens": [
						"dbase_numrecords",
						"dbasenumrecords"
					],
					"id": "function.dbase-numrecords",
					"name": "dbase_numrecords",
					"description": "Gets the number of records in a database"
				},
				"function.dbase-open": {
					"tokens": [
						"dbase_open",
						"dbaseopen"
					],
					"id": "function.dbase-open",
					"name": "dbase_open",
					"description": "Opens a database"
				},
				"function.dbase-pack": {
					"tokens": [
						"dbase_pack",
						"dbasepack"
					],
					"id": "function.dbase-pack",
					"name": "dbase_pack",
					"description": "Packs a database"
				},
				"function.dbase-replace-record": {
					"tokens": [
						"dbase_replace_record",
						"dbasereplace_record"
					],
					"id": "function.dbase-replace-record",
					"name": "dbase_replace_record",
					"description": "Replaces a record in a database"
				},
				"function.filepro-fieldcount": {
					"tokens": [
						"filepro_fieldcount",
						"fileprofieldcount"
					],
					"id": "function.filepro-fieldcount",
					"name": "filepro_fieldcount",
					"description": "Find out how many fields are in a filePro database"
				},
				"function.filepro-fieldname": {
					"tokens": [
						"filepro_fieldname",
						"fileprofieldname"
					],
					"id": "function.filepro-fieldname",
					"name": "filepro_fieldname",
					"description": "Gets the name of a field"
				},
				"function.filepro-fieldtype": {
					"tokens": [
						"filepro_fieldtype",
						"fileprofieldtype"
					],
					"id": "function.filepro-fieldtype",
					"name": "filepro_fieldtype",
					"description": "Gets the type of a field"
				},
				"function.filepro-fieldwidth": {
					"tokens": [
						"filepro_fieldwidth",
						"fileprofieldwidth"
					],
					"id": "function.filepro-fieldwidth",
					"name": "filepro_fieldwidth",
					"description": "Gets the width of a field"
				},
				"function.filepro-retrieve": {
					"tokens": [
						"filepro_retrieve",
						"fileproretrieve"
					],
					"id": "function.filepro-retrieve",
					"name": "filepro_retrieve",
					"description": "Retrieves data from a filePro database"
				},
				"function.filepro-rowcount": {
					"tokens": [
						"filepro_rowcount",
						"fileprorowcount"
					],
					"id": "function.filepro-rowcount",
					"name": "filepro_rowcount",
					"description": "Find out how many rows are in a filePro database"
				},
				"function.filepro": {
					"tokens": [
						"filepro"
					],
					"id": "function.filepro",
					"name": "filepro",
					"description": "Read and verify the map file"
				},
				"function.ibase-add-user": {
					"tokens": [
						"ibase_add_user",
						"ibaseadd_user"
					],
					"id": "function.ibase-add-user",
					"name": "ibase_add_user",
					"description": "Add a user to a security database"
				},
				"function.ibase-affected-rows": {
					"tokens": [
						"ibase_affected_rows",
						"ibaseaffected_rows"
					],
					"id": "function.ibase-affected-rows",
					"name": "ibase_affected_rows",
					"description": "Return the number of rows that were affected by the previous query"
				},
				"function.ibase-backup": {
					"tokens": [
						"ibase_backup",
						"ibasebackup"
					],
					"id": "function.ibase-backup",
					"name": "ibase_backup",
					"description": "Initiates a backup task in the service manager and returns immediately"
				},
				"function.ibase-blob-add": {
					"tokens": [
						"ibase_blob_add",
						"ibaseblob_add"
					],
					"id": "function.ibase-blob-add",
					"name": "ibase_blob_add",
					"description": "Add data into a newly created blob"
				},
				"function.ibase-blob-cancel": {
					"tokens": [
						"ibase_blob_cancel",
						"ibaseblob_cancel"
					],
					"id": "function.ibase-blob-cancel",
					"name": "ibase_blob_cancel",
					"description": "Cancel creating blob"
				},
				"function.ibase-blob-close": {
					"tokens": [
						"ibase_blob_close",
						"ibaseblob_close"
					],
					"id": "function.ibase-blob-close",
					"name": "ibase_blob_close",
					"description": "Close blob"
				},
				"function.ibase-blob-create": {
					"tokens": [
						"ibase_blob_create",
						"ibaseblob_create"
					],
					"id": "function.ibase-blob-create",
					"name": "ibase_blob_create",
					"description": "Create a new blob for adding data"
				},
				"function.ibase-blob-echo": {
					"tokens": [
						"ibase_blob_echo",
						"ibaseblob_echo"
					],
					"id": "function.ibase-blob-echo",
					"name": "ibase_blob_echo",
					"description": "Output blob contents to browser"
				},
				"function.ibase-blob-get": {
					"tokens": [
						"ibase_blob_get",
						"ibaseblob_get"
					],
					"id": "function.ibase-blob-get",
					"name": "ibase_blob_get",
					"description": "Get len bytes data from open blob"
				},
				"function.ibase-blob-import": {
					"tokens": [
						"ibase_blob_import",
						"ibaseblob_import"
					],
					"id": "function.ibase-blob-import",
					"name": "ibase_blob_import",
					"description": "Create blob, copy file in it, and close it"
				},
				"function.ibase-blob-info": {
					"tokens": [
						"ibase_blob_info",
						"ibaseblob_info"
					],
					"id": "function.ibase-blob-info",
					"name": "ibase_blob_info",
					"description": "Return blob length and other useful info"
				},
				"function.ibase-blob-open": {
					"tokens": [
						"ibase_blob_open",
						"ibaseblob_open"
					],
					"id": "function.ibase-blob-open",
					"name": "ibase_blob_open",
					"description": "Open blob for retrieving data parts"
				},
				"function.ibase-close": {
					"tokens": [
						"ibase_close",
						"ibaseclose"
					],
					"id": "function.ibase-close",
					"name": "ibase_close",
					"description": "Close a connection to an InterBase database"
				},
				"function.ibase-commit-ret": {
					"tokens": [
						"ibase_commit_ret",
						"ibasecommit_ret"
					],
					"id": "function.ibase-commit-ret",
					"name": "ibase_commit_ret",
					"description": "Commit a transaction without closing it"
				},
				"function.ibase-commit": {
					"tokens": [
						"ibase_commit",
						"ibasecommit"
					],
					"id": "function.ibase-commit",
					"name": "ibase_commit",
					"description": "Commit a transaction"
				},
				"function.ibase-connect": {
					"tokens": [
						"ibase_connect",
						"ibaseconnect"
					],
					"id": "function.ibase-connect",
					"name": "ibase_connect",
					"description": "Open a connection to a database"
				},
				"function.ibase-db-info": {
					"tokens": [
						"ibase_db_info",
						"ibasedb_info"
					],
					"id": "function.ibase-db-info",
					"name": "ibase_db_info",
					"description": "Request statistics about a database"
				},
				"function.ibase-delete-user": {
					"tokens": [
						"ibase_delete_user",
						"ibasedelete_user"
					],
					"id": "function.ibase-delete-user",
					"name": "ibase_delete_user",
					"description": "Delete a user from a security database"
				},
				"function.ibase-drop-db": {
					"tokens": [
						"ibase_drop_db",
						"ibasedrop_db"
					],
					"id": "function.ibase-drop-db",
					"name": "ibase_drop_db",
					"description": "Drops a database"
				},
				"function.ibase-errcode": {
					"tokens": [
						"ibase_errcode",
						"ibaseerrcode"
					],
					"id": "function.ibase-errcode",
					"name": "ibase_errcode",
					"description": "Return an error code"
				},
				"function.ibase-errmsg": {
					"tokens": [
						"ibase_errmsg",
						"ibaseerrmsg"
					],
					"id": "function.ibase-errmsg",
					"name": "ibase_errmsg",
					"description": "Return error messages"
				},
				"function.ibase-execute": {
					"tokens": [
						"ibase_execute",
						"ibaseexecute"
					],
					"id": "function.ibase-execute",
					"name": "ibase_execute",
					"description": "Execute a previously prepared query"
				},
				"function.ibase-fetch-assoc": {
					"tokens": [
						"ibase_fetch_assoc",
						"ibasefetch_assoc"
					],
					"id": "function.ibase-fetch-assoc",
					"name": "ibase_fetch_assoc",
					"description": "Fetch a result row from a query as an associative array"
				},
				"function.ibase-fetch-object": {
					"tokens": [
						"ibase_fetch_object",
						"ibasefetch_object"
					],
					"id": "function.ibase-fetch-object",
					"name": "ibase_fetch_object",
					"description": "Get an object from a InterBase database"
				},
				"function.ibase-fetch-row": {
					"tokens": [
						"ibase_fetch_row",
						"ibasefetch_row"
					],
					"id": "function.ibase-fetch-row",
					"name": "ibase_fetch_row",
					"description": "Fetch a row from an InterBase database"
				},
				"function.ibase-field-info": {
					"tokens": [
						"ibase_field_info",
						"ibasefield_info"
					],
					"id": "function.ibase-field-info",
					"name": "ibase_field_info",
					"description": "Get information about a field"
				},
				"function.ibase-free-event-handler": {
					"tokens": [
						"ibase_free_event_handler",
						"ibasefree_event_handler"
					],
					"id": "function.ibase-free-event-handler",
					"name": "ibase_free_event_handler",
					"description": "Cancels a registered event handler"
				},
				"function.ibase-free-query": {
					"tokens": [
						"ibase_free_query",
						"ibasefree_query"
					],
					"id": "function.ibase-free-query",
					"name": "ibase_free_query",
					"description": "Free memory allocated by a prepared query"
				},
				"function.ibase-free-result": {
					"tokens": [
						"ibase_free_result",
						"ibasefree_result"
					],
					"id": "function.ibase-free-result",
					"name": "ibase_free_result",
					"description": "Free a result set"
				},
				"function.ibase-gen-id": {
					"tokens": [
						"ibase_gen_id",
						"ibasegen_id"
					],
					"id": "function.ibase-gen-id",
					"name": "ibase_gen_id",
					"description": "Increments the named generator and returns its new value"
				},
				"function.ibase-maintain-db": {
					"tokens": [
						"ibase_maintain_db",
						"ibasemaintain_db"
					],
					"id": "function.ibase-maintain-db",
					"name": "ibase_maintain_db",
					"description": "Execute a maintenance command on the database server"
				},
				"function.ibase-modify-user": {
					"tokens": [
						"ibase_modify_user",
						"ibasemodify_user"
					],
					"id": "function.ibase-modify-user",
					"name": "ibase_modify_user",
					"description": "Modify a user to a security database"
				},
				"function.ibase-name-result": {
					"tokens": [
						"ibase_name_result",
						"ibasename_result"
					],
					"id": "function.ibase-name-result",
					"name": "ibase_name_result",
					"description": "Assigns a name to a result set"
				},
				"function.ibase-num-fields": {
					"tokens": [
						"ibase_num_fields",
						"ibasenum_fields"
					],
					"id": "function.ibase-num-fields",
					"name": "ibase_num_fields",
					"description": "Get the number of fields in a result set"
				},
				"function.ibase-num-params": {
					"tokens": [
						"ibase_num_params",
						"ibasenum_params"
					],
					"id": "function.ibase-num-params",
					"name": "ibase_num_params",
					"description": "Return the number of parameters in a prepared query"
				},
				"function.ibase-param-info": {
					"tokens": [
						"ibase_param_info",
						"ibaseparam_info"
					],
					"id": "function.ibase-param-info",
					"name": "ibase_param_info",
					"description": "Return information about a parameter in a prepared query"
				},
				"function.ibase-pconnect": {
					"tokens": [
						"ibase_pconnect",
						"ibasepconnect"
					],
					"id": "function.ibase-pconnect",
					"name": "ibase_pconnect",
					"description": "Open a persistent connection to an InterBase database"
				},
				"function.ibase-prepare": {
					"tokens": [
						"ibase_prepare",
						"ibaseprepare"
					],
					"id": "function.ibase-prepare",
					"name": "ibase_prepare",
					"description": "Prepare a query for later binding of parameter placeholders and execution"
				},
				"function.ibase-query": {
					"tokens": [
						"ibase_query",
						"ibasequery"
					],
					"id": "function.ibase-query",
					"name": "ibase_query",
					"description": "Execute a query on an InterBase database"
				},
				"function.ibase-restore": {
					"tokens": [
						"ibase_restore",
						"ibaserestore"
					],
					"id": "function.ibase-restore",
					"name": "ibase_restore",
					"description": "Initiates a restore task in the service manager and returns immediately"
				},
				"function.ibase-rollback-ret": {
					"tokens": [
						"ibase_rollback_ret",
						"ibaserollback_ret"
					],
					"id": "function.ibase-rollback-ret",
					"name": "ibase_rollback_ret",
					"description": "Roll back a transaction without closing it"
				},
				"function.ibase-rollback": {
					"tokens": [
						"ibase_rollback",
						"ibaserollback"
					],
					"id": "function.ibase-rollback",
					"name": "ibase_rollback",
					"description": "Roll back a transaction"
				},
				"function.ibase-server-info": {
					"tokens": [
						"ibase_server_info",
						"ibaseserver_info"
					],
					"id": "function.ibase-server-info",
					"name": "ibase_server_info",
					"description": "Request information about a database server"
				},
				"function.ibase-service-attach": {
					"tokens": [
						"ibase_service_attach",
						"ibaseservice_attach"
					],
					"id": "function.ibase-service-attach",
					"name": "ibase_service_attach",
					"description": "Connect to the service manager"
				},
				"function.ibase-service-detach": {
					"tokens": [
						"ibase_service_detach",
						"ibaseservice_detach"
					],
					"id": "function.ibase-service-detach",
					"name": "ibase_service_detach",
					"description": "Disconnect from the service manager"
				},
				"function.ibase-set-event-handler": {
					"tokens": [
						"ibase_set_event_handler",
						"ibaseset_event_handler"
					],
					"id": "function.ibase-set-event-handler",
					"name": "ibase_set_event_handler",
					"description": "Register a callback function to be called when events are posted"
				},
				"function.ibase-trans": {
					"tokens": [
						"ibase_trans",
						"ibasetrans"
					],
					"id": "function.ibase-trans",
					"name": "ibase_trans",
					"description": "Begin a transaction"
				},
				"function.ibase-wait-event": {
					"tokens": [
						"ibase_wait_event",
						"ibasewait_event"
					],
					"id": "function.ibase-wait-event",
					"name": "ibase_wait_event",
					"description": "Wait for an event to be posted by the database"
				},
				"function.fbsql-affected-rows": {
					"tokens": [
						"fbsql_affected_rows",
						"fbsqlaffected_rows"
					],
					"id": "function.fbsql-affected-rows",
					"name": "fbsql_affected_rows",
					"description": "Get number of affected rows in previous FrontBase operation"
				},
				"function.fbsql-autocommit": {
					"tokens": [
						"fbsql_autocommit",
						"fbsqlautocommit"
					],
					"id": "function.fbsql-autocommit",
					"name": "fbsql_autocommit",
					"description": "Enable or disable autocommit"
				},
				"function.fbsql-blob-size": {
					"tokens": [
						"fbsql_blob_size",
						"fbsqlblob_size"
					],
					"id": "function.fbsql-blob-size",
					"name": "fbsql_blob_size",
					"description": "Get the size of a BLOB"
				},
				"function.fbsql-change-user": {
					"tokens": [
						"fbsql_change_user",
						"fbsqlchange_user"
					],
					"id": "function.fbsql-change-user",
					"name": "fbsql_change_user",
					"description": "Change logged in user of the active connection"
				},
				"function.fbsql-clob-size": {
					"tokens": [
						"fbsql_clob_size",
						"fbsqlclob_size"
					],
					"id": "function.fbsql-clob-size",
					"name": "fbsql_clob_size",
					"description": "Get the size of a CLOB"
				},
				"function.fbsql-close": {
					"tokens": [
						"fbsql_close",
						"fbsqlclose"
					],
					"id": "function.fbsql-close",
					"name": "fbsql_close",
					"description": "Close FrontBase connection"
				},
				"function.fbsql-commit": {
					"tokens": [
						"fbsql_commit",
						"fbsqlcommit"
					],
					"id": "function.fbsql-commit",
					"name": "fbsql_commit",
					"description": "Commits a transaction to the database"
				},
				"function.fbsql-connect": {
					"tokens": [
						"fbsql_connect",
						"fbsqlconnect"
					],
					"id": "function.fbsql-connect",
					"name": "fbsql_connect",
					"description": "Open a connection to a FrontBase Server"
				},
				"function.fbsql-create-blob": {
					"tokens": [
						"fbsql_create_blob",
						"fbsqlcreate_blob"
					],
					"id": "function.fbsql-create-blob",
					"name": "fbsql_create_blob",
					"description": "Create a BLOB"
				},
				"function.fbsql-create-clob": {
					"tokens": [
						"fbsql_create_clob",
						"fbsqlcreate_clob"
					],
					"id": "function.fbsql-create-clob",
					"name": "fbsql_create_clob",
					"description": "Create a CLOB"
				},
				"function.fbsql-create-db": {
					"tokens": [
						"fbsql_create_db",
						"fbsqlcreate_db"
					],
					"id": "function.fbsql-create-db",
					"name": "fbsql_create_db",
					"description": "Create a FrontBase database"
				},
				"function.fbsql-data-seek": {
					"tokens": [
						"fbsql_data_seek",
						"fbsqldata_seek"
					],
					"id": "function.fbsql-data-seek",
					"name": "fbsql_data_seek",
					"description": "Move internal result pointer"
				},
				"function.fbsql-database-password": {
					"tokens": [
						"fbsql_database_password",
						"fbsqldatabase_password"
					],
					"id": "function.fbsql-database-password",
					"name": "fbsql_database_password",
					"description": "Sets or retrieves the password for a FrontBase database"
				},
				"function.fbsql-database": {
					"tokens": [
						"fbsql_database",
						"fbsqldatabase"
					],
					"id": "function.fbsql-database",
					"name": "fbsql_database",
					"description": "Get or set the database name used with a connection"
				},
				"function.fbsql-db-query": {
					"tokens": [
						"fbsql_db_query",
						"fbsqldb_query"
					],
					"id": "function.fbsql-db-query",
					"name": "fbsql_db_query",
					"description": "Send a FrontBase query"
				},
				"function.fbsql-db-status": {
					"tokens": [
						"fbsql_db_status",
						"fbsqldb_status"
					],
					"id": "function.fbsql-db-status",
					"name": "fbsql_db_status",
					"description": "Get the status for a given database"
				},
				"function.fbsql-drop-db": {
					"tokens": [
						"fbsql_drop_db",
						"fbsqldrop_db"
					],
					"id": "function.fbsql-drop-db",
					"name": "fbsql_drop_db",
					"description": "Drop (delete) a FrontBase database"
				},
				"function.fbsql-errno": {
					"tokens": [
						"fbsql_errno",
						"fbsqlerrno"
					],
					"id": "function.fbsql-errno",
					"name": "fbsql_errno",
					"description": "Returns the error number from previous operation"
				},
				"function.fbsql-error": {
					"tokens": [
						"fbsql_error",
						"fbsqlerror"
					],
					"id": "function.fbsql-error",
					"name": "fbsql_error",
					"description": "Returns the error message from previous operation"
				},
				"function.fbsql-fetch-array": {
					"tokens": [
						"fbsql_fetch_array",
						"fbsqlfetch_array"
					],
					"id": "function.fbsql-fetch-array",
					"name": "fbsql_fetch_array",
					"description": "Fetch a result row as an associative array, a numeric array, or both"
				},
				"function.fbsql-fetch-assoc": {
					"tokens": [
						"fbsql_fetch_assoc",
						"fbsqlfetch_assoc"
					],
					"id": "function.fbsql-fetch-assoc",
					"name": "fbsql_fetch_assoc",
					"description": "Fetch a result row as an associative array"
				},
				"function.fbsql-fetch-field": {
					"tokens": [
						"fbsql_fetch_field",
						"fbsqlfetch_field"
					],
					"id": "function.fbsql-fetch-field",
					"name": "fbsql_fetch_field",
					"description": "Get column information from a result and return as an object"
				},
				"function.fbsql-fetch-lengths": {
					"tokens": [
						"fbsql_fetch_lengths",
						"fbsqlfetch_lengths"
					],
					"id": "function.fbsql-fetch-lengths",
					"name": "fbsql_fetch_lengths",
					"description": "Get the length of each output in a result"
				},
				"function.fbsql-fetch-object": {
					"tokens": [
						"fbsql_fetch_object",
						"fbsqlfetch_object"
					],
					"id": "function.fbsql-fetch-object",
					"name": "fbsql_fetch_object",
					"description": "Fetch a result row as an object"
				},
				"function.fbsql-fetch-row": {
					"tokens": [
						"fbsql_fetch_row",
						"fbsqlfetch_row"
					],
					"id": "function.fbsql-fetch-row",
					"name": "fbsql_fetch_row",
					"description": "Get a result row as an enumerated array"
				},
				"function.fbsql-field-flags": {
					"tokens": [
						"fbsql_field_flags",
						"fbsqlfield_flags"
					],
					"id": "function.fbsql-field-flags",
					"name": "fbsql_field_flags",
					"description": "Get the flags associated with the specified field in a result"
				},
				"function.fbsql-field-len": {
					"tokens": [
						"fbsql_field_len",
						"fbsqlfield_len"
					],
					"id": "function.fbsql-field-len",
					"name": "fbsql_field_len",
					"description": "Returns the length of the specified field"
				},
				"function.fbsql-field-name": {
					"tokens": [
						"fbsql_field_name",
						"fbsqlfield_name"
					],
					"id": "function.fbsql-field-name",
					"name": "fbsql_field_name",
					"description": "Get the name of the specified field in a result"
				},
				"function.fbsql-field-seek": {
					"tokens": [
						"fbsql_field_seek",
						"fbsqlfield_seek"
					],
					"id": "function.fbsql-field-seek",
					"name": "fbsql_field_seek",
					"description": "Set result pointer to a specified field offset"
				},
				"function.fbsql-field-table": {
					"tokens": [
						"fbsql_field_table",
						"fbsqlfield_table"
					],
					"id": "function.fbsql-field-table",
					"name": "fbsql_field_table",
					"description": "Get name of the table the specified field is in"
				},
				"function.fbsql-field-type": {
					"tokens": [
						"fbsql_field_type",
						"fbsqlfield_type"
					],
					"id": "function.fbsql-field-type",
					"name": "fbsql_field_type",
					"description": "Get the type of the specified field in a result"
				},
				"function.fbsql-free-result": {
					"tokens": [
						"fbsql_free_result",
						"fbsqlfree_result"
					],
					"id": "function.fbsql-free-result",
					"name": "fbsql_free_result",
					"description": "Free result memory"
				},
				"function.fbsql-get-autostart-info": {
					"tokens": [
						"fbsql_get_autostart_info",
						"fbsqlget_autostart_info"
					],
					"id": "function.fbsql-get-autostart-info",
					"name": "fbsql_get_autostart_info",
					"description": "Description"
				},
				"function.fbsql-hostname": {
					"tokens": [
						"fbsql_hostname",
						"fbsqlhostname"
					],
					"id": "function.fbsql-hostname",
					"name": "fbsql_hostname",
					"description": "Get or set the host name used with a connection"
				},
				"function.fbsql-insert-id": {
					"tokens": [
						"fbsql_insert_id",
						"fbsqlinsert_id"
					],
					"id": "function.fbsql-insert-id",
					"name": "fbsql_insert_id",
					"description": "Get the id generated from the previous INSERT operation"
				},
				"function.fbsql-list-dbs": {
					"tokens": [
						"fbsql_list_dbs",
						"fbsqllist_dbs"
					],
					"id": "function.fbsql-list-dbs",
					"name": "fbsql_list_dbs",
					"description": "List databases available on a FrontBase server"
				},
				"function.fbsql-list-fields": {
					"tokens": [
						"fbsql_list_fields",
						"fbsqllist_fields"
					],
					"id": "function.fbsql-list-fields",
					"name": "fbsql_list_fields",
					"description": "List FrontBase result fields"
				},
				"function.fbsql-list-tables": {
					"tokens": [
						"fbsql_list_tables",
						"fbsqllist_tables"
					],
					"id": "function.fbsql-list-tables",
					"name": "fbsql_list_tables",
					"description": "List tables in a FrontBase database"
				},
				"function.fbsql-next-result": {
					"tokens": [
						"fbsql_next_result",
						"fbsqlnext_result"
					],
					"id": "function.fbsql-next-result",
					"name": "fbsql_next_result",
					"description": "Move the internal result pointer to the next result"
				},
				"function.fbsql-num-fields": {
					"tokens": [
						"fbsql_num_fields",
						"fbsqlnum_fields"
					],
					"id": "function.fbsql-num-fields",
					"name": "fbsql_num_fields",
					"description": "Get number of fields in result"
				},
				"function.fbsql-num-rows": {
					"tokens": [
						"fbsql_num_rows",
						"fbsqlnum_rows"
					],
					"id": "function.fbsql-num-rows",
					"name": "fbsql_num_rows",
					"description": "Get number of rows in result"
				},
				"function.fbsql-password": {
					"tokens": [
						"fbsql_password",
						"fbsqlpassword"
					],
					"id": "function.fbsql-password",
					"name": "fbsql_password",
					"description": "Get or set the user password used with a connection"
				},
				"function.fbsql-pconnect": {
					"tokens": [
						"fbsql_pconnect",
						"fbsqlpconnect"
					],
					"id": "function.fbsql-pconnect",
					"name": "fbsql_pconnect",
					"description": "Open a persistent connection to a FrontBase Server"
				},
				"function.fbsql-query": {
					"tokens": [
						"fbsql_query",
						"fbsqlquery"
					],
					"id": "function.fbsql-query",
					"name": "fbsql_query",
					"description": "Send a FrontBase query"
				},
				"function.fbsql-read-blob": {
					"tokens": [
						"fbsql_read_blob",
						"fbsqlread_blob"
					],
					"id": "function.fbsql-read-blob",
					"name": "fbsql_read_blob",
					"description": "Read a BLOB from the database"
				},
				"function.fbsql-read-clob": {
					"tokens": [
						"fbsql_read_clob",
						"fbsqlread_clob"
					],
					"id": "function.fbsql-read-clob",
					"name": "fbsql_read_clob",
					"description": "Read a CLOB from the database"
				},
				"function.fbsql-result": {
					"tokens": [
						"fbsql_result",
						"fbsqlresult"
					],
					"id": "function.fbsql-result",
					"name": "fbsql_result",
					"description": "Get result data"
				},
				"function.fbsql-rollback": {
					"tokens": [
						"fbsql_rollback",
						"fbsqlrollback"
					],
					"id": "function.fbsql-rollback",
					"name": "fbsql_rollback",
					"description": "Rollback a transaction to the database"
				},
				"function.fbsql-rows-fetched": {
					"tokens": [
						"fbsql_rows_fetched",
						"fbsqlrows_fetched"
					],
					"id": "function.fbsql-rows-fetched",
					"name": "fbsql_rows_fetched",
					"description": "Get the number of rows affected by the last statement"
				},
				"function.fbsql-select-db": {
					"tokens": [
						"fbsql_select_db",
						"fbsqlselect_db"
					],
					"id": "function.fbsql-select-db",
					"name": "fbsql_select_db",
					"description": "Select a FrontBase database"
				},
				"function.fbsql-set-characterset": {
					"tokens": [
						"fbsql_set_characterset",
						"fbsqlset_characterset"
					],
					"id": "function.fbsql-set-characterset",
					"name": "fbsql_set_characterset",
					"description": "Change input/output character set"
				},
				"function.fbsql-set-lob-mode": {
					"tokens": [
						"fbsql_set_lob_mode",
						"fbsqlset_lob_mode"
					],
					"id": "function.fbsql-set-lob-mode",
					"name": "fbsql_set_lob_mode",
					"description": "Set the LOB retrieve mode for a FrontBase result set"
				},
				"function.fbsql-set-password": {
					"tokens": [
						"fbsql_set_password",
						"fbsqlset_password"
					],
					"id": "function.fbsql-set-password",
					"name": "fbsql_set_password",
					"description": "Change the password for a given user"
				},
				"function.fbsql-set-transaction": {
					"tokens": [
						"fbsql_set_transaction",
						"fbsqlset_transaction"
					],
					"id": "function.fbsql-set-transaction",
					"name": "fbsql_set_transaction",
					"description": "Set the transaction locking and isolation"
				},
				"function.fbsql-start-db": {
					"tokens": [
						"fbsql_start_db",
						"fbsqlstart_db"
					],
					"id": "function.fbsql-start-db",
					"name": "fbsql_start_db",
					"description": "Start a database on local or remote server"
				},
				"function.fbsql-stop-db": {
					"tokens": [
						"fbsql_stop_db",
						"fbsqlstop_db"
					],
					"id": "function.fbsql-stop-db",
					"name": "fbsql_stop_db",
					"description": "Stop a database on local or remote server"
				},
				"function.fbsql-table-name": {
					"tokens": [
						"fbsql_table_name",
						"fbsqltable_name"
					],
					"id": "function.fbsql-table-name",
					"name": "fbsql_table_name",
					"description": "Get table name of field"
				},
				"function.fbsql-tablename": {
					"tokens": [
						"fbsql_tablename",
						"fbsqltablename"
					],
					"id": "function.fbsql-tablename",
					"name": "fbsql_tablename",
					"description": "Alias of fbsql_table_name"
				},
				"function.fbsql-username": {
					"tokens": [
						"fbsql_username",
						"fbsqlusername"
					],
					"id": "function.fbsql-username",
					"name": "fbsql_username",
					"description": "Get or set the username for the connection"
				},
				"function.fbsql-warnings": {
					"tokens": [
						"fbsql_warnings",
						"fbsqlwarnings"
					],
					"id": "function.fbsql-warnings",
					"name": "fbsql_warnings",
					"description": "Enable or disable FrontBase warnings"
				},
				"function.db2-autocommit": {
					"tokens": [
						"db2_autocommit",
						"db2autocommit"
					],
					"id": "function.db2-autocommit",
					"name": "db2_autocommit",
					"description": "Returns or sets the AUTOCOMMIT state for a database connection"
				},
				"function.db2-bind-param": {
					"tokens": [
						"db2_bind_param",
						"db2bind_param"
					],
					"id": "function.db2-bind-param",
					"name": "db2_bind_param",
					"description": "Binds a PHP variable to an SQL statement parameter"
				},
				"function.db2-client-info": {
					"tokens": [
						"db2_client_info",
						"db2client_info"
					],
					"id": "function.db2-client-info",
					"name": "db2_client_info",
					"description": "Returns an object with properties that describe the DB2 database client"
				},
				"function.db2-close": {
					"tokens": [
						"db2_close",
						"db2close"
					],
					"id": "function.db2-close",
					"name": "db2_close",
					"description": "Closes a database connection"
				},
				"function.db2-column-privileges": {
					"tokens": [
						"db2_column_privileges",
						"db2column_privileges"
					],
					"id": "function.db2-column-privileges",
					"name": "db2_column_privileges",
					"description": "Returns a result set listing the columns and associated privileges for a table"
				},
				"function.db2-columns": {
					"tokens": [
						"db2_columns",
						"db2columns"
					],
					"id": "function.db2-columns",
					"name": "db2_columns",
					"description": "Returns a result set listing the columns and associated metadata for a table"
				},
				"function.db2-commit": {
					"tokens": [
						"db2_commit",
						"db2commit"
					],
					"id": "function.db2-commit",
					"name": "db2_commit",
					"description": "Commits a transaction"
				},
				"function.db2-conn-error": {
					"tokens": [
						"db2_conn_error",
						"db2conn_error"
					],
					"id": "function.db2-conn-error",
					"name": "db2_conn_error",
					"description": "Returns a string containing the SQLSTATE returned by the last connection attempt"
				},
				"function.db2-conn-errormsg": {
					"tokens": [
						"db2_conn_errormsg",
						"db2conn_errormsg"
					],
					"id": "function.db2-conn-errormsg",
					"name": "db2_conn_errormsg",
					"description": "Returns the last connection error message and SQLCODE value"
				},
				"function.db2-connect": {
					"tokens": [
						"db2_connect",
						"db2connect"
					],
					"id": "function.db2-connect",
					"name": "db2_connect",
					"description": "Returns a connection to a database"
				},
				"function.db2-cursor-type": {
					"tokens": [
						"db2_cursor_type",
						"db2cursor_type"
					],
					"id": "function.db2-cursor-type",
					"name": "db2_cursor_type",
					"description": "Returns the cursor type used by a statement resource"
				},
				"function.db2-escape-string": {
					"tokens": [
						"db2_escape_string",
						"db2escape_string"
					],
					"id": "function.db2-escape-string",
					"name": "db2_escape_string",
					"description": "Used to escape certain characters"
				},
				"function.db2-exec": {
					"tokens": [
						"db2_exec",
						"db2exec"
					],
					"id": "function.db2-exec",
					"name": "db2_exec",
					"description": "Executes an SQL statement directly"
				},
				"function.db2-execute": {
					"tokens": [
						"db2_execute",
						"db2execute"
					],
					"id": "function.db2-execute",
					"name": "db2_execute",
					"description": "Executes a prepared SQL statement"
				},
				"function.db2-fetch-array": {
					"tokens": [
						"db2_fetch_array",
						"db2fetch_array"
					],
					"id": "function.db2-fetch-array",
					"name": "db2_fetch_array",
					"description": "Returns an array, indexed by column position, representing a row in a result set"
				},
				"function.db2-fetch-assoc": {
					"tokens": [
						"db2_fetch_assoc",
						"db2fetch_assoc"
					],
					"id": "function.db2-fetch-assoc",
					"name": "db2_fetch_assoc",
					"description": "Returns an array, indexed by column name, representing a row in a result set"
				},
				"function.db2-fetch-both": {
					"tokens": [
						"db2_fetch_both",
						"db2fetch_both"
					],
					"id": "function.db2-fetch-both",
					"name": "db2_fetch_both",
					"description": "Returns an array, indexed by both column name and position, representing a row in a result set"
				},
				"function.db2-fetch-object": {
					"tokens": [
						"db2_fetch_object",
						"db2fetch_object"
					],
					"id": "function.db2-fetch-object",
					"name": "db2_fetch_object",
					"description": "Returns an object with properties representing columns in the fetched row"
				},
				"function.db2-fetch-row": {
					"tokens": [
						"db2_fetch_row",
						"db2fetch_row"
					],
					"id": "function.db2-fetch-row",
					"name": "db2_fetch_row",
					"description": "Sets the result set pointer to the next row or requested row"
				},
				"function.db2-field-display-size": {
					"tokens": [
						"db2_field_display_size",
						"db2field_display_size"
					],
					"id": "function.db2-field-display-size",
					"name": "db2_field_display_size",
					"description": "Returns the maximum number of bytes required to display a column"
				},
				"function.db2-field-name": {
					"tokens": [
						"db2_field_name",
						"db2field_name"
					],
					"id": "function.db2-field-name",
					"name": "db2_field_name",
					"description": "Returns the name of the column in the result set"
				},
				"function.db2-field-num": {
					"tokens": [
						"db2_field_num",
						"db2field_num"
					],
					"id": "function.db2-field-num",
					"name": "db2_field_num",
					"description": "Returns the position of the named column in a result set"
				},
				"function.db2-field-precision": {
					"tokens": [
						"db2_field_precision",
						"db2field_precision"
					],
					"id": "function.db2-field-precision",
					"name": "db2_field_precision",
					"description": "Returns the precision of the indicated column in a result set"
				},
				"function.db2-field-scale": {
					"tokens": [
						"db2_field_scale",
						"db2field_scale"
					],
					"id": "function.db2-field-scale",
					"name": "db2_field_scale",
					"description": "Returns the scale of the indicated column in a result set"
				},
				"function.db2-field-type": {
					"tokens": [
						"db2_field_type",
						"db2field_type"
					],
					"id": "function.db2-field-type",
					"name": "db2_field_type",
					"description": "Returns the data type of the indicated column in a result set"
				},
				"function.db2-field-width": {
					"tokens": [
						"db2_field_width",
						"db2field_width"
					],
					"id": "function.db2-field-width",
					"name": "db2_field_width",
					"description": "Returns the width of the current value of the indicated column in a result set"
				},
				"function.db2-foreign-keys": {
					"tokens": [
						"db2_foreign_keys",
						"db2foreign_keys"
					],
					"id": "function.db2-foreign-keys",
					"name": "db2_foreign_keys",
					"description": "Returns a result set listing the foreign keys for a table"
				},
				"function.db2-free-result": {
					"tokens": [
						"db2_free_result",
						"db2free_result"
					],
					"id": "function.db2-free-result",
					"name": "db2_free_result",
					"description": "Frees resources associated with a result set"
				},
				"function.db2-free-stmt": {
					"tokens": [
						"db2_free_stmt",
						"db2free_stmt"
					],
					"id": "function.db2-free-stmt",
					"name": "db2_free_stmt",
					"description": "Frees resources associated with the indicated statement resource"
				},
				"function.db2-get-option": {
					"tokens": [
						"db2_get_option",
						"db2get_option"
					],
					"id": "function.db2-get-option",
					"name": "db2_get_option",
					"description": "Retrieves an option value for a statement resource or a connection resource"
				},
				"function.db2-last-insert-id": {
					"tokens": [
						"db2_last_insert_id",
						"db2last_insert_id"
					],
					"id": "function.db2-last-insert-id",
					"name": "db2_last_insert_id",
					"description": "Returns the auto generated ID of the last insert query that successfully \n  executed on this connection"
				},
				"function.db2-lob-read": {
					"tokens": [
						"db2_lob_read",
						"db2lob_read"
					],
					"id": "function.db2-lob-read",
					"name": "db2_lob_read",
					"description": "Gets a user defined size of LOB files with each invocation"
				},
				"function.db2-next-result": {
					"tokens": [
						"db2_next_result",
						"db2next_result"
					],
					"id": "function.db2-next-result",
					"name": "db2_next_result",
					"description": "Requests the next result set from a stored procedure"
				},
				"function.db2-num-fields": {
					"tokens": [
						"db2_num_fields",
						"db2num_fields"
					],
					"id": "function.db2-num-fields",
					"name": "db2_num_fields",
					"description": "Returns the number of fields contained in a result set"
				},
				"function.db2-num-rows": {
					"tokens": [
						"db2_num_rows",
						"db2num_rows"
					],
					"id": "function.db2-num-rows",
					"name": "db2_num_rows",
					"description": "Returns the number of rows affected by an SQL statement"
				},
				"function.db2-pclose": {
					"tokens": [
						"db2_pclose",
						"db2pclose"
					],
					"id": "function.db2-pclose",
					"name": "db2_pclose",
					"description": "Closes a persistent database connection"
				},
				"function.db2-pconnect": {
					"tokens": [
						"db2_pconnect",
						"db2pconnect"
					],
					"id": "function.db2-pconnect",
					"name": "db2_pconnect",
					"description": "Returns a persistent connection to a database"
				},
				"function.db2-prepare": {
					"tokens": [
						"db2_prepare",
						"db2prepare"
					],
					"id": "function.db2-prepare",
					"name": "db2_prepare",
					"description": "Prepares an SQL statement to be executed"
				},
				"function.db2-primary-keys": {
					"tokens": [
						"db2_primary_keys",
						"db2primary_keys"
					],
					"id": "function.db2-primary-keys",
					"name": "db2_primary_keys",
					"description": "Returns a result set listing primary keys for a table"
				},
				"function.db2-procedure-columns": {
					"tokens": [
						"db2_procedure_columns",
						"db2procedure_columns"
					],
					"id": "function.db2-procedure-columns",
					"name": "db2_procedure_columns",
					"description": "Returns a result set listing stored procedure parameters"
				},
				"function.db2-procedures": {
					"tokens": [
						"db2_procedures",
						"db2procedures"
					],
					"id": "function.db2-procedures",
					"name": "db2_procedures",
					"description": "Returns a result set listing the stored procedures registered in a database"
				},
				"function.db2-result": {
					"tokens": [
						"db2_result",
						"db2result"
					],
					"id": "function.db2-result",
					"name": "db2_result",
					"description": "Returns a single column from a row in the result set"
				},
				"function.db2-rollback": {
					"tokens": [
						"db2_rollback",
						"db2rollback"
					],
					"id": "function.db2-rollback",
					"name": "db2_rollback",
					"description": "Rolls back a transaction"
				},
				"function.db2-server-info": {
					"tokens": [
						"db2_server_info",
						"db2server_info"
					],
					"id": "function.db2-server-info",
					"name": "db2_server_info",
					"description": "Returns an object with properties that describe the DB2 database server"
				},
				"function.db2-set-option": {
					"tokens": [
						"db2_set_option",
						"db2set_option"
					],
					"id": "function.db2-set-option",
					"name": "db2_set_option",
					"description": "Set options for connection or statement resources"
				},
				"function.db2-special-columns": {
					"tokens": [
						"db2_special_columns",
						"db2special_columns"
					],
					"id": "function.db2-special-columns",
					"name": "db2_special_columns",
					"description": "Returns a result set listing the unique row identifier columns for a table"
				},
				"function.db2-statistics": {
					"tokens": [
						"db2_statistics",
						"db2statistics"
					],
					"id": "function.db2-statistics",
					"name": "db2_statistics",
					"description": "Returns a result set listing the index and statistics for a table"
				},
				"function.db2-stmt-error": {
					"tokens": [
						"db2_stmt_error",
						"db2stmt_error"
					],
					"id": "function.db2-stmt-error",
					"name": "db2_stmt_error",
					"description": "Returns a string containing the SQLSTATE returned by an SQL statement"
				},
				"function.db2-stmt-errormsg": {
					"tokens": [
						"db2_stmt_errormsg",
						"db2stmt_errormsg"
					],
					"id": "function.db2-stmt-errormsg",
					"name": "db2_stmt_errormsg",
					"description": "Returns a string containing the last SQL statement error message"
				},
				"function.db2-table-privileges": {
					"tokens": [
						"db2_table_privileges",
						"db2table_privileges"
					],
					"id": "function.db2-table-privileges",
					"name": "db2_table_privileges",
					"description": "Returns a result set listing the tables and associated privileges in a database"
				},
				"function.db2-tables": {
					"tokens": [
						"db2_tables",
						"db2tables"
					],
					"id": "function.db2-tables",
					"name": "db2_tables",
					"description": "Returns a result set listing the tables and associated metadata in a database"
				},
				"function.ifx-affected-rows": {
					"tokens": [
						"ifx_affected_rows",
						"ifxaffected_rows"
					],
					"id": "function.ifx-affected-rows",
					"name": "ifx_affected_rows",
					"description": "Get number of rows affected by a query"
				},
				"function.ifx-blobinfile-mode": {
					"tokens": [
						"ifx_blobinfile_mode",
						"ifxblobinfile_mode"
					],
					"id": "function.ifx-blobinfile-mode",
					"name": "ifx_blobinfile_mode",
					"description": "Set the default blob mode for all select queries"
				},
				"function.ifx-byteasvarchar": {
					"tokens": [
						"ifx_byteasvarchar",
						"ifxbyteasvarchar"
					],
					"id": "function.ifx-byteasvarchar",
					"name": "ifx_byteasvarchar",
					"description": "Set the default byte mode"
				},
				"function.ifx-close": {
					"tokens": [
						"ifx_close",
						"ifxclose"
					],
					"id": "function.ifx-close",
					"name": "ifx_close",
					"description": "Close Informix connection"
				},
				"function.ifx-connect": {
					"tokens": [
						"ifx_connect",
						"ifxconnect"
					],
					"id": "function.ifx-connect",
					"name": "ifx_connect",
					"description": "Open Informix server connection"
				},
				"function.ifx-copy-blob": {
					"tokens": [
						"ifx_copy_blob",
						"ifxcopy_blob"
					],
					"id": "function.ifx-copy-blob",
					"name": "ifx_copy_blob",
					"description": "Duplicates the given blob object"
				},
				"function.ifx-create-blob": {
					"tokens": [
						"ifx_create_blob",
						"ifxcreate_blob"
					],
					"id": "function.ifx-create-blob",
					"name": "ifx_create_blob",
					"description": "Creates an blob object"
				},
				"function.ifx-create-char": {
					"tokens": [
						"ifx_create_char",
						"ifxcreate_char"
					],
					"id": "function.ifx-create-char",
					"name": "ifx_create_char",
					"description": "Creates an char object"
				},
				"function.ifx-do": {
					"tokens": [
						"ifx_do",
						"ifxdo"
					],
					"id": "function.ifx-do",
					"name": "ifx_do",
					"description": "Execute a previously prepared SQL-statement"
				},
				"function.ifx-error": {
					"tokens": [
						"ifx_error",
						"ifxerror"
					],
					"id": "function.ifx-error",
					"name": "ifx_error",
					"description": "Returns error code of last Informix call"
				},
				"function.ifx-errormsg": {
					"tokens": [
						"ifx_errormsg",
						"ifxerrormsg"
					],
					"id": "function.ifx-errormsg",
					"name": "ifx_errormsg",
					"description": "Returns error message of last Informix call"
				},
				"function.ifx-fetch-row": {
					"tokens": [
						"ifx_fetch_row",
						"ifxfetch_row"
					],
					"id": "function.ifx-fetch-row",
					"name": "ifx_fetch_row",
					"description": "Get row as an associative array"
				},
				"function.ifx-fieldproperties": {
					"tokens": [
						"ifx_fieldproperties",
						"ifxfieldproperties"
					],
					"id": "function.ifx-fieldproperties",
					"name": "ifx_fieldproperties",
					"description": "List of SQL fieldproperties"
				},
				"function.ifx-fieldtypes": {
					"tokens": [
						"ifx_fieldtypes",
						"ifxfieldtypes"
					],
					"id": "function.ifx-fieldtypes",
					"name": "ifx_fieldtypes",
					"description": "List of Informix SQL fields"
				},
				"function.ifx-free-blob": {
					"tokens": [
						"ifx_free_blob",
						"ifxfree_blob"
					],
					"id": "function.ifx-free-blob",
					"name": "ifx_free_blob",
					"description": "Deletes the blob object"
				},
				"function.ifx-free-char": {
					"tokens": [
						"ifx_free_char",
						"ifxfree_char"
					],
					"id": "function.ifx-free-char",
					"name": "ifx_free_char",
					"description": "Deletes the char object"
				},
				"function.ifx-free-result": {
					"tokens": [
						"ifx_free_result",
						"ifxfree_result"
					],
					"id": "function.ifx-free-result",
					"name": "ifx_free_result",
					"description": "Releases resources for the query"
				},
				"function.ifx-get-blob": {
					"tokens": [
						"ifx_get_blob",
						"ifxget_blob"
					],
					"id": "function.ifx-get-blob",
					"name": "ifx_get_blob",
					"description": "Return the content of a blob object"
				},
				"function.ifx-get-char": {
					"tokens": [
						"ifx_get_char",
						"ifxget_char"
					],
					"id": "function.ifx-get-char",
					"name": "ifx_get_char",
					"description": "Return the content of the char object"
				},
				"function.ifx-getsqlca": {
					"tokens": [
						"ifx_getsqlca",
						"ifxgetsqlca"
					],
					"id": "function.ifx-getsqlca",
					"name": "ifx_getsqlca",
					"description": "Get the contents of sqlca.sqlerrd[0..5] after a query"
				},
				"function.ifx-htmltbl-result": {
					"tokens": [
						"ifx_htmltbl_result",
						"ifxhtmltbl_result"
					],
					"id": "function.ifx-htmltbl-result",
					"name": "ifx_htmltbl_result",
					"description": "Formats all rows of a query into a HTML table"
				},
				"function.ifx-nullformat": {
					"tokens": [
						"ifx_nullformat",
						"ifxnullformat"
					],
					"id": "function.ifx-nullformat",
					"name": "ifx_nullformat",
					"description": "Sets the default return value on a fetch row"
				},
				"function.ifx-num-fields": {
					"tokens": [
						"ifx_num_fields",
						"ifxnum_fields"
					],
					"id": "function.ifx-num-fields",
					"name": "ifx_num_fields",
					"description": "Returns the number of columns in the query"
				},
				"function.ifx-num-rows": {
					"tokens": [
						"ifx_num_rows",
						"ifxnum_rows"
					],
					"id": "function.ifx-num-rows",
					"name": "ifx_num_rows",
					"description": "Count the rows already fetched from a query"
				},
				"function.ifx-pconnect": {
					"tokens": [
						"ifx_pconnect",
						"ifxpconnect"
					],
					"id": "function.ifx-pconnect",
					"name": "ifx_pconnect",
					"description": "Open persistent Informix connection"
				},
				"function.ifx-prepare": {
					"tokens": [
						"ifx_prepare",
						"ifxprepare"
					],
					"id": "function.ifx-prepare",
					"name": "ifx_prepare",
					"description": "Prepare an SQL-statement for execution"
				},
				"function.ifx-query": {
					"tokens": [
						"ifx_query",
						"ifxquery"
					],
					"id": "function.ifx-query",
					"name": "ifx_query",
					"description": "Send Informix query"
				},
				"function.ifx-textasvarchar": {
					"tokens": [
						"ifx_textasvarchar",
						"ifxtextasvarchar"
					],
					"id": "function.ifx-textasvarchar",
					"name": "ifx_textasvarchar",
					"description": "Set the default text mode"
				},
				"function.ifx-update-blob": {
					"tokens": [
						"ifx_update_blob",
						"ifxupdate_blob"
					],
					"id": "function.ifx-update-blob",
					"name": "ifx_update_blob",
					"description": "Updates the content of the blob object"
				},
				"function.ifx-update-char": {
					"tokens": [
						"ifx_update_char",
						"ifxupdate_char"
					],
					"id": "function.ifx-update-char",
					"name": "ifx_update_char",
					"description": "Updates the content of the char object"
				},
				"function.ifxus-close-slob": {
					"tokens": [
						"ifxus_close_slob",
						"ifxusclose_slob"
					],
					"id": "function.ifxus-close-slob",
					"name": "ifxus_close_slob",
					"description": "Deletes the slob object"
				},
				"function.ifxus-create-slob": {
					"tokens": [
						"ifxus_create_slob",
						"ifxuscreate_slob"
					],
					"id": "function.ifxus-create-slob",
					"name": "ifxus_create_slob",
					"description": "Creates an slob object and opens it"
				},
				"function.ifxus-free-slob": {
					"tokens": [
						"ifxus_free_slob",
						"ifxusfree_slob"
					],
					"id": "function.ifxus-free-slob",
					"name": "ifxus_free_slob",
					"description": "Deletes the slob object"
				},
				"function.ifxus-open-slob": {
					"tokens": [
						"ifxus_open_slob",
						"ifxusopen_slob"
					],
					"id": "function.ifxus-open-slob",
					"name": "ifxus_open_slob",
					"description": "Opens an slob object"
				},
				"function.ifxus-read-slob": {
					"tokens": [
						"ifxus_read_slob",
						"ifxusread_slob"
					],
					"id": "function.ifxus-read-slob",
					"name": "ifxus_read_slob",
					"description": "Reads nbytes of the slob object"
				},
				"function.ifxus-seek-slob": {
					"tokens": [
						"ifxus_seek_slob",
						"ifxusseek_slob"
					],
					"id": "function.ifxus-seek-slob",
					"name": "ifxus_seek_slob",
					"description": "Sets the current file or seek position"
				},
				"function.ifxus-tell-slob": {
					"tokens": [
						"ifxus_tell_slob",
						"ifxustell_slob"
					],
					"id": "function.ifxus-tell-slob",
					"name": "ifxus_tell_slob",
					"description": "Returns the current file or seek position"
				},
				"function.ifxus-write-slob": {
					"tokens": [
						"ifxus_write_slob",
						"ifxuswrite_slob"
					],
					"id": "function.ifxus-write-slob",
					"name": "ifxus_write_slob",
					"description": "Writes a string into the slob object"
				},
				"function.ingres-autocommit-state": {
					"tokens": [
						"ingres_autocommit_state",
						"ingresautocommit_state"
					],
					"id": "function.ingres-autocommit-state",
					"name": "ingres_autocommit_state",
					"description": "Test if the connection is using autocommit"
				},
				"function.ingres-autocommit": {
					"tokens": [
						"ingres_autocommit",
						"ingresautocommit"
					],
					"id": "function.ingres-autocommit",
					"name": "ingres_autocommit",
					"description": "Switch autocommit on or off"
				},
				"function.ingres-charset": {
					"tokens": [
						"ingres_charset",
						"ingrescharset"
					],
					"id": "function.ingres-charset",
					"name": "ingres_charset",
					"description": "Returns the installation character set"
				},
				"function.ingres-close": {
					"tokens": [
						"ingres_close",
						"ingresclose"
					],
					"id": "function.ingres-close",
					"name": "ingres_close",
					"description": "Close an Ingres database connection"
				},
				"function.ingres-commit": {
					"tokens": [
						"ingres_commit",
						"ingrescommit"
					],
					"id": "function.ingres-commit",
					"name": "ingres_commit",
					"description": "Commit a transaction"
				},
				"function.ingres-connect": {
					"tokens": [
						"ingres_connect",
						"ingresconnect"
					],
					"id": "function.ingres-connect",
					"name": "ingres_connect",
					"description": "Open a connection to an Ingres database"
				},
				"function.ingres-cursor": {
					"tokens": [
						"ingres_cursor",
						"ingrescursor"
					],
					"id": "function.ingres-cursor",
					"name": "ingres_cursor",
					"description": "Get a cursor name for a given result resource"
				},
				"function.ingres-errno": {
					"tokens": [
						"ingres_errno",
						"ingreserrno"
					],
					"id": "function.ingres-errno",
					"name": "ingres_errno",
					"description": "Get the last Ingres error number generated"
				},
				"function.ingres-error": {
					"tokens": [
						"ingres_error",
						"ingreserror"
					],
					"id": "function.ingres-error",
					"name": "ingres_error",
					"description": "Get a meaningful error message for the last error generated"
				},
				"function.ingres-errsqlstate": {
					"tokens": [
						"ingres_errsqlstate",
						"ingreserrsqlstate"
					],
					"id": "function.ingres-errsqlstate",
					"name": "ingres_errsqlstate",
					"description": "Get the last SQLSTATE error code generated"
				},
				"function.ingres-escape-string": {
					"tokens": [
						"ingres_escape_string",
						"ingresescape_string"
					],
					"id": "function.ingres-escape-string",
					"name": "ingres_escape_string",
					"description": "Escape special characters for use in a query"
				},
				"function.ingres-execute": {
					"tokens": [
						"ingres_execute",
						"ingresexecute"
					],
					"id": "function.ingres-execute",
					"name": "ingres_execute",
					"description": "Execute a prepared query"
				},
				"function.ingres-fetch-array": {
					"tokens": [
						"ingres_fetch_array",
						"ingresfetch_array"
					],
					"id": "function.ingres-fetch-array",
					"name": "ingres_fetch_array",
					"description": "Fetch a row of result into an array"
				},
				"function.ingres-fetch-assoc": {
					"tokens": [
						"ingres_fetch_assoc",
						"ingresfetch_assoc"
					],
					"id": "function.ingres-fetch-assoc",
					"name": "ingres_fetch_assoc",
					"description": "Fetch a row of result into an associative array"
				},
				"function.ingres-fetch-object": {
					"tokens": [
						"ingres_fetch_object",
						"ingresfetch_object"
					],
					"id": "function.ingres-fetch-object",
					"name": "ingres_fetch_object",
					"description": "Fetch a row of result into an object"
				},
				"function.ingres-fetch-proc-return": {
					"tokens": [
						"ingres_fetch_proc_return",
						"ingresfetch_proc_return"
					],
					"id": "function.ingres-fetch-proc-return",
					"name": "ingres_fetch_proc_return",
					"description": "Get the return value from a procedure call"
				},
				"function.ingres-fetch-row": {
					"tokens": [
						"ingres_fetch_row",
						"ingresfetch_row"
					],
					"id": "function.ingres-fetch-row",
					"name": "ingres_fetch_row",
					"description": "Fetch a row of result into an enumerated array"
				},
				"function.ingres-field-length": {
					"tokens": [
						"ingres_field_length",
						"ingresfield_length"
					],
					"id": "function.ingres-field-length",
					"name": "ingres_field_length",
					"description": "Get the length of a field"
				},
				"function.ingres-field-name": {
					"tokens": [
						"ingres_field_name",
						"ingresfield_name"
					],
					"id": "function.ingres-field-name",
					"name": "ingres_field_name",
					"description": "Get the name of a field in a query result"
				},
				"function.ingres-field-nullable": {
					"tokens": [
						"ingres_field_nullable",
						"ingresfield_nullable"
					],
					"id": "function.ingres-field-nullable",
					"name": "ingres_field_nullable",
					"description": "Test if a field is nullable"
				},
				"function.ingres-field-precision": {
					"tokens": [
						"ingres_field_precision",
						"ingresfield_precision"
					],
					"id": "function.ingres-field-precision",
					"name": "ingres_field_precision",
					"description": "Get the precision of a field"
				},
				"function.ingres-field-scale": {
					"tokens": [
						"ingres_field_scale",
						"ingresfield_scale"
					],
					"id": "function.ingres-field-scale",
					"name": "ingres_field_scale",
					"description": "Get the scale of a field"
				},
				"function.ingres-field-type": {
					"tokens": [
						"ingres_field_type",
						"ingresfield_type"
					],
					"id": "function.ingres-field-type",
					"name": "ingres_field_type",
					"description": "Get the type of a field in a query result"
				},
				"function.ingres-free-result": {
					"tokens": [
						"ingres_free_result",
						"ingresfree_result"
					],
					"id": "function.ingres-free-result",
					"name": "ingres_free_result",
					"description": "Free the resources associated with a result identifier"
				},
				"function.ingres-next-error": {
					"tokens": [
						"ingres_next_error",
						"ingresnext_error"
					],
					"id": "function.ingres-next-error",
					"name": "ingres_next_error",
					"description": "Get the next Ingres error"
				},
				"function.ingres-num-fields": {
					"tokens": [
						"ingres_num_fields",
						"ingresnum_fields"
					],
					"id": "function.ingres-num-fields",
					"name": "ingres_num_fields",
					"description": "Get the number of fields returned by the last query"
				},
				"function.ingres-num-rows": {
					"tokens": [
						"ingres_num_rows",
						"ingresnum_rows"
					],
					"id": "function.ingres-num-rows",
					"name": "ingres_num_rows",
					"description": "Get the number of rows affected or returned by a query"
				},
				"function.ingres-pconnect": {
					"tokens": [
						"ingres_pconnect",
						"ingrespconnect"
					],
					"id": "function.ingres-pconnect",
					"name": "ingres_pconnect",
					"description": "Open a persistent connection to an Ingres database"
				},
				"function.ingres-prepare": {
					"tokens": [
						"ingres_prepare",
						"ingresprepare"
					],
					"id": "function.ingres-prepare",
					"name": "ingres_prepare",
					"description": "Prepare a query for later execution"
				},
				"function.ingres-query": {
					"tokens": [
						"ingres_query",
						"ingresquery"
					],
					"id": "function.ingres-query",
					"name": "ingres_query",
					"description": "Send an SQL query to Ingres"
				},
				"function.ingres-result-seek": {
					"tokens": [
						"ingres_result_seek",
						"ingresresult_seek"
					],
					"id": "function.ingres-result-seek",
					"name": "ingres_result_seek",
					"description": "Set the row position before fetching data"
				},
				"function.ingres-rollback": {
					"tokens": [
						"ingres_rollback",
						"ingresrollback"
					],
					"id": "function.ingres-rollback",
					"name": "ingres_rollback",
					"description": "Roll back a transaction"
				},
				"function.ingres-set-environment": {
					"tokens": [
						"ingres_set_environment",
						"ingresset_environment"
					],
					"id": "function.ingres-set-environment",
					"name": "ingres_set_environment",
					"description": "Set environment features controlling output options"
				},
				"function.ingres-unbuffered-query": {
					"tokens": [
						"ingres_unbuffered_query",
						"ingresunbuffered_query"
					],
					"id": "function.ingres-unbuffered-query",
					"name": "ingres_unbuffered_query",
					"description": "Send an unbuffered  SQL query to Ingres"
				},
				"function.maxdb-affected-rows": {
					"tokens": [
						"maxdb_affected_rows",
						"maxdbaffected_rows"
					],
					"id": "function.maxdb-affected-rows",
					"name": "maxdb_affected_rows",
					"description": "Gets the number of affected rows in a previous MaxDB operation"
				},
				"function.maxdb-autocommit": {
					"tokens": [
						"maxdb_autocommit",
						"maxdbautocommit"
					],
					"id": "function.maxdb-autocommit",
					"name": "maxdb_autocommit",
					"description": "Turns on or off auto-commiting database modifications"
				},
				"function.maxdb-bind-param": {
					"tokens": [
						"maxdb_bind_param",
						"maxdbbind_param"
					],
					"id": "function.maxdb-bind-param",
					"name": "maxdb_bind_param",
					"description": "Alias of maxdb_stmt_bind_param"
				},
				"function.maxdb-bind-result": {
					"tokens": [
						"maxdb_bind_result",
						"maxdbbind_result"
					],
					"id": "function.maxdb-bind-result",
					"name": "maxdb_bind_result",
					"description": "Alias of maxdb_stmt_bind_result"
				},
				"function.maxdb-change-user": {
					"tokens": [
						"maxdb_change_user",
						"maxdbchange_user"
					],
					"id": "function.maxdb-change-user",
					"name": "maxdb_change_user",
					"description": "Changes the user of the specified database connection"
				},
				"function.maxdb-character-set-name": {
					"tokens": [
						"maxdb_character_set_name",
						"maxdbcharacter_set_name"
					],
					"id": "function.maxdb-character-set-name",
					"name": "maxdb_character_set_name",
					"description": "Returns the default character set for the database connection"
				},
				"function.maxdb-client-encoding": {
					"tokens": [
						"maxdb_client_encoding",
						"maxdbclient_encoding"
					],
					"id": "function.maxdb-client-encoding",
					"name": "maxdb_client_encoding",
					"description": "Alias of maxdb_character_set_name"
				},
				"function.maxdb-close-long-data": {
					"tokens": [
						"maxdb_close_long_data",
						"maxdbclose_long_data"
					],
					"id": "function.maxdb-close-long-data",
					"name": "maxdb_close_long_data",
					"description": "Alias of maxdb_stmt_close_long_data"
				},
				"function.maxdb-close": {
					"tokens": [
						"maxdb_close",
						"maxdbclose"
					],
					"id": "function.maxdb-close",
					"name": "maxdb_close",
					"description": "Closes a previously opened database connection"
				},
				"function.maxdb-commit": {
					"tokens": [
						"maxdb_commit",
						"maxdbcommit"
					],
					"id": "function.maxdb-commit",
					"name": "maxdb_commit",
					"description": "Commits the current transaction"
				},
				"function.maxdb-connect-errno": {
					"tokens": [
						"maxdb_connect_errno",
						"maxdbconnect_errno"
					],
					"id": "function.maxdb-connect-errno",
					"name": "maxdb_connect_errno",
					"description": "Returns the error code from last connect call"
				},
				"function.maxdb-connect-error": {
					"tokens": [
						"maxdb_connect_error",
						"maxdbconnect_error"
					],
					"id": "function.maxdb-connect-error",
					"name": "maxdb_connect_error",
					"description": "Returns a string description of the last connect error"
				},
				"function.maxdb-connect": {
					"tokens": [
						"maxdb_connect",
						"maxdbconnect"
					],
					"id": "function.maxdb-connect",
					"name": "maxdb_connect",
					"description": "Open a new connection to the MaxDB server"
				},
				"function.maxdb-data-seek": {
					"tokens": [
						"maxdb_data_seek",
						"maxdbdata_seek"
					],
					"id": "function.maxdb-data-seek",
					"name": "maxdb_data_seek",
					"description": "Adjusts the result pointer to an arbitary row in the result"
				},
				"function.maxdb-debug": {
					"tokens": [
						"maxdb_debug",
						"maxdbdebug"
					],
					"id": "function.maxdb-debug",
					"name": "maxdb_debug",
					"description": "Performs debugging operations"
				},
				"function.maxdb-disable-reads-from-master": {
					"tokens": [
						"maxdb_disable_reads_from_master",
						"maxdbdisable_reads_from_master"
					],
					"id": "function.maxdb-disable-reads-from-master",
					"name": "maxdb_disable_reads_from_master",
					"description": "Disable reads from master"
				},
				"function.maxdb-disable-rpl-parse": {
					"tokens": [
						"maxdb_disable_rpl_parse",
						"maxdbdisable_rpl_parse"
					],
					"id": "function.maxdb-disable-rpl-parse",
					"name": "maxdb_disable_rpl_parse",
					"description": "Disable RPL parse"
				},
				"function.maxdb-dump-debug-info": {
					"tokens": [
						"maxdb_dump_debug_info",
						"maxdbdump_debug_info"
					],
					"id": "function.maxdb-dump-debug-info",
					"name": "maxdb_dump_debug_info",
					"description": "Dump debugging information into the log"
				},
				"function.maxdb-embedded-connect": {
					"tokens": [
						"maxdb_embedded_connect",
						"maxdbembedded_connect"
					],
					"id": "function.maxdb-embedded-connect",
					"name": "maxdb_embedded_connect",
					"description": "Open a connection to an embedded MaxDB server"
				},
				"function.maxdb-enable-reads-from-master": {
					"tokens": [
						"maxdb_enable_reads_from_master",
						"maxdbenable_reads_from_master"
					],
					"id": "function.maxdb-enable-reads-from-master",
					"name": "maxdb_enable_reads_from_master",
					"description": "Enable reads from master"
				},
				"function.maxdb-enable-rpl-parse": {
					"tokens": [
						"maxdb_enable_rpl_parse",
						"maxdbenable_rpl_parse"
					],
					"id": "function.maxdb-enable-rpl-parse",
					"name": "maxdb_enable_rpl_parse",
					"description": "Enable RPL parse"
				},
				"function.maxdb-errno": {
					"tokens": [
						"maxdb_errno",
						"maxdberrno"
					],
					"id": "function.maxdb-errno",
					"name": "maxdb_errno",
					"description": "Returns the error code for the most recent function call"
				},
				"function.maxdb-error": {
					"tokens": [
						"maxdb_error",
						"maxdberror"
					],
					"id": "function.maxdb-error",
					"name": "maxdb_error",
					"description": "Returns a string description of the last error"
				},
				"function.maxdb-escape-string": {
					"tokens": [
						"maxdb_escape_string",
						"maxdbescape_string"
					],
					"id": "function.maxdb-escape-string",
					"name": "maxdb_escape_string",
					"description": "Alias of maxdb_real_escape_string"
				},
				"function.maxdb-execute": {
					"tokens": [
						"maxdb_execute",
						"maxdbexecute"
					],
					"id": "function.maxdb-execute",
					"name": "maxdb_execute",
					"description": "Alias of maxdb_stmt_execute"
				},
				"function.maxdb-fetch-array": {
					"tokens": [
						"maxdb_fetch_array",
						"maxdbfetch_array"
					],
					"id": "function.maxdb-fetch-array",
					"name": "maxdb_fetch_array",
					"description": "Fetch a result row as an associative, a numeric array, or both"
				},
				"function.maxdb-fetch-assoc": {
					"tokens": [
						"maxdb_fetch_assoc",
						"maxdbfetch_assoc"
					],
					"id": "function.maxdb-fetch-assoc",
					"name": "maxdb_fetch_assoc",
					"description": "Fetch a result row as an associative array"
				},
				"function.maxdb-fetch-field-direct": {
					"tokens": [
						"maxdb_fetch_field_direct",
						"maxdbfetch_field_direct"
					],
					"id": "function.maxdb-fetch-field-direct",
					"name": "maxdb_fetch_field_direct",
					"description": "Fetch meta-data for a single field"
				},
				"function.maxdb-fetch-field": {
					"tokens": [
						"maxdb_fetch_field",
						"maxdbfetch_field"
					],
					"id": "function.maxdb-fetch-field",
					"name": "maxdb_fetch_field",
					"description": "Returns the next field in the result set"
				},
				"function.maxdb-fetch-fields": {
					"tokens": [
						"maxdb_fetch_fields",
						"maxdbfetch_fields"
					],
					"id": "function.maxdb-fetch-fields",
					"name": "maxdb_fetch_fields",
					"description": "Returns an array of resources representing the fields in a result set"
				},
				"function.maxdb-fetch-lengths": {
					"tokens": [
						"maxdb_fetch_lengths",
						"maxdbfetch_lengths"
					],
					"id": "function.maxdb-fetch-lengths",
					"name": "maxdb_fetch_lengths",
					"description": "Returns the lengths of the columns of the current row in the result set"
				},
				"function.maxdb-fetch-object": {
					"tokens": [
						"maxdb_fetch_object",
						"maxdbfetch_object"
					],
					"id": "function.maxdb-fetch-object",
					"name": "maxdb_fetch_object",
					"description": "Returns the current row of a result set as an object"
				},
				"function.maxdb-fetch-row": {
					"tokens": [
						"maxdb_fetch_row",
						"maxdbfetch_row"
					],
					"id": "function.maxdb-fetch-row",
					"name": "maxdb_fetch_row",
					"description": "Get a result row as an enumerated array"
				},
				"function.maxdb-fetch": {
					"tokens": [
						"maxdb_fetch",
						"maxdbfetch"
					],
					"id": "function.maxdb-fetch",
					"name": "maxdb_fetch",
					"description": "Alias of maxdb_stmt_fetch"
				},
				"function.maxdb-field-count": {
					"tokens": [
						"maxdb_field_count",
						"maxdbfield_count"
					],
					"id": "function.maxdb-field-count",
					"name": "maxdb_field_count",
					"description": "Returns the number of columns for the most recent query"
				},
				"function.maxdb-field-seek": {
					"tokens": [
						"maxdb_field_seek",
						"maxdbfield_seek"
					],
					"id": "function.maxdb-field-seek",
					"name": "maxdb_field_seek",
					"description": "Set result pointer to a specified field offset"
				},
				"function.maxdb-field-tell": {
					"tokens": [
						"maxdb_field_tell",
						"maxdbfield_tell"
					],
					"id": "function.maxdb-field-tell",
					"name": "maxdb_field_tell",
					"description": "Get current field offset of a result pointer"
				},
				"function.maxdb-free-result": {
					"tokens": [
						"maxdb_free_result",
						"maxdbfree_result"
					],
					"id": "function.maxdb-free-result",
					"name": "maxdb_free_result",
					"description": "Frees the memory associated with a result"
				},
				"function.maxdb-get-client-info": {
					"tokens": [
						"maxdb_get_client_info",
						"maxdbget_client_info"
					],
					"id": "function.maxdb-get-client-info",
					"name": "maxdb_get_client_info",
					"description": "Returns the MaxDB client version as a string"
				},
				"function.maxdb-get-client-version": {
					"tokens": [
						"maxdb_get_client_version",
						"maxdbget_client_version"
					],
					"id": "function.maxdb-get-client-version",
					"name": "maxdb_get_client_version",
					"description": "Get MaxDB client info"
				},
				"function.maxdb-get-host-info": {
					"tokens": [
						"maxdb_get_host_info",
						"maxdbget_host_info"
					],
					"id": "function.maxdb-get-host-info",
					"name": "maxdb_get_host_info",
					"description": "Returns a string representing the type of connection used"
				},
				"function.maxdb-get-metadata": {
					"tokens": [
						"maxdb_get_metadata",
						"maxdbget_metadata"
					],
					"id": "function.maxdb-get-metadata",
					"name": "maxdb_get_metadata",
					"description": "Alias of maxdb_stmt_result_metadata"
				},
				"function.maxdb-get-proto-info": {
					"tokens": [
						"maxdb_get_proto_info",
						"maxdbget_proto_info"
					],
					"id": "function.maxdb-get-proto-info",
					"name": "maxdb_get_proto_info",
					"description": "Returns the version of the MaxDB protocol used"
				},
				"function.maxdb-get-server-info": {
					"tokens": [
						"maxdb_get_server_info",
						"maxdbget_server_info"
					],
					"id": "function.maxdb-get-server-info",
					"name": "maxdb_get_server_info",
					"description": "Returns the version of the MaxDB server"
				},
				"function.maxdb-get-server-version": {
					"tokens": [
						"maxdb_get_server_version",
						"maxdbget_server_version"
					],
					"id": "function.maxdb-get-server-version",
					"name": "maxdb_get_server_version",
					"description": "Returns the version of the MaxDB server as an integer"
				},
				"function.maxdb-info": {
					"tokens": [
						"maxdb_info",
						"maxdbinfo"
					],
					"id": "function.maxdb-info",
					"name": "maxdb_info",
					"description": "Retrieves information about the most recently executed query"
				},
				"function.maxdb-init": {
					"tokens": [
						"maxdb_init",
						"maxdbinit"
					],
					"id": "function.maxdb-init",
					"name": "maxdb_init",
					"description": "Initializes MaxDB and returns an resource for use with maxdb_real_connect"
				},
				"function.maxdb-insert-id": {
					"tokens": [
						"maxdb_insert_id",
						"maxdbinsert_id"
					],
					"id": "function.maxdb-insert-id",
					"name": "maxdb_insert_id",
					"description": "Returns the auto generated id used in the last query"
				},
				"function.maxdb-kill": {
					"tokens": [
						"maxdb_kill",
						"maxdbkill"
					],
					"id": "function.maxdb-kill",
					"name": "maxdb_kill",
					"description": "Disconnects from a MaxDB server"
				},
				"function.maxdb-master-query": {
					"tokens": [
						"maxdb_master_query",
						"maxdbmaster_query"
					],
					"id": "function.maxdb-master-query",
					"name": "maxdb_master_query",
					"description": "Enforce execution of a query on the master in a master/slave setup"
				},
				"function.maxdb-more-results": {
					"tokens": [
						"maxdb_more_results",
						"maxdbmore_results"
					],
					"id": "function.maxdb-more-results",
					"name": "maxdb_more_results",
					"description": "Check if there any more query results from a multi query"
				},
				"function.maxdb-multi-query": {
					"tokens": [
						"maxdb_multi_query",
						"maxdbmulti_query"
					],
					"id": "function.maxdb-multi-query",
					"name": "maxdb_multi_query",
					"description": "Performs a query on the database"
				},
				"function.maxdb-next-result": {
					"tokens": [
						"maxdb_next_result",
						"maxdbnext_result"
					],
					"id": "function.maxdb-next-result",
					"name": "maxdb_next_result",
					"description": "Prepare next result from multi_query"
				},
				"function.maxdb-num-fields": {
					"tokens": [
						"maxdb_num_fields",
						"maxdbnum_fields"
					],
					"id": "function.maxdb-num-fields",
					"name": "maxdb_num_fields",
					"description": "Get the number of fields in a result"
				},
				"function.maxdb-num-rows": {
					"tokens": [
						"maxdb_num_rows",
						"maxdbnum_rows"
					],
					"id": "function.maxdb-num-rows",
					"name": "maxdb_num_rows",
					"description": "Gets the number of rows in a result"
				},
				"function.maxdb-options": {
					"tokens": [
						"maxdb_options",
						"maxdboptions"
					],
					"id": "function.maxdb-options",
					"name": "maxdb_options",
					"description": "Set options"
				},
				"function.maxdb-param-count": {
					"tokens": [
						"maxdb_param_count",
						"maxdbparam_count"
					],
					"id": "function.maxdb-param-count",
					"name": "maxdb_param_count",
					"description": "Alias of maxdb_stmt_param_count"
				},
				"function.maxdb-ping": {
					"tokens": [
						"maxdb_ping",
						"maxdbping"
					],
					"id": "function.maxdb-ping",
					"name": "maxdb_ping",
					"description": "Pings a server connection, or tries to reconnect if the connection has gone down"
				},
				"function.maxdb-prepare": {
					"tokens": [
						"maxdb_prepare",
						"maxdbprepare"
					],
					"id": "function.maxdb-prepare",
					"name": "maxdb_prepare",
					"description": "Prepare an SQL statement for execution"
				},
				"function.maxdb-query": {
					"tokens": [
						"maxdb_query",
						"maxdbquery"
					],
					"id": "function.maxdb-query",
					"name": "maxdb_query",
					"description": "Performs a query on the database"
				},
				"function.maxdb-real-connect": {
					"tokens": [
						"maxdb_real_connect",
						"maxdbreal_connect"
					],
					"id": "function.maxdb-real-connect",
					"name": "maxdb_real_connect",
					"description": "Opens a connection to a MaxDB server"
				},
				"function.maxdb-real-escape-string": {
					"tokens": [
						"maxdb_real_escape_string",
						"maxdbreal_escape_string"
					],
					"id": "function.maxdb-real-escape-string",
					"name": "maxdb_real_escape_string",
					"description": "Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection"
				},
				"function.maxdb-real-query": {
					"tokens": [
						"maxdb_real_query",
						"maxdbreal_query"
					],
					"id": "function.maxdb-real-query",
					"name": "maxdb_real_query",
					"description": "Execute an SQL query"
				},
				"function.maxdb-report": {
					"tokens": [
						"maxdb_report",
						"maxdbreport"
					],
					"id": "function.maxdb-report",
					"name": "maxdb_report",
					"description": "Enables or disables internal report functions"
				},
				"function.maxdb-rollback": {
					"tokens": [
						"maxdb_rollback",
						"maxdbrollback"
					],
					"id": "function.maxdb-rollback",
					"name": "maxdb_rollback",
					"description": "Rolls back current transaction"
				},
				"function.maxdb-rpl-parse-enabled": {
					"tokens": [
						"maxdb_rpl_parse_enabled",
						"maxdbrpl_parse_enabled"
					],
					"id": "function.maxdb-rpl-parse-enabled",
					"name": "maxdb_rpl_parse_enabled",
					"description": "Check if RPL parse is enabled"
				},
				"function.maxdb-rpl-probe": {
					"tokens": [
						"maxdb_rpl_probe",
						"maxdbrpl_probe"
					],
					"id": "function.maxdb-rpl-probe",
					"name": "maxdb_rpl_probe",
					"description": "RPL probe"
				},
				"function.maxdb-rpl-query-type": {
					"tokens": [
						"maxdb_rpl_query_type",
						"maxdbrpl_query_type"
					],
					"id": "function.maxdb-rpl-query-type",
					"name": "maxdb_rpl_query_type",
					"description": "Returns RPL query type"
				},
				"function.maxdb-select-db": {
					"tokens": [
						"maxdb_select_db",
						"maxdbselect_db"
					],
					"id": "function.maxdb-select-db",
					"name": "maxdb_select_db",
					"description": "Selects the default database for database queries"
				},
				"function.maxdb-send-long-data": {
					"tokens": [
						"maxdb_send_long_data",
						"maxdbsend_long_data"
					],
					"id": "function.maxdb-send-long-data",
					"name": "maxdb_send_long_data",
					"description": "Alias of maxdb_stmt_send_long_data"
				},
				"function.maxdb-send-query": {
					"tokens": [
						"maxdb_send_query",
						"maxdbsend_query"
					],
					"id": "function.maxdb-send-query",
					"name": "maxdb_send_query",
					"description": "Send the query and return"
				},
				"function.maxdb-server-end": {
					"tokens": [
						"maxdb_server_end",
						"maxdbserver_end"
					],
					"id": "function.maxdb-server-end",
					"name": "maxdb_server_end",
					"description": "Shut down the embedded server"
				},
				"function.maxdb-server-init": {
					"tokens": [
						"maxdb_server_init",
						"maxdbserver_init"
					],
					"id": "function.maxdb-server-init",
					"name": "maxdb_server_init",
					"description": "Initialize embedded server"
				},
				"function.maxdb-set-opt": {
					"tokens": [
						"maxdb_set_opt",
						"maxdbset_opt"
					],
					"id": "function.maxdb-set-opt",
					"name": "maxdb_set_opt",
					"description": "Alias of maxdb_options"
				},
				"function.maxdb-sqlstate": {
					"tokens": [
						"maxdb_sqlstate",
						"maxdbsqlstate"
					],
					"id": "function.maxdb-sqlstate",
					"name": "maxdb_sqlstate",
					"description": "Returns the SQLSTATE error from previous MaxDB operation"
				},
				"function.maxdb-ssl-set": {
					"tokens": [
						"maxdb_ssl_set",
						"maxdbssl_set"
					],
					"id": "function.maxdb-ssl-set",
					"name": "maxdb_ssl_set",
					"description": "Used for establishing secure connections using SSL"
				},
				"function.maxdb-stat": {
					"tokens": [
						"maxdb_stat",
						"maxdbstat"
					],
					"id": "function.maxdb-stat",
					"name": "maxdb_stat",
					"description": "Gets the current system status"
				},
				"function.maxdb-stmt-affected-rows": {
					"tokens": [
						"maxdb_stmt_affected_rows",
						"maxdbstmt_affected_rows"
					],
					"id": "function.maxdb-stmt-affected-rows",
					"name": "maxdb_stmt_affected_rows",
					"description": "Returns the total number of rows changed, deleted, or\n  inserted by the last executed statement"
				},
				"function.maxdb-stmt-bind-param": {
					"tokens": [
						"maxdb_stmt_bind_param",
						"maxdbstmt_bind_param"
					],
					"id": "function.maxdb-stmt-bind-param",
					"name": "maxdb_stmt_bind_param",
					"description": "Binds variables to a prepared statement as parameters"
				},
				"function.maxdb-stmt-bind-result": {
					"tokens": [
						"maxdb_stmt_bind_result",
						"maxdbstmt_bind_result"
					],
					"id": "function.maxdb-stmt-bind-result",
					"name": "maxdb_stmt_bind_result",
					"description": "Binds variables to a prepared statement for result storage"
				},
				"function.maxdb-stmt-close-long-data": {
					"tokens": [
						"maxdb_stmt_close_long_data",
						"maxdbstmt_close_long_data"
					],
					"id": "function.maxdb-stmt-close-long-data",
					"name": "maxdb_stmt_close_long_data",
					"description": "Ends a sequence of maxdb_stmt_send_long_data"
				},
				"function.maxdb-stmt-close": {
					"tokens": [
						"maxdb_stmt_close",
						"maxdbstmt_close"
					],
					"id": "function.maxdb-stmt-close",
					"name": "maxdb_stmt_close",
					"description": "Closes a prepared statement"
				},
				"function.maxdb-stmt-data-seek": {
					"tokens": [
						"maxdb_stmt_data_seek",
						"maxdbstmt_data_seek"
					],
					"id": "function.maxdb-stmt-data-seek",
					"name": "maxdb_stmt_data_seek",
					"description": "Seeks to an arbitray row in statement result set"
				},
				"function.maxdb-stmt-errno": {
					"tokens": [
						"maxdb_stmt_errno",
						"maxdbstmt_errno"
					],
					"id": "function.maxdb-stmt-errno",
					"name": "maxdb_stmt_errno",
					"description": "Returns the error code for the most recent statement call"
				},
				"function.maxdb-stmt-error": {
					"tokens": [
						"maxdb_stmt_error",
						"maxdbstmt_error"
					],
					"id": "function.maxdb-stmt-error",
					"name": "maxdb_stmt_error",
					"description": "Returns a string description for last statement error"
				},
				"function.maxdb-stmt-execute": {
					"tokens": [
						"maxdb_stmt_execute",
						"maxdbstmt_execute"
					],
					"id": "function.maxdb-stmt-execute",
					"name": "maxdb_stmt_execute",
					"description": "Executes a prepared Query"
				},
				"function.maxdb-stmt-fetch": {
					"tokens": [
						"maxdb_stmt_fetch",
						"maxdbstmt_fetch"
					],
					"id": "function.maxdb-stmt-fetch",
					"name": "maxdb_stmt_fetch",
					"description": "Fetch results from a prepared statement into the bound variables"
				},
				"function.maxdb-stmt-free-result": {
					"tokens": [
						"maxdb_stmt_free_result",
						"maxdbstmt_free_result"
					],
					"id": "function.maxdb-stmt-free-result",
					"name": "maxdb_stmt_free_result",
					"description": "Frees stored result memory for the given statement handle"
				},
				"function.maxdb-stmt-init": {
					"tokens": [
						"maxdb_stmt_init",
						"maxdbstmt_init"
					],
					"id": "function.maxdb-stmt-init",
					"name": "maxdb_stmt_init",
					"description": "Initializes a statement and returns an resource for use with maxdb_stmt_prepare"
				},
				"function.maxdb-stmt-num-rows": {
					"tokens": [
						"maxdb_stmt_num_rows",
						"maxdbstmt_num_rows"
					],
					"id": "function.maxdb-stmt-num-rows",
					"name": "maxdb_stmt_num_rows",
					"description": "Return the number of rows in statements result set"
				},
				"function.maxdb-stmt-param-count": {
					"tokens": [
						"maxdb_stmt_param_count",
						"maxdbstmt_param_count"
					],
					"id": "function.maxdb-stmt-param-count",
					"name": "maxdb_stmt_param_count",
					"description": "Returns the number of parameter for the given statement"
				},
				"function.maxdb-stmt-prepare": {
					"tokens": [
						"maxdb_stmt_prepare",
						"maxdbstmt_prepare"
					],
					"id": "function.maxdb-stmt-prepare",
					"name": "maxdb_stmt_prepare",
					"description": "Prepare an SQL statement for execution"
				},
				"function.maxdb-stmt-reset": {
					"tokens": [
						"maxdb_stmt_reset",
						"maxdbstmt_reset"
					],
					"id": "function.maxdb-stmt-reset",
					"name": "maxdb_stmt_reset",
					"description": "Resets a prepared statement"
				},
				"function.maxdb-stmt-result-metadata": {
					"tokens": [
						"maxdb_stmt_result_metadata",
						"maxdbstmt_result_metadata"
					],
					"id": "function.maxdb-stmt-result-metadata",
					"name": "maxdb_stmt_result_metadata",
					"description": "Returns result set metadata from a prepared statement"
				},
				"function.maxdb-stmt-send-long-data": {
					"tokens": [
						"maxdb_stmt_send_long_data",
						"maxdbstmt_send_long_data"
					],
					"id": "function.maxdb-stmt-send-long-data",
					"name": "maxdb_stmt_send_long_data",
					"description": "Send data in blocks"
				},
				"function.maxdb-stmt-sqlstate": {
					"tokens": [
						"maxdb_stmt_sqlstate",
						"maxdbstmt_sqlstate"
					],
					"id": "function.maxdb-stmt-sqlstate",
					"name": "maxdb_stmt_sqlstate",
					"description": "Returns SQLSTATE error from previous statement operation"
				},
				"function.maxdb-stmt-store-result": {
					"tokens": [
						"maxdb_stmt_store_result",
						"maxdbstmt_store_result"
					],
					"id": "function.maxdb-stmt-store-result",
					"name": "maxdb_stmt_store_result",
					"description": "Transfers a result set from a prepared statement"
				},
				"function.maxdb-store-result": {
					"tokens": [
						"maxdb_store_result",
						"maxdbstore_result"
					],
					"id": "function.maxdb-store-result",
					"name": "maxdb_store_result",
					"description": "Transfers a result set from the last query"
				},
				"function.maxdb-thread-id": {
					"tokens": [
						"maxdb_thread_id",
						"maxdbthread_id"
					],
					"id": "function.maxdb-thread-id",
					"name": "maxdb_thread_id",
					"description": "Returns the thread ID for the current connection"
				},
				"function.maxdb-thread-safe": {
					"tokens": [
						"maxdb_thread_safe",
						"maxdbthread_safe"
					],
					"id": "function.maxdb-thread-safe",
					"name": "maxdb_thread_safe",
					"description": "Returns whether thread safety is given or not"
				},
				"function.maxdb-use-result": {
					"tokens": [
						"maxdb_use_result",
						"maxdbuse_result"
					],
					"id": "function.maxdb-use-result",
					"name": "maxdb_use_result",
					"description": "Initiate a result set retrieval"
				},
				"function.maxdb-warning-count": {
					"tokens": [
						"maxdb_warning_count",
						"maxdbwarning_count"
					],
					"id": "function.maxdb-warning-count",
					"name": "maxdb_warning_count",
					"description": "Returns the number of warnings from the last query for the given link"
				},
				"function.log-cmd-delete": {
					"tokens": [
						"log_cmd_delete",
						"logcmd_delete"
					],
					"id": "function.log-cmd-delete",
					"name": "log_cmd_delete",
					"description": "Callback When Deleting Documents"
				},
				"function.log-cmd-insert": {
					"tokens": [
						"log_cmd_insert",
						"logcmd_insert"
					],
					"id": "function.log-cmd-insert",
					"name": "log_cmd_insert",
					"description": "Callback When Inserting Documents"
				},
				"function.log-cmd-update": {
					"tokens": [
						"log_cmd_update",
						"logcmd_update"
					],
					"id": "function.log-cmd-update",
					"name": "log_cmd_update",
					"description": "Callback When Updating Documents"
				},
				"function.log-getmore": {
					"tokens": [
						"log_getmore",
						"loggetmore"
					],
					"id": "function.log-getmore",
					"name": "log_getmore",
					"description": "Callback When Retrieving Next Cursor Batch"
				},
				"function.log-killcursor": {
					"tokens": [
						"log_killcursor",
						"logkillcursor"
					],
					"id": "function.log-killcursor",
					"name": "log_killcursor",
					"description": "Callback When Executing KILLCURSOR operations"
				},
				"function.log-reply": {
					"tokens": [
						"log_reply",
						"logreply"
					],
					"id": "function.log-reply",
					"name": "log_reply",
					"description": "Callback When Reading the MongoDB reply"
				},
				"function.log-write-batch": {
					"tokens": [
						"log_write_batch",
						"logwrite_batch"
					],
					"id": "function.log-write-batch",
					"name": "log_write_batch",
					"description": "Callback When Writing Batches"
				},
				"mongoclient.close": {
					"tokens": [
						"MongoClient::close",
						"close",
						"::close"
					],
					"id": "mongoclient.close",
					"name": "MongoClient::close",
					"description": "Closes this connection"
				},
				"mongoclient.connect": {
					"tokens": [
						"MongoClient::connect",
						"connect",
						"::connect"
					],
					"id": "mongoclient.connect",
					"name": "MongoClient::connect",
					"description": "Connects to a database server"
				},
				"mongoclient.construct": {
					"tokens": [
						"MongoClient::__construct",
						"MongoClient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoclient.construct",
					"name": "MongoClient::__construct",
					"description": "Creates a new database connection object"
				},
				"mongoclient.dropdb": {
					"tokens": [
						"MongoClient::dropDB",
						"dropDB",
						"::dropDB"
					],
					"id": "mongoclient.dropdb",
					"name": "MongoClient::dropDB",
					"description": "Drops a database [deprecated]"
				},
				"mongoclient.get": {
					"tokens": [
						"MongoClient::__get",
						"MongoClient::_get",
						"__get",
						"::__get"
					],
					"id": "mongoclient.get",
					"name": "MongoClient::__get",
					"description": "Gets a database"
				},
				"mongoclient.getconnections": {
					"tokens": [
						"MongoClient::getConnections",
						"getConnections",
						"::getConnections"
					],
					"id": "mongoclient.getconnections",
					"name": "MongoClient::getConnections",
					"description": "Return info about all open connections"
				},
				"mongoclient.gethosts": {
					"tokens": [
						"MongoClient::getHosts",
						"getHosts",
						"::getHosts"
					],
					"id": "mongoclient.gethosts",
					"name": "MongoClient::getHosts",
					"description": "Updates status for all associated hosts"
				},
				"mongoclient.getreadpreference": {
					"tokens": [
						"MongoClient::getReadPreference",
						"getReadPreference",
						"::getReadPreference"
					],
					"id": "mongoclient.getreadpreference",
					"name": "MongoClient::getReadPreference",
					"description": "Get the read preference for this connection"
				},
				"mongoclient.getwriteconcern": {
					"tokens": [
						"MongoClient::getWriteConcern",
						"getWriteConcern",
						"::getWriteConcern"
					],
					"id": "mongoclient.getwriteconcern",
					"name": "MongoClient::getWriteConcern",
					"description": "Get the write concern for this connection"
				},
				"mongoclient.killcursor": {
					"tokens": [
						"MongoClient::killCursor",
						"killCursor",
						"::killCursor"
					],
					"id": "mongoclient.killcursor",
					"name": "MongoClient::killCursor",
					"description": "Kills a specific cursor on the server"
				},
				"mongoclient.listdbs": {
					"tokens": [
						"MongoClient::listDBs",
						"listDBs",
						"::listDBs"
					],
					"id": "mongoclient.listdbs",
					"name": "MongoClient::listDBs",
					"description": "Lists all of the databases available."
				},
				"mongoclient.selectcollection": {
					"tokens": [
						"MongoClient::selectCollection",
						"selectCollection",
						"::selectCollection"
					],
					"id": "mongoclient.selectcollection",
					"name": "MongoClient::selectCollection",
					"description": "Gets a database collection"
				},
				"mongoclient.selectdb": {
					"tokens": [
						"MongoClient::selectDB",
						"selectDB",
						"::selectDB"
					],
					"id": "mongoclient.selectdb",
					"name": "MongoClient::selectDB",
					"description": "Gets a database"
				},
				"mongoclient.setreadpreference": {
					"tokens": [
						"MongoClient::setReadPreference",
						"setReadPreference",
						"::setReadPreference"
					],
					"id": "mongoclient.setreadpreference",
					"name": "MongoClient::setReadPreference",
					"description": "Set the read preference for this connection"
				},
				"mongoclient.setwriteconcern": {
					"tokens": [
						"MongoClient::setWriteConcern",
						"setWriteConcern",
						"::setWriteConcern"
					],
					"id": "mongoclient.setwriteconcern",
					"name": "MongoClient::setWriteConcern",
					"description": "Set the write concern for this connection"
				},
				"mongoclient.tostring": {
					"tokens": [
						"MongoClient::__toString",
						"MongoClient::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongoclient.tostring",
					"name": "MongoClient::__toString",
					"description": "String representation of this connection"
				},
				"mongodb.authenticate": {
					"tokens": [
						"MongoDB::authenticate",
						"authenticate",
						"::authenticate"
					],
					"id": "mongodb.authenticate",
					"name": "MongoDB::authenticate",
					"description": "Log in to this database"
				},
				"mongodb.command": {
					"tokens": [
						"MongoDB::command",
						"command",
						"::command"
					],
					"id": "mongodb.command",
					"name": "MongoDB::command",
					"description": "Execute a database command"
				},
				"mongodb.construct": {
					"tokens": [
						"MongoDB::__construct",
						"MongoDB::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb.construct",
					"name": "MongoDB::__construct",
					"description": "Creates a new database"
				},
				"mongodb.createcollection": {
					"tokens": [
						"MongoDB::createCollection",
						"createCollection",
						"::createCollection"
					],
					"id": "mongodb.createcollection",
					"name": "MongoDB::createCollection",
					"description": "Creates a collection"
				},
				"mongodb.createdbref": {
					"tokens": [
						"MongoDB::createDBRef",
						"createDBRef",
						"::createDBRef"
					],
					"id": "mongodb.createdbref",
					"name": "MongoDB::createDBRef",
					"description": "Creates a database reference"
				},
				"mongodb.drop": {
					"tokens": [
						"MongoDB::drop",
						"drop",
						"::drop"
					],
					"id": "mongodb.drop",
					"name": "MongoDB::drop",
					"description": "Drops this database"
				},
				"mongodb.dropcollection": {
					"tokens": [
						"MongoDB::dropCollection",
						"dropCollection",
						"::dropCollection"
					],
					"id": "mongodb.dropcollection",
					"name": "MongoDB::dropCollection",
					"description": "Drops a collection [deprecated]"
				},
				"mongodb.execute": {
					"tokens": [
						"MongoDB::execute",
						"execute",
						"::execute"
					],
					"id": "mongodb.execute",
					"name": "MongoDB::execute",
					"description": "Runs JavaScript code on the database server [deprecated]"
				},
				"mongodb.forceerror": {
					"tokens": [
						"MongoDB::forceError",
						"forceError",
						"::forceError"
					],
					"id": "mongodb.forceerror",
					"name": "MongoDB::forceError",
					"description": "Creates a database error"
				},
				"mongodb.get": {
					"tokens": [
						"MongoDB::__get",
						"MongoDB::_get",
						"__get",
						"::__get"
					],
					"id": "mongodb.get",
					"name": "MongoDB::__get",
					"description": "Gets a collection"
				},
				"mongodb.getcollectioninfo": {
					"tokens": [
						"MongoDB::getCollectionInfo",
						"getCollectionInfo",
						"::getCollectionInfo"
					],
					"id": "mongodb.getcollectioninfo",
					"name": "MongoDB::getCollectionInfo",
					"description": "Returns information about collections in this database"
				},
				"mongodb.getcollectionnames": {
					"tokens": [
						"MongoDB::getCollectionNames",
						"getCollectionNames",
						"::getCollectionNames"
					],
					"id": "mongodb.getcollectionnames",
					"name": "MongoDB::getCollectionNames",
					"description": "Gets an array of names for all collections in this database"
				},
				"mongodb.getdbref": {
					"tokens": [
						"MongoDB::getDBRef",
						"getDBRef",
						"::getDBRef"
					],
					"id": "mongodb.getdbref",
					"name": "MongoDB::getDBRef",
					"description": "Fetches the document pointed to by a database reference"
				},
				"mongodb.getgridfs": {
					"tokens": [
						"MongoDB::getGridFS",
						"getGridFS",
						"::getGridFS"
					],
					"id": "mongodb.getgridfs",
					"name": "MongoDB::getGridFS",
					"description": "Fetches toolkit for dealing with files stored in this database"
				},
				"mongodb.getprofilinglevel": {
					"tokens": [
						"MongoDB::getProfilingLevel",
						"getProfilingLevel",
						"::getProfilingLevel"
					],
					"id": "mongodb.getprofilinglevel",
					"name": "MongoDB::getProfilingLevel",
					"description": "Gets this database's profiling level"
				},
				"mongodb.getreadpreference": {
					"tokens": [
						"MongoDB::getReadPreference",
						"getReadPreference",
						"::getReadPreference"
					],
					"id": "mongodb.getreadpreference",
					"name": "MongoDB::getReadPreference",
					"description": "Get the read preference for this database"
				},
				"mongodb.getslaveokay": {
					"tokens": [
						"MongoDB::getSlaveOkay",
						"getSlaveOkay",
						"::getSlaveOkay"
					],
					"id": "mongodb.getslaveokay",
					"name": "MongoDB::getSlaveOkay",
					"description": "Get slaveOkay setting for this database"
				},
				"mongodb.getwriteconcern": {
					"tokens": [
						"MongoDB::getWriteConcern",
						"getWriteConcern",
						"::getWriteConcern"
					],
					"id": "mongodb.getwriteconcern",
					"name": "MongoDB::getWriteConcern",
					"description": "Get the write concern for this database"
				},
				"mongodb.lasterror": {
					"tokens": [
						"MongoDB::lastError",
						"lastError",
						"::lastError"
					],
					"id": "mongodb.lasterror",
					"name": "MongoDB::lastError",
					"description": "Check if there was an error on the most recent db operation performed"
				},
				"mongodb.listcollections": {
					"tokens": [
						"MongoDB::listCollections",
						"listCollections",
						"::listCollections"
					],
					"id": "mongodb.listcollections",
					"name": "MongoDB::listCollections",
					"description": "Gets an array of MongoCollection objects for all collections in this database"
				},
				"mongodb.preverror": {
					"tokens": [
						"MongoDB::prevError",
						"prevError",
						"::prevError"
					],
					"id": "mongodb.preverror",
					"name": "MongoDB::prevError",
					"description": "Checks for the last error thrown during a database operation"
				},
				"mongodb.repair": {
					"tokens": [
						"MongoDB::repair",
						"repair",
						"::repair"
					],
					"id": "mongodb.repair",
					"name": "MongoDB::repair",
					"description": "Repairs and compacts this database"
				},
				"mongodb.reseterror": {
					"tokens": [
						"MongoDB::resetError",
						"resetError",
						"::resetError"
					],
					"id": "mongodb.reseterror",
					"name": "MongoDB::resetError",
					"description": "Clears any flagged errors on the database"
				},
				"mongodb.selectcollection": {
					"tokens": [
						"MongoDB::selectCollection",
						"selectCollection",
						"::selectCollection"
					],
					"id": "mongodb.selectcollection",
					"name": "MongoDB::selectCollection",
					"description": "Gets a collection"
				},
				"mongodb.setprofilinglevel": {
					"tokens": [
						"MongoDB::setProfilingLevel",
						"setProfilingLevel",
						"::setProfilingLevel"
					],
					"id": "mongodb.setprofilinglevel",
					"name": "MongoDB::setProfilingLevel",
					"description": "Sets this database's profiling level"
				},
				"mongodb.setreadpreference": {
					"tokens": [
						"MongoDB::setReadPreference",
						"setReadPreference",
						"::setReadPreference"
					],
					"id": "mongodb.setreadpreference",
					"name": "MongoDB::setReadPreference",
					"description": "Set the read preference for this database"
				},
				"mongodb.setslaveokay": {
					"tokens": [
						"MongoDB::setSlaveOkay",
						"setSlaveOkay",
						"::setSlaveOkay"
					],
					"id": "mongodb.setslaveokay",
					"name": "MongoDB::setSlaveOkay",
					"description": "Change slaveOkay setting for this database"
				},
				"mongodb.setwriteconcern": {
					"tokens": [
						"MongoDB::setWriteConcern",
						"setWriteConcern",
						"::setWriteConcern"
					],
					"id": "mongodb.setwriteconcern",
					"name": "MongoDB::setWriteConcern",
					"description": "Set the write concern for this database"
				},
				"mongodb.--tostring": {
					"tokens": [
						"MongoDB::__toString",
						"MongoDB::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodb.--tostring",
					"name": "MongoDB::__toString",
					"description": "The name of this database"
				},
				"mongocollection.aggregate": {
					"tokens": [
						"MongoCollection::aggregate",
						"aggregate",
						"::aggregate"
					],
					"id": "mongocollection.aggregate",
					"name": "MongoCollection::aggregate",
					"description": "Perform an aggregation using the aggregation framework"
				},
				"mongocollection.aggregatecursor": {
					"tokens": [
						"MongoCollection::aggregateCursor",
						"aggregateCursor",
						"::aggregateCursor"
					],
					"id": "mongocollection.aggregatecursor",
					"name": "MongoCollection::aggregateCursor",
					"description": "Execute an aggregation pipeline command and retrieve results through a cursor"
				},
				"mongocollection.batchinsert": {
					"tokens": [
						"MongoCollection::batchInsert",
						"batchInsert",
						"::batchInsert"
					],
					"id": "mongocollection.batchinsert",
					"name": "MongoCollection::batchInsert",
					"description": "Inserts multiple documents into this collection"
				},
				"mongocollection.construct": {
					"tokens": [
						"MongoCollection::__construct",
						"MongoCollection::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongocollection.construct",
					"name": "MongoCollection::__construct",
					"description": "Creates a new collection"
				},
				"mongocollection.count": {
					"tokens": [
						"MongoCollection::count",
						"count",
						"::count"
					],
					"id": "mongocollection.count",
					"name": "MongoCollection::count",
					"description": "Counts the number of documents in this collection"
				},
				"mongocollection.createdbref": {
					"tokens": [
						"MongoCollection::createDBRef",
						"createDBRef",
						"::createDBRef"
					],
					"id": "mongocollection.createdbref",
					"name": "MongoCollection::createDBRef",
					"description": "Creates a database reference"
				},
				"mongocollection.createindex": {
					"tokens": [
						"MongoCollection::createIndex",
						"createIndex",
						"::createIndex"
					],
					"id": "mongocollection.createindex",
					"name": "MongoCollection::createIndex",
					"description": "Creates an index on the specified field(s) if it does not already exist."
				},
				"mongocollection.deleteindex": {
					"tokens": [
						"MongoCollection::deleteIndex",
						"deleteIndex",
						"::deleteIndex"
					],
					"id": "mongocollection.deleteindex",
					"name": "MongoCollection::deleteIndex",
					"description": "Deletes an index from this collection"
				},
				"mongocollection.deleteindexes": {
					"tokens": [
						"MongoCollection::deleteIndexes",
						"deleteIndexes",
						"::deleteIndexes"
					],
					"id": "mongocollection.deleteindexes",
					"name": "MongoCollection::deleteIndexes",
					"description": "Delete all indices for this collection"
				},
				"mongocollection.distinct": {
					"tokens": [
						"MongoCollection::distinct",
						"distinct",
						"::distinct"
					],
					"id": "mongocollection.distinct",
					"name": "MongoCollection::distinct",
					"description": "Retrieve a list of distinct values for the given key across a collection."
				},
				"mongocollection.drop": {
					"tokens": [
						"MongoCollection::drop",
						"drop",
						"::drop"
					],
					"id": "mongocollection.drop",
					"name": "MongoCollection::drop",
					"description": "Drops this collection"
				},
				"mongocollection.ensureindex": {
					"tokens": [
						"MongoCollection::ensureIndex",
						"ensureIndex",
						"::ensureIndex"
					],
					"id": "mongocollection.ensureindex",
					"name": "MongoCollection::ensureIndex",
					"description": "Creates an index on the specified field(s) if it does not already exist."
				},
				"mongocollection.find": {
					"tokens": [
						"MongoCollection::find",
						"find",
						"::find"
					],
					"id": "mongocollection.find",
					"name": "MongoCollection::find",
					"description": "Queries this collection, returning a MongoCursor\n  for the result set"
				},
				"mongocollection.findandmodify": {
					"tokens": [
						"MongoCollection::findAndModify",
						"findAndModify",
						"::findAndModify"
					],
					"id": "mongocollection.findandmodify",
					"name": "MongoCollection::findAndModify",
					"description": "Update a document and return it"
				},
				"mongocollection.findone": {
					"tokens": [
						"MongoCollection::findOne",
						"findOne",
						"::findOne"
					],
					"id": "mongocollection.findone",
					"name": "MongoCollection::findOne",
					"description": "Queries this collection, returning a single element"
				},
				"mongocollection.get": {
					"tokens": [
						"MongoCollection::__get",
						"MongoCollection::_get",
						"__get",
						"::__get"
					],
					"id": "mongocollection.get",
					"name": "MongoCollection::__get",
					"description": "Gets a collection"
				},
				"mongocollection.getdbref": {
					"tokens": [
						"MongoCollection::getDBRef",
						"getDBRef",
						"::getDBRef"
					],
					"id": "mongocollection.getdbref",
					"name": "MongoCollection::getDBRef",
					"description": "Fetches the document pointed to by a database reference"
				},
				"mongocollection.getindexinfo": {
					"tokens": [
						"MongoCollection::getIndexInfo",
						"getIndexInfo",
						"::getIndexInfo"
					],
					"id": "mongocollection.getindexinfo",
					"name": "MongoCollection::getIndexInfo",
					"description": "Returns information about indexes on this collection"
				},
				"mongocollection.getname": {
					"tokens": [
						"MongoCollection::getName",
						"getName",
						"::getName"
					],
					"id": "mongocollection.getname",
					"name": "MongoCollection::getName",
					"description": "Returns this collection's name"
				},
				"mongocollection.getreadpreference": {
					"tokens": [
						"MongoCollection::getReadPreference",
						"getReadPreference",
						"::getReadPreference"
					],
					"id": "mongocollection.getreadpreference",
					"name": "MongoCollection::getReadPreference",
					"description": "Get the read preference for this collection"
				},
				"mongocollection.getslaveokay": {
					"tokens": [
						"MongoCollection::getSlaveOkay",
						"getSlaveOkay",
						"::getSlaveOkay"
					],
					"id": "mongocollection.getslaveokay",
					"name": "MongoCollection::getSlaveOkay",
					"description": "Get slaveOkay setting for this collection"
				},
				"mongocollection.getwriteconcern": {
					"tokens": [
						"MongoCollection::getWriteConcern",
						"getWriteConcern",
						"::getWriteConcern"
					],
					"id": "mongocollection.getwriteconcern",
					"name": "MongoCollection::getWriteConcern",
					"description": "Get the write concern for this collection"
				},
				"mongocollection.group": {
					"tokens": [
						"MongoCollection::group",
						"group",
						"::group"
					],
					"id": "mongocollection.group",
					"name": "MongoCollection::group",
					"description": "Performs an operation similar to SQL's GROUP BY command"
				},
				"mongocollection.insert": {
					"tokens": [
						"MongoCollection::insert",
						"insert",
						"::insert"
					],
					"id": "mongocollection.insert",
					"name": "MongoCollection::insert",
					"description": "Inserts a document into the collection"
				},
				"mongocollection.parallelcollectionscan": {
					"tokens": [
						"MongoCollection::parallelCollectionScan",
						"parallelCollectionScan",
						"::parallelCollectionScan"
					],
					"id": "mongocollection.parallelcollectionscan",
					"name": "MongoCollection::parallelCollectionScan",
					"description": "Returns an array of cursors to iterator over a full collection in parallel"
				},
				"mongocollection.remove": {
					"tokens": [
						"MongoCollection::remove",
						"remove",
						"::remove"
					],
					"id": "mongocollection.remove",
					"name": "MongoCollection::remove",
					"description": "Remove records from this collection"
				},
				"mongocollection.save": {
					"tokens": [
						"MongoCollection::save",
						"save",
						"::save"
					],
					"id": "mongocollection.save",
					"name": "MongoCollection::save",
					"description": "Saves a document to this collection"
				},
				"mongocollection.setreadpreference": {
					"tokens": [
						"MongoCollection::setReadPreference",
						"setReadPreference",
						"::setReadPreference"
					],
					"id": "mongocollection.setreadpreference",
					"name": "MongoCollection::setReadPreference",
					"description": "Set the read preference for this collection"
				},
				"mongocollection.setslaveokay": {
					"tokens": [
						"MongoCollection::setSlaveOkay",
						"setSlaveOkay",
						"::setSlaveOkay"
					],
					"id": "mongocollection.setslaveokay",
					"name": "MongoCollection::setSlaveOkay",
					"description": "Change slaveOkay setting for this collection"
				},
				"mongocollection.setwriteconcern": {
					"tokens": [
						"MongoCollection::setWriteConcern",
						"setWriteConcern",
						"::setWriteConcern"
					],
					"id": "mongocollection.setwriteconcern",
					"name": "MongoCollection::setWriteConcern",
					"description": "Set the write concern for this database"
				},
				"mongocollection.toindexstring": {
					"tokens": [
						"MongoCollection::toIndexString",
						"toIndexString",
						"::toIndexString"
					],
					"id": "mongocollection.toindexstring",
					"name": "MongoCollection::toIndexString",
					"description": "Converts keys specifying an index to its identifying string"
				},
				"mongocollection.--tostring": {
					"tokens": [
						"MongoCollection::__toString",
						"MongoCollection::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongocollection.--tostring",
					"name": "MongoCollection::__toString",
					"description": "String representation of this collection"
				},
				"mongocollection.update": {
					"tokens": [
						"MongoCollection::update",
						"update",
						"::update"
					],
					"id": "mongocollection.update",
					"name": "MongoCollection::update",
					"description": "Update records based on a given criteria"
				},
				"mongocollection.validate": {
					"tokens": [
						"MongoCollection::validate",
						"validate",
						"::validate"
					],
					"id": "mongocollection.validate",
					"name": "MongoCollection::validate",
					"description": "Validates this collection"
				},
				"mongocursor.addoption": {
					"tokens": [
						"MongoCursor::addOption",
						"addOption",
						"::addOption"
					],
					"id": "mongocursor.addoption",
					"name": "MongoCursor::addOption",
					"description": "Adds a top-level key/value pair to a query"
				},
				"mongocursor.awaitdata": {
					"tokens": [
						"MongoCursor::awaitData",
						"awaitData",
						"::awaitData"
					],
					"id": "mongocursor.awaitdata",
					"name": "MongoCursor::awaitData",
					"description": "Sets whether this cursor will wait for a while for a tailable cursor to return more data"
				},
				"mongocursor.batchsize": {
					"tokens": [
						"MongoCursor::batchSize",
						"batchSize",
						"::batchSize"
					],
					"id": "mongocursor.batchsize",
					"name": "MongoCursor::batchSize",
					"description": "Limits the number of elements returned in one batch."
				},
				"mongocursor.construct": {
					"tokens": [
						"MongoCursor::__construct",
						"MongoCursor::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongocursor.construct",
					"name": "MongoCursor::__construct",
					"description": "Create a new cursor"
				},
				"mongocursor.count": {
					"tokens": [
						"MongoCursor::count",
						"count",
						"::count"
					],
					"id": "mongocursor.count",
					"name": "MongoCursor::count",
					"description": "Counts the number of results for this query"
				},
				"mongocursor.current": {
					"tokens": [
						"MongoCursor::current",
						"current",
						"::current"
					],
					"id": "mongocursor.current",
					"name": "MongoCursor::current",
					"description": "Returns the current element"
				},
				"mongocursor.dead": {
					"tokens": [
						"MongoCursor::dead",
						"dead",
						"::dead"
					],
					"id": "mongocursor.dead",
					"name": "MongoCursor::dead",
					"description": "Checks if there are results that have not yet been sent from the database"
				},
				"mongocursor.doquery": {
					"tokens": [
						"MongoCursor::doQuery",
						"doQuery",
						"::doQuery"
					],
					"id": "mongocursor.doquery",
					"name": "MongoCursor::doQuery",
					"description": "Execute the query."
				},
				"mongocursor.explain": {
					"tokens": [
						"MongoCursor::explain",
						"explain",
						"::explain"
					],
					"id": "mongocursor.explain",
					"name": "MongoCursor::explain",
					"description": "Return an explanation of the query, often useful for optimization and debugging"
				},
				"mongocursor.fields": {
					"tokens": [
						"MongoCursor::fields",
						"fields",
						"::fields"
					],
					"id": "mongocursor.fields",
					"name": "MongoCursor::fields",
					"description": "Sets the fields for a query"
				},
				"mongocursor.getnext": {
					"tokens": [
						"MongoCursor::getNext",
						"getNext",
						"::getNext"
					],
					"id": "mongocursor.getnext",
					"name": "MongoCursor::getNext",
					"description": "Advances the cursor to the next result, and returns that result"
				},
				"mongocursor.getreadpreference": {
					"tokens": [
						"MongoCursor::getReadPreference",
						"getReadPreference",
						"::getReadPreference"
					],
					"id": "mongocursor.getreadpreference",
					"name": "MongoCursor::getReadPreference",
					"description": "Get the read preference for this query"
				},
				"mongocursor.hasnext": {
					"tokens": [
						"MongoCursor::hasNext",
						"hasNext",
						"::hasNext"
					],
					"id": "mongocursor.hasnext",
					"name": "MongoCursor::hasNext",
					"description": "Checks if there are any more elements in this cursor"
				},
				"mongocursor.hint": {
					"tokens": [
						"MongoCursor::hint",
						"hint",
						"::hint"
					],
					"id": "mongocursor.hint",
					"name": "MongoCursor::hint",
					"description": "Gives the database a hint about the query"
				},
				"mongocursor.immortal": {
					"tokens": [
						"MongoCursor::immortal",
						"immortal",
						"::immortal"
					],
					"id": "mongocursor.immortal",
					"name": "MongoCursor::immortal",
					"description": "Sets whether this cursor will timeout"
				},
				"mongocursor.info": {
					"tokens": [
						"MongoCursor::info",
						"info",
						"::info"
					],
					"id": "mongocursor.info",
					"name": "MongoCursor::info",
					"description": "Gets information about the cursor's creation and iteration"
				},
				"mongocursor.key": {
					"tokens": [
						"MongoCursor::key",
						"key",
						"::key"
					],
					"id": "mongocursor.key",
					"name": "MongoCursor::key",
					"description": "Returns the current result's _id, or its index within the result set"
				},
				"mongocursor.limit": {
					"tokens": [
						"MongoCursor::limit",
						"limit",
						"::limit"
					],
					"id": "mongocursor.limit",
					"name": "MongoCursor::limit",
					"description": "Limits the number of results returned"
				},
				"mongocursor.maxtimems": {
					"tokens": [
						"MongoCursor::maxTimeMS",
						"maxTimeMS",
						"::maxTimeMS"
					],
					"id": "mongocursor.maxtimems",
					"name": "MongoCursor::maxTimeMS",
					"description": "Sets a server-side timeout for this query"
				},
				"mongocursor.next": {
					"tokens": [
						"MongoCursor::next",
						"next",
						"::next"
					],
					"id": "mongocursor.next",
					"name": "MongoCursor::next",
					"description": "Advances the cursor to the next result, and returns that result"
				},
				"mongocursor.partial": {
					"tokens": [
						"MongoCursor::partial",
						"partial",
						"::partial"
					],
					"id": "mongocursor.partial",
					"name": "MongoCursor::partial",
					"description": "If this query should fetch partial results from mongos if a shard is down"
				},
				"mongocursor.reset": {
					"tokens": [
						"MongoCursor::reset",
						"reset",
						"::reset"
					],
					"id": "mongocursor.reset",
					"name": "MongoCursor::reset",
					"description": "Clears the cursor"
				},
				"mongocursor.rewind": {
					"tokens": [
						"MongoCursor::rewind",
						"rewind",
						"::rewind"
					],
					"id": "mongocursor.rewind",
					"name": "MongoCursor::rewind",
					"description": "Returns the cursor to the beginning of the result set"
				},
				"mongocursor.setflag": {
					"tokens": [
						"MongoCursor::setFlag",
						"setFlag",
						"::setFlag"
					],
					"id": "mongocursor.setflag",
					"name": "MongoCursor::setFlag",
					"description": "Sets arbitrary flags in case there is no method available the specific flag"
				},
				"mongocursor.setreadpreference": {
					"tokens": [
						"MongoCursor::setReadPreference",
						"setReadPreference",
						"::setReadPreference"
					],
					"id": "mongocursor.setreadpreference",
					"name": "MongoCursor::setReadPreference",
					"description": "Set the read preference for this query"
				},
				"mongocursor.skip": {
					"tokens": [
						"MongoCursor::skip",
						"skip",
						"::skip"
					],
					"id": "mongocursor.skip",
					"name": "MongoCursor::skip",
					"description": "Skips a number of results"
				},
				"mongocursor.slaveokay": {
					"tokens": [
						"MongoCursor::slaveOkay",
						"slaveOkay",
						"::slaveOkay"
					],
					"id": "mongocursor.slaveokay",
					"name": "MongoCursor::slaveOkay",
					"description": "Sets whether this query can be done on a secondary [deprecated]"
				},
				"mongocursor.snapshot": {
					"tokens": [
						"MongoCursor::snapshot",
						"snapshot",
						"::snapshot"
					],
					"id": "mongocursor.snapshot",
					"name": "MongoCursor::snapshot",
					"description": "Use snapshot mode for the query"
				},
				"mongocursor.sort": {
					"tokens": [
						"MongoCursor::sort",
						"sort",
						"::sort"
					],
					"id": "mongocursor.sort",
					"name": "MongoCursor::sort",
					"description": "Sorts the results by given fields"
				},
				"mongocursor.tailable": {
					"tokens": [
						"MongoCursor::tailable",
						"tailable",
						"::tailable"
					],
					"id": "mongocursor.tailable",
					"name": "MongoCursor::tailable",
					"description": "Sets whether this cursor will be left open after fetching the last results"
				},
				"mongocursor.timeout": {
					"tokens": [
						"MongoCursor::timeout",
						"timeout",
						"::timeout"
					],
					"id": "mongocursor.timeout",
					"name": "MongoCursor::timeout",
					"description": "Sets a client-side timeout for this query"
				},
				"mongocursor.valid": {
					"tokens": [
						"MongoCursor::valid",
						"valid",
						"::valid"
					],
					"id": "mongocursor.valid",
					"name": "MongoCursor::valid",
					"description": "Checks if the cursor is reading a valid result."
				},
				"mongocursorinterface.batchsize": {
					"tokens": [
						"MongoCursorInterface::batchSize",
						"batchSize",
						"::batchSize"
					],
					"id": "mongocursorinterface.batchsize",
					"name": "MongoCursorInterface::batchSize",
					"description": "Limits the number of elements returned in one batch."
				},
				"mongocursorinterface.dead": {
					"tokens": [
						"MongoCursorInterface::dead",
						"dead",
						"::dead"
					],
					"id": "mongocursorinterface.dead",
					"name": "MongoCursorInterface::dead",
					"description": "Checks if there are results that have not yet been sent from the database"
				},
				"mongocursorinterface.getreadpreference": {
					"tokens": [
						"MongoCursorInterface::getReadPreference",
						"getReadPreference",
						"::getReadPreference"
					],
					"id": "mongocursorinterface.getreadpreference",
					"name": "MongoCursorInterface::getReadPreference",
					"description": "Get the read preference for this query"
				},
				"mongocursorinterface.info": {
					"tokens": [
						"MongoCursorInterface::info",
						"info",
						"::info"
					],
					"id": "mongocursorinterface.info",
					"name": "MongoCursorInterface::info",
					"description": "Gets information about the cursor's creation and iteration"
				},
				"mongocursorinterface.setreadpreference": {
					"tokens": [
						"MongoCursorInterface::setReadPreference",
						"setReadPreference",
						"::setReadPreference"
					],
					"id": "mongocursorinterface.setreadpreference",
					"name": "MongoCursorInterface::setReadPreference",
					"description": "Set the read preference for this query"
				},
				"mongocursorinterface.timeout": {
					"tokens": [
						"MongoCursorInterface::timeout",
						"timeout",
						"::timeout"
					],
					"id": "mongocursorinterface.timeout",
					"name": "MongoCursorInterface::timeout",
					"description": "Sets a client-side timeout for this query"
				},
				"mongocommandcursor.batchsize": {
					"tokens": [
						"MongoCommandCursor::batchSize",
						"batchSize",
						"::batchSize"
					],
					"id": "mongocommandcursor.batchsize",
					"name": "MongoCommandCursor::batchSize",
					"description": "Limits the number of elements returned in one batch."
				},
				"mongocommandcursor.construct": {
					"tokens": [
						"MongoCommandCursor::__construct",
						"MongoCommandCursor::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongocommandcursor.construct",
					"name": "MongoCommandCursor::__construct",
					"description": "Create a new command cursor"
				},
				"mongocommandcursor.createfromdocument": {
					"tokens": [
						"MongoCommandCursor::createFromDocument",
						"createFromDocument",
						"::createFromDocument"
					],
					"id": "mongocommandcursor.createfromdocument",
					"name": "MongoCommandCursor::createFromDocument",
					"description": "Create a new command cursor from an existing command response document"
				},
				"mongocommandcursor.current": {
					"tokens": [
						"MongoCommandCursor::current",
						"current",
						"::current"
					],
					"id": "mongocommandcursor.current",
					"name": "MongoCommandCursor::current",
					"description": "Returns the current element"
				},
				"mongocommandcursor.dead": {
					"tokens": [
						"MongoCommandCursor::dead",
						"dead",
						"::dead"
					],
					"id": "mongocommandcursor.dead",
					"name": "MongoCommandCursor::dead",
					"description": "Checks if there are results that have not yet been sent from the database"
				},
				"mongocommandcursor.getreadpreference": {
					"tokens": [
						"MongoCommandCursor::getReadPreference",
						"getReadPreference",
						"::getReadPreference"
					],
					"id": "mongocommandcursor.getreadpreference",
					"name": "MongoCommandCursor::getReadPreference",
					"description": "Get the read preference for this command"
				},
				"mongocommandcursor.info": {
					"tokens": [
						"MongoCommandCursor::info",
						"info",
						"::info"
					],
					"id": "mongocommandcursor.info",
					"name": "MongoCommandCursor::info",
					"description": "Gets information about the cursor's creation and iteration"
				},
				"mongocommandcursor.key": {
					"tokens": [
						"MongoCommandCursor::key",
						"key",
						"::key"
					],
					"id": "mongocommandcursor.key",
					"name": "MongoCommandCursor::key",
					"description": "Returns the current result's index within the result set"
				},
				"mongocommandcursor.next": {
					"tokens": [
						"MongoCommandCursor::next",
						"next",
						"::next"
					],
					"id": "mongocommandcursor.next",
					"name": "MongoCommandCursor::next",
					"description": "Advances the cursor to the next result"
				},
				"mongocommandcursor.rewind": {
					"tokens": [
						"MongoCommandCursor::rewind",
						"rewind",
						"::rewind"
					],
					"id": "mongocommandcursor.rewind",
					"name": "MongoCommandCursor::rewind",
					"description": "Executes the command and resets the cursor to the start of the result set"
				},
				"mongocommandcursor.setreadpreference": {
					"tokens": [
						"MongoCommandCursor::setReadPreference",
						"setReadPreference",
						"::setReadPreference"
					],
					"id": "mongocommandcursor.setreadpreference",
					"name": "MongoCommandCursor::setReadPreference",
					"description": "Set the read preference for this command"
				},
				"mongocommandcursor.timeout": {
					"tokens": [
						"MongoCommandCursor::timeout",
						"timeout",
						"::timeout"
					],
					"id": "mongocommandcursor.timeout",
					"name": "MongoCommandCursor::timeout",
					"description": "Sets a client-side timeout for this command"
				},
				"mongocommandcursor.valid": {
					"tokens": [
						"MongoCommandCursor::valid",
						"valid",
						"::valid"
					],
					"id": "mongocommandcursor.valid",
					"name": "MongoCommandCursor::valid",
					"description": "Checks if the cursor is reading a valid result."
				},
				"mongoid.construct": {
					"tokens": [
						"MongoId::__construct",
						"MongoId::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoid.construct",
					"name": "MongoId::__construct",
					"description": "Creates a new id"
				},
				"mongoid.gethostname": {
					"tokens": [
						"MongoId::getHostname",
						"getHostname",
						"::getHostname"
					],
					"id": "mongoid.gethostname",
					"name": "MongoId::getHostname",
					"description": "Gets the hostname being used for this machine's ids"
				},
				"mongoid.getinc": {
					"tokens": [
						"MongoId::getInc",
						"getInc",
						"::getInc"
					],
					"id": "mongoid.getinc",
					"name": "MongoId::getInc",
					"description": "Gets the incremented value to create this id"
				},
				"mongoid.getpid": {
					"tokens": [
						"MongoId::getPID",
						"getPID",
						"::getPID"
					],
					"id": "mongoid.getpid",
					"name": "MongoId::getPID",
					"description": "Gets the process ID"
				},
				"mongoid.gettimestamp": {
					"tokens": [
						"MongoId::getTimestamp",
						"getTimestamp",
						"::getTimestamp"
					],
					"id": "mongoid.gettimestamp",
					"name": "MongoId::getTimestamp",
					"description": "Gets the number of seconds since the epoch that this id was created"
				},
				"mongoid.isvalid": {
					"tokens": [
						"MongoId::isValid",
						"isValid",
						"::isValid"
					],
					"id": "mongoid.isvalid",
					"name": "MongoId::isValid",
					"description": "Check if a value is a valid ObjectId"
				},
				"mongoid.set-state": {
					"tokens": [
						"MongoId::__set_state",
						"MongoId::_set_state",
						"__set_state",
						"::__set_state"
					],
					"id": "mongoid.set-state",
					"name": "MongoId::__set_state",
					"description": "Create a dummy MongoId"
				},
				"mongoid.tostring": {
					"tokens": [
						"MongoId::__toString",
						"MongoId::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongoid.tostring",
					"name": "MongoId::__toString",
					"description": "Returns a hexidecimal representation of this id"
				},
				"mongocode.construct": {
					"tokens": [
						"MongoCode::__construct",
						"MongoCode::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongocode.construct",
					"name": "MongoCode::__construct",
					"description": "Creates a new code object"
				},
				"mongocode.tostring": {
					"tokens": [
						"MongoCode::__toString",
						"MongoCode::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongocode.tostring",
					"name": "MongoCode::__toString",
					"description": "Returns this code as a string"
				},
				"mongodate.construct": {
					"tokens": [
						"MongoDate::__construct",
						"MongoDate::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodate.construct",
					"name": "MongoDate::__construct",
					"description": "Creates a new date."
				},
				"mongodate.todatetime": {
					"tokens": [
						"MongoDate::toDateTime",
						"toDateTime",
						"::toDateTime"
					],
					"id": "mongodate.todatetime",
					"name": "MongoDate::toDateTime",
					"description": "Returns a DateTime object representing this date"
				},
				"mongodate.tostring": {
					"tokens": [
						"MongoDate::__toString",
						"MongoDate::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodate.tostring",
					"name": "MongoDate::__toString",
					"description": "Returns a string representation of this date"
				},
				"mongoregex.construct": {
					"tokens": [
						"MongoRegex::__construct",
						"MongoRegex::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoregex.construct",
					"name": "MongoRegex::__construct",
					"description": "Creates a new regular expression"
				},
				"mongoregex.tostring": {
					"tokens": [
						"MongoRegex::__toString",
						"MongoRegex::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongoregex.tostring",
					"name": "MongoRegex::__toString",
					"description": "A string representation of this regular expression"
				},
				"mongobindata.construct": {
					"tokens": [
						"MongoBinData::__construct",
						"MongoBinData::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongobindata.construct",
					"name": "MongoBinData::__construct",
					"description": "Creates a new binary data object."
				},
				"mongobindata.tostring": {
					"tokens": [
						"MongoBinData::__toString",
						"MongoBinData::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongobindata.tostring",
					"name": "MongoBinData::__toString",
					"description": "The string representation of this binary data object."
				},
				"mongoint32.construct": {
					"tokens": [
						"MongoInt32::__construct",
						"MongoInt32::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoint32.construct",
					"name": "MongoInt32::__construct",
					"description": "Creates a new 32-bit integer."
				},
				"mongoint32.tostring": {
					"tokens": [
						"MongoInt32::__toString",
						"MongoInt32::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongoint32.tostring",
					"name": "MongoInt32::__toString",
					"description": "Returns the string representation of this 32-bit integer."
				},
				"mongoint64.construct": {
					"tokens": [
						"MongoInt64::__construct",
						"MongoInt64::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoint64.construct",
					"name": "MongoInt64::__construct",
					"description": "Creates a new 64-bit integer."
				},
				"mongoint64.tostring": {
					"tokens": [
						"MongoInt64::__toString",
						"MongoInt64::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongoint64.tostring",
					"name": "MongoInt64::__toString",
					"description": "Returns the string representation of this 64-bit integer."
				},
				"mongodbref.create": {
					"tokens": [
						"MongoDBRef::create",
						"create",
						"::create"
					],
					"id": "mongodbref.create",
					"name": "MongoDBRef::create",
					"description": "Creates a new database reference"
				},
				"mongodbref.get": {
					"tokens": [
						"MongoDBRef::get",
						"get",
						"::get"
					],
					"id": "mongodbref.get",
					"name": "MongoDBRef::get",
					"description": "Fetches the object pointed to by a reference"
				},
				"mongodbref.isref": {
					"tokens": [
						"MongoDBRef::isRef",
						"isRef",
						"::isRef"
					],
					"id": "mongodbref.isref",
					"name": "MongoDBRef::isRef",
					"description": "Checks if an array is a database reference"
				},
				"mongotimestamp.construct": {
					"tokens": [
						"MongoTimestamp::__construct",
						"MongoTimestamp::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongotimestamp.construct",
					"name": "MongoTimestamp::__construct",
					"description": "Creates a new timestamp."
				},
				"mongotimestamp.tostring": {
					"tokens": [
						"MongoTimestamp::__toString",
						"MongoTimestamp::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongotimestamp.tostring",
					"name": "MongoTimestamp::__toString",
					"description": "Returns a string representation of this timestamp"
				},
				"mongogridfs.construct": {
					"tokens": [
						"MongoGridFS::__construct",
						"MongoGridFS::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongogridfs.construct",
					"name": "MongoGridFS::__construct",
					"description": "Creates new file collections"
				},
				"mongogridfs.delete": {
					"tokens": [
						"MongoGridFS::delete",
						"delete",
						"::delete"
					],
					"id": "mongogridfs.delete",
					"name": "MongoGridFS::delete",
					"description": "Remove a file and its chunks from the database"
				},
				"mongogridfs.drop": {
					"tokens": [
						"MongoGridFS::drop",
						"drop",
						"::drop"
					],
					"id": "mongogridfs.drop",
					"name": "MongoGridFS::drop",
					"description": "Drops the files and chunks collections"
				},
				"mongogridfs.find": {
					"tokens": [
						"MongoGridFS::find",
						"find",
						"::find"
					],
					"id": "mongogridfs.find",
					"name": "MongoGridFS::find",
					"description": "Queries for files"
				},
				"mongogridfs.findone": {
					"tokens": [
						"MongoGridFS::findOne",
						"findOne",
						"::findOne"
					],
					"id": "mongogridfs.findone",
					"name": "MongoGridFS::findOne",
					"description": "Returns a single file matching the criteria"
				},
				"mongogridfs.get": {
					"tokens": [
						"MongoGridFS::get",
						"get",
						"::get"
					],
					"id": "mongogridfs.get",
					"name": "MongoGridFS::get",
					"description": "Retrieve a file from the database"
				},
				"mongogridfs.put": {
					"tokens": [
						"MongoGridFS::put",
						"put",
						"::put"
					],
					"id": "mongogridfs.put",
					"name": "MongoGridFS::put",
					"description": "Stores a file in the database"
				},
				"mongogridfs.remove": {
					"tokens": [
						"MongoGridFS::remove",
						"remove",
						"::remove"
					],
					"id": "mongogridfs.remove",
					"name": "MongoGridFS::remove",
					"description": "Remove files and their chunks from the database"
				},
				"mongogridfs.storebytes": {
					"tokens": [
						"MongoGridFS::storeBytes",
						"storeBytes",
						"::storeBytes"
					],
					"id": "mongogridfs.storebytes",
					"name": "MongoGridFS::storeBytes",
					"description": "Stores a string of bytes in the database"
				},
				"mongogridfs.storefile": {
					"tokens": [
						"MongoGridFS::storeFile",
						"storeFile",
						"::storeFile"
					],
					"id": "mongogridfs.storefile",
					"name": "MongoGridFS::storeFile",
					"description": "Stores a file in the database"
				},
				"mongogridfs.storeupload": {
					"tokens": [
						"MongoGridFS::storeUpload",
						"storeUpload",
						"::storeUpload"
					],
					"id": "mongogridfs.storeupload",
					"name": "MongoGridFS::storeUpload",
					"description": "Stores an uploaded file in the database"
				},
				"mongogridfsfile.construct": {
					"tokens": [
						"MongoGridfsFile::__construct",
						"MongoGridfsFile::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongogridfsfile.construct",
					"name": "MongoGridfsFile::__construct",
					"description": "Create a new GridFS file"
				},
				"mongogridfsfile.getbytes": {
					"tokens": [
						"MongoGridFSFile::getBytes",
						"getBytes",
						"::getBytes"
					],
					"id": "mongogridfsfile.getbytes",
					"name": "MongoGridFSFile::getBytes",
					"description": "Returns this file's contents as a string of bytes"
				},
				"mongogridfsfile.getfilename": {
					"tokens": [
						"MongoGridFSFile::getFilename",
						"getFilename",
						"::getFilename"
					],
					"id": "mongogridfsfile.getfilename",
					"name": "MongoGridFSFile::getFilename",
					"description": "Returns this file's filename"
				},
				"mongogridfsfile.getresource": {
					"tokens": [
						"MongoGridFSFile::getResource",
						"getResource",
						"::getResource"
					],
					"id": "mongogridfsfile.getresource",
					"name": "MongoGridFSFile::getResource",
					"description": "Returns a resource that can be used to read the stored file"
				},
				"mongogridfsfile.getsize": {
					"tokens": [
						"MongoGridFSFile::getSize",
						"getSize",
						"::getSize"
					],
					"id": "mongogridfsfile.getsize",
					"name": "MongoGridFSFile::getSize",
					"description": "Returns this file's size"
				},
				"mongogridfsfile.write": {
					"tokens": [
						"MongoGridFSFile::write",
						"write",
						"::write"
					],
					"id": "mongogridfsfile.write",
					"name": "MongoGridFSFile::write",
					"description": "Writes this file to the filesystem"
				},
				"mongogridfscursor.construct": {
					"tokens": [
						"MongoGridFSCursor::__construct",
						"MongoGridFSCursor::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongogridfscursor.construct",
					"name": "MongoGridFSCursor::__construct",
					"description": "Create a new cursor"
				},
				"mongogridfscursor.current": {
					"tokens": [
						"MongoGridFSCursor::current",
						"current",
						"::current"
					],
					"id": "mongogridfscursor.current",
					"name": "MongoGridFSCursor::current",
					"description": "Returns the current file"
				},
				"mongogridfscursor.getnext": {
					"tokens": [
						"MongoGridFSCursor::getNext",
						"getNext",
						"::getNext"
					],
					"id": "mongogridfscursor.getnext",
					"name": "MongoGridFSCursor::getNext",
					"description": "Return the next file to which this cursor points, and advance the cursor"
				},
				"mongogridfscursor.key": {
					"tokens": [
						"MongoGridFSCursor::key",
						"key",
						"::key"
					],
					"id": "mongogridfscursor.key",
					"name": "MongoGridFSCursor::key",
					"description": "Returns the current result's filename"
				},
				"mongowritebatch.add": {
					"tokens": [
						"MongoWriteBatch::add",
						"add",
						"::add"
					],
					"id": "mongowritebatch.add",
					"name": "MongoWriteBatch::add",
					"description": "Adds a write operation to a batch"
				},
				"mongowritebatch.construct": {
					"tokens": [
						"MongoWriteBatch::__construct",
						"MongoWriteBatch::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongowritebatch.construct",
					"name": "MongoWriteBatch::__construct",
					"description": "Creates a new batch of write operations"
				},
				"mongowritebatch.execute": {
					"tokens": [
						"MongoWriteBatch::execute",
						"execute",
						"::execute"
					],
					"id": "mongowritebatch.execute",
					"name": "MongoWriteBatch::execute",
					"description": "Executes a batch of write operations"
				},
				"mongoinsertbatch.construct": {
					"tokens": [
						"MongoInsertBatch::__construct",
						"MongoInsertBatch::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoinsertbatch.construct",
					"name": "MongoInsertBatch::__construct",
					"description": "Description"
				},
				"mongoupdatebatch.construct": {
					"tokens": [
						"MongoUpdateBatch::__construct",
						"MongoUpdateBatch::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongoupdatebatch.construct",
					"name": "MongoUpdateBatch::__construct",
					"description": "Description"
				},
				"mongodeletebatch.construct": {
					"tokens": [
						"MongoDeleteBatch::__construct",
						"MongoDeleteBatch::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodeletebatch.construct",
					"name": "MongoDeleteBatch::__construct",
					"description": "Description"
				},
				"mongolog.getcallback": {
					"tokens": [
						"MongoLog::getCallback",
						"getCallback",
						"::getCallback"
					],
					"id": "mongolog.getcallback",
					"name": "MongoLog::getCallback",
					"description": "Gets the previously set callback function"
				},
				"mongolog.getlevel": {
					"tokens": [
						"MongoLog::getLevel",
						"getLevel",
						"::getLevel"
					],
					"id": "mongolog.getlevel",
					"name": "MongoLog::getLevel",
					"description": "Gets the level(s) currently being logged"
				},
				"mongolog.getmodule": {
					"tokens": [
						"MongoLog::getModule",
						"getModule",
						"::getModule"
					],
					"id": "mongolog.getmodule",
					"name": "MongoLog::getModule",
					"description": "Gets the module(s) currently being logged"
				},
				"mongolog.setcallback": {
					"tokens": [
						"MongoLog::setCallback",
						"setCallback",
						"::setCallback"
					],
					"id": "mongolog.setcallback",
					"name": "MongoLog::setCallback",
					"description": "Sets a callback function to be invoked for events"
				},
				"mongolog.setlevel": {
					"tokens": [
						"MongoLog::setLevel",
						"setLevel",
						"::setLevel"
					],
					"id": "mongolog.setlevel",
					"name": "MongoLog::setLevel",
					"description": "Sets the level(s) to be logged"
				},
				"mongolog.setmodule": {
					"tokens": [
						"MongoLog::setModule",
						"setModule",
						"::setModule"
					],
					"id": "mongolog.setmodule",
					"name": "MongoLog::setModule",
					"description": "Sets the module(s) to be logged"
				},
				"mongopool.getsize": {
					"tokens": [
						"MongoPool::getSize",
						"getSize",
						"::getSize"
					],
					"id": "mongopool.getsize",
					"name": "MongoPool::getSize",
					"description": "Get pool size for connection pools"
				},
				"mongopool.info": {
					"tokens": [
						"MongoPool::info",
						"info",
						"::info"
					],
					"id": "mongopool.info",
					"name": "MongoPool::info",
					"description": "Returns information about all connection pools."
				},
				"mongopool.setsize": {
					"tokens": [
						"MongoPool::setSize",
						"setSize",
						"::setSize"
					],
					"id": "mongopool.setsize",
					"name": "MongoPool::setSize",
					"description": "Set the size for future connection pools."
				},
				"mongo.connectutil": {
					"tokens": [
						"Mongo::connectUtil",
						"connectUtil",
						"::connectUtil"
					],
					"id": "mongo.connectutil",
					"name": "Mongo::connectUtil",
					"description": "Connects with a database server"
				},
				"mongo.construct": {
					"tokens": [
						"Mongo::__construct",
						"Mongo::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongo.construct",
					"name": "Mongo::__construct",
					"description": "The __construct purpose"
				},
				"mongo.getpoolsize": {
					"tokens": [
						"Mongo::getPoolSize",
						"getPoolSize",
						"::getPoolSize"
					],
					"id": "mongo.getpoolsize",
					"name": "Mongo::getPoolSize",
					"description": "Get pool size for connection pools"
				},
				"mongo.getslave": {
					"tokens": [
						"Mongo::getSlave",
						"getSlave",
						"::getSlave"
					],
					"id": "mongo.getslave",
					"name": "Mongo::getSlave",
					"description": "Returns the address being used by this for slaveOkay reads"
				},
				"mongo.getslaveokay": {
					"tokens": [
						"Mongo::getSlaveOkay",
						"getSlaveOkay",
						"::getSlaveOkay"
					],
					"id": "mongo.getslaveokay",
					"name": "Mongo::getSlaveOkay",
					"description": "Get slaveOkay setting for this connection"
				},
				"mongo.pooldebug": {
					"tokens": [
						"Mongo::poolDebug",
						"poolDebug",
						"::poolDebug"
					],
					"id": "mongo.pooldebug",
					"name": "Mongo::poolDebug",
					"description": "Returns information about all connection pools."
				},
				"mongo.setpoolsize": {
					"tokens": [
						"Mongo::setPoolSize",
						"setPoolSize",
						"::setPoolSize"
					],
					"id": "mongo.setpoolsize",
					"name": "Mongo::setPoolSize",
					"description": "Set the size for future connection pools."
				},
				"mongo.setslaveokay": {
					"tokens": [
						"Mongo::setSlaveOkay",
						"setSlaveOkay",
						"::setSlaveOkay"
					],
					"id": "mongo.setslaveokay",
					"name": "Mongo::setSlaveOkay",
					"description": "Change slaveOkay setting for this connection"
				},
				"mongo.switchslave": {
					"tokens": [
						"Mongo::switchSlave",
						"switchSlave",
						"::switchSlave"
					],
					"id": "mongo.switchslave",
					"name": "Mongo::switchSlave",
					"description": "Choose a new secondary for slaveOkay reads"
				},
				"function.bson-decode": {
					"tokens": [
						"bson_decode",
						"bsondecode"
					],
					"id": "function.bson-decode",
					"name": "bson_decode",
					"description": "Deserializes a BSON object into a PHP array"
				},
				"function.bson-encode": {
					"tokens": [
						"bson_encode",
						"bsonencode"
					],
					"id": "function.bson-encode",
					"name": "bson_encode",
					"description": "Serializes a PHP variable into a BSON string"
				},
				"mongoresultexception.getdocument": {
					"tokens": [
						"MongoResultException::getDocument",
						"getDocument",
						"::getDocument"
					],
					"id": "mongoresultexception.getdocument",
					"name": "MongoResultException::getDocument",
					"description": "Retrieve the full result document"
				},
				"mongocursorexception.gethost": {
					"tokens": [
						"MongoCursorException::getHost",
						"getHost",
						"::getHost"
					],
					"id": "mongocursorexception.gethost",
					"name": "MongoCursorException::getHost",
					"description": "The hostname of the server that encountered the error"
				},
				"mongowriteconcernexception.getdocument": {
					"tokens": [
						"MongoWriteConcernException::getDocument",
						"getDocument",
						"::getDocument"
					],
					"id": "mongowriteconcernexception.getdocument",
					"name": "MongoWriteConcernException::getDocument",
					"description": "Get the error document"
				},
				"mongodb-driver-manager.construct": {
					"tokens": [
						"MongoDB\\Driver\\Manager::__construct",
						"MongoDB\\Driver\\Manager::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-manager.construct",
					"name": "MongoDB\\Driver\\Manager::__construct",
					"description": "Create new MongoDB Manager"
				},
				"mongodb-driver-manager.executebulkwrite": {
					"tokens": [
						"MongoDB\\Driver\\Manager::executeBulkWrite",
						"executeBulkWrite",
						"::executeBulkWrite"
					],
					"id": "mongodb-driver-manager.executebulkwrite",
					"name": "MongoDB\\Driver\\Manager::executeBulkWrite",
					"description": "Execute one or more write operations"
				},
				"mongodb-driver-manager.executecommand": {
					"tokens": [
						"MongoDB\\Driver\\Manager::executeCommand",
						"executeCommand",
						"::executeCommand"
					],
					"id": "mongodb-driver-manager.executecommand",
					"name": "MongoDB\\Driver\\Manager::executeCommand",
					"description": "Execute a database command"
				},
				"mongodb-driver-manager.executequery": {
					"tokens": [
						"MongoDB\\Driver\\Manager::executeQuery",
						"executeQuery",
						"::executeQuery"
					],
					"id": "mongodb-driver-manager.executequery",
					"name": "MongoDB\\Driver\\Manager::executeQuery",
					"description": "Execute a database query"
				},
				"mongodb-driver-manager.getservers": {
					"tokens": [
						"MongoDB\\Driver\\Manager::getServers",
						"getServers",
						"::getServers"
					],
					"id": "mongodb-driver-manager.getservers",
					"name": "MongoDB\\Driver\\Manager::getServers",
					"description": "Return the servers to which this manager is connected"
				},
				"mongodb-driver-manager.selectserver": {
					"tokens": [
						"MongoDB\\Driver\\Manager::selectServer",
						"selectServer",
						"::selectServer"
					],
					"id": "mongodb-driver-manager.selectserver",
					"name": "MongoDB\\Driver\\Manager::selectServer",
					"description": "Select a server matching a read preference"
				},
				"mongodb-driver-command.construct": {
					"tokens": [
						"MongoDB\\Driver\\Command::__construct",
						"MongoDB\\Driver\\Command::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-command.construct",
					"name": "MongoDB\\Driver\\Command::__construct",
					"description": "Create a new Command"
				},
				"mongodb-driver-query.construct": {
					"tokens": [
						"MongoDB\\Driver\\Query::__construct",
						"MongoDB\\Driver\\Query::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-query.construct",
					"name": "MongoDB\\Driver\\Query::__construct",
					"description": "Construct new Query"
				},
				"mongodb-driver-bulkwrite.construct": {
					"tokens": [
						"MongoDB\\Driver\\BulkWrite::__construct",
						"MongoDB\\Driver\\BulkWrite::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-bulkwrite.construct",
					"name": "MongoDB\\Driver\\BulkWrite::__construct",
					"description": "Create a new BulkWrite"
				},
				"mongodb-driver-bulkwrite.count": {
					"tokens": [
						"MongoDB\\Driver\\BulkWrite::count",
						"count",
						"::count"
					],
					"id": "mongodb-driver-bulkwrite.count",
					"name": "MongoDB\\Driver\\BulkWrite::count",
					"description": "Count number of write operations in the bulk"
				},
				"mongodb-driver-bulkwrite.delete": {
					"tokens": [
						"MongoDB\\Driver\\BulkWrite::delete",
						"delete",
						"::delete"
					],
					"id": "mongodb-driver-bulkwrite.delete",
					"name": "MongoDB\\Driver\\BulkWrite::delete",
					"description": "Add a delete operation to the bulk"
				},
				"mongodb-driver-bulkwrite.insert": {
					"tokens": [
						"MongoDB\\Driver\\BulkWrite::insert",
						"insert",
						"::insert"
					],
					"id": "mongodb-driver-bulkwrite.insert",
					"name": "MongoDB\\Driver\\BulkWrite::insert",
					"description": "Add an insert operation to the bulk"
				},
				"mongodb-driver-bulkwrite.update": {
					"tokens": [
						"MongoDB\\Driver\\BulkWrite::update",
						"update",
						"::update"
					],
					"id": "mongodb-driver-bulkwrite.update",
					"name": "MongoDB\\Driver\\BulkWrite::update",
					"description": "Add an update operation to the bulk"
				},
				"mongodb-driver-writeconcern.construct": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcern::__construct",
						"MongoDB\\Driver\\WriteConcern::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-writeconcern.construct",
					"name": "MongoDB\\Driver\\WriteConcern::__construct",
					"description": "Construct immutable WriteConcern"
				},
				"mongodb-driver-writeconcern.getjournal": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcern::getJournal",
						"getJournal",
						"::getJournal"
					],
					"id": "mongodb-driver-writeconcern.getjournal",
					"name": "MongoDB\\Driver\\WriteConcern::getJournal",
					"description": "Returns the WriteConcern's &quot;journal&quot; option"
				},
				"mongodb-driver-writeconcern.getw": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcern::getW",
						"getW",
						"::getW"
					],
					"id": "mongodb-driver-writeconcern.getw",
					"name": "MongoDB\\Driver\\WriteConcern::getW",
					"description": "Returns the WriteConcern's &quot;w&quot; option"
				},
				"mongodb-driver-writeconcern.getwtimeout": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcern::getWtimeout",
						"getWtimeout",
						"::getWtimeout"
					],
					"id": "mongodb-driver-writeconcern.getwtimeout",
					"name": "MongoDB\\Driver\\WriteConcern::getWtimeout",
					"description": "Returns the WriteConcern's &quot;wtimeout&quot; option"
				},
				"mongodb-driver-readpreference.construct": {
					"tokens": [
						"MongoDB\\Driver\\ReadPreference::__construct",
						"MongoDB\\Driver\\ReadPreference::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-readpreference.construct",
					"name": "MongoDB\\Driver\\ReadPreference::__construct",
					"description": "Construct immutable ReadPreference"
				},
				"mongodb-driver-readpreference.getmode": {
					"tokens": [
						"MongoDB\\Driver\\ReadPreference::getMode",
						"getMode",
						"::getMode"
					],
					"id": "mongodb-driver-readpreference.getmode",
					"name": "MongoDB\\Driver\\ReadPreference::getMode",
					"description": "Returns the ReadPreference's &quot;mode&quot; option"
				},
				"mongodb-driver-readpreference.gettagsets": {
					"tokens": [
						"MongoDB\\Driver\\ReadPreference::getTagSets",
						"getTagSets",
						"::getTagSets"
					],
					"id": "mongodb-driver-readpreference.gettagsets",
					"name": "MongoDB\\Driver\\ReadPreference::getTagSets",
					"description": "Returns the ReadPreference's &quot;tagSets&quot; option"
				},
				"mongodb-driver-readconcern.construct": {
					"tokens": [
						"MongoDB\\Driver\\ReadConcern::__construct",
						"MongoDB\\Driver\\ReadConcern::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-readconcern.construct",
					"name": "MongoDB\\Driver\\ReadConcern::__construct",
					"description": "Construct immutable ReadConcern"
				},
				"mongodb-driver-readconcern.getlevel": {
					"tokens": [
						"MongoDB\\Driver\\ReadConcern::getLEvel",
						"getLEvel",
						"::getLEvel"
					],
					"id": "mongodb-driver-readconcern.getlevel",
					"name": "MongoDB\\Driver\\ReadConcern::getLEvel",
					"description": "Returns the ReadConcern's &quot;level&quot; option"
				},
				"mongodb-driver-cursor.construct": {
					"tokens": [
						"MongoDB\\Driver\\Cursor::__construct",
						"MongoDB\\Driver\\Cursor::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-cursor.construct",
					"name": "MongoDB\\Driver\\Cursor::__construct",
					"description": "Create a new Cursor (not used)"
				},
				"mongodb-driver-cursor.getid": {
					"tokens": [
						"MongoDB\\Driver\\Cursor::getId",
						"getId",
						"::getId"
					],
					"id": "mongodb-driver-cursor.getid",
					"name": "MongoDB\\Driver\\Cursor::getId",
					"description": "Returns the ID for this cursor"
				},
				"mongodb-driver-cursor.getserver": {
					"tokens": [
						"MongoDB\\Driver\\Cursor::getServer",
						"getServer",
						"::getServer"
					],
					"id": "mongodb-driver-cursor.getserver",
					"name": "MongoDB\\Driver\\Cursor::getServer",
					"description": "Returns the server associated with this cursor"
				},
				"mongodb-driver-cursor.isdead": {
					"tokens": [
						"MongoDB\\Driver\\Cursor::isDead",
						"isDead",
						"::isDead"
					],
					"id": "mongodb-driver-cursor.isdead",
					"name": "MongoDB\\Driver\\Cursor::isDead",
					"description": "Checks if the cursor is still open on the server"
				},
				"mongodb-driver-cursor.settypemap": {
					"tokens": [
						"MongoDB\\Driver\\Cursor::setTypeMap",
						"setTypeMap",
						"::setTypeMap"
					],
					"id": "mongodb-driver-cursor.settypemap",
					"name": "MongoDB\\Driver\\Cursor::setTypeMap",
					"description": "Sets a type map to use for BSON unserialization"
				},
				"mongodb-driver-cursor.toarray": {
					"tokens": [
						"MongoDB\\Driver\\Cursor::toArray",
						"toArray",
						"::toArray"
					],
					"id": "mongodb-driver-cursor.toarray",
					"name": "MongoDB\\Driver\\Cursor::toArray",
					"description": "Returns an array containing all results for this cursor"
				},
				"mongodb-driver-cursorid.construct": {
					"tokens": [
						"MongoDB\\Driver\\CursorId::__construct",
						"MongoDB\\Driver\\CursorId::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-cursorid.construct",
					"name": "MongoDB\\Driver\\CursorId::__construct",
					"description": "Create a new CursorId (not used)"
				},
				"mongodb-driver-cursorid.tostring": {
					"tokens": [
						"MongoDB\\Driver\\CursorId::__toString",
						"MongoDB\\Driver\\CursorId::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodb-driver-cursorid.tostring",
					"name": "MongoDB\\Driver\\CursorId::__toString",
					"description": "String representation of the cursor ID"
				},
				"mongodb-driver-server.construct": {
					"tokens": [
						"MongoDB\\Driver\\Server::__construct",
						"MongoDB\\Driver\\Server::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-driver-server.construct",
					"name": "MongoDB\\Driver\\Server::__construct",
					"description": "Create a new Server (not used)"
				},
				"mongodb-driver-server.executebulkwrite": {
					"tokens": [
						"MongoDB\\Driver\\Server::executeBulkWrite",
						"executeBulkWrite",
						"::executeBulkWrite"
					],
					"id": "mongodb-driver-server.executebulkwrite",
					"name": "MongoDB\\Driver\\Server::executeBulkWrite",
					"description": "Execute one or more write operations on this server"
				},
				"mongodb-driver-server.executecommand": {
					"tokens": [
						"MongoDB\\Driver\\Server::executeCommand",
						"executeCommand",
						"::executeCommand"
					],
					"id": "mongodb-driver-server.executecommand",
					"name": "MongoDB\\Driver\\Server::executeCommand",
					"description": "Execute a database command on this server"
				},
				"mongodb-driver-server.executequery": {
					"tokens": [
						"MongoDB\\Driver\\Server::executeQuery",
						"executeQuery",
						"::executeQuery"
					],
					"id": "mongodb-driver-server.executequery",
					"name": "MongoDB\\Driver\\Server::executeQuery",
					"description": "Execute a database query on this server"
				},
				"mongodb-driver-server.gethost": {
					"tokens": [
						"MongoDB\\Driver\\Server::getHost",
						"getHost",
						"::getHost"
					],
					"id": "mongodb-driver-server.gethost",
					"name": "MongoDB\\Driver\\Server::getHost",
					"description": "Returns the hostname of this server"
				},
				"mongodb-driver-server.getinfo": {
					"tokens": [
						"MongoDB\\Driver\\Server::getInfo",
						"getInfo",
						"::getInfo"
					],
					"id": "mongodb-driver-server.getinfo",
					"name": "MongoDB\\Driver\\Server::getInfo",
					"description": "Returns an array of information about this server"
				},
				"mongodb-driver-server.getlatency": {
					"tokens": [
						"MongoDB\\Driver\\Server::getLatency",
						"getLatency",
						"::getLatency"
					],
					"id": "mongodb-driver-server.getlatency",
					"name": "MongoDB\\Driver\\Server::getLatency",
					"description": "Returns the latency of this server"
				},
				"mongodb-driver-server.getport": {
					"tokens": [
						"MongoDB\\Driver\\Server::getPort",
						"getPort",
						"::getPort"
					],
					"id": "mongodb-driver-server.getport",
					"name": "MongoDB\\Driver\\Server::getPort",
					"description": "Returns the port on which this server is listening"
				},
				"mongodb-driver-server.gettags": {
					"tokens": [
						"MongoDB\\Driver\\Server::getTags",
						"getTags",
						"::getTags"
					],
					"id": "mongodb-driver-server.gettags",
					"name": "MongoDB\\Driver\\Server::getTags",
					"description": "Returns an array of tags describing this server in a replica set"
				},
				"mongodb-driver-server.gettype": {
					"tokens": [
						"MongoDB\\Driver\\Server::getType",
						"getType",
						"::getType"
					],
					"id": "mongodb-driver-server.gettype",
					"name": "MongoDB\\Driver\\Server::getType",
					"description": "Returns an integer denoting the type of this server"
				},
				"mongodb-driver-server.isarbiter": {
					"tokens": [
						"MongoDB\\Driver\\Server::isArbiter",
						"isArbiter",
						"::isArbiter"
					],
					"id": "mongodb-driver-server.isarbiter",
					"name": "MongoDB\\Driver\\Server::isArbiter",
					"description": "Checks if this server is an arbiter member of a replica set"
				},
				"mongodb-driver-server.ishidden": {
					"tokens": [
						"MongoDB\\Driver\\Server::isHidden",
						"isHidden",
						"::isHidden"
					],
					"id": "mongodb-driver-server.ishidden",
					"name": "MongoDB\\Driver\\Server::isHidden",
					"description": "Checks if this server is a hidden member of a replica set"
				},
				"mongodb-driver-server.ispassive": {
					"tokens": [
						"MongoDB\\Driver\\Server::isPassive",
						"isPassive",
						"::isPassive"
					],
					"id": "mongodb-driver-server.ispassive",
					"name": "MongoDB\\Driver\\Server::isPassive",
					"description": "Checks if this server is a passive member of a replica set"
				},
				"mongodb-driver-server.isprimary": {
					"tokens": [
						"MongoDB\\Driver\\Server::isPrimary",
						"isPrimary",
						"::isPrimary"
					],
					"id": "mongodb-driver-server.isprimary",
					"name": "MongoDB\\Driver\\Server::isPrimary",
					"description": "Checks if this server is a primary member of a replica set"
				},
				"mongodb-driver-server.issecondary": {
					"tokens": [
						"MongoDB\\Driver\\Server::isSecondary",
						"isSecondary",
						"::isSecondary"
					],
					"id": "mongodb-driver-server.issecondary",
					"name": "MongoDB\\Driver\\Server::isSecondary",
					"description": "Checks if this server is a secondary member of a replica set"
				},
				"mongodb-driver-writeconcernerror.getcode": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcernError::getCode",
						"getCode",
						"::getCode"
					],
					"id": "mongodb-driver-writeconcernerror.getcode",
					"name": "MongoDB\\Driver\\WriteConcernError::getCode",
					"description": "Description"
				},
				"mongodb-driver-writeconcernerror.getinfo": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcernError::getInfo",
						"getInfo",
						"::getInfo"
					],
					"id": "mongodb-driver-writeconcernerror.getinfo",
					"name": "MongoDB\\Driver\\WriteConcernError::getInfo",
					"description": "Description"
				},
				"mongodb-driver-writeconcernerror.getmessage": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcernError::getMessage",
						"getMessage",
						"::getMessage"
					],
					"id": "mongodb-driver-writeconcernerror.getmessage",
					"name": "MongoDB\\Driver\\WriteConcernError::getMessage",
					"description": "Description"
				},
				"mongodb-driver-writeerror.getcode": {
					"tokens": [
						"MongoDB\\Driver\\WriteError::getCode",
						"getCode",
						"::getCode"
					],
					"id": "mongodb-driver-writeerror.getcode",
					"name": "MongoDB\\Driver\\WriteError::getCode",
					"description": "Description"
				},
				"mongodb-driver-writeerror.getindex": {
					"tokens": [
						"MongoDB\\Driver\\WriteError::getIndex",
						"getIndex",
						"::getIndex"
					],
					"id": "mongodb-driver-writeerror.getindex",
					"name": "MongoDB\\Driver\\WriteError::getIndex",
					"description": "Description"
				},
				"mongodb-driver-writeerror.getmessage": {
					"tokens": [
						"MongoDB\\Driver\\WriteError::getMessage",
						"getMessage",
						"::getMessage"
					],
					"id": "mongodb-driver-writeerror.getmessage",
					"name": "MongoDB\\Driver\\WriteError::getMessage",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getdeletedcount": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getDeletedCount",
						"getDeletedCount",
						"::getDeletedCount"
					],
					"id": "mongodb-driver-writeresult.getdeletedcount",
					"name": "MongoDB\\Driver\\WriteResult::getDeletedCount",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getinsertedcount": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getInsertedCount",
						"getInsertedCount",
						"::getInsertedCount"
					],
					"id": "mongodb-driver-writeresult.getinsertedcount",
					"name": "MongoDB\\Driver\\WriteResult::getInsertedCount",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getmatchedcount": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getMatchedCount",
						"getMatchedCount",
						"::getMatchedCount"
					],
					"id": "mongodb-driver-writeresult.getmatchedcount",
					"name": "MongoDB\\Driver\\WriteResult::getMatchedCount",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getmodifiedcount": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getModifiedCount",
						"getModifiedCount",
						"::getModifiedCount"
					],
					"id": "mongodb-driver-writeresult.getmodifiedcount",
					"name": "MongoDB\\Driver\\WriteResult::getModifiedCount",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getserver": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getServer",
						"getServer",
						"::getServer"
					],
					"id": "mongodb-driver-writeresult.getserver",
					"name": "MongoDB\\Driver\\WriteResult::getServer",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getupsertedcount": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getUpsertedCount",
						"getUpsertedCount",
						"::getUpsertedCount"
					],
					"id": "mongodb-driver-writeresult.getupsertedcount",
					"name": "MongoDB\\Driver\\WriteResult::getUpsertedCount",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getupsertedids": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getUpsertedIds",
						"getUpsertedIds",
						"::getUpsertedIds"
					],
					"id": "mongodb-driver-writeresult.getupsertedids",
					"name": "MongoDB\\Driver\\WriteResult::getUpsertedIds",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getwriteconcernerror": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getWriteConcernError",
						"getWriteConcernError",
						"::getWriteConcernError"
					],
					"id": "mongodb-driver-writeresult.getwriteconcernerror",
					"name": "MongoDB\\Driver\\WriteResult::getWriteConcernError",
					"description": "Description"
				},
				"mongodb-driver-writeresult.getwriteerrors": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult::getWriteErrors",
						"getWriteErrors",
						"::getWriteErrors"
					],
					"id": "mongodb-driver-writeresult.getwriteerrors",
					"name": "MongoDB\\Driver\\WriteResult::getWriteErrors",
					"description": "Description"
				},
				"function.mongodb.bson-fromjson": {
					"tokens": [
						"MongoDB\\BSON\\fromJSON"
					],
					"id": "function.mongodb.bson-fromjson",
					"name": "MongoDB\\BSON\\fromJSON",
					"description": "Returns the BSON representation of a JSON value"
				},
				"function.mongodb.bson-fromphp": {
					"tokens": [
						"MongoDB\\BSON\\fromPHP"
					],
					"id": "function.mongodb.bson-fromphp",
					"name": "MongoDB\\BSON\\fromPHP",
					"description": "Returns the BSON representation of a PHP value"
				},
				"function.mongodb.bson-tojson": {
					"tokens": [
						"MongoDB\\BSON\\toJSON"
					],
					"id": "function.mongodb.bson-tojson",
					"name": "MongoDB\\BSON\\toJSON",
					"description": "Returns the JSON representation of a BSON value"
				},
				"function.mongodb.bson-tophp": {
					"tokens": [
						"MongoDB\\BSON\\toPHP"
					],
					"id": "function.mongodb.bson-tophp",
					"name": "MongoDB\\BSON\\toPHP",
					"description": "Returns the PHP representation of a BSON value"
				},
				"mongodb-bson-binary.construct": {
					"tokens": [
						"MongoDB\\BSON\\Binary::__construct",
						"MongoDB\\BSON\\Binary::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-binary.construct",
					"name": "MongoDB\\BSON\\Binary::__construct",
					"description": "Construct a new Binary"
				},
				"mongodb-bson-binary.getdata": {
					"tokens": [
						"MongoDB\\BSON\\Binary::getData",
						"getData",
						"::getData"
					],
					"id": "mongodb-bson-binary.getdata",
					"name": "MongoDB\\BSON\\Binary::getData",
					"description": "Returns the Binary's data"
				},
				"mongodb-bson-binary.gettype": {
					"tokens": [
						"MongoDB\\BSON\\Binary::getType",
						"getType",
						"::getType"
					],
					"id": "mongodb-bson-binary.gettype",
					"name": "MongoDB\\BSON\\Binary::getType",
					"description": "Returns the Binary's type"
				},
				"mongodb-bson-javascript.construct": {
					"tokens": [
						"MongoDB\\BSON\\Javascript::__construct",
						"MongoDB\\BSON\\Javascript::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-javascript.construct",
					"name": "MongoDB\\BSON\\Javascript::__construct",
					"description": "Construct a new Javascript"
				},
				"mongodb-bson-maxkey.construct": {
					"tokens": [
						"MongoDB\\BSON\\MaxKey::__construct",
						"MongoDB\\BSON\\MaxKey::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-maxkey.construct",
					"name": "MongoDB\\BSON\\MaxKey::__construct",
					"description": "Construct a new MaxKey"
				},
				"mongodb-bson-minkey.construct": {
					"tokens": [
						"MongoDB\\BSON\\MinKey::__construct",
						"MongoDB\\BSON\\MinKey::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-minkey.construct",
					"name": "MongoDB\\BSON\\MinKey::__construct",
					"description": "Construct a new MinKey"
				},
				"mongodb-bson-objectid.construct": {
					"tokens": [
						"MongoDB\\BSON\\ObjectID::__construct",
						"MongoDB\\BSON\\ObjectID::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-objectid.construct",
					"name": "MongoDB\\BSON\\ObjectID::__construct",
					"description": "Construct a new ObjectID"
				},
				"mongodb-bson-objectid.tostring": {
					"tokens": [
						"MongoDB\\BSON\\ObjectID::__toString",
						"MongoDB\\BSON\\ObjectID::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodb-bson-objectid.tostring",
					"name": "MongoDB\\BSON\\ObjectID::__toString",
					"description": "Returns the hexidecimal representation of this ObjectID"
				},
				"mongodb-bson-regex.construct": {
					"tokens": [
						"MongoDB\\BSON\\Regex::__construct",
						"MongoDB\\BSON\\Regex::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-regex.construct",
					"name": "MongoDB\\BSON\\Regex::__construct",
					"description": "Construct a new Regex"
				},
				"mongodb-bson-regex.getflags": {
					"tokens": [
						"MongoDB\\BSON\\Regex::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "mongodb-bson-regex.getflags",
					"name": "MongoDB\\BSON\\Regex::getFlags",
					"description": "Returns the Regex's flags"
				},
				"mongodb-bson-regex.getpattern": {
					"tokens": [
						"MongoDB\\BSON\\Regex::getPattern",
						"getPattern",
						"::getPattern"
					],
					"id": "mongodb-bson-regex.getpattern",
					"name": "MongoDB\\BSON\\Regex::getPattern",
					"description": "Returns the Regex's pattern"
				},
				"mongodb-bson-regex.tostring": {
					"tokens": [
						"MongoDB\\BSON\\Regex::__toString",
						"MongoDB\\BSON\\Regex::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodb-bson-regex.tostring",
					"name": "MongoDB\\BSON\\Regex::__toString",
					"description": "Returns the string representation of this Regex"
				},
				"mongodb-bson-timestamp.construct": {
					"tokens": [
						"MongoDB\\BSON\\Timestamp::__construct",
						"MongoDB\\BSON\\Timestamp::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-timestamp.construct",
					"name": "MongoDB\\BSON\\Timestamp::__construct",
					"description": "Construct a new Timestamp"
				},
				"mongodb-bson-timestamp.tostring": {
					"tokens": [
						"MongoDB\\BSON\\Timestamp::__toString",
						"MongoDB\\BSON\\Timestamp::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodb-bson-timestamp.tostring",
					"name": "MongoDB\\BSON\\Timestamp::__toString",
					"description": "Returns the string representation of this Timestamp"
				},
				"mongodb-bson-utcdatetime.construct": {
					"tokens": [
						"MongoDB\\BSON\\UTCDateTime::__construct",
						"MongoDB\\BSON\\UTCDateTime::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mongodb-bson-utcdatetime.construct",
					"name": "MongoDB\\BSON\\UTCDateTime::__construct",
					"description": "Construct a new UTCDateTime"
				},
				"mongodb-bson-utcdatetime.todatetime": {
					"tokens": [
						"MongoDB\\BSON\\UTCDateTime::toDateTime",
						"toDateTime",
						"::toDateTime"
					],
					"id": "mongodb-bson-utcdatetime.todatetime",
					"name": "MongoDB\\BSON\\UTCDateTime::toDateTime",
					"description": "Returns the DateTime representation of this UTCDateTime"
				},
				"mongodb-bson-utcdatetime.tostring": {
					"tokens": [
						"MongoDB\\BSON\\UTCDateTime::__toString",
						"MongoDB\\BSON\\UTCDateTime::_toString",
						"__toString",
						"::__toString"
					],
					"id": "mongodb-bson-utcdatetime.tostring",
					"name": "MongoDB\\BSON\\UTCDateTime::__toString",
					"description": "Returns the string representation of this UTCDateTime"
				},
				"mongodb-bson-serializable.bsonserialize": {
					"tokens": [
						"MongoDB\\BSON\\Serializable::bsonSerialize",
						"bsonSerialize",
						"::bsonSerialize"
					],
					"id": "mongodb-bson-serializable.bsonserialize",
					"name": "MongoDB\\BSON\\Serializable::bsonSerialize",
					"description": "Provides an array or document to serialize as BSON"
				},
				"mongodb-bson-unserializable.bsonunserialize": {
					"tokens": [
						"MongoDB\\BSON\\Unserializable::bsonUnserialize",
						"bsonUnserialize",
						"::bsonUnserialize"
					],
					"id": "mongodb-bson-unserializable.bsonunserialize",
					"name": "MongoDB\\BSON\\Unserializable::bsonUnserialize",
					"description": "Constructs the object from a BSON array or document"
				},
				"mongodb-driver-writeexception.getwriteresult": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\WriteException::getWriteResult",
						"getWriteResult",
						"::getWriteResult"
					],
					"id": "mongodb-driver-writeexception.getwriteresult",
					"name": "MongoDB\\Driver\\Exception\\WriteException::getWriteResult",
					"description": "Returns the WriteResult for the failed write operation"
				},
				"function.msql-affected-rows": {
					"tokens": [
						"msql_affected_rows",
						"msqlaffected_rows"
					],
					"id": "function.msql-affected-rows",
					"name": "msql_affected_rows",
					"description": "Returns number of affected rows"
				},
				"function.msql-close": {
					"tokens": [
						"msql_close",
						"msqlclose"
					],
					"id": "function.msql-close",
					"name": "msql_close",
					"description": "Close mSQL connection"
				},
				"function.msql-connect": {
					"tokens": [
						"msql_connect",
						"msqlconnect"
					],
					"id": "function.msql-connect",
					"name": "msql_connect",
					"description": "Open mSQL connection"
				},
				"function.msql-create-db": {
					"tokens": [
						"msql_create_db",
						"msqlcreate_db"
					],
					"id": "function.msql-create-db",
					"name": "msql_create_db",
					"description": "Create mSQL database"
				},
				"function.msql-createdb": {
					"tokens": [
						"msql_createdb",
						"msqlcreatedb"
					],
					"id": "function.msql-createdb",
					"name": "msql_createdb",
					"description": "Alias of msql_create_db"
				},
				"function.msql-data-seek": {
					"tokens": [
						"msql_data_seek",
						"msqldata_seek"
					],
					"id": "function.msql-data-seek",
					"name": "msql_data_seek",
					"description": "Move internal row pointer"
				},
				"function.msql-db-query": {
					"tokens": [
						"msql_db_query",
						"msqldb_query"
					],
					"id": "function.msql-db-query",
					"name": "msql_db_query",
					"description": "Send mSQL query"
				},
				"function.msql-dbname": {
					"tokens": [
						"msql_dbname",
						"msqldbname"
					],
					"id": "function.msql-dbname",
					"name": "msql_dbname",
					"description": "Alias of msql_result"
				},
				"function.msql-drop-db": {
					"tokens": [
						"msql_drop_db",
						"msqldrop_db"
					],
					"id": "function.msql-drop-db",
					"name": "msql_drop_db",
					"description": "Drop (delete) mSQL database"
				},
				"function.msql-error": {
					"tokens": [
						"msql_error",
						"msqlerror"
					],
					"id": "function.msql-error",
					"name": "msql_error",
					"description": "Returns error message of last msql call"
				},
				"function.msql-fetch-array": {
					"tokens": [
						"msql_fetch_array",
						"msqlfetch_array"
					],
					"id": "function.msql-fetch-array",
					"name": "msql_fetch_array",
					"description": "Fetch row as array"
				},
				"function.msql-fetch-field": {
					"tokens": [
						"msql_fetch_field",
						"msqlfetch_field"
					],
					"id": "function.msql-fetch-field",
					"name": "msql_fetch_field",
					"description": "Get field information"
				},
				"function.msql-fetch-object": {
					"tokens": [
						"msql_fetch_object",
						"msqlfetch_object"
					],
					"id": "function.msql-fetch-object",
					"name": "msql_fetch_object",
					"description": "Fetch row as object"
				},
				"function.msql-fetch-row": {
					"tokens": [
						"msql_fetch_row",
						"msqlfetch_row"
					],
					"id": "function.msql-fetch-row",
					"name": "msql_fetch_row",
					"description": "Get row as enumerated array"
				},
				"function.msql-field-flags": {
					"tokens": [
						"msql_field_flags",
						"msqlfield_flags"
					],
					"id": "function.msql-field-flags",
					"name": "msql_field_flags",
					"description": "Get field flags"
				},
				"function.msql-field-len": {
					"tokens": [
						"msql_field_len",
						"msqlfield_len"
					],
					"id": "function.msql-field-len",
					"name": "msql_field_len",
					"description": "Get field length"
				},
				"function.msql-field-name": {
					"tokens": [
						"msql_field_name",
						"msqlfield_name"
					],
					"id": "function.msql-field-name",
					"name": "msql_field_name",
					"description": "Get the name of the specified field in a result"
				},
				"function.msql-field-seek": {
					"tokens": [
						"msql_field_seek",
						"msqlfield_seek"
					],
					"id": "function.msql-field-seek",
					"name": "msql_field_seek",
					"description": "Set field offset"
				},
				"function.msql-field-table": {
					"tokens": [
						"msql_field_table",
						"msqlfield_table"
					],
					"id": "function.msql-field-table",
					"name": "msql_field_table",
					"description": "Get table name for field"
				},
				"function.msql-field-type": {
					"tokens": [
						"msql_field_type",
						"msqlfield_type"
					],
					"id": "function.msql-field-type",
					"name": "msql_field_type",
					"description": "Get field type"
				},
				"function.msql-fieldflags": {
					"tokens": [
						"msql_fieldflags",
						"msqlfieldflags"
					],
					"id": "function.msql-fieldflags",
					"name": "msql_fieldflags",
					"description": "Alias of msql_field_flags"
				},
				"function.msql-fieldlen": {
					"tokens": [
						"msql_fieldlen",
						"msqlfieldlen"
					],
					"id": "function.msql-fieldlen",
					"name": "msql_fieldlen",
					"description": "Alias of msql_field_len"
				},
				"function.msql-fieldname": {
					"tokens": [
						"msql_fieldname",
						"msqlfieldname"
					],
					"id": "function.msql-fieldname",
					"name": "msql_fieldname",
					"description": "Alias of msql_field_name"
				},
				"function.msql-fieldtable": {
					"tokens": [
						"msql_fieldtable",
						"msqlfieldtable"
					],
					"id": "function.msql-fieldtable",
					"name": "msql_fieldtable",
					"description": "Alias of msql_field_table"
				},
				"function.msql-fieldtype": {
					"tokens": [
						"msql_fieldtype",
						"msqlfieldtype"
					],
					"id": "function.msql-fieldtype",
					"name": "msql_fieldtype",
					"description": "Alias of msql_field_type"
				},
				"function.msql-free-result": {
					"tokens": [
						"msql_free_result",
						"msqlfree_result"
					],
					"id": "function.msql-free-result",
					"name": "msql_free_result",
					"description": "Free result memory"
				},
				"function.msql-list-dbs": {
					"tokens": [
						"msql_list_dbs",
						"msqllist_dbs"
					],
					"id": "function.msql-list-dbs",
					"name": "msql_list_dbs",
					"description": "List mSQL databases on server"
				},
				"function.msql-list-fields": {
					"tokens": [
						"msql_list_fields",
						"msqllist_fields"
					],
					"id": "function.msql-list-fields",
					"name": "msql_list_fields",
					"description": "List result fields"
				},
				"function.msql-list-tables": {
					"tokens": [
						"msql_list_tables",
						"msqllist_tables"
					],
					"id": "function.msql-list-tables",
					"name": "msql_list_tables",
					"description": "List tables in an mSQL database"
				},
				"function.msql-num-fields": {
					"tokens": [
						"msql_num_fields",
						"msqlnum_fields"
					],
					"id": "function.msql-num-fields",
					"name": "msql_num_fields",
					"description": "Get number of fields in result"
				},
				"function.msql-num-rows": {
					"tokens": [
						"msql_num_rows",
						"msqlnum_rows"
					],
					"id": "function.msql-num-rows",
					"name": "msql_num_rows",
					"description": "Get number of rows in result"
				},
				"function.msql-numfields": {
					"tokens": [
						"msql_numfields",
						"msqlnumfields"
					],
					"id": "function.msql-numfields",
					"name": "msql_numfields",
					"description": "Alias of msql_num_fields"
				},
				"function.msql-numrows": {
					"tokens": [
						"msql_numrows",
						"msqlnumrows"
					],
					"id": "function.msql-numrows",
					"name": "msql_numrows",
					"description": "Alias of msql_num_rows"
				},
				"function.msql-pconnect": {
					"tokens": [
						"msql_pconnect",
						"msqlpconnect"
					],
					"id": "function.msql-pconnect",
					"name": "msql_pconnect",
					"description": "Open persistent mSQL connection"
				},
				"function.msql-query": {
					"tokens": [
						"msql_query",
						"msqlquery"
					],
					"id": "function.msql-query",
					"name": "msql_query",
					"description": "Send mSQL query"
				},
				"function.msql-regcase": {
					"tokens": [
						"msql_regcase",
						"msqlregcase"
					],
					"id": "function.msql-regcase",
					"name": "msql_regcase",
					"description": "Alias of sql_regcase"
				},
				"function.msql-result": {
					"tokens": [
						"msql_result",
						"msqlresult"
					],
					"id": "function.msql-result",
					"name": "msql_result",
					"description": "Get result data"
				},
				"function.msql-select-db": {
					"tokens": [
						"msql_select_db",
						"msqlselect_db"
					],
					"id": "function.msql-select-db",
					"name": "msql_select_db",
					"description": "Select mSQL database"
				},
				"function.msql-tablename": {
					"tokens": [
						"msql_tablename",
						"msqltablename"
					],
					"id": "function.msql-tablename",
					"name": "msql_tablename",
					"description": "Alias of msql_result"
				},
				"function.msql": {
					"tokens": [
						"msql"
					],
					"id": "function.msql",
					"name": "msql",
					"description": "Alias of msql_db_query"
				},
				"function.mssql-bind": {
					"tokens": [
						"mssql_bind",
						"mssqlbind"
					],
					"id": "function.mssql-bind",
					"name": "mssql_bind",
					"description": "Adds a parameter to a stored procedure or a remote stored procedure"
				},
				"function.mssql-close": {
					"tokens": [
						"mssql_close",
						"mssqlclose"
					],
					"id": "function.mssql-close",
					"name": "mssql_close",
					"description": "Close MS SQL Server connection"
				},
				"function.mssql-connect": {
					"tokens": [
						"mssql_connect",
						"mssqlconnect"
					],
					"id": "function.mssql-connect",
					"name": "mssql_connect",
					"description": "Open MS SQL server connection"
				},
				"function.mssql-data-seek": {
					"tokens": [
						"mssql_data_seek",
						"mssqldata_seek"
					],
					"id": "function.mssql-data-seek",
					"name": "mssql_data_seek",
					"description": "Moves internal row pointer"
				},
				"function.mssql-execute": {
					"tokens": [
						"mssql_execute",
						"mssqlexecute"
					],
					"id": "function.mssql-execute",
					"name": "mssql_execute",
					"description": "Executes a stored procedure on a MS SQL server database"
				},
				"function.mssql-fetch-array": {
					"tokens": [
						"mssql_fetch_array",
						"mssqlfetch_array"
					],
					"id": "function.mssql-fetch-array",
					"name": "mssql_fetch_array",
					"description": "Fetch a result row as an associative array, a numeric array, or both"
				},
				"function.mssql-fetch-assoc": {
					"tokens": [
						"mssql_fetch_assoc",
						"mssqlfetch_assoc"
					],
					"id": "function.mssql-fetch-assoc",
					"name": "mssql_fetch_assoc",
					"description": "Returns an associative array of the current row in the result"
				},
				"function.mssql-fetch-batch": {
					"tokens": [
						"mssql_fetch_batch",
						"mssqlfetch_batch"
					],
					"id": "function.mssql-fetch-batch",
					"name": "mssql_fetch_batch",
					"description": "Returns the next batch of records"
				},
				"function.mssql-fetch-field": {
					"tokens": [
						"mssql_fetch_field",
						"mssqlfetch_field"
					],
					"id": "function.mssql-fetch-field",
					"name": "mssql_fetch_field",
					"description": "Get field information"
				},
				"function.mssql-fetch-object": {
					"tokens": [
						"mssql_fetch_object",
						"mssqlfetch_object"
					],
					"id": "function.mssql-fetch-object",
					"name": "mssql_fetch_object",
					"description": "Fetch row as object"
				},
				"function.mssql-fetch-row": {
					"tokens": [
						"mssql_fetch_row",
						"mssqlfetch_row"
					],
					"id": "function.mssql-fetch-row",
					"name": "mssql_fetch_row",
					"description": "Get row as enumerated array"
				},
				"function.mssql-field-length": {
					"tokens": [
						"mssql_field_length",
						"mssqlfield_length"
					],
					"id": "function.mssql-field-length",
					"name": "mssql_field_length",
					"description": "Get the length of a field"
				},
				"function.mssql-field-name": {
					"tokens": [
						"mssql_field_name",
						"mssqlfield_name"
					],
					"id": "function.mssql-field-name",
					"name": "mssql_field_name",
					"description": "Get the name of a field"
				},
				"function.mssql-field-seek": {
					"tokens": [
						"mssql_field_seek",
						"mssqlfield_seek"
					],
					"id": "function.mssql-field-seek",
					"name": "mssql_field_seek",
					"description": "Seeks to the specified field offset"
				},
				"function.mssql-field-type": {
					"tokens": [
						"mssql_field_type",
						"mssqlfield_type"
					],
					"id": "function.mssql-field-type",
					"name": "mssql_field_type",
					"description": "Gets the type of a field"
				},
				"function.mssql-free-result": {
					"tokens": [
						"mssql_free_result",
						"mssqlfree_result"
					],
					"id": "function.mssql-free-result",
					"name": "mssql_free_result",
					"description": "Free result memory"
				},
				"function.mssql-free-statement": {
					"tokens": [
						"mssql_free_statement",
						"mssqlfree_statement"
					],
					"id": "function.mssql-free-statement",
					"name": "mssql_free_statement",
					"description": "Free statement memory"
				},
				"function.mssql-get-last-message": {
					"tokens": [
						"mssql_get_last_message",
						"mssqlget_last_message"
					],
					"id": "function.mssql-get-last-message",
					"name": "mssql_get_last_message",
					"description": "Returns the last message from the server"
				},
				"function.mssql-guid-string": {
					"tokens": [
						"mssql_guid_string",
						"mssqlguid_string"
					],
					"id": "function.mssql-guid-string",
					"name": "mssql_guid_string",
					"description": "Converts a 16 byte binary GUID to a string"
				},
				"function.mssql-init": {
					"tokens": [
						"mssql_init",
						"mssqlinit"
					],
					"id": "function.mssql-init",
					"name": "mssql_init",
					"description": "Initializes a stored procedure or a remote stored procedure"
				},
				"function.mssql-min-error-severity": {
					"tokens": [
						"mssql_min_error_severity",
						"mssqlmin_error_severity"
					],
					"id": "function.mssql-min-error-severity",
					"name": "mssql_min_error_severity",
					"description": "Sets the minimum error severity"
				},
				"function.mssql-min-message-severity": {
					"tokens": [
						"mssql_min_message_severity",
						"mssqlmin_message_severity"
					],
					"id": "function.mssql-min-message-severity",
					"name": "mssql_min_message_severity",
					"description": "Sets the minimum message severity"
				},
				"function.mssql-next-result": {
					"tokens": [
						"mssql_next_result",
						"mssqlnext_result"
					],
					"id": "function.mssql-next-result",
					"name": "mssql_next_result",
					"description": "Move the internal result pointer to the next result"
				},
				"function.mssql-num-fields": {
					"tokens": [
						"mssql_num_fields",
						"mssqlnum_fields"
					],
					"id": "function.mssql-num-fields",
					"name": "mssql_num_fields",
					"description": "Gets the number of fields in result"
				},
				"function.mssql-num-rows": {
					"tokens": [
						"mssql_num_rows",
						"mssqlnum_rows"
					],
					"id": "function.mssql-num-rows",
					"name": "mssql_num_rows",
					"description": "Gets the number of rows in result"
				},
				"function.mssql-pconnect": {
					"tokens": [
						"mssql_pconnect",
						"mssqlpconnect"
					],
					"id": "function.mssql-pconnect",
					"name": "mssql_pconnect",
					"description": "Open persistent MS SQL connection"
				},
				"function.mssql-query": {
					"tokens": [
						"mssql_query",
						"mssqlquery"
					],
					"id": "function.mssql-query",
					"name": "mssql_query",
					"description": "Send MS SQL query"
				},
				"function.mssql-result": {
					"tokens": [
						"mssql_result",
						"mssqlresult"
					],
					"id": "function.mssql-result",
					"name": "mssql_result",
					"description": "Get result data"
				},
				"function.mssql-rows-affected": {
					"tokens": [
						"mssql_rows_affected",
						"mssqlrows_affected"
					],
					"id": "function.mssql-rows-affected",
					"name": "mssql_rows_affected",
					"description": "Returns the number of records affected by the query"
				},
				"function.mssql-select-db": {
					"tokens": [
						"mssql_select_db",
						"mssqlselect_db"
					],
					"id": "function.mssql-select-db",
					"name": "mssql_select_db",
					"description": "Select MS SQL database"
				},
				"mysqli.affected-rows": {
					"tokens": [
						"mysqli::$affected_rows",
						"mysqli::$affectedrows",
						"$affected_rows",
						"::$affected_rows"
					],
					"id": "mysqli.affected-rows",
					"name": "mysqli::$affected_rows",
					"description": "Gets the number of affected rows in a previous MySQL operation"
				},
				"mysqli.autocommit": {
					"tokens": [
						"mysqli::autocommit",
						"autocommit",
						"::autocommit"
					],
					"id": "mysqli.autocommit",
					"name": "mysqli::autocommit",
					"description": "Turns on or off auto-committing database modifications"
				},
				"mysqli.begin-transaction": {
					"tokens": [
						"mysqli::begin_transaction",
						"mysqli::begintransaction",
						"begin_transaction",
						"::begin_transaction"
					],
					"id": "mysqli.begin-transaction",
					"name": "mysqli::begin_transaction",
					"description": "Starts a transaction"
				},
				"mysqli.change-user": {
					"tokens": [
						"mysqli::change_user",
						"mysqli::changeuser",
						"change_user",
						"::change_user"
					],
					"id": "mysqli.change-user",
					"name": "mysqli::change_user",
					"description": "Changes the user of the specified database connection"
				},
				"mysqli.character-set-name": {
					"tokens": [
						"mysqli::character_set_name",
						"mysqli::characterset_name",
						"character_set_name",
						"::character_set_name"
					],
					"id": "mysqli.character-set-name",
					"name": "mysqli::character_set_name",
					"description": "Returns the default character set for the database connection"
				},
				"mysqli.client-info": {
					"tokens": [
						"mysqli::$client_info",
						"mysqli::$clientinfo",
						"$client_info",
						"::$client_info"
					],
					"id": "mysqli.client-info",
					"name": "mysqli::$client_info",
					"description": "Get MySQL client info"
				},
				"mysqli.client-version": {
					"tokens": [
						"mysqli::$client_version",
						"mysqli::$clientversion",
						"$client_version",
						"::$client_version"
					],
					"id": "mysqli.client-version",
					"name": "mysqli::$client_version",
					"description": "Returns the MySQL client version as a string"
				},
				"mysqli.close": {
					"tokens": [
						"mysqli::close",
						"close",
						"::close"
					],
					"id": "mysqli.close",
					"name": "mysqli::close",
					"description": "Closes a previously opened database connection"
				},
				"mysqli.commit": {
					"tokens": [
						"mysqli::commit",
						"commit",
						"::commit"
					],
					"id": "mysqli.commit",
					"name": "mysqli::commit",
					"description": "Commits the current transaction"
				},
				"mysqli.connect-errno": {
					"tokens": [
						"mysqli::$connect_errno",
						"mysqli::$connecterrno",
						"$connect_errno",
						"::$connect_errno"
					],
					"id": "mysqli.connect-errno",
					"name": "mysqli::$connect_errno",
					"description": "Returns the error code from last connect call"
				},
				"mysqli.connect-error": {
					"tokens": [
						"mysqli::$connect_error",
						"mysqli::$connecterror",
						"$connect_error",
						"::$connect_error"
					],
					"id": "mysqli.connect-error",
					"name": "mysqli::$connect_error",
					"description": "Returns a string description of the last connect error"
				},
				"mysqli.construct": {
					"tokens": [
						"mysqli::__construct",
						"mysqli::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mysqli.construct",
					"name": "mysqli::__construct",
					"description": "Open a new connection to the MySQL server"
				},
				"mysqli.debug": {
					"tokens": [
						"mysqli::debug",
						"debug",
						"::debug"
					],
					"id": "mysqli.debug",
					"name": "mysqli::debug",
					"description": "Performs debugging operations"
				},
				"mysqli.dump-debug-info": {
					"tokens": [
						"mysqli::dump_debug_info",
						"mysqli::dumpdebug_info",
						"dump_debug_info",
						"::dump_debug_info"
					],
					"id": "mysqli.dump-debug-info",
					"name": "mysqli::dump_debug_info",
					"description": "Dump debugging information into the log"
				},
				"mysqli.errno": {
					"tokens": [
						"mysqli::$errno",
						"$errno",
						"::$errno"
					],
					"id": "mysqli.errno",
					"name": "mysqli::$errno",
					"description": "Returns the error code for the most recent function call"
				},
				"mysqli.error-list": {
					"tokens": [
						"mysqli::$error_list",
						"mysqli::$errorlist",
						"$error_list",
						"::$error_list"
					],
					"id": "mysqli.error-list",
					"name": "mysqli::$error_list",
					"description": "Returns a list of errors from the last command executed"
				},
				"mysqli.error": {
					"tokens": [
						"mysqli::$error",
						"$error",
						"::$error"
					],
					"id": "mysqli.error",
					"name": "mysqli::$error",
					"description": "Returns a string description of the last error"
				},
				"mysqli.field-count": {
					"tokens": [
						"mysqli::$field_count",
						"mysqli::$fieldcount",
						"$field_count",
						"::$field_count"
					],
					"id": "mysqli.field-count",
					"name": "mysqli::$field_count",
					"description": "Returns the number of columns for the most recent query"
				},
				"mysqli.get-charset": {
					"tokens": [
						"mysqli::get_charset",
						"mysqli::getcharset",
						"get_charset",
						"::get_charset"
					],
					"id": "mysqli.get-charset",
					"name": "mysqli::get_charset",
					"description": "Returns a character set object"
				},
				"mysqli.get-client-info": {
					"tokens": [
						"mysqli::get_client_info",
						"mysqli::getclient_info",
						"get_client_info",
						"::get_client_info"
					],
					"id": "mysqli.get-client-info",
					"name": "mysqli::get_client_info",
					"description": "Get MySQL client info"
				},
				"mysqli.get-client-stats": {
					"tokens": [
						"mysqli_get_client_stats",
						"mysqliget_client_stats"
					],
					"id": "mysqli.get-client-stats",
					"name": "mysqli_get_client_stats",
					"description": "Returns client per-process statistics"
				},
				"mysqli.get-client-version": {
					"tokens": [
						"mysqli_get_client_version",
						"mysqliget_client_version"
					],
					"id": "mysqli.get-client-version",
					"name": "mysqli_get_client_version",
					"description": "Returns the MySQL client version as an integer"
				},
				"mysqli.get-connection-stats": {
					"tokens": [
						"mysqli::get_connection_stats",
						"mysqli::getconnection_stats",
						"get_connection_stats",
						"::get_connection_stats"
					],
					"id": "mysqli.get-connection-stats",
					"name": "mysqli::get_connection_stats",
					"description": "Returns statistics about the client connection"
				},
				"mysqli.get-host-info": {
					"tokens": [
						"mysqli::$host_info",
						"mysqli::$hostinfo",
						"$host_info",
						"::$host_info"
					],
					"id": "mysqli.get-host-info",
					"name": "mysqli::$host_info",
					"description": "Returns a string representing the type of connection used"
				},
				"mysqli.get-proto-info": {
					"tokens": [
						"mysqli::$protocol_version",
						"mysqli::$protocolversion",
						"$protocol_version",
						"::$protocol_version"
					],
					"id": "mysqli.get-proto-info",
					"name": "mysqli::$protocol_version",
					"description": "Returns the version of the MySQL protocol used"
				},
				"mysqli.get-server-info": {
					"tokens": [
						"mysqli::$server_info",
						"mysqli::$serverinfo",
						"$server_info",
						"::$server_info"
					],
					"id": "mysqli.get-server-info",
					"name": "mysqli::$server_info",
					"description": "Returns the version of the MySQL server"
				},
				"mysqli.get-server-version": {
					"tokens": [
						"mysqli::$server_version",
						"mysqli::$serverversion",
						"$server_version",
						"::$server_version"
					],
					"id": "mysqli.get-server-version",
					"name": "mysqli::$server_version",
					"description": "Returns the version of the MySQL server as an integer"
				},
				"mysqli.get-warnings": {
					"tokens": [
						"mysqli::get_warnings",
						"mysqli::getwarnings",
						"get_warnings",
						"::get_warnings"
					],
					"id": "mysqli.get-warnings",
					"name": "mysqli::get_warnings",
					"description": "Get result of SHOW WARNINGS"
				},
				"mysqli.info": {
					"tokens": [
						"mysqli::$info",
						"$info",
						"::$info"
					],
					"id": "mysqli.info",
					"name": "mysqli::$info",
					"description": "Retrieves information about the most recently executed query"
				},
				"mysqli.init": {
					"tokens": [
						"mysqli::init",
						"init",
						"::init"
					],
					"id": "mysqli.init",
					"name": "mysqli::init",
					"description": "Initializes MySQLi and returns a resource for use with mysqli_real_connect()"
				},
				"mysqli.insert-id": {
					"tokens": [
						"mysqli::$insert_id",
						"mysqli::$insertid",
						"$insert_id",
						"::$insert_id"
					],
					"id": "mysqli.insert-id",
					"name": "mysqli::$insert_id",
					"description": "Returns the auto generated id used in the last query"
				},
				"mysqli.kill": {
					"tokens": [
						"mysqli::kill",
						"kill",
						"::kill"
					],
					"id": "mysqli.kill",
					"name": "mysqli::kill",
					"description": "Asks the server to kill a MySQL thread"
				},
				"mysqli.more-results": {
					"tokens": [
						"mysqli::more_results",
						"mysqli::moreresults",
						"more_results",
						"::more_results"
					],
					"id": "mysqli.more-results",
					"name": "mysqli::more_results",
					"description": "Check if there are any more query results from a multi query"
				},
				"mysqli.multi-query": {
					"tokens": [
						"mysqli::multi_query",
						"mysqli::multiquery",
						"multi_query",
						"::multi_query"
					],
					"id": "mysqli.multi-query",
					"name": "mysqli::multi_query",
					"description": "Performs a query on the database"
				},
				"mysqli.next-result": {
					"tokens": [
						"mysqli::next_result",
						"mysqli::nextresult",
						"next_result",
						"::next_result"
					],
					"id": "mysqli.next-result",
					"name": "mysqli::next_result",
					"description": "Prepare next result from multi_query"
				},
				"mysqli.options": {
					"tokens": [
						"mysqli::options",
						"options",
						"::options"
					],
					"id": "mysqli.options",
					"name": "mysqli::options",
					"description": "Set options"
				},
				"mysqli.ping": {
					"tokens": [
						"mysqli::ping",
						"ping",
						"::ping"
					],
					"id": "mysqli.ping",
					"name": "mysqli::ping",
					"description": "Pings a server connection, or tries to reconnect if the connection has gone down"
				},
				"mysqli.poll": {
					"tokens": [
						"mysqli::poll",
						"poll",
						"::poll"
					],
					"id": "mysqli.poll",
					"name": "mysqli::poll",
					"description": "Poll connections"
				},
				"mysqli.prepare": {
					"tokens": [
						"mysqli::prepare",
						"prepare",
						"::prepare"
					],
					"id": "mysqli.prepare",
					"name": "mysqli::prepare",
					"description": "Prepare an SQL statement for execution"
				},
				"mysqli.query": {
					"tokens": [
						"mysqli::query",
						"query",
						"::query"
					],
					"id": "mysqli.query",
					"name": "mysqli::query",
					"description": "Performs a query on the database"
				},
				"mysqli.real-connect": {
					"tokens": [
						"mysqli::real_connect",
						"mysqli::realconnect",
						"real_connect",
						"::real_connect"
					],
					"id": "mysqli.real-connect",
					"name": "mysqli::real_connect",
					"description": "Opens a connection to a mysql server"
				},
				"mysqli.real-escape-string": {
					"tokens": [
						"mysqli::real_escape_string",
						"mysqli::realescape_string",
						"real_escape_string",
						"::real_escape_string"
					],
					"id": "mysqli.real-escape-string",
					"name": "mysqli::real_escape_string",
					"description": "Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection"
				},
				"mysqli.real-query": {
					"tokens": [
						"mysqli::real_query",
						"mysqli::realquery",
						"real_query",
						"::real_query"
					],
					"id": "mysqli.real-query",
					"name": "mysqli::real_query",
					"description": "Execute an SQL query"
				},
				"mysqli.reap-async-query": {
					"tokens": [
						"mysqli::reap_async_query",
						"mysqli::reapasync_query",
						"reap_async_query",
						"::reap_async_query"
					],
					"id": "mysqli.reap-async-query",
					"name": "mysqli::reap_async_query",
					"description": "Get result from async query"
				},
				"mysqli.refresh": {
					"tokens": [
						"mysqli::refresh",
						"refresh",
						"::refresh"
					],
					"id": "mysqli.refresh",
					"name": "mysqli::refresh",
					"description": "Refreshes"
				},
				"mysqli.release-savepoint": {
					"tokens": [
						"mysqli::release_savepoint",
						"mysqli::releasesavepoint",
						"release_savepoint",
						"::release_savepoint"
					],
					"id": "mysqli.release-savepoint",
					"name": "mysqli::release_savepoint",
					"description": "Removes the named savepoint from the set of savepoints of the current transaction"
				},
				"mysqli.rollback": {
					"tokens": [
						"mysqli::rollback",
						"rollback",
						"::rollback"
					],
					"id": "mysqli.rollback",
					"name": "mysqli::rollback",
					"description": "Rolls back current transaction"
				},
				"mysqli.rpl-query-type": {
					"tokens": [
						"mysqli::rpl_query_type",
						"mysqli::rplquery_type",
						"rpl_query_type",
						"::rpl_query_type"
					],
					"id": "mysqli.rpl-query-type",
					"name": "mysqli::rpl_query_type",
					"description": "Returns RPL query type"
				},
				"mysqli.savepoint": {
					"tokens": [
						"mysqli::savepoint",
						"savepoint",
						"::savepoint"
					],
					"id": "mysqli.savepoint",
					"name": "mysqli::savepoint",
					"description": "Set a named transaction savepoint"
				},
				"mysqli.select-db": {
					"tokens": [
						"mysqli::select_db",
						"mysqli::selectdb",
						"select_db",
						"::select_db"
					],
					"id": "mysqli.select-db",
					"name": "mysqli::select_db",
					"description": "Selects the default database for database queries"
				},
				"mysqli.send-query": {
					"tokens": [
						"mysqli::send_query",
						"mysqli::sendquery",
						"send_query",
						"::send_query"
					],
					"id": "mysqli.send-query",
					"name": "mysqli::send_query",
					"description": "Send the query and return"
				},
				"mysqli.set-charset": {
					"tokens": [
						"mysqli::set_charset",
						"mysqli::setcharset",
						"set_charset",
						"::set_charset"
					],
					"id": "mysqli.set-charset",
					"name": "mysqli::set_charset",
					"description": "Sets the default client character set"
				},
				"mysqli.set-local-infile-default": {
					"tokens": [
						"mysqli::set_local_infile_default",
						"mysqli::setlocal_infile_default",
						"set_local_infile_default",
						"::set_local_infile_default"
					],
					"id": "mysqli.set-local-infile-default",
					"name": "mysqli::set_local_infile_default",
					"description": "Unsets user defined handler for load local infile command"
				},
				"mysqli.set-local-infile-handler": {
					"tokens": [
						"mysqli::set_local_infile_handler",
						"mysqli::setlocal_infile_handler",
						"set_local_infile_handler",
						"::set_local_infile_handler"
					],
					"id": "mysqli.set-local-infile-handler",
					"name": "mysqli::set_local_infile_handler",
					"description": "Set callback function for LOAD DATA LOCAL INFILE command"
				},
				"mysqli.sqlstate": {
					"tokens": [
						"mysqli::$sqlstate",
						"$sqlstate",
						"::$sqlstate"
					],
					"id": "mysqli.sqlstate",
					"name": "mysqli::$sqlstate",
					"description": "Returns the SQLSTATE error from previous MySQL operation"
				},
				"mysqli.ssl-set": {
					"tokens": [
						"mysqli::ssl_set",
						"mysqli::sslset",
						"ssl_set",
						"::ssl_set"
					],
					"id": "mysqli.ssl-set",
					"name": "mysqli::ssl_set",
					"description": "Used for establishing secure connections using SSL"
				},
				"mysqli.stat": {
					"tokens": [
						"mysqli::stat",
						"stat",
						"::stat"
					],
					"id": "mysqli.stat",
					"name": "mysqli::stat",
					"description": "Gets the current system status"
				},
				"mysqli.stmt-init": {
					"tokens": [
						"mysqli::stmt_init",
						"mysqli::stmtinit",
						"stmt_init",
						"::stmt_init"
					],
					"id": "mysqli.stmt-init",
					"name": "mysqli::stmt_init",
					"description": "Initializes a statement and returns an object for use with mysqli_stmt_prepare"
				},
				"mysqli.store-result": {
					"tokens": [
						"mysqli::store_result",
						"mysqli::storeresult",
						"store_result",
						"::store_result"
					],
					"id": "mysqli.store-result",
					"name": "mysqli::store_result",
					"description": "Transfers a result set from the last query"
				},
				"mysqli.thread-id": {
					"tokens": [
						"mysqli::$thread_id",
						"mysqli::$threadid",
						"$thread_id",
						"::$thread_id"
					],
					"id": "mysqli.thread-id",
					"name": "mysqli::$thread_id",
					"description": "Returns the thread ID for the current connection"
				},
				"mysqli.thread-safe": {
					"tokens": [
						"mysqli::thread_safe",
						"mysqli::threadsafe",
						"thread_safe",
						"::thread_safe"
					],
					"id": "mysqli.thread-safe",
					"name": "mysqli::thread_safe",
					"description": "Returns whether thread safety is given or not"
				},
				"mysqli.use-result": {
					"tokens": [
						"mysqli::use_result",
						"mysqli::useresult",
						"use_result",
						"::use_result"
					],
					"id": "mysqli.use-result",
					"name": "mysqli::use_result",
					"description": "Initiate a result set retrieval"
				},
				"mysqli.warning-count": {
					"tokens": [
						"mysqli::$warning_count",
						"mysqli::$warningcount",
						"$warning_count",
						"::$warning_count"
					],
					"id": "mysqli.warning-count",
					"name": "mysqli::$warning_count",
					"description": "Returns the number of warnings from the last query for the given link"
				},
				"mysqli-stmt.affected-rows": {
					"tokens": [
						"mysqli_stmt::$affected_rows",
						"mysqlistmt::$affected_rows",
						"$affected_rows",
						"::$affected_rows"
					],
					"id": "mysqli-stmt.affected-rows",
					"name": "mysqli_stmt::$affected_rows",
					"description": "Returns the total number of rows changed, deleted, or\n  inserted by the last executed statement"
				},
				"mysqli-stmt.attr-get": {
					"tokens": [
						"mysqli_stmt::attr_get",
						"mysqlistmt::attr_get",
						"attr_get",
						"::attr_get"
					],
					"id": "mysqli-stmt.attr-get",
					"name": "mysqli_stmt::attr_get",
					"description": "Used to get the current value of a statement attribute"
				},
				"mysqli-stmt.attr-set": {
					"tokens": [
						"mysqli_stmt::attr_set",
						"mysqlistmt::attr_set",
						"attr_set",
						"::attr_set"
					],
					"id": "mysqli-stmt.attr-set",
					"name": "mysqli_stmt::attr_set",
					"description": "Used to modify the behavior of a prepared statement"
				},
				"mysqli-stmt.bind-param": {
					"tokens": [
						"mysqli_stmt::bind_param",
						"mysqlistmt::bind_param",
						"bind_param",
						"::bind_param"
					],
					"id": "mysqli-stmt.bind-param",
					"name": "mysqli_stmt::bind_param",
					"description": "Binds variables to a prepared statement as parameters"
				},
				"mysqli-stmt.bind-result": {
					"tokens": [
						"mysqli_stmt::bind_result",
						"mysqlistmt::bind_result",
						"bind_result",
						"::bind_result"
					],
					"id": "mysqli-stmt.bind-result",
					"name": "mysqli_stmt::bind_result",
					"description": "Binds variables to a prepared statement for result storage"
				},
				"mysqli-stmt.close": {
					"tokens": [
						"mysqli_stmt::close",
						"mysqlistmt::close",
						"close",
						"::close"
					],
					"id": "mysqli-stmt.close",
					"name": "mysqli_stmt::close",
					"description": "Closes a prepared statement"
				},
				"mysqli-stmt.construct": {
					"tokens": [
						"mysqli_stmt::__construct",
						"mysqlistmt::__construct",
						"__construct",
						"::__construct"
					],
					"id": "mysqli-stmt.construct",
					"name": "mysqli_stmt::__construct",
					"description": "Constructs a new mysqli_stmt object"
				},
				"mysqli-stmt.data-seek": {
					"tokens": [
						"mysqli_stmt::data_seek",
						"mysqlistmt::data_seek",
						"data_seek",
						"::data_seek"
					],
					"id": "mysqli-stmt.data-seek",
					"name": "mysqli_stmt::data_seek",
					"description": "Seeks to an arbitrary row in statement result set"
				},
				"mysqli-stmt.errno": {
					"tokens": [
						"mysqli_stmt::$errno",
						"mysqlistmt::$errno",
						"$errno",
						"::$errno"
					],
					"id": "mysqli-stmt.errno",
					"name": "mysqli_stmt::$errno",
					"description": "Returns the error code for the most recent statement call"
				},
				"mysqli-stmt.error-list": {
					"tokens": [
						"mysqli_stmt::$error_list",
						"mysqlistmt::$error_list",
						"$error_list",
						"::$error_list"
					],
					"id": "mysqli-stmt.error-list",
					"name": "mysqli_stmt::$error_list",
					"description": "Returns a list of errors from the last statement executed"
				},
				"mysqli-stmt.error": {
					"tokens": [
						"mysqli_stmt::$error",
						"mysqlistmt::$error",
						"$error",
						"::$error"
					],
					"id": "mysqli-stmt.error",
					"name": "mysqli_stmt::$error",
					"description": "Returns a string description for last statement error"
				},
				"mysqli-stmt.execute": {
					"tokens": [
						"mysqli_stmt::execute",
						"mysqlistmt::execute",
						"execute",
						"::execute"
					],
					"id": "mysqli-stmt.execute",
					"name": "mysqli_stmt::execute",
					"description": "Executes a prepared Query"
				},
				"mysqli-stmt.fetch": {
					"tokens": [
						"mysqli_stmt::fetch",
						"mysqlistmt::fetch",
						"fetch",
						"::fetch"
					],
					"id": "mysqli-stmt.fetch",
					"name": "mysqli_stmt::fetch",
					"description": "Fetch results from a prepared statement into the bound variables"
				},
				"mysqli-stmt.field-count": {
					"tokens": [
						"mysqli_stmt::$field_count",
						"mysqlistmt::$field_count",
						"$field_count",
						"::$field_count"
					],
					"id": "mysqli-stmt.field-count",
					"name": "mysqli_stmt::$field_count",
					"description": "Returns the number of field in the given statement"
				},
				"mysqli-stmt.free-result": {
					"tokens": [
						"mysqli_stmt::free_result",
						"mysqlistmt::free_result",
						"free_result",
						"::free_result"
					],
					"id": "mysqli-stmt.free-result",
					"name": "mysqli_stmt::free_result",
					"description": "Frees stored result memory for the given statement handle"
				},
				"mysqli-stmt.get-result": {
					"tokens": [
						"mysqli_stmt::get_result",
						"mysqlistmt::get_result",
						"get_result",
						"::get_result"
					],
					"id": "mysqli-stmt.get-result",
					"name": "mysqli_stmt::get_result",
					"description": "Gets a result set from a prepared statement"
				},
				"mysqli-stmt.get-warnings": {
					"tokens": [
						"mysqli_stmt::get_warnings",
						"mysqlistmt::get_warnings",
						"get_warnings",
						"::get_warnings"
					],
					"id": "mysqli-stmt.get-warnings",
					"name": "mysqli_stmt::get_warnings",
					"description": "Get result of SHOW WARNINGS"
				},
				"mysqli-stmt.insert-id": {
					"tokens": [
						"mysqli_stmt::$insert_id",
						"mysqlistmt::$insert_id",
						"$insert_id",
						"::$insert_id"
					],
					"id": "mysqli-stmt.insert-id",
					"name": "mysqli_stmt::$insert_id",
					"description": "Get the ID generated from the previous INSERT operation"
				},
				"mysqli-stmt.more-results": {
					"tokens": [
						"mysqli_stmt::more_results",
						"mysqlistmt::more_results",
						"more_results",
						"::more_results"
					],
					"id": "mysqli-stmt.more-results",
					"name": "mysqli_stmt::more_results",
					"description": "Check if there are more query results from a multiple query"
				},
				"mysqli-stmt.next-result": {
					"tokens": [
						"mysqli_stmt::next_result",
						"mysqlistmt::next_result",
						"next_result",
						"::next_result"
					],
					"id": "mysqli-stmt.next-result",
					"name": "mysqli_stmt::next_result",
					"description": "Reads the next result from a multiple query"
				},
				"mysqli-stmt.num-rows": {
					"tokens": [
						"mysqli_stmt::$num_rows",
						"mysqlistmt::$num_rows",
						"$num_rows",
						"::$num_rows"
					],
					"id": "mysqli-stmt.num-rows",
					"name": "mysqli_stmt::$num_rows",
					"description": "Return the number of rows in statements result set"
				},
				"mysqli-stmt.param-count": {
					"tokens": [
						"mysqli_stmt::$param_count",
						"mysqlistmt::$param_count",
						"$param_count",
						"::$param_count"
					],
					"id": "mysqli-stmt.param-count",
					"name": "mysqli_stmt::$param_count",
					"description": "Returns the number of parameter for the given statement"
				},
				"mysqli-stmt.prepare": {
					"tokens": [
						"mysqli_stmt::prepare",
						"mysqlistmt::prepare",
						"prepare",
						"::prepare"
					],
					"id": "mysqli-stmt.prepare",
					"name": "mysqli_stmt::prepare",
					"description": "Prepare an SQL statement for execution"
				},
				"mysqli-stmt.reset": {
					"tokens": [
						"mysqli_stmt::reset",
						"mysqlistmt::reset",
						"reset",
						"::reset"
					],
					"id": "mysqli-stmt.reset",
					"name": "mysqli_stmt::reset",
					"description": "Resets a prepared statement"
				},
				"mysqli-stmt.result-metadata": {
					"tokens": [
						"mysqli_stmt::result_metadata",
						"mysqlistmt::result_metadata",
						"result_metadata",
						"::result_metadata"
					],
					"id": "mysqli-stmt.result-metadata",
					"name": "mysqli_stmt::result_metadata",
					"description": "Returns result set metadata from a prepared statement"
				},
				"mysqli-stmt.send-long-data": {
					"tokens": [
						"mysqli_stmt::send_long_data",
						"mysqlistmt::send_long_data",
						"send_long_data",
						"::send_long_data"
					],
					"id": "mysqli-stmt.send-long-data",
					"name": "mysqli_stmt::send_long_data",
					"description": "Send data in blocks"
				},
				"mysqli-stmt.sqlstate": {
					"tokens": [
						"mysqli_stmt::$sqlstate",
						"mysqlistmt::$sqlstate",
						"$sqlstate",
						"::$sqlstate"
					],
					"id": "mysqli-stmt.sqlstate",
					"name": "mysqli_stmt::$sqlstate",
					"description": "Returns SQLSTATE error from previous statement operation"
				},
				"mysqli-stmt.store-result": {
					"tokens": [
						"mysqli_stmt::store_result",
						"mysqlistmt::store_result",
						"store_result",
						"::store_result"
					],
					"id": "mysqli-stmt.store-result",
					"name": "mysqli_stmt::store_result",
					"description": "Transfers a result set from a prepared statement"
				},
				"mysqli-result.current-field": {
					"tokens": [
						"mysqli_result::$current_field",
						"mysqliresult::$current_field",
						"$current_field",
						"::$current_field"
					],
					"id": "mysqli-result.current-field",
					"name": "mysqli_result::$current_field",
					"description": "Get current field offset of a result pointer"
				},
				"mysqli-result.data-seek": {
					"tokens": [
						"mysqli_result::data_seek",
						"mysqliresult::data_seek",
						"data_seek",
						"::data_seek"
					],
					"id": "mysqli-result.data-seek",
					"name": "mysqli_result::data_seek",
					"description": "Adjusts the result pointer to an arbitrary row in the result"
				},
				"mysqli-result.fetch-all": {
					"tokens": [
						"mysqli_result::fetch_all",
						"mysqliresult::fetch_all",
						"fetch_all",
						"::fetch_all"
					],
					"id": "mysqli-result.fetch-all",
					"name": "mysqli_result::fetch_all",
					"description": "Fetches all result rows as an associative array, a numeric array, or both"
				},
				"mysqli-result.fetch-array": {
					"tokens": [
						"mysqli_result::fetch_array",
						"mysqliresult::fetch_array",
						"fetch_array",
						"::fetch_array"
					],
					"id": "mysqli-result.fetch-array",
					"name": "mysqli_result::fetch_array",
					"description": "Fetch a result row as an associative, a numeric array, or both"
				},
				"mysqli-result.fetch-assoc": {
					"tokens": [
						"mysqli_result::fetch_assoc",
						"mysqliresult::fetch_assoc",
						"fetch_assoc",
						"::fetch_assoc"
					],
					"id": "mysqli-result.fetch-assoc",
					"name": "mysqli_result::fetch_assoc",
					"description": "Fetch a result row as an associative array"
				},
				"mysqli-result.fetch-field-direct": {
					"tokens": [
						"mysqli_result::fetch_field_direct",
						"mysqliresult::fetch_field_direct",
						"fetch_field_direct",
						"::fetch_field_direct"
					],
					"id": "mysqli-result.fetch-field-direct",
					"name": "mysqli_result::fetch_field_direct",
					"description": "Fetch meta-data for a single field"
				},
				"mysqli-result.fetch-field": {
					"tokens": [
						"mysqli_result::fetch_field",
						"mysqliresult::fetch_field",
						"fetch_field",
						"::fetch_field"
					],
					"id": "mysqli-result.fetch-field",
					"name": "mysqli_result::fetch_field",
					"description": "Returns the next field in the result set"
				},
				"mysqli-result.fetch-fields": {
					"tokens": [
						"mysqli_result::fetch_fields",
						"mysqliresult::fetch_fields",
						"fetch_fields",
						"::fetch_fields"
					],
					"id": "mysqli-result.fetch-fields",
					"name": "mysqli_result::fetch_fields",
					"description": "Returns an array of objects representing the fields in a result set"
				},
				"mysqli-result.fetch-object": {
					"tokens": [
						"mysqli_result::fetch_object",
						"mysqliresult::fetch_object",
						"fetch_object",
						"::fetch_object"
					],
					"id": "mysqli-result.fetch-object",
					"name": "mysqli_result::fetch_object",
					"description": "Returns the current row of a result set as an object"
				},
				"mysqli-result.fetch-row": {
					"tokens": [
						"mysqli_result::fetch_row",
						"mysqliresult::fetch_row",
						"fetch_row",
						"::fetch_row"
					],
					"id": "mysqli-result.fetch-row",
					"name": "mysqli_result::fetch_row",
					"description": "Get a result row as an enumerated array"
				},
				"mysqli-result.field-count": {
					"tokens": [
						"mysqli_result::$field_count",
						"mysqliresult::$field_count",
						"$field_count",
						"::$field_count"
					],
					"id": "mysqli-result.field-count",
					"name": "mysqli_result::$field_count",
					"description": "Get the number of fields in a result"
				},
				"mysqli-result.field-seek": {
					"tokens": [
						"mysqli_result::field_seek",
						"mysqliresult::field_seek",
						"field_seek",
						"::field_seek"
					],
					"id": "mysqli-result.field-seek",
					"name": "mysqli_result::field_seek",
					"description": "Set result pointer to a specified field offset"
				},
				"mysqli-result.free": {
					"tokens": [
						"mysqli_result::free",
						"mysqliresult::free",
						"free",
						"::free"
					],
					"id": "mysqli-result.free",
					"name": "mysqli_result::free",
					"description": "Frees the memory associated with a result"
				},
				"mysqli-result.lengths": {
					"tokens": [
						"mysqli_result::$lengths",
						"mysqliresult::$lengths",
						"$lengths",
						"::$lengths"
					],
					"id": "mysqli-result.lengths",
					"name": "mysqli_result::$lengths",
					"description": "Returns the lengths of the columns of the current row in the result set"
				},
				"mysqli-result.num-rows": {
					"tokens": [
						"mysqli_result::$num_rows",
						"mysqliresult::$num_rows",
						"$num_rows",
						"::$num_rows"
					],
					"id": "mysqli-result.num-rows",
					"name": "mysqli_result::$num_rows",
					"description": "Gets the number of rows in a result"
				},
				"mysqli-driver.embedded-server-end": {
					"tokens": [
						"mysqli_driver::embedded_server_end",
						"mysqlidriver::embedded_server_end",
						"embedded_server_end",
						"::embedded_server_end"
					],
					"id": "mysqli-driver.embedded-server-end",
					"name": "mysqli_driver::embedded_server_end",
					"description": "Stop embedded server"
				},
				"mysqli-driver.embedded-server-start": {
					"tokens": [
						"mysqli_driver::embedded_server_start",
						"mysqlidriver::embedded_server_start",
						"embedded_server_start",
						"::embedded_server_start"
					],
					"id": "mysqli-driver.embedded-server-start",
					"name": "mysqli_driver::embedded_server_start",
					"description": "Initialize and start embedded server"
				},
				"mysqli-driver.report-mode": {
					"tokens": [
						"mysqli_driver::$report_mode",
						"mysqlidriver::$report_mode",
						"$report_mode",
						"::$report_mode"
					],
					"id": "mysqli-driver.report-mode",
					"name": "mysqli_driver::$report_mode",
					"description": "Enables or disables internal report functions"
				},
				"mysqli-warning.construct": {
					"tokens": [
						"mysqli_warning::__construct",
						"mysqliwarning::__construct",
						"__construct",
						"::__construct"
					],
					"id": "mysqli-warning.construct",
					"name": "mysqli_warning::__construct",
					"description": "The __construct purpose"
				},
				"mysqli-warning.next": {
					"tokens": [
						"mysqli_warning::next",
						"mysqliwarning::next",
						"next",
						"::next"
					],
					"id": "mysqli-warning.next",
					"name": "mysqli_warning::next",
					"description": "The next purpose"
				},
				"function.mysqli-bind-param": {
					"tokens": [
						"mysqli_bind_param",
						"mysqlibind_param"
					],
					"id": "function.mysqli-bind-param",
					"name": "mysqli_bind_param",
					"description": "Alias for mysqli_stmt_bind_param"
				},
				"function.mysqli-bind-result": {
					"tokens": [
						"mysqli_bind_result",
						"mysqlibind_result"
					],
					"id": "function.mysqli-bind-result",
					"name": "mysqli_bind_result",
					"description": "Alias for mysqli_stmt_bind_result"
				},
				"function.mysqli-client-encoding": {
					"tokens": [
						"mysqli_client_encoding",
						"mysqliclient_encoding"
					],
					"id": "function.mysqli-client-encoding",
					"name": "mysqli_client_encoding",
					"description": "Alias of mysqli_character_set_name"
				},
				"function.mysqli-connect": {
					"tokens": [
						"mysqli_connect",
						"mysqliconnect"
					],
					"id": "function.mysqli-connect",
					"name": "mysqli_connect",
					"description": "Alias of mysqli::__construct"
				},
				"function.mysqli-disable-reads-from-master": {
					"tokens": [
						"mysqli::disable_reads_from_master",
						"mysqli::disablereads_from_master",
						"disable_reads_from_master",
						"::disable_reads_from_master"
					],
					"id": "function.mysqli-disable-reads-from-master",
					"name": "mysqli::disable_reads_from_master",
					"description": "Disable reads from master"
				},
				"function.mysqli-disable-rpl-parse": {
					"tokens": [
						"mysqli_disable_rpl_parse",
						"mysqlidisable_rpl_parse"
					],
					"id": "function.mysqli-disable-rpl-parse",
					"name": "mysqli_disable_rpl_parse",
					"description": "Disable RPL parse"
				},
				"function.mysqli-enable-reads-from-master": {
					"tokens": [
						"mysqli_enable_reads_from_master",
						"mysqlienable_reads_from_master"
					],
					"id": "function.mysqli-enable-reads-from-master",
					"name": "mysqli_enable_reads_from_master",
					"description": "Enable reads from master"
				},
				"function.mysqli-enable-rpl-parse": {
					"tokens": [
						"mysqli_enable_rpl_parse",
						"mysqlienable_rpl_parse"
					],
					"id": "function.mysqli-enable-rpl-parse",
					"name": "mysqli_enable_rpl_parse",
					"description": "Enable RPL parse"
				},
				"function.mysqli-escape-string": {
					"tokens": [
						"mysqli_escape_string",
						"mysqliescape_string"
					],
					"id": "function.mysqli-escape-string",
					"name": "mysqli_escape_string",
					"description": "Alias of mysqli_real_escape_string"
				},
				"function.mysqli-execute": {
					"tokens": [
						"mysqli_execute",
						"mysqliexecute"
					],
					"id": "function.mysqli-execute",
					"name": "mysqli_execute",
					"description": "Alias for mysqli_stmt_execute"
				},
				"function.mysqli-fetch": {
					"tokens": [
						"mysqli_fetch",
						"mysqlifetch"
					],
					"id": "function.mysqli-fetch",
					"name": "mysqli_fetch",
					"description": "Alias for mysqli_stmt_fetch"
				},
				"function.mysqli-get-cache-stats": {
					"tokens": [
						"mysqli_get_cache_stats",
						"mysqliget_cache_stats"
					],
					"id": "function.mysqli-get-cache-stats",
					"name": "mysqli_get_cache_stats",
					"description": "Returns client Zval cache statistics"
				},
				"function.mysqli-get-links-stats": {
					"tokens": [
						"mysqli_get_links_stats",
						"mysqliget_links_stats"
					],
					"id": "function.mysqli-get-links-stats",
					"name": "mysqli_get_links_stats",
					"description": "Return information about open and cached links"
				},
				"function.mysqli-get-metadata": {
					"tokens": [
						"mysqli_get_metadata",
						"mysqliget_metadata"
					],
					"id": "function.mysqli-get-metadata",
					"name": "mysqli_get_metadata",
					"description": "Alias for mysqli_stmt_result_metadata"
				},
				"function.mysqli-master-query": {
					"tokens": [
						"mysqli_master_query",
						"mysqlimaster_query"
					],
					"id": "function.mysqli-master-query",
					"name": "mysqli_master_query",
					"description": "Enforce execution of a query on the master in a master/slave setup"
				},
				"function.mysqli-param-count": {
					"tokens": [
						"mysqli_param_count",
						"mysqliparam_count"
					],
					"id": "function.mysqli-param-count",
					"name": "mysqli_param_count",
					"description": "Alias for mysqli_stmt_param_count"
				},
				"function.mysqli-report": {
					"tokens": [
						"mysqli_report",
						"mysqlireport"
					],
					"id": "function.mysqli-report",
					"name": "mysqli_report",
					"description": "Alias of mysqli_driver-&gt;report_mode"
				},
				"function.mysqli-rpl-parse-enabled": {
					"tokens": [
						"mysqli_rpl_parse_enabled",
						"mysqlirpl_parse_enabled"
					],
					"id": "function.mysqli-rpl-parse-enabled",
					"name": "mysqli_rpl_parse_enabled",
					"description": "Check if RPL parse is enabled"
				},
				"function.mysqli-rpl-probe": {
					"tokens": [
						"mysqli_rpl_probe",
						"mysqlirpl_probe"
					],
					"id": "function.mysqli-rpl-probe",
					"name": "mysqli_rpl_probe",
					"description": "RPL probe"
				},
				"function.mysqli-send-long-data": {
					"tokens": [
						"mysqli_send_long_data",
						"mysqlisend_long_data"
					],
					"id": "function.mysqli-send-long-data",
					"name": "mysqli_send_long_data",
					"description": "Alias for mysqli_stmt_send_long_data"
				},
				"function.mysqli-set-opt": {
					"tokens": [
						"mysqli::set_opt",
						"mysqli::setopt",
						"set_opt",
						"::set_opt"
					],
					"id": "function.mysqli-set-opt",
					"name": "mysqli::set_opt",
					"description": "Alias of mysqli_options"
				},
				"function.mysqli-slave-query": {
					"tokens": [
						"mysqli_slave_query",
						"mysqlislave_query"
					],
					"id": "function.mysqli-slave-query",
					"name": "mysqli_slave_query",
					"description": "Force execution of a query on a slave in a master/slave setup"
				},
				"function.mysql-affected-rows": {
					"tokens": [
						"mysql_affected_rows",
						"mysqlaffected_rows"
					],
					"id": "function.mysql-affected-rows",
					"name": "mysql_affected_rows",
					"description": "Get number of affected rows in previous MySQL operation"
				},
				"function.mysql-client-encoding": {
					"tokens": [
						"mysql_client_encoding",
						"mysqlclient_encoding"
					],
					"id": "function.mysql-client-encoding",
					"name": "mysql_client_encoding",
					"description": "Returns the name of the character set"
				},
				"function.mysql-close": {
					"tokens": [
						"mysql_close",
						"mysqlclose"
					],
					"id": "function.mysql-close",
					"name": "mysql_close",
					"description": "Close MySQL connection"
				},
				"function.mysql-connect": {
					"tokens": [
						"mysql_connect",
						"mysqlconnect"
					],
					"id": "function.mysql-connect",
					"name": "mysql_connect",
					"description": "Open a connection to a MySQL Server"
				},
				"function.mysql-create-db": {
					"tokens": [
						"mysql_create_db",
						"mysqlcreate_db"
					],
					"id": "function.mysql-create-db",
					"name": "mysql_create_db",
					"description": "Create a MySQL database"
				},
				"function.mysql-data-seek": {
					"tokens": [
						"mysql_data_seek",
						"mysqldata_seek"
					],
					"id": "function.mysql-data-seek",
					"name": "mysql_data_seek",
					"description": "Move internal result pointer"
				},
				"function.mysql-db-name": {
					"tokens": [
						"mysql_db_name",
						"mysqldb_name"
					],
					"id": "function.mysql-db-name",
					"name": "mysql_db_name",
					"description": "Retrieves database name from the call to mysql_list_dbs"
				},
				"function.mysql-db-query": {
					"tokens": [
						"mysql_db_query",
						"mysqldb_query"
					],
					"id": "function.mysql-db-query",
					"name": "mysql_db_query",
					"description": "Selects a database and executes a query on it"
				},
				"function.mysql-drop-db": {
					"tokens": [
						"mysql_drop_db",
						"mysqldrop_db"
					],
					"id": "function.mysql-drop-db",
					"name": "mysql_drop_db",
					"description": "Drop (delete) a MySQL database"
				},
				"function.mysql-errno": {
					"tokens": [
						"mysql_errno",
						"mysqlerrno"
					],
					"id": "function.mysql-errno",
					"name": "mysql_errno",
					"description": "Returns the numerical value of the error message from previous MySQL operation"
				},
				"function.mysql-error": {
					"tokens": [
						"mysql_error",
						"mysqlerror"
					],
					"id": "function.mysql-error",
					"name": "mysql_error",
					"description": "Returns the text of the error message from previous MySQL operation"
				},
				"function.mysql-escape-string": {
					"tokens": [
						"mysql_escape_string",
						"mysqlescape_string"
					],
					"id": "function.mysql-escape-string",
					"name": "mysql_escape_string",
					"description": "Escapes a string for use in a mysql_query"
				},
				"function.mysql-fetch-array": {
					"tokens": [
						"mysql_fetch_array",
						"mysqlfetch_array"
					],
					"id": "function.mysql-fetch-array",
					"name": "mysql_fetch_array",
					"description": "Fetch a result row as an associative array, a numeric array, or both"
				},
				"function.mysql-fetch-assoc": {
					"tokens": [
						"mysql_fetch_assoc",
						"mysqlfetch_assoc"
					],
					"id": "function.mysql-fetch-assoc",
					"name": "mysql_fetch_assoc",
					"description": "Fetch a result row as an associative array"
				},
				"function.mysql-fetch-field": {
					"tokens": [
						"mysql_fetch_field",
						"mysqlfetch_field"
					],
					"id": "function.mysql-fetch-field",
					"name": "mysql_fetch_field",
					"description": "Get column information from a result and return as an object"
				},
				"function.mysql-fetch-lengths": {
					"tokens": [
						"mysql_fetch_lengths",
						"mysqlfetch_lengths"
					],
					"id": "function.mysql-fetch-lengths",
					"name": "mysql_fetch_lengths",
					"description": "Get the length of each output in a result"
				},
				"function.mysql-fetch-object": {
					"tokens": [
						"mysql_fetch_object",
						"mysqlfetch_object"
					],
					"id": "function.mysql-fetch-object",
					"name": "mysql_fetch_object",
					"description": "Fetch a result row as an object"
				},
				"function.mysql-fetch-row": {
					"tokens": [
						"mysql_fetch_row",
						"mysqlfetch_row"
					],
					"id": "function.mysql-fetch-row",
					"name": "mysql_fetch_row",
					"description": "Get a result row as an enumerated array"
				},
				"function.mysql-field-flags": {
					"tokens": [
						"mysql_field_flags",
						"mysqlfield_flags"
					],
					"id": "function.mysql-field-flags",
					"name": "mysql_field_flags",
					"description": "Get the flags associated with the specified field in a result"
				},
				"function.mysql-field-len": {
					"tokens": [
						"mysql_field_len",
						"mysqlfield_len"
					],
					"id": "function.mysql-field-len",
					"name": "mysql_field_len",
					"description": "Returns the length of the specified field"
				},
				"function.mysql-field-name": {
					"tokens": [
						"mysql_field_name",
						"mysqlfield_name"
					],
					"id": "function.mysql-field-name",
					"name": "mysql_field_name",
					"description": "Get the name of the specified field in a result"
				},
				"function.mysql-field-seek": {
					"tokens": [
						"mysql_field_seek",
						"mysqlfield_seek"
					],
					"id": "function.mysql-field-seek",
					"name": "mysql_field_seek",
					"description": "Set result pointer to a specified field offset"
				},
				"function.mysql-field-table": {
					"tokens": [
						"mysql_field_table",
						"mysqlfield_table"
					],
					"id": "function.mysql-field-table",
					"name": "mysql_field_table",
					"description": "Get name of the table the specified field is in"
				},
				"function.mysql-field-type": {
					"tokens": [
						"mysql_field_type",
						"mysqlfield_type"
					],
					"id": "function.mysql-field-type",
					"name": "mysql_field_type",
					"description": "Get the type of the specified field in a result"
				},
				"function.mysql-free-result": {
					"tokens": [
						"mysql_free_result",
						"mysqlfree_result"
					],
					"id": "function.mysql-free-result",
					"name": "mysql_free_result",
					"description": "Free result memory"
				},
				"function.mysql-get-client-info": {
					"tokens": [
						"mysql_get_client_info",
						"mysqlget_client_info"
					],
					"id": "function.mysql-get-client-info",
					"name": "mysql_get_client_info",
					"description": "Get MySQL client info"
				},
				"function.mysql-get-host-info": {
					"tokens": [
						"mysql_get_host_info",
						"mysqlget_host_info"
					],
					"id": "function.mysql-get-host-info",
					"name": "mysql_get_host_info",
					"description": "Get MySQL host info"
				},
				"function.mysql-get-proto-info": {
					"tokens": [
						"mysql_get_proto_info",
						"mysqlget_proto_info"
					],
					"id": "function.mysql-get-proto-info",
					"name": "mysql_get_proto_info",
					"description": "Get MySQL protocol info"
				},
				"function.mysql-get-server-info": {
					"tokens": [
						"mysql_get_server_info",
						"mysqlget_server_info"
					],
					"id": "function.mysql-get-server-info",
					"name": "mysql_get_server_info",
					"description": "Get MySQL server info"
				},
				"function.mysql-info": {
					"tokens": [
						"mysql_info",
						"mysqlinfo"
					],
					"id": "function.mysql-info",
					"name": "mysql_info",
					"description": "Get information about the most recent query"
				},
				"function.mysql-insert-id": {
					"tokens": [
						"mysql_insert_id",
						"mysqlinsert_id"
					],
					"id": "function.mysql-insert-id",
					"name": "mysql_insert_id",
					"description": "Get the ID generated in the last query"
				},
				"function.mysql-list-dbs": {
					"tokens": [
						"mysql_list_dbs",
						"mysqllist_dbs"
					],
					"id": "function.mysql-list-dbs",
					"name": "mysql_list_dbs",
					"description": "List databases available on a MySQL server"
				},
				"function.mysql-list-fields": {
					"tokens": [
						"mysql_list_fields",
						"mysqllist_fields"
					],
					"id": "function.mysql-list-fields",
					"name": "mysql_list_fields",
					"description": "List MySQL table fields"
				},
				"function.mysql-list-processes": {
					"tokens": [
						"mysql_list_processes",
						"mysqllist_processes"
					],
					"id": "function.mysql-list-processes",
					"name": "mysql_list_processes",
					"description": "List MySQL processes"
				},
				"function.mysql-list-tables": {
					"tokens": [
						"mysql_list_tables",
						"mysqllist_tables"
					],
					"id": "function.mysql-list-tables",
					"name": "mysql_list_tables",
					"description": "List tables in a MySQL database"
				},
				"function.mysql-num-fields": {
					"tokens": [
						"mysql_num_fields",
						"mysqlnum_fields"
					],
					"id": "function.mysql-num-fields",
					"name": "mysql_num_fields",
					"description": "Get number of fields in result"
				},
				"function.mysql-num-rows": {
					"tokens": [
						"mysql_num_rows",
						"mysqlnum_rows"
					],
					"id": "function.mysql-num-rows",
					"name": "mysql_num_rows",
					"description": "Get number of rows in result"
				},
				"function.mysql-pconnect": {
					"tokens": [
						"mysql_pconnect",
						"mysqlpconnect"
					],
					"id": "function.mysql-pconnect",
					"name": "mysql_pconnect",
					"description": "Open a persistent connection to a MySQL server"
				},
				"function.mysql-ping": {
					"tokens": [
						"mysql_ping",
						"mysqlping"
					],
					"id": "function.mysql-ping",
					"name": "mysql_ping",
					"description": "Ping a server connection or reconnect if there is no connection"
				},
				"function.mysql-query": {
					"tokens": [
						"mysql_query",
						"mysqlquery"
					],
					"id": "function.mysql-query",
					"name": "mysql_query",
					"description": "Send a MySQL query"
				},
				"function.mysql-real-escape-string": {
					"tokens": [
						"mysql_real_escape_string",
						"mysqlreal_escape_string"
					],
					"id": "function.mysql-real-escape-string",
					"name": "mysql_real_escape_string",
					"description": "Escapes special characters in a string for use in an SQL statement"
				},
				"function.mysql-result": {
					"tokens": [
						"mysql_result",
						"mysqlresult"
					],
					"id": "function.mysql-result",
					"name": "mysql_result",
					"description": "Get result data"
				},
				"function.mysql-select-db": {
					"tokens": [
						"mysql_select_db",
						"mysqlselect_db"
					],
					"id": "function.mysql-select-db",
					"name": "mysql_select_db",
					"description": "Select a MySQL database"
				},
				"function.mysql-set-charset": {
					"tokens": [
						"mysql_set_charset",
						"mysqlset_charset"
					],
					"id": "function.mysql-set-charset",
					"name": "mysql_set_charset",
					"description": "Sets the client character set"
				},
				"function.mysql-stat": {
					"tokens": [
						"mysql_stat",
						"mysqlstat"
					],
					"id": "function.mysql-stat",
					"name": "mysql_stat",
					"description": "Get current system status"
				},
				"function.mysql-tablename": {
					"tokens": [
						"mysql_tablename",
						"mysqltablename"
					],
					"id": "function.mysql-tablename",
					"name": "mysql_tablename",
					"description": "Get table name of field"
				},
				"function.mysql-thread-id": {
					"tokens": [
						"mysql_thread_id",
						"mysqlthread_id"
					],
					"id": "function.mysql-thread-id",
					"name": "mysql_thread_id",
					"description": "Return the current thread ID"
				},
				"function.mysql-unbuffered-query": {
					"tokens": [
						"mysql_unbuffered_query",
						"mysqlunbuffered_query"
					],
					"id": "function.mysql-unbuffered-query",
					"name": "mysql_unbuffered_query",
					"description": "Send an SQL query to MySQL without fetching and buffering the result rows."
				},
				"function.mysqlnd-ms-dump-servers": {
					"tokens": [
						"mysqlnd_ms_dump_servers",
						"mysqlndms_dump_servers"
					],
					"id": "function.mysqlnd-ms-dump-servers",
					"name": "mysqlnd_ms_dump_servers",
					"description": "Returns a list of currently configured servers"
				},
				"function.mysqlnd-ms-fabric-select-global": {
					"tokens": [
						"mysqlnd_ms_fabric_select_global",
						"mysqlndms_fabric_select_global"
					],
					"id": "function.mysqlnd-ms-fabric-select-global",
					"name": "mysqlnd_ms_fabric_select_global",
					"description": "Switch to global sharding server for a given table"
				},
				"function.mysqlnd-ms-fabric-select-shard": {
					"tokens": [
						"mysqlnd_ms_fabric_select_shard",
						"mysqlndms_fabric_select_shard"
					],
					"id": "function.mysqlnd-ms-fabric-select-shard",
					"name": "mysqlnd_ms_fabric_select_shard",
					"description": "Switch to shard"
				},
				"function.mysqlnd-ms-get-last-gtid": {
					"tokens": [
						"mysqlnd_ms_get_last_gtid",
						"mysqlndms_get_last_gtid"
					],
					"id": "function.mysqlnd-ms-get-last-gtid",
					"name": "mysqlnd_ms_get_last_gtid",
					"description": "Returns the latest global transaction ID"
				},
				"function.mysqlnd-ms-get-last-used-connection": {
					"tokens": [
						"mysqlnd_ms_get_last_used_connection",
						"mysqlndms_get_last_used_connection"
					],
					"id": "function.mysqlnd-ms-get-last-used-connection",
					"name": "mysqlnd_ms_get_last_used_connection",
					"description": "Returns an array which describes the last used connection"
				},
				"function.mysqlnd-ms-get-stats": {
					"tokens": [
						"mysqlnd_ms_get_stats",
						"mysqlndms_get_stats"
					],
					"id": "function.mysqlnd-ms-get-stats",
					"name": "mysqlnd_ms_get_stats",
					"description": "Returns query distribution and connection statistics"
				},
				"function.mysqlnd-ms-match-wild": {
					"tokens": [
						"mysqlnd_ms_match_wild",
						"mysqlndms_match_wild"
					],
					"id": "function.mysqlnd-ms-match-wild",
					"name": "mysqlnd_ms_match_wild",
					"description": "Finds whether a table name matches a wildcard pattern or not"
				},
				"function.mysqlnd-ms-query-is-select": {
					"tokens": [
						"mysqlnd_ms_query_is_select",
						"mysqlndms_query_is_select"
					],
					"id": "function.mysqlnd-ms-query-is-select",
					"name": "mysqlnd_ms_query_is_select",
					"description": "Find whether to send the query to the master, the slave or the last used MySQL server"
				},
				"function.mysqlnd-ms-set-qos": {
					"tokens": [
						"mysqlnd_ms_set_qos",
						"mysqlndms_set_qos"
					],
					"id": "function.mysqlnd-ms-set-qos",
					"name": "mysqlnd_ms_set_qos",
					"description": "Sets the quality of service needed from the cluster"
				},
				"function.mysqlnd-ms-set-user-pick-server": {
					"tokens": [
						"mysqlnd_ms_set_user_pick_server",
						"mysqlndms_set_user_pick_server"
					],
					"id": "function.mysqlnd-ms-set-user-pick-server",
					"name": "mysqlnd_ms_set_user_pick_server",
					"description": "Sets a callback for user-defined read/write splitting"
				},
				"function.mysqlnd-ms-xa-begin": {
					"tokens": [
						"mysqlnd_ms_xa_begin",
						"mysqlndms_xa_begin"
					],
					"id": "function.mysqlnd-ms-xa-begin",
					"name": "mysqlnd_ms_xa_begin",
					"description": "Starts a distributed/XA transaction among MySQL servers"
				},
				"function.mysqlnd-ms-xa-commit": {
					"tokens": [
						"mysqlnd_ms_xa_commit",
						"mysqlndms_xa_commit"
					],
					"id": "function.mysqlnd-ms-xa-commit",
					"name": "mysqlnd_ms_xa_commit",
					"description": "Commits a distributed/XA transaction among MySQL servers"
				},
				"function.mysqlnd-ms-xa-gc": {
					"tokens": [
						"mysqlnd_ms_xa_gc",
						"mysqlndms_xa_gc"
					],
					"id": "function.mysqlnd-ms-xa-gc",
					"name": "mysqlnd_ms_xa_gc",
					"description": "Garbage collects unfinished XA transactions after severe errors"
				},
				"function.mysqlnd-ms-xa-rollback": {
					"tokens": [
						"mysqlnd_ms_xa_rollback",
						"mysqlndms_xa_rollback"
					],
					"id": "function.mysqlnd-ms-xa-rollback",
					"name": "mysqlnd_ms_xa_rollback",
					"description": "Rolls back a distributed/XA transaction among MySQL servers"
				},
				"function.mysqlnd-qc-clear-cache": {
					"tokens": [
						"mysqlnd_qc_clear_cache",
						"mysqlndqc_clear_cache"
					],
					"id": "function.mysqlnd-qc-clear-cache",
					"name": "mysqlnd_qc_clear_cache",
					"description": "Flush all cache contents"
				},
				"function.mysqlnd-qc-get-available-handlers": {
					"tokens": [
						"mysqlnd_qc_get_available_handlers",
						"mysqlndqc_get_available_handlers"
					],
					"id": "function.mysqlnd-qc-get-available-handlers",
					"name": "mysqlnd_qc_get_available_handlers",
					"description": "Returns a list of available storage handler"
				},
				"function.mysqlnd-qc-get-cache-info": {
					"tokens": [
						"mysqlnd_qc_get_cache_info",
						"mysqlndqc_get_cache_info"
					],
					"id": "function.mysqlnd-qc-get-cache-info",
					"name": "mysqlnd_qc_get_cache_info",
					"description": "Returns information on the current handler, the number of cache entries and cache entries, if available"
				},
				"function.mysqlnd-qc-get-core-stats": {
					"tokens": [
						"mysqlnd_qc_get_core_stats",
						"mysqlndqc_get_core_stats"
					],
					"id": "function.mysqlnd-qc-get-core-stats",
					"name": "mysqlnd_qc_get_core_stats",
					"description": "Statistics collected by the core of the query cache"
				},
				"function.mysqlnd-qc-get-normalized-query-trace-log": {
					"tokens": [
						"mysqlnd_qc_get_normalized_query_trace_log",
						"mysqlndqc_get_normalized_query_trace_log"
					],
					"id": "function.mysqlnd-qc-get-normalized-query-trace-log",
					"name": "mysqlnd_qc_get_normalized_query_trace_log",
					"description": "Returns a normalized query trace log for each query inspected by the query cache"
				},
				"function.mysqlnd-qc-get-query-trace-log": {
					"tokens": [
						"mysqlnd_qc_get_query_trace_log",
						"mysqlndqc_get_query_trace_log"
					],
					"id": "function.mysqlnd-qc-get-query-trace-log",
					"name": "mysqlnd_qc_get_query_trace_log",
					"description": "Returns a backtrace for each query inspected by the query cache"
				},
				"function.mysqlnd-qc-set-cache-condition": {
					"tokens": [
						"mysqlnd_qc_set_cache_condition",
						"mysqlndqc_set_cache_condition"
					],
					"id": "function.mysqlnd-qc-set-cache-condition",
					"name": "mysqlnd_qc_set_cache_condition",
					"description": "Set conditions for automatic caching"
				},
				"function.mysqlnd-qc-set-is-select": {
					"tokens": [
						"mysqlnd_qc_set_is_select",
						"mysqlndqc_set_is_select"
					],
					"id": "function.mysqlnd-qc-set-is-select",
					"name": "mysqlnd_qc_set_is_select",
					"description": "Installs a callback which decides whether a statement is cached"
				},
				"function.mysqlnd-qc-set-storage-handler": {
					"tokens": [
						"mysqlnd_qc_set_storage_handler",
						"mysqlndqc_set_storage_handler"
					],
					"id": "function.mysqlnd-qc-set-storage-handler",
					"name": "mysqlnd_qc_set_storage_handler",
					"description": "Change current storage handler"
				},
				"function.mysqlnd-qc-set-user-handlers": {
					"tokens": [
						"mysqlnd_qc_set_user_handlers",
						"mysqlndqc_set_user_handlers"
					],
					"id": "function.mysqlnd-qc-set-user-handlers",
					"name": "mysqlnd_qc_set_user_handlers",
					"description": "Sets the callback functions for a user-defined procedural storage handler"
				},
				"mysqlnduhconnection.changeuser": {
					"tokens": [
						"MysqlndUhConnection::changeUser",
						"changeUser",
						"::changeUser"
					],
					"id": "mysqlnduhconnection.changeuser",
					"name": "MysqlndUhConnection::changeUser",
					"description": "Changes the user of the specified mysqlnd database connection"
				},
				"mysqlnduhconnection.charsetname": {
					"tokens": [
						"MysqlndUhConnection::charsetName",
						"charsetName",
						"::charsetName"
					],
					"id": "mysqlnduhconnection.charsetname",
					"name": "MysqlndUhConnection::charsetName",
					"description": "Returns the default character set for the database connection"
				},
				"mysqlnduhconnection.close": {
					"tokens": [
						"MysqlndUhConnection::close",
						"close",
						"::close"
					],
					"id": "mysqlnduhconnection.close",
					"name": "MysqlndUhConnection::close",
					"description": "Closes a previously opened database connection"
				},
				"mysqlnduhconnection.connect": {
					"tokens": [
						"MysqlndUhConnection::connect",
						"connect",
						"::connect"
					],
					"id": "mysqlnduhconnection.connect",
					"name": "MysqlndUhConnection::connect",
					"description": "Open a new connection to the MySQL server"
				},
				"mysqlnduhconnection.construct": {
					"tokens": [
						"MysqlndUhConnection::__construct",
						"MysqlndUhConnection::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mysqlnduhconnection.construct",
					"name": "MysqlndUhConnection::__construct",
					"description": "The __construct purpose"
				},
				"mysqlnduhconnection.endpsession": {
					"tokens": [
						"MysqlndUhConnection::endPSession",
						"endPSession",
						"::endPSession"
					],
					"id": "mysqlnduhconnection.endpsession",
					"name": "MysqlndUhConnection::endPSession",
					"description": "End a persistent connection"
				},
				"mysqlnduhconnection.escapestring": {
					"tokens": [
						"MysqlndUhConnection::escapeString",
						"escapeString",
						"::escapeString"
					],
					"id": "mysqlnduhconnection.escapestring",
					"name": "MysqlndUhConnection::escapeString",
					"description": "Escapes special characters in a string for use in an SQL statement,\n   taking into account the current charset of the connection"
				},
				"mysqlnduhconnection.getaffectedrows": {
					"tokens": [
						"MysqlndUhConnection::getAffectedRows",
						"getAffectedRows",
						"::getAffectedRows"
					],
					"id": "mysqlnduhconnection.getaffectedrows",
					"name": "MysqlndUhConnection::getAffectedRows",
					"description": "Gets the number of affected rows in a previous MySQL operation"
				},
				"mysqlnduhconnection.geterrornumber": {
					"tokens": [
						"MysqlndUhConnection::getErrorNumber",
						"getErrorNumber",
						"::getErrorNumber"
					],
					"id": "mysqlnduhconnection.geterrornumber",
					"name": "MysqlndUhConnection::getErrorNumber",
					"description": "Returns the error code for the most recent function call"
				},
				"mysqlnduhconnection.geterrorstring": {
					"tokens": [
						"MysqlndUhConnection::getErrorString",
						"getErrorString",
						"::getErrorString"
					],
					"id": "mysqlnduhconnection.geterrorstring",
					"name": "MysqlndUhConnection::getErrorString",
					"description": "Returns a string description of the last error"
				},
				"mysqlnduhconnection.getfieldcount": {
					"tokens": [
						"MysqlndUhConnection::getFieldCount",
						"getFieldCount",
						"::getFieldCount"
					],
					"id": "mysqlnduhconnection.getfieldcount",
					"name": "MysqlndUhConnection::getFieldCount",
					"description": "Returns the number of columns for the most recent query"
				},
				"mysqlnduhconnection.gethostinformation": {
					"tokens": [
						"MysqlndUhConnection::getHostInformation",
						"getHostInformation",
						"::getHostInformation"
					],
					"id": "mysqlnduhconnection.gethostinformation",
					"name": "MysqlndUhConnection::getHostInformation",
					"description": "Returns a string representing the type of connection used"
				},
				"mysqlnduhconnection.getlastinsertid": {
					"tokens": [
						"MysqlndUhConnection::getLastInsertId",
						"getLastInsertId",
						"::getLastInsertId"
					],
					"id": "mysqlnduhconnection.getlastinsertid",
					"name": "MysqlndUhConnection::getLastInsertId",
					"description": "Returns the auto generated id used in the last query."
				},
				"mysqlnduhconnection.getlastmessage": {
					"tokens": [
						"MysqlndUhConnection::getLastMessage",
						"getLastMessage",
						"::getLastMessage"
					],
					"id": "mysqlnduhconnection.getlastmessage",
					"name": "MysqlndUhConnection::getLastMessage",
					"description": "Retrieves information about the most recently executed query"
				},
				"mysqlnduhconnection.getprotocolinformation": {
					"tokens": [
						"MysqlndUhConnection::getProtocolInformation",
						"getProtocolInformation",
						"::getProtocolInformation"
					],
					"id": "mysqlnduhconnection.getprotocolinformation",
					"name": "MysqlndUhConnection::getProtocolInformation",
					"description": "Returns the version of the MySQL protocol used"
				},
				"mysqlnduhconnection.getserverinformation": {
					"tokens": [
						"MysqlndUhConnection::getServerInformation",
						"getServerInformation",
						"::getServerInformation"
					],
					"id": "mysqlnduhconnection.getserverinformation",
					"name": "MysqlndUhConnection::getServerInformation",
					"description": "Returns the version of the MySQL server"
				},
				"mysqlnduhconnection.getserverstatistics": {
					"tokens": [
						"MysqlndUhConnection::getServerStatistics",
						"getServerStatistics",
						"::getServerStatistics"
					],
					"id": "mysqlnduhconnection.getserverstatistics",
					"name": "MysqlndUhConnection::getServerStatistics",
					"description": "Gets the current system status"
				},
				"mysqlnduhconnection.getserverversion": {
					"tokens": [
						"MysqlndUhConnection::getServerVersion",
						"getServerVersion",
						"::getServerVersion"
					],
					"id": "mysqlnduhconnection.getserverversion",
					"name": "MysqlndUhConnection::getServerVersion",
					"description": "Returns the version of the MySQL server as an integer"
				},
				"mysqlnduhconnection.getsqlstate": {
					"tokens": [
						"MysqlndUhConnection::getSqlstate",
						"getSqlstate",
						"::getSqlstate"
					],
					"id": "mysqlnduhconnection.getsqlstate",
					"name": "MysqlndUhConnection::getSqlstate",
					"description": "Returns the SQLSTATE error from previous MySQL operation"
				},
				"mysqlnduhconnection.getstatistics": {
					"tokens": [
						"MysqlndUhConnection::getStatistics",
						"getStatistics",
						"::getStatistics"
					],
					"id": "mysqlnduhconnection.getstatistics",
					"name": "MysqlndUhConnection::getStatistics",
					"description": "Returns statistics about the client connection."
				},
				"mysqlnduhconnection.getthreadid": {
					"tokens": [
						"MysqlndUhConnection::getThreadId",
						"getThreadId",
						"::getThreadId"
					],
					"id": "mysqlnduhconnection.getthreadid",
					"name": "MysqlndUhConnection::getThreadId",
					"description": "Returns the thread ID for the current connection"
				},
				"mysqlnduhconnection.getwarningcount": {
					"tokens": [
						"MysqlndUhConnection::getWarningCount",
						"getWarningCount",
						"::getWarningCount"
					],
					"id": "mysqlnduhconnection.getwarningcount",
					"name": "MysqlndUhConnection::getWarningCount",
					"description": "Returns the number of warnings from the last query for the given link"
				},
				"mysqlnduhconnection.init": {
					"tokens": [
						"MysqlndUhConnection::init",
						"init",
						"::init"
					],
					"id": "mysqlnduhconnection.init",
					"name": "MysqlndUhConnection::init",
					"description": "Initialize mysqlnd connection"
				},
				"mysqlnduhconnection.killconnection": {
					"tokens": [
						"MysqlndUhConnection::killConnection",
						"killConnection",
						"::killConnection"
					],
					"id": "mysqlnduhconnection.killconnection",
					"name": "MysqlndUhConnection::killConnection",
					"description": "Asks the server to kill a MySQL thread"
				},
				"mysqlnduhconnection.listfields": {
					"tokens": [
						"MysqlndUhConnection::listFields",
						"listFields",
						"::listFields"
					],
					"id": "mysqlnduhconnection.listfields",
					"name": "MysqlndUhConnection::listFields",
					"description": "List MySQL table fields"
				},
				"mysqlnduhconnection.listmethod": {
					"tokens": [
						"MysqlndUhConnection::listMethod",
						"listMethod",
						"::listMethod"
					],
					"id": "mysqlnduhconnection.listmethod",
					"name": "MysqlndUhConnection::listMethod",
					"description": "Wrapper for assorted list commands"
				},
				"mysqlnduhconnection.moreresults": {
					"tokens": [
						"MysqlndUhConnection::moreResults",
						"moreResults",
						"::moreResults"
					],
					"id": "mysqlnduhconnection.moreresults",
					"name": "MysqlndUhConnection::moreResults",
					"description": "Check if there are any more query results from a multi query"
				},
				"mysqlnduhconnection.nextresult": {
					"tokens": [
						"MysqlndUhConnection::nextResult",
						"nextResult",
						"::nextResult"
					],
					"id": "mysqlnduhconnection.nextresult",
					"name": "MysqlndUhConnection::nextResult",
					"description": "Prepare next result from multi_query"
				},
				"mysqlnduhconnection.ping": {
					"tokens": [
						"MysqlndUhConnection::ping",
						"ping",
						"::ping"
					],
					"id": "mysqlnduhconnection.ping",
					"name": "MysqlndUhConnection::ping",
					"description": "Pings a server connection, or tries to reconnect if the connection has gone down"
				},
				"mysqlnduhconnection.query": {
					"tokens": [
						"MysqlndUhConnection::query",
						"query",
						"::query"
					],
					"id": "mysqlnduhconnection.query",
					"name": "MysqlndUhConnection::query",
					"description": "Performs a query on the database"
				},
				"mysqlnduhconnection.queryreadresultsetheader": {
					"tokens": [
						"MysqlndUhConnection::queryReadResultsetHeader",
						"queryReadResultsetHeader",
						"::queryReadResultsetHeader"
					],
					"id": "mysqlnduhconnection.queryreadresultsetheader",
					"name": "MysqlndUhConnection::queryReadResultsetHeader",
					"description": "Read a result set header"
				},
				"mysqlnduhconnection.reapquery": {
					"tokens": [
						"MysqlndUhConnection::reapQuery",
						"reapQuery",
						"::reapQuery"
					],
					"id": "mysqlnduhconnection.reapquery",
					"name": "MysqlndUhConnection::reapQuery",
					"description": "Get result from async query"
				},
				"mysqlnduhconnection.refreshserver": {
					"tokens": [
						"MysqlndUhConnection::refreshServer",
						"refreshServer",
						"::refreshServer"
					],
					"id": "mysqlnduhconnection.refreshserver",
					"name": "MysqlndUhConnection::refreshServer",
					"description": "Flush or reset tables and caches"
				},
				"mysqlnduhconnection.restartpsession": {
					"tokens": [
						"MysqlndUhConnection::restartPSession",
						"restartPSession",
						"::restartPSession"
					],
					"id": "mysqlnduhconnection.restartpsession",
					"name": "MysqlndUhConnection::restartPSession",
					"description": "Restart a persistent mysqlnd connection"
				},
				"mysqlnduhconnection.selectdb": {
					"tokens": [
						"MysqlndUhConnection::selectDb",
						"selectDb",
						"::selectDb"
					],
					"id": "mysqlnduhconnection.selectdb",
					"name": "MysqlndUhConnection::selectDb",
					"description": "Selects the default database for database queries"
				},
				"mysqlnduhconnection.sendclose": {
					"tokens": [
						"MysqlndUhConnection::sendClose",
						"sendClose",
						"::sendClose"
					],
					"id": "mysqlnduhconnection.sendclose",
					"name": "MysqlndUhConnection::sendClose",
					"description": "Sends a close command to MySQL"
				},
				"mysqlnduhconnection.sendquery": {
					"tokens": [
						"MysqlndUhConnection::sendQuery",
						"sendQuery",
						"::sendQuery"
					],
					"id": "mysqlnduhconnection.sendquery",
					"name": "MysqlndUhConnection::sendQuery",
					"description": "Sends a query to MySQL"
				},
				"mysqlnduhconnection.serverdumpdebuginformation": {
					"tokens": [
						"MysqlndUhConnection::serverDumpDebugInformation",
						"serverDumpDebugInformation",
						"::serverDumpDebugInformation"
					],
					"id": "mysqlnduhconnection.serverdumpdebuginformation",
					"name": "MysqlndUhConnection::serverDumpDebugInformation",
					"description": "Dump debugging information into the log for the MySQL server"
				},
				"mysqlnduhconnection.setautocommit": {
					"tokens": [
						"MysqlndUhConnection::setAutocommit",
						"setAutocommit",
						"::setAutocommit"
					],
					"id": "mysqlnduhconnection.setautocommit",
					"name": "MysqlndUhConnection::setAutocommit",
					"description": "Turns on or off auto-committing database modifications"
				},
				"mysqlnduhconnection.setcharset": {
					"tokens": [
						"MysqlndUhConnection::setCharset",
						"setCharset",
						"::setCharset"
					],
					"id": "mysqlnduhconnection.setcharset",
					"name": "MysqlndUhConnection::setCharset",
					"description": "Sets the default client character set"
				},
				"mysqlnduhconnection.setclientoption": {
					"tokens": [
						"MysqlndUhConnection::setClientOption",
						"setClientOption",
						"::setClientOption"
					],
					"id": "mysqlnduhconnection.setclientoption",
					"name": "MysqlndUhConnection::setClientOption",
					"description": "Sets a client option"
				},
				"mysqlnduhconnection.setserveroption": {
					"tokens": [
						"MysqlndUhConnection::setServerOption",
						"setServerOption",
						"::setServerOption"
					],
					"id": "mysqlnduhconnection.setserveroption",
					"name": "MysqlndUhConnection::setServerOption",
					"description": "Sets a server option"
				},
				"mysqlnduhconnection.shutdownserver": {
					"tokens": [
						"MysqlndUhConnection::shutdownServer",
						"shutdownServer",
						"::shutdownServer"
					],
					"id": "mysqlnduhconnection.shutdownserver",
					"name": "MysqlndUhConnection::shutdownServer",
					"description": "The shutdownServer purpose"
				},
				"mysqlnduhconnection.simplecommand": {
					"tokens": [
						"MysqlndUhConnection::simpleCommand",
						"simpleCommand",
						"::simpleCommand"
					],
					"id": "mysqlnduhconnection.simplecommand",
					"name": "MysqlndUhConnection::simpleCommand",
					"description": "Sends a basic COM_* command"
				},
				"mysqlnduhconnection.simplecommandhandleresponse": {
					"tokens": [
						"MysqlndUhConnection::simpleCommandHandleResponse",
						"simpleCommandHandleResponse",
						"::simpleCommandHandleResponse"
					],
					"id": "mysqlnduhconnection.simplecommandhandleresponse",
					"name": "MysqlndUhConnection::simpleCommandHandleResponse",
					"description": "Process a response for a basic COM_* command send to the client"
				},
				"mysqlnduhconnection.sslset": {
					"tokens": [
						"MysqlndUhConnection::sslSet",
						"sslSet",
						"::sslSet"
					],
					"id": "mysqlnduhconnection.sslset",
					"name": "MysqlndUhConnection::sslSet",
					"description": "Used for establishing secure connections using SSL"
				},
				"mysqlnduhconnection.stmtinit": {
					"tokens": [
						"MysqlndUhConnection::stmtInit",
						"stmtInit",
						"::stmtInit"
					],
					"id": "mysqlnduhconnection.stmtinit",
					"name": "MysqlndUhConnection::stmtInit",
					"description": "Initializes a statement and returns a resource for use with mysqli_statement::prepare"
				},
				"mysqlnduhconnection.storeresult": {
					"tokens": [
						"MysqlndUhConnection::storeResult",
						"storeResult",
						"::storeResult"
					],
					"id": "mysqlnduhconnection.storeresult",
					"name": "MysqlndUhConnection::storeResult",
					"description": "Transfers a result set from the last query"
				},
				"mysqlnduhconnection.txcommit": {
					"tokens": [
						"MysqlndUhConnection::txCommit",
						"txCommit",
						"::txCommit"
					],
					"id": "mysqlnduhconnection.txcommit",
					"name": "MysqlndUhConnection::txCommit",
					"description": "Commits the current transaction"
				},
				"mysqlnduhconnection.txrollback": {
					"tokens": [
						"MysqlndUhConnection::txRollback",
						"txRollback",
						"::txRollback"
					],
					"id": "mysqlnduhconnection.txrollback",
					"name": "MysqlndUhConnection::txRollback",
					"description": "Rolls back current transaction"
				},
				"mysqlnduhconnection.useresult": {
					"tokens": [
						"MysqlndUhConnection::useResult",
						"useResult",
						"::useResult"
					],
					"id": "mysqlnduhconnection.useresult",
					"name": "MysqlndUhConnection::useResult",
					"description": "Initiate a result set retrieval"
				},
				"mysqlnduhpreparedstatement.construct": {
					"tokens": [
						"MysqlndUhPreparedStatement::__construct",
						"MysqlndUhPreparedStatement::_construct",
						"__construct",
						"::__construct"
					],
					"id": "mysqlnduhpreparedstatement.construct",
					"name": "MysqlndUhPreparedStatement::__construct",
					"description": "The __construct purpose"
				},
				"mysqlnduhpreparedstatement.execute": {
					"tokens": [
						"MysqlndUhPreparedStatement::execute",
						"execute",
						"::execute"
					],
					"id": "mysqlnduhpreparedstatement.execute",
					"name": "MysqlndUhPreparedStatement::execute",
					"description": "Executes a prepared Query"
				},
				"mysqlnduhpreparedstatement.prepare": {
					"tokens": [
						"MysqlndUhPreparedStatement::prepare",
						"prepare",
						"::prepare"
					],
					"id": "mysqlnduhpreparedstatement.prepare",
					"name": "MysqlndUhPreparedStatement::prepare",
					"description": "Prepare an SQL statement for execution"
				},
				"function.mysqlnd-uh-convert-to-mysqlnd": {
					"tokens": [
						"mysqlnd_uh_convert_to_mysqlnd",
						"mysqlnduh_convert_to_mysqlnd"
					],
					"id": "function.mysqlnd-uh-convert-to-mysqlnd",
					"name": "mysqlnd_uh_convert_to_mysqlnd",
					"description": "Converts a MySQL connection handle into a mysqlnd connection handle"
				},
				"function.mysqlnd-uh-set-connection-proxy": {
					"tokens": [
						"mysqlnd_uh_set_connection_proxy",
						"mysqlnduh_set_connection_proxy"
					],
					"id": "function.mysqlnd-uh-set-connection-proxy",
					"name": "mysqlnd_uh_set_connection_proxy",
					"description": "Installs a proxy for mysqlnd connections"
				},
				"function.mysqlnd-uh-set-statement-proxy": {
					"tokens": [
						"mysqlnd_uh_set_statement_proxy",
						"mysqlnduh_set_statement_proxy"
					],
					"id": "function.mysqlnd-uh-set-statement-proxy",
					"name": "mysqlnd_uh_set_statement_proxy",
					"description": "Installs a proxy for mysqlnd statements"
				},
				"function.mysqlnd-memcache-get-config": {
					"tokens": [
						"mysqlnd_memcache_get_config",
						"mysqlndmemcache_get_config"
					],
					"id": "function.mysqlnd-memcache-get-config",
					"name": "mysqlnd_memcache_get_config",
					"description": "Returns information about the plugin configuration"
				},
				"function.mysqlnd-memcache-set": {
					"tokens": [
						"mysqlnd_memcache_set",
						"mysqlndmemcache_set"
					],
					"id": "function.mysqlnd-memcache-set",
					"name": "mysqlnd_memcache_set",
					"description": "Associate a MySQL connection with a Memcache connection"
				},
				"function.oci-bind-array-by-name": {
					"tokens": [
						"oci_bind_array_by_name",
						"ocibind_array_by_name"
					],
					"id": "function.oci-bind-array-by-name",
					"name": "oci_bind_array_by_name",
					"description": "Binds a PHP array to an Oracle PL/SQL array parameter"
				},
				"function.oci-bind-by-name": {
					"tokens": [
						"oci_bind_by_name",
						"ocibind_by_name"
					],
					"id": "function.oci-bind-by-name",
					"name": "oci_bind_by_name",
					"description": "Binds a PHP variable to an Oracle placeholder"
				},
				"function.oci-cancel": {
					"tokens": [
						"oci_cancel",
						"ocicancel"
					],
					"id": "function.oci-cancel",
					"name": "oci_cancel",
					"description": "Cancels reading from cursor"
				},
				"function.oci-client-version": {
					"tokens": [
						"oci_client_version",
						"ociclient_version"
					],
					"id": "function.oci-client-version",
					"name": "oci_client_version",
					"description": "Returns the Oracle client library version"
				},
				"function.oci-close": {
					"tokens": [
						"oci_close",
						"ociclose"
					],
					"id": "function.oci-close",
					"name": "oci_close",
					"description": "Closes an Oracle connection"
				},
				"function.oci-commit": {
					"tokens": [
						"oci_commit",
						"ocicommit"
					],
					"id": "function.oci-commit",
					"name": "oci_commit",
					"description": "Commits the outstanding database transaction"
				},
				"function.oci-connect": {
					"tokens": [
						"oci_connect",
						"ociconnect"
					],
					"id": "function.oci-connect",
					"name": "oci_connect",
					"description": "Connect to an Oracle database"
				},
				"function.oci-define-by-name": {
					"tokens": [
						"oci_define_by_name",
						"ocidefine_by_name"
					],
					"id": "function.oci-define-by-name",
					"name": "oci_define_by_name",
					"description": "Associates a PHP variable with a column for query fetches"
				},
				"function.oci-error": {
					"tokens": [
						"oci_error",
						"ocierror"
					],
					"id": "function.oci-error",
					"name": "oci_error",
					"description": "Returns the last error found"
				},
				"function.oci-execute": {
					"tokens": [
						"oci_execute",
						"ociexecute"
					],
					"id": "function.oci-execute",
					"name": "oci_execute",
					"description": "Executes a statement"
				},
				"function.oci-fetch-all": {
					"tokens": [
						"oci_fetch_all",
						"ocifetch_all"
					],
					"id": "function.oci-fetch-all",
					"name": "oci_fetch_all",
					"description": "Fetches multiple rows from a query into a two-dimensional array"
				},
				"function.oci-fetch-array": {
					"tokens": [
						"oci_fetch_array",
						"ocifetch_array"
					],
					"id": "function.oci-fetch-array",
					"name": "oci_fetch_array",
					"description": "Returns the next row from a query as an associative or numeric array"
				},
				"function.oci-fetch-assoc": {
					"tokens": [
						"oci_fetch_assoc",
						"ocifetch_assoc"
					],
					"id": "function.oci-fetch-assoc",
					"name": "oci_fetch_assoc",
					"description": "Returns the next row from a query as an associative array"
				},
				"function.oci-fetch-object": {
					"tokens": [
						"oci_fetch_object",
						"ocifetch_object"
					],
					"id": "function.oci-fetch-object",
					"name": "oci_fetch_object",
					"description": "Returns the next row from a query as an object"
				},
				"function.oci-fetch-row": {
					"tokens": [
						"oci_fetch_row",
						"ocifetch_row"
					],
					"id": "function.oci-fetch-row",
					"name": "oci_fetch_row",
					"description": "Returns the next row from a query as a numeric array"
				},
				"function.oci-fetch": {
					"tokens": [
						"oci_fetch",
						"ocifetch"
					],
					"id": "function.oci-fetch",
					"name": "oci_fetch",
					"description": "Fetches the next row from a query into internal buffers"
				},
				"function.oci-field-is-null": {
					"tokens": [
						"oci_field_is_null",
						"ocifield_is_null"
					],
					"id": "function.oci-field-is-null",
					"name": "oci_field_is_null",
					"description": "Checks if a field in the currently fetched row is NULL"
				},
				"function.oci-field-name": {
					"tokens": [
						"oci_field_name",
						"ocifield_name"
					],
					"id": "function.oci-field-name",
					"name": "oci_field_name",
					"description": "Returns the name of a field from the statement"
				},
				"function.oci-field-precision": {
					"tokens": [
						"oci_field_precision",
						"ocifield_precision"
					],
					"id": "function.oci-field-precision",
					"name": "oci_field_precision",
					"description": "Tell the precision of a field"
				},
				"function.oci-field-scale": {
					"tokens": [
						"oci_field_scale",
						"ocifield_scale"
					],
					"id": "function.oci-field-scale",
					"name": "oci_field_scale",
					"description": "Tell the scale of the field"
				},
				"function.oci-field-size": {
					"tokens": [
						"oci_field_size",
						"ocifield_size"
					],
					"id": "function.oci-field-size",
					"name": "oci_field_size",
					"description": "Returns field's size"
				},
				"function.oci-field-type-raw": {
					"tokens": [
						"oci_field_type_raw",
						"ocifield_type_raw"
					],
					"id": "function.oci-field-type-raw",
					"name": "oci_field_type_raw",
					"description": "Tell the raw Oracle data type of the field"
				},
				"function.oci-field-type": {
					"tokens": [
						"oci_field_type",
						"ocifield_type"
					],
					"id": "function.oci-field-type",
					"name": "oci_field_type",
					"description": "Returns a field's data type name"
				},
				"function.oci-free-descriptor": {
					"tokens": [
						"oci_free_descriptor",
						"ocifree_descriptor"
					],
					"id": "function.oci-free-descriptor",
					"name": "oci_free_descriptor",
					"description": "Frees a descriptor"
				},
				"function.oci-free-statement": {
					"tokens": [
						"oci_free_statement",
						"ocifree_statement"
					],
					"id": "function.oci-free-statement",
					"name": "oci_free_statement",
					"description": "Frees all resources associated with statement or cursor"
				},
				"function.oci-get-implicit-resultset": {
					"tokens": [
						"oci_get_implicit_resultset",
						"ociget_implicit_resultset"
					],
					"id": "function.oci-get-implicit-resultset",
					"name": "oci_get_implicit_resultset",
					"description": "Returns the next child statement resource from a parent statement resource that has Oracle Database 12c Implicit Result Sets"
				},
				"function.oci-internal-debug": {
					"tokens": [
						"oci_internal_debug",
						"ociinternal_debug"
					],
					"id": "function.oci-internal-debug",
					"name": "oci_internal_debug",
					"description": "Enables or disables internal debug output"
				},
				"function.oci-lob-copy": {
					"tokens": [
						"oci_lob_copy",
						"ocilob_copy"
					],
					"id": "function.oci-lob-copy",
					"name": "oci_lob_copy",
					"description": "Copies large object"
				},
				"function.oci-lob-is-equal": {
					"tokens": [
						"oci_lob_is_equal",
						"ocilob_is_equal"
					],
					"id": "function.oci-lob-is-equal",
					"name": "oci_lob_is_equal",
					"description": "Compares two LOB/FILE locators for equality"
				},
				"function.oci-new-collection": {
					"tokens": [
						"oci_new_collection",
						"ocinew_collection"
					],
					"id": "function.oci-new-collection",
					"name": "oci_new_collection",
					"description": "Allocates new collection object"
				},
				"function.oci-new-connect": {
					"tokens": [
						"oci_new_connect",
						"ocinew_connect"
					],
					"id": "function.oci-new-connect",
					"name": "oci_new_connect",
					"description": "Connect to the Oracle server using a unique connection"
				},
				"function.oci-new-cursor": {
					"tokens": [
						"oci_new_cursor",
						"ocinew_cursor"
					],
					"id": "function.oci-new-cursor",
					"name": "oci_new_cursor",
					"description": "Allocates and returns a new cursor (statement handle)"
				},
				"function.oci-new-descriptor": {
					"tokens": [
						"oci_new_descriptor",
						"ocinew_descriptor"
					],
					"id": "function.oci-new-descriptor",
					"name": "oci_new_descriptor",
					"description": "Initializes a new empty LOB or FILE descriptor"
				},
				"function.oci-num-fields": {
					"tokens": [
						"oci_num_fields",
						"ocinum_fields"
					],
					"id": "function.oci-num-fields",
					"name": "oci_num_fields",
					"description": "Returns the number of result columns in a statement"
				},
				"function.oci-num-rows": {
					"tokens": [
						"oci_num_rows",
						"ocinum_rows"
					],
					"id": "function.oci-num-rows",
					"name": "oci_num_rows",
					"description": "Returns number of rows affected during statement execution"
				},
				"function.oci-parse": {
					"tokens": [
						"oci_parse",
						"ociparse"
					],
					"id": "function.oci-parse",
					"name": "oci_parse",
					"description": "Prepares an Oracle statement for execution"
				},
				"function.oci-password-change": {
					"tokens": [
						"oci_password_change",
						"ocipassword_change"
					],
					"id": "function.oci-password-change",
					"name": "oci_password_change",
					"description": "Changes password of Oracle's user"
				},
				"function.oci-pconnect": {
					"tokens": [
						"oci_pconnect",
						"ocipconnect"
					],
					"id": "function.oci-pconnect",
					"name": "oci_pconnect",
					"description": "Connect to an Oracle database using a persistent connection"
				},
				"function.oci-result": {
					"tokens": [
						"oci_result",
						"ociresult"
					],
					"id": "function.oci-result",
					"name": "oci_result",
					"description": "Returns field's value from the fetched row"
				},
				"function.oci-rollback": {
					"tokens": [
						"oci_rollback",
						"ocirollback"
					],
					"id": "function.oci-rollback",
					"name": "oci_rollback",
					"description": "Rolls back the outstanding database transaction"
				},
				"function.oci-server-version": {
					"tokens": [
						"oci_server_version",
						"ociserver_version"
					],
					"id": "function.oci-server-version",
					"name": "oci_server_version",
					"description": "Returns the Oracle Database version"
				},
				"function.oci-set-action": {
					"tokens": [
						"oci_set_action",
						"ociset_action"
					],
					"id": "function.oci-set-action",
					"name": "oci_set_action",
					"description": "Sets the action name"
				},
				"function.oci-set-client-identifier": {
					"tokens": [
						"oci_set_client_identifier",
						"ociset_client_identifier"
					],
					"id": "function.oci-set-client-identifier",
					"name": "oci_set_client_identifier",
					"description": "Sets the client identifier"
				},
				"function.oci-set-client-info": {
					"tokens": [
						"oci_set_client_info",
						"ociset_client_info"
					],
					"id": "function.oci-set-client-info",
					"name": "oci_set_client_info",
					"description": "Sets the client information"
				},
				"function.oci-set-edition": {
					"tokens": [
						"oci_set_edition",
						"ociset_edition"
					],
					"id": "function.oci-set-edition",
					"name": "oci_set_edition",
					"description": "Sets the database edition"
				},
				"function.oci-set-module-name": {
					"tokens": [
						"oci_set_module_name",
						"ociset_module_name"
					],
					"id": "function.oci-set-module-name",
					"name": "oci_set_module_name",
					"description": "Sets the module name"
				},
				"function.oci-set-prefetch": {
					"tokens": [
						"oci_set_prefetch",
						"ociset_prefetch"
					],
					"id": "function.oci-set-prefetch",
					"name": "oci_set_prefetch",
					"description": "Sets number of rows to be prefetched by queries"
				},
				"function.oci-statement-type": {
					"tokens": [
						"oci_statement_type",
						"ocistatement_type"
					],
					"id": "function.oci-statement-type",
					"name": "oci_statement_type",
					"description": "Returns the type of a statement"
				},
				"oci-collection.append": {
					"tokens": [
						"OCI-Collection::append",
						"append",
						"::append"
					],
					"id": "oci-collection.append",
					"name": "OCI-Collection::append",
					"description": "Appends element to the collection"
				},
				"oci-collection.assign": {
					"tokens": [
						"OCI-Collection::assign",
						"assign",
						"::assign"
					],
					"id": "oci-collection.assign",
					"name": "OCI-Collection::assign",
					"description": "Assigns a value to the collection from another existing collection"
				},
				"oci-collection.assignelem": {
					"tokens": [
						"OCI-Collection::assignElem",
						"assignElem",
						"::assignElem"
					],
					"id": "oci-collection.assignelem",
					"name": "OCI-Collection::assignElem",
					"description": "Assigns a value to the element of the collection"
				},
				"oci-collection.free": {
					"tokens": [
						"OCI-Collection::free",
						"free",
						"::free"
					],
					"id": "oci-collection.free",
					"name": "OCI-Collection::free",
					"description": "Frees the resources associated with the collection object"
				},
				"oci-collection.getelem": {
					"tokens": [
						"OCI-Collection::getElem",
						"getElem",
						"::getElem"
					],
					"id": "oci-collection.getelem",
					"name": "OCI-Collection::getElem",
					"description": "Returns value of the element"
				},
				"oci-collection.max": {
					"tokens": [
						"OCI-Collection::max",
						"max",
						"::max"
					],
					"id": "oci-collection.max",
					"name": "OCI-Collection::max",
					"description": "Returns the maximum number of elements in the collection"
				},
				"oci-collection.size": {
					"tokens": [
						"OCI-Collection::size",
						"size",
						"::size"
					],
					"id": "oci-collection.size",
					"name": "OCI-Collection::size",
					"description": "Returns size of the collection"
				},
				"oci-collection.trim": {
					"tokens": [
						"OCI-Collection::trim",
						"trim",
						"::trim"
					],
					"id": "oci-collection.trim",
					"name": "OCI-Collection::trim",
					"description": "Trims elements from the end of the collection"
				},
				"oci-lob.append": {
					"tokens": [
						"OCI-Lob::append",
						"append",
						"::append"
					],
					"id": "oci-lob.append",
					"name": "OCI-Lob::append",
					"description": "Appends data from the large object to another large object"
				},
				"oci-lob.close": {
					"tokens": [
						"OCI-Lob::close",
						"close",
						"::close"
					],
					"id": "oci-lob.close",
					"name": "OCI-Lob::close",
					"description": "Closes LOB descriptor"
				},
				"oci-lob.eof": {
					"tokens": [
						"OCI-Lob::eof",
						"eof",
						"::eof"
					],
					"id": "oci-lob.eof",
					"name": "OCI-Lob::eof",
					"description": "Tests for end-of-file on a large object's descriptor"
				},
				"oci-lob.erase": {
					"tokens": [
						"OCI-Lob::erase",
						"erase",
						"::erase"
					],
					"id": "oci-lob.erase",
					"name": "OCI-Lob::erase",
					"description": "Erases a specified portion of the internal LOB data"
				},
				"oci-lob.export": {
					"tokens": [
						"OCI-Lob::export",
						"export",
						"::export"
					],
					"id": "oci-lob.export",
					"name": "OCI-Lob::export",
					"description": "Exports LOB's contents to a file"
				},
				"oci-lob.flush": {
					"tokens": [
						"OCI-Lob::flush",
						"flush",
						"::flush"
					],
					"id": "oci-lob.flush",
					"name": "OCI-Lob::flush",
					"description": "Flushes/writes buffer of the LOB to the server"
				},
				"oci-lob.free": {
					"tokens": [
						"OCI-Lob::free",
						"free",
						"::free"
					],
					"id": "oci-lob.free",
					"name": "OCI-Lob::free",
					"description": "Frees resources associated with the LOB descriptor"
				},
				"oci-lob.getbuffering": {
					"tokens": [
						"OCI-Lob::getBuffering",
						"getBuffering",
						"::getBuffering"
					],
					"id": "oci-lob.getbuffering",
					"name": "OCI-Lob::getBuffering",
					"description": "Returns current state of buffering for the large object"
				},
				"oci-lob.import": {
					"tokens": [
						"OCI-Lob::import",
						"import",
						"::import"
					],
					"id": "oci-lob.import",
					"name": "OCI-Lob::import",
					"description": "Imports file data to the LOB"
				},
				"oci-lob.load": {
					"tokens": [
						"OCI-Lob::load",
						"load",
						"::load"
					],
					"id": "oci-lob.load",
					"name": "OCI-Lob::load",
					"description": "Returns large object's contents"
				},
				"oci-lob.read": {
					"tokens": [
						"OCI-Lob::read",
						"read",
						"::read"
					],
					"id": "oci-lob.read",
					"name": "OCI-Lob::read",
					"description": "Reads part of the large object"
				},
				"oci-lob.rewind": {
					"tokens": [
						"OCI-Lob::rewind",
						"rewind",
						"::rewind"
					],
					"id": "oci-lob.rewind",
					"name": "OCI-Lob::rewind",
					"description": "Moves the internal pointer to the beginning of the large object"
				},
				"oci-lob.save": {
					"tokens": [
						"OCI-Lob::save",
						"save",
						"::save"
					],
					"id": "oci-lob.save",
					"name": "OCI-Lob::save",
					"description": "Saves data to the large object"
				},
				"oci-lob.savefile": {
					"tokens": [
						"OCI-Lob::saveFile",
						"saveFile",
						"::saveFile"
					],
					"id": "oci-lob.savefile",
					"name": "OCI-Lob::saveFile",
					"description": "Alias of OCI-Lob::import"
				},
				"oci-lob.seek": {
					"tokens": [
						"OCI-Lob::seek",
						"seek",
						"::seek"
					],
					"id": "oci-lob.seek",
					"name": "OCI-Lob::seek",
					"description": "Sets the internal pointer of the large object"
				},
				"oci-lob.setbuffering": {
					"tokens": [
						"OCI-Lob::setBuffering",
						"setBuffering",
						"::setBuffering"
					],
					"id": "oci-lob.setbuffering",
					"name": "OCI-Lob::setBuffering",
					"description": "Changes current state of buffering for the large object"
				},
				"oci-lob.size": {
					"tokens": [
						"OCI-Lob::size",
						"size",
						"::size"
					],
					"id": "oci-lob.size",
					"name": "OCI-Lob::size",
					"description": "Returns size of large object"
				},
				"oci-lob.tell": {
					"tokens": [
						"OCI-Lob::tell",
						"tell",
						"::tell"
					],
					"id": "oci-lob.tell",
					"name": "OCI-Lob::tell",
					"description": "Returns the current position of internal pointer of large object"
				},
				"oci-lob.truncate": {
					"tokens": [
						"OCI-Lob::truncate",
						"truncate",
						"::truncate"
					],
					"id": "oci-lob.truncate",
					"name": "OCI-Lob::truncate",
					"description": "Truncates large object"
				},
				"oci-lob.write": {
					"tokens": [
						"OCI-Lob::write",
						"write",
						"::write"
					],
					"id": "oci-lob.write",
					"name": "OCI-Lob::write",
					"description": "Writes data to the large object"
				},
				"oci-lob.writetemporary": {
					"tokens": [
						"OCI-Lob::writeTemporary",
						"writeTemporary",
						"::writeTemporary"
					],
					"id": "oci-lob.writetemporary",
					"name": "OCI-Lob::writeTemporary",
					"description": "Writes a temporary large object"
				},
				"oci-lob.writetofile": {
					"tokens": [
						"OCI-Lob::writeToFile",
						"writeToFile",
						"::writeToFile"
					],
					"id": "oci-lob.writetofile",
					"name": "OCI-Lob::writeToFile",
					"description": "Alias of OCI-Lob::export"
				},
				"function.ocibindbyname": {
					"tokens": [
						"ocibindbyname"
					],
					"id": "function.ocibindbyname",
					"name": "ocibindbyname",
					"description": "Alias of oci_bind_by_name"
				},
				"function.ocicancel": {
					"tokens": [
						"ocicancel"
					],
					"id": "function.ocicancel",
					"name": "ocicancel",
					"description": "Alias of oci_cancel"
				},
				"function.ocicloselob": {
					"tokens": [
						"ocicloselob"
					],
					"id": "function.ocicloselob",
					"name": "ocicloselob",
					"description": "Alias of OCI-Lob::close"
				},
				"function.ocicollappend": {
					"tokens": [
						"ocicollappend"
					],
					"id": "function.ocicollappend",
					"name": "ocicollappend",
					"description": "Alias of OCI-Collection::append"
				},
				"function.ocicollassign": {
					"tokens": [
						"ocicollassign"
					],
					"id": "function.ocicollassign",
					"name": "ocicollassign",
					"description": "Alias of OCI-Collection::assign"
				},
				"function.ocicollassignelem": {
					"tokens": [
						"ocicollassignelem"
					],
					"id": "function.ocicollassignelem",
					"name": "ocicollassignelem",
					"description": "Alias of OCI-Collection::assignElem"
				},
				"function.ocicollgetelem": {
					"tokens": [
						"ocicollgetelem"
					],
					"id": "function.ocicollgetelem",
					"name": "ocicollgetelem",
					"description": "Alias of OCI-Collection::getElem"
				},
				"function.ocicollmax": {
					"tokens": [
						"ocicollmax"
					],
					"id": "function.ocicollmax",
					"name": "ocicollmax",
					"description": "Alias of OCI-Collection::max"
				},
				"function.ocicollsize": {
					"tokens": [
						"ocicollsize"
					],
					"id": "function.ocicollsize",
					"name": "ocicollsize",
					"description": "Alias of OCI-Collection::size"
				},
				"function.ocicolltrim": {
					"tokens": [
						"ocicolltrim"
					],
					"id": "function.ocicolltrim",
					"name": "ocicolltrim",
					"description": "Alias of OCI-Collection::trim"
				},
				"function.ocicolumnisnull": {
					"tokens": [
						"ocicolumnisnull"
					],
					"id": "function.ocicolumnisnull",
					"name": "ocicolumnisnull",
					"description": "Alias of oci_field_is_null"
				},
				"function.ocicolumnname": {
					"tokens": [
						"ocicolumnname"
					],
					"id": "function.ocicolumnname",
					"name": "ocicolumnname",
					"description": "Alias of oci_field_name"
				},
				"function.ocicolumnprecision": {
					"tokens": [
						"ocicolumnprecision"
					],
					"id": "function.ocicolumnprecision",
					"name": "ocicolumnprecision",
					"description": "Alias of oci_field_precision"
				},
				"function.ocicolumnscale": {
					"tokens": [
						"ocicolumnscale"
					],
					"id": "function.ocicolumnscale",
					"name": "ocicolumnscale",
					"description": "Alias of oci_field_scale"
				},
				"function.ocicolumnsize": {
					"tokens": [
						"ocicolumnsize"
					],
					"id": "function.ocicolumnsize",
					"name": "ocicolumnsize",
					"description": "Alias of oci_field_size"
				},
				"function.ocicolumntype": {
					"tokens": [
						"ocicolumntype"
					],
					"id": "function.ocicolumntype",
					"name": "ocicolumntype",
					"description": "Alias of oci_field_type"
				},
				"function.ocicolumntyperaw": {
					"tokens": [
						"ocicolumntyperaw"
					],
					"id": "function.ocicolumntyperaw",
					"name": "ocicolumntyperaw",
					"description": "Alias of oci_field_type_raw"
				},
				"function.ocicommit": {
					"tokens": [
						"ocicommit"
					],
					"id": "function.ocicommit",
					"name": "ocicommit",
					"description": "Alias of oci_commit"
				},
				"function.ocidefinebyname": {
					"tokens": [
						"ocidefinebyname"
					],
					"id": "function.ocidefinebyname",
					"name": "ocidefinebyname",
					"description": "Alias of oci_define_by_name"
				},
				"function.ocierror": {
					"tokens": [
						"ocierror"
					],
					"id": "function.ocierror",
					"name": "ocierror",
					"description": "Alias of oci_error"
				},
				"function.ociexecute": {
					"tokens": [
						"ociexecute"
					],
					"id": "function.ociexecute",
					"name": "ociexecute",
					"description": "Alias of oci_execute"
				},
				"function.ocifetch": {
					"tokens": [
						"ocifetch"
					],
					"id": "function.ocifetch",
					"name": "ocifetch",
					"description": "Alias of oci_fetch"
				},
				"function.ocifetchinto": {
					"tokens": [
						"ocifetchinto"
					],
					"id": "function.ocifetchinto",
					"name": "ocifetchinto",
					"description": "Obsolete variant of oci_fetch_array, oci_fetch_object,\n   oci_fetch_assoc and\n   oci_fetch_row"
				},
				"function.ocifetchstatement": {
					"tokens": [
						"ocifetchstatement"
					],
					"id": "function.ocifetchstatement",
					"name": "ocifetchstatement",
					"description": "Alias of oci_fetch_all"
				},
				"function.ocifreecollection": {
					"tokens": [
						"ocifreecollection"
					],
					"id": "function.ocifreecollection",
					"name": "ocifreecollection",
					"description": "Alias of OCI-Collection::free"
				},
				"function.ocifreecursor": {
					"tokens": [
						"ocifreecursor"
					],
					"id": "function.ocifreecursor",
					"name": "ocifreecursor",
					"description": "Alias of oci_free_statement"
				},
				"function.ocifreedesc": {
					"tokens": [
						"ocifreedesc"
					],
					"id": "function.ocifreedesc",
					"name": "ocifreedesc",
					"description": "Alias of OCI-Lob::free"
				},
				"function.ocifreestatement": {
					"tokens": [
						"ocifreestatement"
					],
					"id": "function.ocifreestatement",
					"name": "ocifreestatement",
					"description": "Alias of oci_free_statement"
				},
				"function.ociinternaldebug": {
					"tokens": [
						"ociinternaldebug"
					],
					"id": "function.ociinternaldebug",
					"name": "ociinternaldebug",
					"description": "Alias of oci_internal_debug"
				},
				"function.ociloadlob": {
					"tokens": [
						"ociloadlob"
					],
					"id": "function.ociloadlob",
					"name": "ociloadlob",
					"description": "Alias of OCI-Lob::load"
				},
				"function.ocilogoff": {
					"tokens": [
						"ocilogoff"
					],
					"id": "function.ocilogoff",
					"name": "ocilogoff",
					"description": "Alias of oci_close"
				},
				"function.ocilogon": {
					"tokens": [
						"ocilogon"
					],
					"id": "function.ocilogon",
					"name": "ocilogon",
					"description": "Alias of oci_connect"
				},
				"function.ocinewcollection": {
					"tokens": [
						"ocinewcollection"
					],
					"id": "function.ocinewcollection",
					"name": "ocinewcollection",
					"description": "Alias of oci_new_collection"
				},
				"function.ocinewcursor": {
					"tokens": [
						"ocinewcursor"
					],
					"id": "function.ocinewcursor",
					"name": "ocinewcursor",
					"description": "Alias of oci_new_cursor"
				},
				"function.ocinewdescriptor": {
					"tokens": [
						"ocinewdescriptor"
					],
					"id": "function.ocinewdescriptor",
					"name": "ocinewdescriptor",
					"description": "Alias of oci_new_descriptor"
				},
				"function.ocinlogon": {
					"tokens": [
						"ocinlogon"
					],
					"id": "function.ocinlogon",
					"name": "ocinlogon",
					"description": "Alias of oci_new_connect"
				},
				"function.ocinumcols": {
					"tokens": [
						"ocinumcols"
					],
					"id": "function.ocinumcols",
					"name": "ocinumcols",
					"description": "Alias of oci_num_fields"
				},
				"function.ociparse": {
					"tokens": [
						"ociparse"
					],
					"id": "function.ociparse",
					"name": "ociparse",
					"description": "Alias of oci_parse"
				},
				"function.ociplogon": {
					"tokens": [
						"ociplogon"
					],
					"id": "function.ociplogon",
					"name": "ociplogon",
					"description": "Alias of oci_pconnect"
				},
				"function.ociresult": {
					"tokens": [
						"ociresult"
					],
					"id": "function.ociresult",
					"name": "ociresult",
					"description": "Alias of oci_result"
				},
				"function.ocirollback": {
					"tokens": [
						"ocirollback"
					],
					"id": "function.ocirollback",
					"name": "ocirollback",
					"description": "Alias of oci_rollback"
				},
				"function.ocirowcount": {
					"tokens": [
						"ocirowcount"
					],
					"id": "function.ocirowcount",
					"name": "ocirowcount",
					"description": "Alias of oci_num_rows"
				},
				"function.ocisavelob": {
					"tokens": [
						"ocisavelob"
					],
					"id": "function.ocisavelob",
					"name": "ocisavelob",
					"description": "Alias of OCI-Lob::save"
				},
				"function.ocisavelobfile": {
					"tokens": [
						"ocisavelobfile"
					],
					"id": "function.ocisavelobfile",
					"name": "ocisavelobfile",
					"description": "Alias of OCI-Lob::import"
				},
				"function.ociserverversion": {
					"tokens": [
						"ociserverversion"
					],
					"id": "function.ociserverversion",
					"name": "ociserverversion",
					"description": "Alias of oci_server_version"
				},
				"function.ocisetprefetch": {
					"tokens": [
						"ocisetprefetch"
					],
					"id": "function.ocisetprefetch",
					"name": "ocisetprefetch",
					"description": "Alias of oci_set_prefetch"
				},
				"function.ocistatementtype": {
					"tokens": [
						"ocistatementtype"
					],
					"id": "function.ocistatementtype",
					"name": "ocistatementtype",
					"description": "Alias of oci_statement_type"
				},
				"function.ociwritelobtofile": {
					"tokens": [
						"ociwritelobtofile"
					],
					"id": "function.ociwritelobtofile",
					"name": "ociwritelobtofile",
					"description": "Alias of OCI-Lob::export"
				},
				"function.ociwritetemporarylob": {
					"tokens": [
						"ociwritetemporarylob"
					],
					"id": "function.ociwritetemporarylob",
					"name": "ociwritetemporarylob",
					"description": "Alias of OCI-Lob::writeTemporary"
				},
				"function.px-close": {
					"tokens": [
						"px_close",
						"pxclose"
					],
					"id": "function.px-close",
					"name": "px_close",
					"description": "Closes a paradox database"
				},
				"function.px-create-fp": {
					"tokens": [
						"px_create_fp",
						"pxcreate_fp"
					],
					"id": "function.px-create-fp",
					"name": "px_create_fp",
					"description": "Create a new paradox database"
				},
				"function.px-date2string": {
					"tokens": [
						"px_date2string",
						"pxdate2string"
					],
					"id": "function.px-date2string",
					"name": "px_date2string",
					"description": "Converts a date into a string."
				},
				"function.px-delete-record": {
					"tokens": [
						"px_delete_record",
						"pxdelete_record"
					],
					"id": "function.px-delete-record",
					"name": "px_delete_record",
					"description": "Deletes record from paradox database"
				},
				"function.px-delete": {
					"tokens": [
						"px_delete",
						"pxdelete"
					],
					"id": "function.px-delete",
					"name": "px_delete",
					"description": "Deletes resource of paradox database"
				},
				"function.px-get-field": {
					"tokens": [
						"px_get_field",
						"pxget_field"
					],
					"id": "function.px-get-field",
					"name": "px_get_field",
					"description": "Returns the specification of a single field"
				},
				"function.px-get-info": {
					"tokens": [
						"px_get_info",
						"pxget_info"
					],
					"id": "function.px-get-info",
					"name": "px_get_info",
					"description": "Return lots of information about a paradox file"
				},
				"function.px-get-parameter": {
					"tokens": [
						"px_get_parameter",
						"pxget_parameter"
					],
					"id": "function.px-get-parameter",
					"name": "px_get_parameter",
					"description": "Gets a parameter"
				},
				"function.px-get-record": {
					"tokens": [
						"px_get_record",
						"pxget_record"
					],
					"id": "function.px-get-record",
					"name": "px_get_record",
					"description": "Returns record of paradox database"
				},
				"function.px-get-schema": {
					"tokens": [
						"px_get_schema",
						"pxget_schema"
					],
					"id": "function.px-get-schema",
					"name": "px_get_schema",
					"description": "Returns the database schema"
				},
				"function.px-get-value": {
					"tokens": [
						"px_get_value",
						"pxget_value"
					],
					"id": "function.px-get-value",
					"name": "px_get_value",
					"description": "Gets a value"
				},
				"function.px-insert-record": {
					"tokens": [
						"px_insert_record",
						"pxinsert_record"
					],
					"id": "function.px-insert-record",
					"name": "px_insert_record",
					"description": "Inserts record into paradox database"
				},
				"function.px-new": {
					"tokens": [
						"px_new",
						"pxnew"
					],
					"id": "function.px-new",
					"name": "px_new",
					"description": "Create a new paradox object"
				},
				"function.px-numfields": {
					"tokens": [
						"px_numfields",
						"pxnumfields"
					],
					"id": "function.px-numfields",
					"name": "px_numfields",
					"description": "Returns number of fields in a database"
				},
				"function.px-numrecords": {
					"tokens": [
						"px_numrecords",
						"pxnumrecords"
					],
					"id": "function.px-numrecords",
					"name": "px_numrecords",
					"description": "Returns number of records in a database"
				},
				"function.px-open-fp": {
					"tokens": [
						"px_open_fp",
						"pxopen_fp"
					],
					"id": "function.px-open-fp",
					"name": "px_open_fp",
					"description": "Open paradox database"
				},
				"function.px-put-record": {
					"tokens": [
						"px_put_record",
						"pxput_record"
					],
					"id": "function.px-put-record",
					"name": "px_put_record",
					"description": "Stores record into paradox database"
				},
				"function.px-retrieve-record": {
					"tokens": [
						"px_retrieve_record",
						"pxretrieve_record"
					],
					"id": "function.px-retrieve-record",
					"name": "px_retrieve_record",
					"description": "Returns record of paradox database"
				},
				"function.px-set-blob-file": {
					"tokens": [
						"px_set_blob_file",
						"pxset_blob_file"
					],
					"id": "function.px-set-blob-file",
					"name": "px_set_blob_file",
					"description": "Sets the file where blobs are read from"
				},
				"function.px-set-parameter": {
					"tokens": [
						"px_set_parameter",
						"pxset_parameter"
					],
					"id": "function.px-set-parameter",
					"name": "px_set_parameter",
					"description": "Sets a parameter"
				},
				"function.px-set-tablename": {
					"tokens": [
						"px_set_tablename",
						"pxset_tablename"
					],
					"id": "function.px-set-tablename",
					"name": "px_set_tablename",
					"description": "Sets the name of a table (deprecated)"
				},
				"function.px-set-targetencoding": {
					"tokens": [
						"px_set_targetencoding",
						"pxset_targetencoding"
					],
					"id": "function.px-set-targetencoding",
					"name": "px_set_targetencoding",
					"description": "Sets the encoding for character fields (deprecated)"
				},
				"function.px-set-value": {
					"tokens": [
						"px_set_value",
						"pxset_value"
					],
					"id": "function.px-set-value",
					"name": "px_set_value",
					"description": "Sets a value"
				},
				"function.px-timestamp2string": {
					"tokens": [
						"px_timestamp2string",
						"pxtimestamp2string"
					],
					"id": "function.px-timestamp2string",
					"name": "px_timestamp2string",
					"description": "Converts the timestamp into a string."
				},
				"function.px-update-record": {
					"tokens": [
						"px_update_record",
						"pxupdate_record"
					],
					"id": "function.px-update-record",
					"name": "px_update_record",
					"description": "Updates record in paradox database"
				},
				"function.pg-affected-rows": {
					"tokens": [
						"pg_affected_rows",
						"pgaffected_rows"
					],
					"id": "function.pg-affected-rows",
					"name": "pg_affected_rows",
					"description": "Returns number of affected records (tuples)"
				},
				"function.pg-cancel-query": {
					"tokens": [
						"pg_cancel_query",
						"pgcancel_query"
					],
					"id": "function.pg-cancel-query",
					"name": "pg_cancel_query",
					"description": "Cancel an asynchronous query"
				},
				"function.pg-client-encoding": {
					"tokens": [
						"pg_client_encoding",
						"pgclient_encoding"
					],
					"id": "function.pg-client-encoding",
					"name": "pg_client_encoding",
					"description": "Gets the client encoding"
				},
				"function.pg-close": {
					"tokens": [
						"pg_close",
						"pgclose"
					],
					"id": "function.pg-close",
					"name": "pg_close",
					"description": "Closes a PostgreSQL connection"
				},
				"function.pg-connect-poll": {
					"tokens": [
						"pg_connect_poll",
						"pgconnect_poll"
					],
					"id": "function.pg-connect-poll",
					"name": "pg_connect_poll",
					"description": "Poll the status of an in-progress asynchronous PostgreSQL connection\n   attempt."
				},
				"function.pg-connect": {
					"tokens": [
						"pg_connect",
						"pgconnect"
					],
					"id": "function.pg-connect",
					"name": "pg_connect",
					"description": "Open a PostgreSQL connection"
				},
				"function.pg-connection-busy": {
					"tokens": [
						"pg_connection_busy",
						"pgconnection_busy"
					],
					"id": "function.pg-connection-busy",
					"name": "pg_connection_busy",
					"description": "Get connection is busy or not"
				},
				"function.pg-connection-reset": {
					"tokens": [
						"pg_connection_reset",
						"pgconnection_reset"
					],
					"id": "function.pg-connection-reset",
					"name": "pg_connection_reset",
					"description": "Reset connection (reconnect)"
				},
				"function.pg-connection-status": {
					"tokens": [
						"pg_connection_status",
						"pgconnection_status"
					],
					"id": "function.pg-connection-status",
					"name": "pg_connection_status",
					"description": "Get connection status"
				},
				"function.pg-consume-input": {
					"tokens": [
						"pg_consume_input",
						"pgconsume_input"
					],
					"id": "function.pg-consume-input",
					"name": "pg_consume_input",
					"description": "Reads input on the connection"
				},
				"function.pg-convert": {
					"tokens": [
						"pg_convert",
						"pgconvert"
					],
					"id": "function.pg-convert",
					"name": "pg_convert",
					"description": "Convert associative array values into suitable for SQL statement"
				},
				"function.pg-copy-from": {
					"tokens": [
						"pg_copy_from",
						"pgcopy_from"
					],
					"id": "function.pg-copy-from",
					"name": "pg_copy_from",
					"description": "Insert records into a table from an array"
				},
				"function.pg-copy-to": {
					"tokens": [
						"pg_copy_to",
						"pgcopy_to"
					],
					"id": "function.pg-copy-to",
					"name": "pg_copy_to",
					"description": "Copy a table to an array"
				},
				"function.pg-dbname": {
					"tokens": [
						"pg_dbname",
						"pgdbname"
					],
					"id": "function.pg-dbname",
					"name": "pg_dbname",
					"description": "Get the database name"
				},
				"function.pg-delete": {
					"tokens": [
						"pg_delete",
						"pgdelete"
					],
					"id": "function.pg-delete",
					"name": "pg_delete",
					"description": "Deletes records"
				},
				"function.pg-end-copy": {
					"tokens": [
						"pg_end_copy",
						"pgend_copy"
					],
					"id": "function.pg-end-copy",
					"name": "pg_end_copy",
					"description": "Sync with PostgreSQL backend"
				},
				"function.pg-escape-bytea": {
					"tokens": [
						"pg_escape_bytea",
						"pgescape_bytea"
					],
					"id": "function.pg-escape-bytea",
					"name": "pg_escape_bytea",
					"description": "Escape a string for insertion into a bytea field"
				},
				"function.pg-escape-identifier": {
					"tokens": [
						"pg_escape_identifier",
						"pgescape_identifier"
					],
					"id": "function.pg-escape-identifier",
					"name": "pg_escape_identifier",
					"description": "Escape a identifier for insertion into a text field"
				},
				"function.pg-escape-literal": {
					"tokens": [
						"pg_escape_literal",
						"pgescape_literal"
					],
					"id": "function.pg-escape-literal",
					"name": "pg_escape_literal",
					"description": "Escape a literal for insertion into a text field"
				},
				"function.pg-escape-string": {
					"tokens": [
						"pg_escape_string",
						"pgescape_string"
					],
					"id": "function.pg-escape-string",
					"name": "pg_escape_string",
					"description": "Escape a string for query"
				},
				"function.pg-execute": {
					"tokens": [
						"pg_execute",
						"pgexecute"
					],
					"id": "function.pg-execute",
					"name": "pg_execute",
					"description": "Sends a request to execute a prepared statement with given parameters, and waits for the result."
				},
				"function.pg-fetch-all-columns": {
					"tokens": [
						"pg_fetch_all_columns",
						"pgfetch_all_columns"
					],
					"id": "function.pg-fetch-all-columns",
					"name": "pg_fetch_all_columns",
					"description": "Fetches all rows in a particular result column as an array"
				},
				"function.pg-fetch-all": {
					"tokens": [
						"pg_fetch_all",
						"pgfetch_all"
					],
					"id": "function.pg-fetch-all",
					"name": "pg_fetch_all",
					"description": "Fetches all rows from a result as an array"
				},
				"function.pg-fetch-array": {
					"tokens": [
						"pg_fetch_array",
						"pgfetch_array"
					],
					"id": "function.pg-fetch-array",
					"name": "pg_fetch_array",
					"description": "Fetch a row as an array"
				},
				"function.pg-fetch-assoc": {
					"tokens": [
						"pg_fetch_assoc",
						"pgfetch_assoc"
					],
					"id": "function.pg-fetch-assoc",
					"name": "pg_fetch_assoc",
					"description": "Fetch a row as an associative array"
				},
				"function.pg-fetch-object": {
					"tokens": [
						"pg_fetch_object",
						"pgfetch_object"
					],
					"id": "function.pg-fetch-object",
					"name": "pg_fetch_object",
					"description": "Fetch a row as an object"
				},
				"function.pg-fetch-result": {
					"tokens": [
						"pg_fetch_result",
						"pgfetch_result"
					],
					"id": "function.pg-fetch-result",
					"name": "pg_fetch_result",
					"description": "Returns values from a result resource"
				},
				"function.pg-fetch-row": {
					"tokens": [
						"pg_fetch_row",
						"pgfetch_row"
					],
					"id": "function.pg-fetch-row",
					"name": "pg_fetch_row",
					"description": "Get a row as an enumerated array"
				},
				"function.pg-field-is-null": {
					"tokens": [
						"pg_field_is_null",
						"pgfield_is_null"
					],
					"id": "function.pg-field-is-null",
					"name": "pg_field_is_null",
					"description": "Test if a field is SQL NULL"
				},
				"function.pg-field-name": {
					"tokens": [
						"pg_field_name",
						"pgfield_name"
					],
					"id": "function.pg-field-name",
					"name": "pg_field_name",
					"description": "Returns the name of a field"
				},
				"function.pg-field-num": {
					"tokens": [
						"pg_field_num",
						"pgfield_num"
					],
					"id": "function.pg-field-num",
					"name": "pg_field_num",
					"description": "Returns the field number of the named field"
				},
				"function.pg-field-prtlen": {
					"tokens": [
						"pg_field_prtlen",
						"pgfield_prtlen"
					],
					"id": "function.pg-field-prtlen",
					"name": "pg_field_prtlen",
					"description": "Returns the printed length"
				},
				"function.pg-field-size": {
					"tokens": [
						"pg_field_size",
						"pgfield_size"
					],
					"id": "function.pg-field-size",
					"name": "pg_field_size",
					"description": "Returns the internal storage size of the named field"
				},
				"function.pg-field-table": {
					"tokens": [
						"pg_field_table",
						"pgfield_table"
					],
					"id": "function.pg-field-table",
					"name": "pg_field_table",
					"description": "Returns the name or oid of the tables field"
				},
				"function.pg-field-type-oid": {
					"tokens": [
						"pg_field_type_oid",
						"pgfield_type_oid"
					],
					"id": "function.pg-field-type-oid",
					"name": "pg_field_type_oid",
					"description": "Returns the type ID (OID) for the corresponding field number"
				},
				"function.pg-field-type": {
					"tokens": [
						"pg_field_type",
						"pgfield_type"
					],
					"id": "function.pg-field-type",
					"name": "pg_field_type",
					"description": "Returns the type name for the corresponding field number"
				},
				"function.pg-flush": {
					"tokens": [
						"pg_flush",
						"pgflush"
					],
					"id": "function.pg-flush",
					"name": "pg_flush",
					"description": "Flush outbound query data on the connection"
				},
				"function.pg-free-result": {
					"tokens": [
						"pg_free_result",
						"pgfree_result"
					],
					"id": "function.pg-free-result",
					"name": "pg_free_result",
					"description": "Free result memory"
				},
				"function.pg-get-notify": {
					"tokens": [
						"pg_get_notify",
						"pgget_notify"
					],
					"id": "function.pg-get-notify",
					"name": "pg_get_notify",
					"description": "Gets SQL NOTIFY message"
				},
				"function.pg-get-pid": {
					"tokens": [
						"pg_get_pid",
						"pgget_pid"
					],
					"id": "function.pg-get-pid",
					"name": "pg_get_pid",
					"description": "Gets the backend's process ID"
				},
				"function.pg-get-result": {
					"tokens": [
						"pg_get_result",
						"pgget_result"
					],
					"id": "function.pg-get-result",
					"name": "pg_get_result",
					"description": "Get asynchronous query result"
				},
				"function.pg-host": {
					"tokens": [
						"pg_host",
						"pghost"
					],
					"id": "function.pg-host",
					"name": "pg_host",
					"description": "Returns the host name associated with the connection"
				},
				"function.pg-insert": {
					"tokens": [
						"pg_insert",
						"pginsert"
					],
					"id": "function.pg-insert",
					"name": "pg_insert",
					"description": "Insert array into table"
				},
				"function.pg-last-error": {
					"tokens": [
						"pg_last_error",
						"pglast_error"
					],
					"id": "function.pg-last-error",
					"name": "pg_last_error",
					"description": "Get the last error message string of a connection"
				},
				"function.pg-last-notice": {
					"tokens": [
						"pg_last_notice",
						"pglast_notice"
					],
					"id": "function.pg-last-notice",
					"name": "pg_last_notice",
					"description": "Returns the last notice message from PostgreSQL server"
				},
				"function.pg-last-oid": {
					"tokens": [
						"pg_last_oid",
						"pglast_oid"
					],
					"id": "function.pg-last-oid",
					"name": "pg_last_oid",
					"description": "Returns the last row's OID"
				},
				"function.pg-lo-close": {
					"tokens": [
						"pg_lo_close",
						"pglo_close"
					],
					"id": "function.pg-lo-close",
					"name": "pg_lo_close",
					"description": "Close a large object"
				},
				"function.pg-lo-create": {
					"tokens": [
						"pg_lo_create",
						"pglo_create"
					],
					"id": "function.pg-lo-create",
					"name": "pg_lo_create",
					"description": "Create a large object"
				},
				"function.pg-lo-export": {
					"tokens": [
						"pg_lo_export",
						"pglo_export"
					],
					"id": "function.pg-lo-export",
					"name": "pg_lo_export",
					"description": "Export a large object to file"
				},
				"function.pg-lo-import": {
					"tokens": [
						"pg_lo_import",
						"pglo_import"
					],
					"id": "function.pg-lo-import",
					"name": "pg_lo_import",
					"description": "Import a large object from file"
				},
				"function.pg-lo-open": {
					"tokens": [
						"pg_lo_open",
						"pglo_open"
					],
					"id": "function.pg-lo-open",
					"name": "pg_lo_open",
					"description": "Open a large object"
				},
				"function.pg-lo-read-all": {
					"tokens": [
						"pg_lo_read_all",
						"pglo_read_all"
					],
					"id": "function.pg-lo-read-all",
					"name": "pg_lo_read_all",
					"description": "Reads an entire large object and send straight to browser"
				},
				"function.pg-lo-read": {
					"tokens": [
						"pg_lo_read",
						"pglo_read"
					],
					"id": "function.pg-lo-read",
					"name": "pg_lo_read",
					"description": "Read a large object"
				},
				"function.pg-lo-seek": {
					"tokens": [
						"pg_lo_seek",
						"pglo_seek"
					],
					"id": "function.pg-lo-seek",
					"name": "pg_lo_seek",
					"description": "Seeks position within a large object"
				},
				"function.pg-lo-tell": {
					"tokens": [
						"pg_lo_tell",
						"pglo_tell"
					],
					"id": "function.pg-lo-tell",
					"name": "pg_lo_tell",
					"description": "Returns current seek position a of large object"
				},
				"function.pg-lo-truncate": {
					"tokens": [
						"pg_lo_truncate",
						"pglo_truncate"
					],
					"id": "function.pg-lo-truncate",
					"name": "pg_lo_truncate",
					"description": "Truncates a large object"
				},
				"function.pg-lo-unlink": {
					"tokens": [
						"pg_lo_unlink",
						"pglo_unlink"
					],
					"id": "function.pg-lo-unlink",
					"name": "pg_lo_unlink",
					"description": "Delete a large object"
				},
				"function.pg-lo-write": {
					"tokens": [
						"pg_lo_write",
						"pglo_write"
					],
					"id": "function.pg-lo-write",
					"name": "pg_lo_write",
					"description": "Write to a large object"
				},
				"function.pg-meta-data": {
					"tokens": [
						"pg_meta_data",
						"pgmeta_data"
					],
					"id": "function.pg-meta-data",
					"name": "pg_meta_data",
					"description": "Get meta data for table"
				},
				"function.pg-num-fields": {
					"tokens": [
						"pg_num_fields",
						"pgnum_fields"
					],
					"id": "function.pg-num-fields",
					"name": "pg_num_fields",
					"description": "Returns the number of fields in a result"
				},
				"function.pg-num-rows": {
					"tokens": [
						"pg_num_rows",
						"pgnum_rows"
					],
					"id": "function.pg-num-rows",
					"name": "pg_num_rows",
					"description": "Returns the number of rows in a result"
				},
				"function.pg-options": {
					"tokens": [
						"pg_options",
						"pgoptions"
					],
					"id": "function.pg-options",
					"name": "pg_options",
					"description": "Get the options associated with the connection"
				},
				"function.pg-parameter-status": {
					"tokens": [
						"pg_parameter_status",
						"pgparameter_status"
					],
					"id": "function.pg-parameter-status",
					"name": "pg_parameter_status",
					"description": "Looks up a current parameter setting of the server."
				},
				"function.pg-pconnect": {
					"tokens": [
						"pg_pconnect",
						"pgpconnect"
					],
					"id": "function.pg-pconnect",
					"name": "pg_pconnect",
					"description": "Open a persistent PostgreSQL connection"
				},
				"function.pg-ping": {
					"tokens": [
						"pg_ping",
						"pgping"
					],
					"id": "function.pg-ping",
					"name": "pg_ping",
					"description": "Ping database connection"
				},
				"function.pg-port": {
					"tokens": [
						"pg_port",
						"pgport"
					],
					"id": "function.pg-port",
					"name": "pg_port",
					"description": "Return the port number associated with the connection"
				},
				"function.pg-prepare": {
					"tokens": [
						"pg_prepare",
						"pgprepare"
					],
					"id": "function.pg-prepare",
					"name": "pg_prepare",
					"description": "Submits a request to create a prepared statement with the \n  given parameters, and waits for completion."
				},
				"function.pg-put-line": {
					"tokens": [
						"pg_put_line",
						"pgput_line"
					],
					"id": "function.pg-put-line",
					"name": "pg_put_line",
					"description": "Send a NULL-terminated string to PostgreSQL backend"
				},
				"function.pg-query-params": {
					"tokens": [
						"pg_query_params",
						"pgquery_params"
					],
					"id": "function.pg-query-params",
					"name": "pg_query_params",
					"description": "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text."
				},
				"function.pg-query": {
					"tokens": [
						"pg_query",
						"pgquery"
					],
					"id": "function.pg-query",
					"name": "pg_query",
					"description": "Execute a query"
				},
				"function.pg-result-error-field": {
					"tokens": [
						"pg_result_error_field",
						"pgresult_error_field"
					],
					"id": "function.pg-result-error-field",
					"name": "pg_result_error_field",
					"description": "Returns an individual field of an error report."
				},
				"function.pg-result-error": {
					"tokens": [
						"pg_result_error",
						"pgresult_error"
					],
					"id": "function.pg-result-error",
					"name": "pg_result_error",
					"description": "Get error message associated with result"
				},
				"function.pg-result-seek": {
					"tokens": [
						"pg_result_seek",
						"pgresult_seek"
					],
					"id": "function.pg-result-seek",
					"name": "pg_result_seek",
					"description": "Set internal row offset in result resource"
				},
				"function.pg-result-status": {
					"tokens": [
						"pg_result_status",
						"pgresult_status"
					],
					"id": "function.pg-result-status",
					"name": "pg_result_status",
					"description": "Get status of query result"
				},
				"function.pg-select": {
					"tokens": [
						"pg_select",
						"pgselect"
					],
					"id": "function.pg-select",
					"name": "pg_select",
					"description": "Select records"
				},
				"function.pg-send-execute": {
					"tokens": [
						"pg_send_execute",
						"pgsend_execute"
					],
					"id": "function.pg-send-execute",
					"name": "pg_send_execute",
					"description": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)."
				},
				"function.pg-send-prepare": {
					"tokens": [
						"pg_send_prepare",
						"pgsend_prepare"
					],
					"id": "function.pg-send-prepare",
					"name": "pg_send_prepare",
					"description": "Sends a request to create a prepared statement with the given parameters, without waiting for completion."
				},
				"function.pg-send-query-params": {
					"tokens": [
						"pg_send_query_params",
						"pgsend_query_params"
					],
					"id": "function.pg-send-query-params",
					"name": "pg_send_query_params",
					"description": "Submits a command and separate parameters to the server without waiting for the result(s)."
				},
				"function.pg-send-query": {
					"tokens": [
						"pg_send_query",
						"pgsend_query"
					],
					"id": "function.pg-send-query",
					"name": "pg_send_query",
					"description": "Sends asynchronous query"
				},
				"function.pg-set-client-encoding": {
					"tokens": [
						"pg_set_client_encoding",
						"pgset_client_encoding"
					],
					"id": "function.pg-set-client-encoding",
					"name": "pg_set_client_encoding",
					"description": "Set the client encoding"
				},
				"function.pg-set-error-verbosity": {
					"tokens": [
						"pg_set_error_verbosity",
						"pgset_error_verbosity"
					],
					"id": "function.pg-set-error-verbosity",
					"name": "pg_set_error_verbosity",
					"description": "Determines the verbosity of messages returned by pg_last_error \n   and pg_result_error."
				},
				"function.pg-socket": {
					"tokens": [
						"pg_socket",
						"pgsocket"
					],
					"id": "function.pg-socket",
					"name": "pg_socket",
					"description": "Get a read only handle to the socket underlying a PostgreSQL connection"
				},
				"function.pg-trace": {
					"tokens": [
						"pg_trace",
						"pgtrace"
					],
					"id": "function.pg-trace",
					"name": "pg_trace",
					"description": "Enable tracing a PostgreSQL connection"
				},
				"function.pg-transaction-status": {
					"tokens": [
						"pg_transaction_status",
						"pgtransaction_status"
					],
					"id": "function.pg-transaction-status",
					"name": "pg_transaction_status",
					"description": "Returns the current in-transaction status of the server."
				},
				"function.pg-tty": {
					"tokens": [
						"pg_tty",
						"pgtty"
					],
					"id": "function.pg-tty",
					"name": "pg_tty",
					"description": "Return the TTY name associated with the connection"
				},
				"function.pg-unescape-bytea": {
					"tokens": [
						"pg_unescape_bytea",
						"pgunescape_bytea"
					],
					"id": "function.pg-unescape-bytea",
					"name": "pg_unescape_bytea",
					"description": "Unescape binary for bytea type"
				},
				"function.pg-untrace": {
					"tokens": [
						"pg_untrace",
						"pguntrace"
					],
					"id": "function.pg-untrace",
					"name": "pg_untrace",
					"description": "Disable tracing of a PostgreSQL connection"
				},
				"function.pg-update": {
					"tokens": [
						"pg_update",
						"pgupdate"
					],
					"id": "function.pg-update",
					"name": "pg_update",
					"description": "Update table"
				},
				"function.pg-version": {
					"tokens": [
						"pg_version",
						"pgversion"
					],
					"id": "function.pg-version",
					"name": "pg_version",
					"description": "Returns an array with client, protocol and server version (when available)"
				},
				"function.sqlite-array-query": {
					"tokens": [
						"sqlite_array_query",
						"sqlitearray_query"
					],
					"id": "function.sqlite-array-query",
					"name": "sqlite_array_query",
					"description": "Execute a query against a given database and returns an array"
				},
				"function.sqlite-busy-timeout": {
					"tokens": [
						"sqlite_busy_timeout",
						"sqlitebusy_timeout"
					],
					"id": "function.sqlite-busy-timeout",
					"name": "sqlite_busy_timeout",
					"description": "Set busy timeout duration, or disable busy handlers"
				},
				"function.sqlite-changes": {
					"tokens": [
						"sqlite_changes",
						"sqlitechanges"
					],
					"id": "function.sqlite-changes",
					"name": "sqlite_changes",
					"description": "Returns the number of rows that were changed by the most\n   recent SQL statement"
				},
				"function.sqlite-close": {
					"tokens": [
						"sqlite_close",
						"sqliteclose"
					],
					"id": "function.sqlite-close",
					"name": "sqlite_close",
					"description": "Closes an open SQLite database"
				},
				"function.sqlite-column": {
					"tokens": [
						"sqlite_column",
						"sqlitecolumn"
					],
					"id": "function.sqlite-column",
					"name": "sqlite_column",
					"description": "Fetches a column from the current row of a result set"
				},
				"function.sqlite-create-aggregate": {
					"tokens": [
						"sqlite_create_aggregate",
						"sqlitecreate_aggregate"
					],
					"id": "function.sqlite-create-aggregate",
					"name": "sqlite_create_aggregate",
					"description": "Register an aggregating UDF for use in SQL statements"
				},
				"function.sqlite-create-function": {
					"tokens": [
						"sqlite_create_function",
						"sqlitecreate_function"
					],
					"id": "function.sqlite-create-function",
					"name": "sqlite_create_function",
					"description": "Registers a &quot;regular&quot; User Defined Function for use in SQL statements"
				},
				"function.sqlite-current": {
					"tokens": [
						"sqlite_current",
						"sqlitecurrent"
					],
					"id": "function.sqlite-current",
					"name": "sqlite_current",
					"description": "Fetches the current row from a result set as an array"
				},
				"function.sqlite-error-string": {
					"tokens": [
						"sqlite_error_string",
						"sqliteerror_string"
					],
					"id": "function.sqlite-error-string",
					"name": "sqlite_error_string",
					"description": "Returns the textual description of an error code"
				},
				"function.sqlite-escape-string": {
					"tokens": [
						"sqlite_escape_string",
						"sqliteescape_string"
					],
					"id": "function.sqlite-escape-string",
					"name": "sqlite_escape_string",
					"description": "Escapes a string for use as a query parameter"
				},
				"function.sqlite-exec": {
					"tokens": [
						"sqlite_exec",
						"sqliteexec"
					],
					"id": "function.sqlite-exec",
					"name": "sqlite_exec",
					"description": "Executes a result-less query against a given database"
				},
				"function.sqlite-factory": {
					"tokens": [
						"sqlite_factory",
						"sqlitefactory"
					],
					"id": "function.sqlite-factory",
					"name": "sqlite_factory",
					"description": "Opens an SQLite database and returns an SQLiteDatabase object"
				},
				"function.sqlite-fetch-all": {
					"tokens": [
						"sqlite_fetch_all",
						"sqlitefetch_all"
					],
					"id": "function.sqlite-fetch-all",
					"name": "sqlite_fetch_all",
					"description": "Fetches all rows from a result set as an array of arrays"
				},
				"function.sqlite-fetch-array": {
					"tokens": [
						"sqlite_fetch_array",
						"sqlitefetch_array"
					],
					"id": "function.sqlite-fetch-array",
					"name": "sqlite_fetch_array",
					"description": "Fetches the next row from a result set as an array"
				},
				"function.sqlite-fetch-column-types": {
					"tokens": [
						"sqlite_fetch_column_types",
						"sqlitefetch_column_types"
					],
					"id": "function.sqlite-fetch-column-types",
					"name": "sqlite_fetch_column_types",
					"description": "Return an array of column types from a particular table"
				},
				"function.sqlite-fetch-object": {
					"tokens": [
						"sqlite_fetch_object",
						"sqlitefetch_object"
					],
					"id": "function.sqlite-fetch-object",
					"name": "sqlite_fetch_object",
					"description": "Fetches the next row from a result set as an object"
				},
				"function.sqlite-fetch-single": {
					"tokens": [
						"sqlite_fetch_single",
						"sqlitefetch_single"
					],
					"id": "function.sqlite-fetch-single",
					"name": "sqlite_fetch_single",
					"description": "Fetches the first column of a result set as a string"
				},
				"function.sqlite-fetch-string": {
					"tokens": [
						"sqlite_fetch_string",
						"sqlitefetch_string"
					],
					"id": "function.sqlite-fetch-string",
					"name": "sqlite_fetch_string",
					"description": "Alias of sqlite_fetch_single"
				},
				"function.sqlite-field-name": {
					"tokens": [
						"sqlite_field_name",
						"sqlitefield_name"
					],
					"id": "function.sqlite-field-name",
					"name": "sqlite_field_name",
					"description": "Returns the name of a particular field"
				},
				"function.sqlite-has-more": {
					"tokens": [
						"sqlite_has_more",
						"sqlitehas_more"
					],
					"id": "function.sqlite-has-more",
					"name": "sqlite_has_more",
					"description": "Finds whether or not more rows are available"
				},
				"function.sqlite-has-prev": {
					"tokens": [
						"sqlite_has_prev",
						"sqlitehas_prev"
					],
					"id": "function.sqlite-has-prev",
					"name": "sqlite_has_prev",
					"description": "Returns whether or not a previous row is available"
				},
				"function.sqlite-key": {
					"tokens": [
						"sqlite_key",
						"sqlitekey"
					],
					"id": "function.sqlite-key",
					"name": "sqlite_key",
					"description": "Returns the current row index"
				},
				"function.sqlite-last-error": {
					"tokens": [
						"sqlite_last_error",
						"sqlitelast_error"
					],
					"id": "function.sqlite-last-error",
					"name": "sqlite_last_error",
					"description": "Returns the error code of the last error for a database"
				},
				"function.sqlite-last-insert-rowid": {
					"tokens": [
						"sqlite_last_insert_rowid",
						"sqlitelast_insert_rowid"
					],
					"id": "function.sqlite-last-insert-rowid",
					"name": "sqlite_last_insert_rowid",
					"description": "Returns the rowid of the most recently inserted row"
				},
				"function.sqlite-libencoding": {
					"tokens": [
						"sqlite_libencoding",
						"sqlitelibencoding"
					],
					"id": "function.sqlite-libencoding",
					"name": "sqlite_libencoding",
					"description": "Returns the encoding of the linked SQLite library"
				},
				"function.sqlite-libversion": {
					"tokens": [
						"sqlite_libversion",
						"sqlitelibversion"
					],
					"id": "function.sqlite-libversion",
					"name": "sqlite_libversion",
					"description": "Returns the version of the linked SQLite library"
				},
				"function.sqlite-next": {
					"tokens": [
						"sqlite_next",
						"sqlitenext"
					],
					"id": "function.sqlite-next",
					"name": "sqlite_next",
					"description": "Seek to the next row number"
				},
				"function.sqlite-num-fields": {
					"tokens": [
						"sqlite_num_fields",
						"sqlitenum_fields"
					],
					"id": "function.sqlite-num-fields",
					"name": "sqlite_num_fields",
					"description": "Returns the number of fields in a result set"
				},
				"function.sqlite-num-rows": {
					"tokens": [
						"sqlite_num_rows",
						"sqlitenum_rows"
					],
					"id": "function.sqlite-num-rows",
					"name": "sqlite_num_rows",
					"description": "Returns the number of rows in a buffered result set"
				},
				"function.sqlite-open": {
					"tokens": [
						"sqlite_open",
						"sqliteopen"
					],
					"id": "function.sqlite-open",
					"name": "sqlite_open",
					"description": "Opens an SQLite database and create the database if it does not exist"
				},
				"function.sqlite-popen": {
					"tokens": [
						"sqlite_popen",
						"sqlitepopen"
					],
					"id": "function.sqlite-popen",
					"name": "sqlite_popen",
					"description": "Opens a persistent handle to an SQLite database and create the database if it does not exist"
				},
				"function.sqlite-prev": {
					"tokens": [
						"sqlite_prev",
						"sqliteprev"
					],
					"id": "function.sqlite-prev",
					"name": "sqlite_prev",
					"description": "Seek to the previous row number of a result set"
				},
				"function.sqlite-query": {
					"tokens": [
						"sqlite_query",
						"sqlitequery"
					],
					"id": "function.sqlite-query",
					"name": "sqlite_query",
					"description": "Executes a query against a given database and returns a result handle"
				},
				"function.sqlite-rewind": {
					"tokens": [
						"sqlite_rewind",
						"sqliterewind"
					],
					"id": "function.sqlite-rewind",
					"name": "sqlite_rewind",
					"description": "Seek to the first row number"
				},
				"function.sqlite-seek": {
					"tokens": [
						"sqlite_seek",
						"sqliteseek"
					],
					"id": "function.sqlite-seek",
					"name": "sqlite_seek",
					"description": "Seek to a particular row number of a buffered result set"
				},
				"function.sqlite-single-query": {
					"tokens": [
						"sqlite_single_query",
						"sqlitesingle_query"
					],
					"id": "function.sqlite-single-query",
					"name": "sqlite_single_query",
					"description": "Executes a query and returns either an array for one single column or the value of the first row"
				},
				"function.sqlite-udf-decode-binary": {
					"tokens": [
						"sqlite_udf_decode_binary",
						"sqliteudf_decode_binary"
					],
					"id": "function.sqlite-udf-decode-binary",
					"name": "sqlite_udf_decode_binary",
					"description": "Decode binary data passed as parameters to an UDF"
				},
				"function.sqlite-udf-encode-binary": {
					"tokens": [
						"sqlite_udf_encode_binary",
						"sqliteudf_encode_binary"
					],
					"id": "function.sqlite-udf-encode-binary",
					"name": "sqlite_udf_encode_binary",
					"description": "Encode binary data before returning it from an UDF"
				},
				"function.sqlite-unbuffered-query": {
					"tokens": [
						"sqlite_unbuffered_query",
						"sqliteunbuffered_query"
					],
					"id": "function.sqlite-unbuffered-query",
					"name": "sqlite_unbuffered_query",
					"description": "Execute a query that does not prefetch and buffer all data"
				},
				"function.sqlite-valid": {
					"tokens": [
						"sqlite_valid",
						"sqlitevalid"
					],
					"id": "function.sqlite-valid",
					"name": "sqlite_valid",
					"description": "Returns whether more rows are available"
				},
				"sqlite3.busytimeout": {
					"tokens": [
						"SQLite3::busyTimeout",
						"busyTimeout",
						"::busyTimeout"
					],
					"id": "sqlite3.busytimeout",
					"name": "SQLite3::busyTimeout",
					"description": "Sets the busy connection handler"
				},
				"sqlite3.changes": {
					"tokens": [
						"SQLite3::changes",
						"changes",
						"::changes"
					],
					"id": "sqlite3.changes",
					"name": "SQLite3::changes",
					"description": "Returns the number of database rows that were changed (or inserted or\n   deleted) by the most recent SQL statement"
				},
				"sqlite3.close": {
					"tokens": [
						"SQLite3::close",
						"close",
						"::close"
					],
					"id": "sqlite3.close",
					"name": "SQLite3::close",
					"description": "Closes the database connection"
				},
				"sqlite3.construct": {
					"tokens": [
						"SQLite3::__construct",
						"SQLite3::_construct",
						"__construct",
						"::__construct"
					],
					"id": "sqlite3.construct",
					"name": "SQLite3::__construct",
					"description": "Instantiates an SQLite3 object and opens an SQLite 3 database"
				},
				"sqlite3.createaggregate": {
					"tokens": [
						"SQLite3::createAggregate",
						"createAggregate",
						"::createAggregate"
					],
					"id": "sqlite3.createaggregate",
					"name": "SQLite3::createAggregate",
					"description": "Registers a PHP function for use as an SQL aggregate function"
				},
				"sqlite3.createcollation": {
					"tokens": [
						"SQLite3::createCollation",
						"createCollation",
						"::createCollation"
					],
					"id": "sqlite3.createcollation",
					"name": "SQLite3::createCollation",
					"description": "Registers a PHP function for use as an SQL collating function"
				},
				"sqlite3.createfunction": {
					"tokens": [
						"SQLite3::createFunction",
						"createFunction",
						"::createFunction"
					],
					"id": "sqlite3.createfunction",
					"name": "SQLite3::createFunction",
					"description": "Registers a PHP function for use as an SQL scalar function"
				},
				"sqlite3.enableexceptions": {
					"tokens": [
						"SQLite3::enableExceptions",
						"enableExceptions",
						"::enableExceptions"
					],
					"id": "sqlite3.enableexceptions",
					"name": "SQLite3::enableExceptions",
					"description": "Enable throwing exceptions"
				},
				"sqlite3.escapestring": {
					"tokens": [
						"SQLite3::escapeString",
						"escapeString",
						"::escapeString"
					],
					"id": "sqlite3.escapestring",
					"name": "SQLite3::escapeString",
					"description": "Returns a string that has been properly escaped"
				},
				"sqlite3.exec": {
					"tokens": [
						"SQLite3::exec",
						"exec",
						"::exec"
					],
					"id": "sqlite3.exec",
					"name": "SQLite3::exec",
					"description": "Executes a result-less query against a given database"
				},
				"sqlite3.lasterrorcode": {
					"tokens": [
						"SQLite3::lastErrorCode",
						"lastErrorCode",
						"::lastErrorCode"
					],
					"id": "sqlite3.lasterrorcode",
					"name": "SQLite3::lastErrorCode",
					"description": "Returns the numeric result code of the most recent failed SQLite request"
				},
				"sqlite3.lasterrormsg": {
					"tokens": [
						"SQLite3::lastErrorMsg",
						"lastErrorMsg",
						"::lastErrorMsg"
					],
					"id": "sqlite3.lasterrormsg",
					"name": "SQLite3::lastErrorMsg",
					"description": "Returns English text describing the most recent failed SQLite request"
				},
				"sqlite3.lastinsertrowid": {
					"tokens": [
						"SQLite3::lastInsertRowID",
						"lastInsertRowID",
						"::lastInsertRowID"
					],
					"id": "sqlite3.lastinsertrowid",
					"name": "SQLite3::lastInsertRowID",
					"description": "Returns the row ID of the most recent INSERT into the database"
				},
				"sqlite3.loadextension": {
					"tokens": [
						"SQLite3::loadExtension",
						"loadExtension",
						"::loadExtension"
					],
					"id": "sqlite3.loadextension",
					"name": "SQLite3::loadExtension",
					"description": "Attempts to load an SQLite extension library"
				},
				"sqlite3.open": {
					"tokens": [
						"SQLite3::open",
						"open",
						"::open"
					],
					"id": "sqlite3.open",
					"name": "SQLite3::open",
					"description": "Opens an SQLite database"
				},
				"sqlite3.openblob": {
					"tokens": [
						"SQLite3::openBlob",
						"openBlob",
						"::openBlob"
					],
					"id": "sqlite3.openblob",
					"name": "SQLite3::openBlob",
					"description": "Opens a stream resource to read a BLOB"
				},
				"sqlite3.prepare": {
					"tokens": [
						"SQLite3::prepare",
						"prepare",
						"::prepare"
					],
					"id": "sqlite3.prepare",
					"name": "SQLite3::prepare",
					"description": "Prepares an SQL statement for execution"
				},
				"sqlite3.query": {
					"tokens": [
						"SQLite3::query",
						"query",
						"::query"
					],
					"id": "sqlite3.query",
					"name": "SQLite3::query",
					"description": "Executes an SQL query"
				},
				"sqlite3.querysingle": {
					"tokens": [
						"SQLite3::querySingle",
						"querySingle",
						"::querySingle"
					],
					"id": "sqlite3.querysingle",
					"name": "SQLite3::querySingle",
					"description": "Executes a query and returns a single result"
				},
				"sqlite3.version": {
					"tokens": [
						"SQLite3::version",
						"version",
						"::version"
					],
					"id": "sqlite3.version",
					"name": "SQLite3::version",
					"description": "Returns the SQLite3 library version as a string constant and as a number"
				},
				"sqlite3stmt.bindparam": {
					"tokens": [
						"SQLite3Stmt::bindParam",
						"bindParam",
						"::bindParam"
					],
					"id": "sqlite3stmt.bindparam",
					"name": "SQLite3Stmt::bindParam",
					"description": "Binds a parameter to a statement variable"
				},
				"sqlite3stmt.bindvalue": {
					"tokens": [
						"SQLite3Stmt::bindValue",
						"bindValue",
						"::bindValue"
					],
					"id": "sqlite3stmt.bindvalue",
					"name": "SQLite3Stmt::bindValue",
					"description": "Binds the value of a parameter to a statement variable"
				},
				"sqlite3stmt.clear": {
					"tokens": [
						"SQLite3Stmt::clear",
						"clear",
						"::clear"
					],
					"id": "sqlite3stmt.clear",
					"name": "SQLite3Stmt::clear",
					"description": "Clears all current bound parameters"
				},
				"sqlite3stmt.close": {
					"tokens": [
						"SQLite3Stmt::close",
						"close",
						"::close"
					],
					"id": "sqlite3stmt.close",
					"name": "SQLite3Stmt::close",
					"description": "Closes the prepared statement"
				},
				"sqlite3stmt.execute": {
					"tokens": [
						"SQLite3Stmt::execute",
						"execute",
						"::execute"
					],
					"id": "sqlite3stmt.execute",
					"name": "SQLite3Stmt::execute",
					"description": "Executes a prepared statement and returns a result set object"
				},
				"sqlite3stmt.paramcount": {
					"tokens": [
						"SQLite3Stmt::paramCount",
						"paramCount",
						"::paramCount"
					],
					"id": "sqlite3stmt.paramcount",
					"name": "SQLite3Stmt::paramCount",
					"description": "Returns the number of parameters within the prepared statement"
				},
				"sqlite3stmt.readonly": {
					"tokens": [
						"SQLite3Stmt::readOnly()",
						"readOnly()",
						"::readOnly()"
					],
					"id": "sqlite3stmt.readonly",
					"name": "SQLite3Stmt::readOnly()",
					"description": "Returns whether a statement is definitely read only"
				},
				"sqlite3stmt.reset": {
					"tokens": [
						"SQLite3Stmt::reset",
						"reset",
						"::reset"
					],
					"id": "sqlite3stmt.reset",
					"name": "SQLite3Stmt::reset",
					"description": "Resets the prepared statement"
				},
				"sqlite3result.columnname": {
					"tokens": [
						"SQLite3Result::columnName",
						"columnName",
						"::columnName"
					],
					"id": "sqlite3result.columnname",
					"name": "SQLite3Result::columnName",
					"description": "Returns the name of the nth column"
				},
				"sqlite3result.columntype": {
					"tokens": [
						"SQLite3Result::columnType",
						"columnType",
						"::columnType"
					],
					"id": "sqlite3result.columntype",
					"name": "SQLite3Result::columnType",
					"description": "Returns the type of the nth column"
				},
				"sqlite3result.fetcharray": {
					"tokens": [
						"SQLite3Result::fetchArray",
						"fetchArray",
						"::fetchArray"
					],
					"id": "sqlite3result.fetcharray",
					"name": "SQLite3Result::fetchArray",
					"description": "Fetches a result row as an associative or numerically indexed array or both"
				},
				"sqlite3result.finalize": {
					"tokens": [
						"SQLite3Result::finalize",
						"finalize",
						"::finalize"
					],
					"id": "sqlite3result.finalize",
					"name": "SQLite3Result::finalize",
					"description": "Closes the result set"
				},
				"sqlite3result.numcolumns": {
					"tokens": [
						"SQLite3Result::numColumns",
						"numColumns",
						"::numColumns"
					],
					"id": "sqlite3result.numcolumns",
					"name": "SQLite3Result::numColumns",
					"description": "Returns the number of columns in the result set"
				},
				"sqlite3result.reset": {
					"tokens": [
						"SQLite3Result::reset",
						"reset",
						"::reset"
					],
					"id": "sqlite3result.reset",
					"name": "SQLite3Result::reset",
					"description": "Resets the result set back to the first row"
				},
				"function.sqlsrv-begin-transaction": {
					"tokens": [
						"sqlsrv_begin_transaction",
						"sqlsrvbegin_transaction"
					],
					"id": "function.sqlsrv-begin-transaction",
					"name": "sqlsrv_begin_transaction",
					"description": "Begins a database transaction"
				},
				"function.sqlsrv-cancel": {
					"tokens": [
						"sqlsrv_cancel",
						"sqlsrvcancel"
					],
					"id": "function.sqlsrv-cancel",
					"name": "sqlsrv_cancel",
					"description": "Cancels a statement"
				},
				"function.sqlsrv-client-info": {
					"tokens": [
						"sqlsrv_client_info",
						"sqlsrvclient_info"
					],
					"id": "function.sqlsrv-client-info",
					"name": "sqlsrv_client_info",
					"description": "Returns information about the client and specified connection"
				},
				"function.sqlsrv-close": {
					"tokens": [
						"sqlsrv_close",
						"sqlsrvclose"
					],
					"id": "function.sqlsrv-close",
					"name": "sqlsrv_close",
					"description": "Closes an open connection and releases resourses associated with the connection"
				},
				"function.sqlsrv-commit": {
					"tokens": [
						"sqlsrv_commit",
						"sqlsrvcommit"
					],
					"id": "function.sqlsrv-commit",
					"name": "sqlsrv_commit",
					"description": "Commits a transaction that was begun with sqlsrv_begin_transaction"
				},
				"function.sqlsrv-configure": {
					"tokens": [
						"sqlsrv_configure",
						"sqlsrvconfigure"
					],
					"id": "function.sqlsrv-configure",
					"name": "sqlsrv_configure",
					"description": "Changes the driver error handling and logging configurations"
				},
				"function.sqlsrv-connect": {
					"tokens": [
						"sqlsrv_connect",
						"sqlsrvconnect"
					],
					"id": "function.sqlsrv-connect",
					"name": "sqlsrv_connect",
					"description": "Opens a connection to a Microsoft SQL Server database"
				},
				"function.sqlsrv-errors": {
					"tokens": [
						"sqlsrv_errors",
						"sqlsrverrors"
					],
					"id": "function.sqlsrv-errors",
					"name": "sqlsrv_errors",
					"description": "Returns error and warning information about the last SQLSRV operation performed"
				},
				"function.sqlsrv-execute": {
					"tokens": [
						"sqlsrv_execute",
						"sqlsrvexecute"
					],
					"id": "function.sqlsrv-execute",
					"name": "sqlsrv_execute",
					"description": "Executes a statement prepared with sqlsrv_prepare"
				},
				"function.sqlsrv-fetch-array": {
					"tokens": [
						"sqlsrv_fetch_array",
						"sqlsrvfetch_array"
					],
					"id": "function.sqlsrv-fetch-array",
					"name": "sqlsrv_fetch_array",
					"description": "Returns a row as an array"
				},
				"function.sqlsrv-fetch-object": {
					"tokens": [
						"sqlsrv_fetch_object",
						"sqlsrvfetch_object"
					],
					"id": "function.sqlsrv-fetch-object",
					"name": "sqlsrv_fetch_object",
					"description": "Retrieves the next row of data in a result set as an object"
				},
				"function.sqlsrv-fetch": {
					"tokens": [
						"sqlsrv_fetch",
						"sqlsrvfetch"
					],
					"id": "function.sqlsrv-fetch",
					"name": "sqlsrv_fetch",
					"description": "Makes the next row in a result set available for reading"
				},
				"function.sqlsrv-field-metadata": {
					"tokens": [
						"sqlsrv_field_metadata",
						"sqlsrvfield_metadata"
					],
					"id": "function.sqlsrv-field-metadata",
					"name": "sqlsrv_field_metadata",
					"description": "Retrieves metadata for the fields of a statement prepared by \n  sqlsrv_prepare or sqlsrv_query"
				},
				"function.sqlsrv-free-stmt": {
					"tokens": [
						"sqlsrv_free_stmt",
						"sqlsrvfree_stmt"
					],
					"id": "function.sqlsrv-free-stmt",
					"name": "sqlsrv_free_stmt",
					"description": "Frees all resources for the specified statement"
				},
				"function.sqlsrv-get-config": {
					"tokens": [
						"sqlsrv_get_config",
						"sqlsrvget_config"
					],
					"id": "function.sqlsrv-get-config",
					"name": "sqlsrv_get_config",
					"description": "Returns the value of the specified configuration setting"
				},
				"function.sqlsrv-get-field": {
					"tokens": [
						"sqlsrv_get_field",
						"sqlsrvget_field"
					],
					"id": "function.sqlsrv-get-field",
					"name": "sqlsrv_get_field",
					"description": "Gets field data from the currently selected row"
				},
				"function.sqlsrv-has-rows": {
					"tokens": [
						"sqlsrv_has_rows",
						"sqlsrvhas_rows"
					],
					"id": "function.sqlsrv-has-rows",
					"name": "sqlsrv_has_rows",
					"description": "Indicates whether the specified statement has rows"
				},
				"function.sqlsrv-next-result": {
					"tokens": [
						"sqlsrv_next_result",
						"sqlsrvnext_result"
					],
					"id": "function.sqlsrv-next-result",
					"name": "sqlsrv_next_result",
					"description": "Makes the next result of the specified statement active"
				},
				"function.sqlsrv-num-fields": {
					"tokens": [
						"sqlsrv_num_fields",
						"sqlsrvnum_fields"
					],
					"id": "function.sqlsrv-num-fields",
					"name": "sqlsrv_num_fields",
					"description": "Retrieves the number of fields (columns) on a statement"
				},
				"function.sqlsrv-num-rows": {
					"tokens": [
						"sqlsrv_num_rows",
						"sqlsrvnum_rows"
					],
					"id": "function.sqlsrv-num-rows",
					"name": "sqlsrv_num_rows",
					"description": "Retrieves the number of rows in a result set"
				},
				"function.sqlsrv-prepare": {
					"tokens": [
						"sqlsrv_prepare",
						"sqlsrvprepare"
					],
					"id": "function.sqlsrv-prepare",
					"name": "sqlsrv_prepare",
					"description": "Prepares a query for execution"
				},
				"function.sqlsrv-query": {
					"tokens": [
						"sqlsrv_query",
						"sqlsrvquery"
					],
					"id": "function.sqlsrv-query",
					"name": "sqlsrv_query",
					"description": "Prepares and executes a query."
				},
				"function.sqlsrv-rollback": {
					"tokens": [
						"sqlsrv_rollback",
						"sqlsrvrollback"
					],
					"id": "function.sqlsrv-rollback",
					"name": "sqlsrv_rollback",
					"description": "Rolls back a transaction that was begun with \n  sqlsrv_begin_transaction"
				},
				"function.sqlsrv-rows-affected": {
					"tokens": [
						"sqlsrv_rows_affected",
						"sqlsrvrows_affected"
					],
					"id": "function.sqlsrv-rows-affected",
					"name": "sqlsrv_rows_affected",
					"description": "Returns the number of rows modified by the last INSERT, UPDATE, or \n  DELETE query executed"
				},
				"function.sqlsrv-send-stream-data": {
					"tokens": [
						"sqlsrv_send_stream_data",
						"sqlsrvsend_stream_data"
					],
					"id": "function.sqlsrv-send-stream-data",
					"name": "sqlsrv_send_stream_data",
					"description": "Sends data from parameter streams to the server"
				},
				"function.sqlsrv-server-info": {
					"tokens": [
						"sqlsrv_server_info",
						"sqlsrvserver_info"
					],
					"id": "function.sqlsrv-server-info",
					"name": "sqlsrv_server_info",
					"description": "Returns information about the server"
				},
				"function.sybase-affected-rows": {
					"tokens": [
						"sybase_affected_rows",
						"sybaseaffected_rows"
					],
					"id": "function.sybase-affected-rows",
					"name": "sybase_affected_rows",
					"description": "Gets number of affected rows in last query"
				},
				"function.sybase-close": {
					"tokens": [
						"sybase_close",
						"sybaseclose"
					],
					"id": "function.sybase-close",
					"name": "sybase_close",
					"description": "Closes a Sybase connection"
				},
				"function.sybase-connect": {
					"tokens": [
						"sybase_connect",
						"sybaseconnect"
					],
					"id": "function.sybase-connect",
					"name": "sybase_connect",
					"description": "Opens a Sybase server connection"
				},
				"function.sybase-data-seek": {
					"tokens": [
						"sybase_data_seek",
						"sybasedata_seek"
					],
					"id": "function.sybase-data-seek",
					"name": "sybase_data_seek",
					"description": "Moves internal row pointer"
				},
				"function.sybase-deadlock-retry-count": {
					"tokens": [
						"sybase_deadlock_retry_count",
						"sybasedeadlock_retry_count"
					],
					"id": "function.sybase-deadlock-retry-count",
					"name": "sybase_deadlock_retry_count",
					"description": "Sets the deadlock retry count"
				},
				"function.sybase-fetch-array": {
					"tokens": [
						"sybase_fetch_array",
						"sybasefetch_array"
					],
					"id": "function.sybase-fetch-array",
					"name": "sybase_fetch_array",
					"description": "Fetch row as array"
				},
				"function.sybase-fetch-assoc": {
					"tokens": [
						"sybase_fetch_assoc",
						"sybasefetch_assoc"
					],
					"id": "function.sybase-fetch-assoc",
					"name": "sybase_fetch_assoc",
					"description": "Fetch a result row as an associative array"
				},
				"function.sybase-fetch-field": {
					"tokens": [
						"sybase_fetch_field",
						"sybasefetch_field"
					],
					"id": "function.sybase-fetch-field",
					"name": "sybase_fetch_field",
					"description": "Get field information from a result"
				},
				"function.sybase-fetch-object": {
					"tokens": [
						"sybase_fetch_object",
						"sybasefetch_object"
					],
					"id": "function.sybase-fetch-object",
					"name": "sybase_fetch_object",
					"description": "Fetch a row as an object"
				},
				"function.sybase-fetch-row": {
					"tokens": [
						"sybase_fetch_row",
						"sybasefetch_row"
					],
					"id": "function.sybase-fetch-row",
					"name": "sybase_fetch_row",
					"description": "Get a result row as an enumerated array"
				},
				"function.sybase-field-seek": {
					"tokens": [
						"sybase_field_seek",
						"sybasefield_seek"
					],
					"id": "function.sybase-field-seek",
					"name": "sybase_field_seek",
					"description": "Sets field offset"
				},
				"function.sybase-free-result": {
					"tokens": [
						"sybase_free_result",
						"sybasefree_result"
					],
					"id": "function.sybase-free-result",
					"name": "sybase_free_result",
					"description": "Frees result memory"
				},
				"function.sybase-get-last-message": {
					"tokens": [
						"sybase_get_last_message",
						"sybaseget_last_message"
					],
					"id": "function.sybase-get-last-message",
					"name": "sybase_get_last_message",
					"description": "Returns the last message from the server"
				},
				"function.sybase-min-client-severity": {
					"tokens": [
						"sybase_min_client_severity",
						"sybasemin_client_severity"
					],
					"id": "function.sybase-min-client-severity",
					"name": "sybase_min_client_severity",
					"description": "Sets minimum client severity"
				},
				"function.sybase-min-error-severity": {
					"tokens": [
						"sybase_min_error_severity",
						"sybasemin_error_severity"
					],
					"id": "function.sybase-min-error-severity",
					"name": "sybase_min_error_severity",
					"description": "Sets minimum error severity"
				},
				"function.sybase-min-message-severity": {
					"tokens": [
						"sybase_min_message_severity",
						"sybasemin_message_severity"
					],
					"id": "function.sybase-min-message-severity",
					"name": "sybase_min_message_severity",
					"description": "Sets minimum message severity"
				},
				"function.sybase-min-server-severity": {
					"tokens": [
						"sybase_min_server_severity",
						"sybasemin_server_severity"
					],
					"id": "function.sybase-min-server-severity",
					"name": "sybase_min_server_severity",
					"description": "Sets minimum server severity"
				},
				"function.sybase-num-fields": {
					"tokens": [
						"sybase_num_fields",
						"sybasenum_fields"
					],
					"id": "function.sybase-num-fields",
					"name": "sybase_num_fields",
					"description": "Gets the number of fields in a result set"
				},
				"function.sybase-num-rows": {
					"tokens": [
						"sybase_num_rows",
						"sybasenum_rows"
					],
					"id": "function.sybase-num-rows",
					"name": "sybase_num_rows",
					"description": "Get number of rows in a result set"
				},
				"function.sybase-pconnect": {
					"tokens": [
						"sybase_pconnect",
						"sybasepconnect"
					],
					"id": "function.sybase-pconnect",
					"name": "sybase_pconnect",
					"description": "Open persistent Sybase connection"
				},
				"function.sybase-query": {
					"tokens": [
						"sybase_query",
						"sybasequery"
					],
					"id": "function.sybase-query",
					"name": "sybase_query",
					"description": "Sends a Sybase query"
				},
				"function.sybase-result": {
					"tokens": [
						"sybase_result",
						"sybaseresult"
					],
					"id": "function.sybase-result",
					"name": "sybase_result",
					"description": "Get result data"
				},
				"function.sybase-select-db": {
					"tokens": [
						"sybase_select_db",
						"sybaseselect_db"
					],
					"id": "function.sybase-select-db",
					"name": "sybase_select_db",
					"description": "Selects a Sybase database"
				},
				"function.sybase-set-message-handler": {
					"tokens": [
						"sybase_set_message_handler",
						"sybaseset_message_handler"
					],
					"id": "function.sybase-set-message-handler",
					"name": "sybase_set_message_handler",
					"description": "Sets the handler called when a server message is raised"
				},
				"function.sybase-unbuffered-query": {
					"tokens": [
						"sybase_unbuffered_query",
						"sybaseunbuffered_query"
					],
					"id": "function.sybase-unbuffered-query",
					"name": "sybase_unbuffered_query",
					"description": "Send a Sybase query and do not block"
				},
				"tokyotyrant.add": {
					"tokens": [
						"TokyoTyrant::add",
						"add",
						"::add"
					],
					"id": "tokyotyrant.add",
					"name": "TokyoTyrant::add",
					"description": "Adds to a numeric key"
				},
				"tokyotyrant.connect": {
					"tokens": [
						"TokyoTyrant::connect",
						"connect",
						"::connect"
					],
					"id": "tokyotyrant.connect",
					"name": "TokyoTyrant::connect",
					"description": "Connect to a database"
				},
				"tokyotyrant.connecturi": {
					"tokens": [
						"TokyoTyrant::connectUri",
						"connectUri",
						"::connectUri"
					],
					"id": "tokyotyrant.connecturi",
					"name": "TokyoTyrant::connectUri",
					"description": "Connects to a database"
				},
				"tokyotyrant.construct": {
					"tokens": [
						"TokyoTyrant::__construct",
						"TokyoTyrant::_construct",
						"__construct",
						"::__construct"
					],
					"id": "tokyotyrant.construct",
					"name": "TokyoTyrant::__construct",
					"description": "Construct a new TokyoTyrant object"
				},
				"tokyotyrant.copy": {
					"tokens": [
						"TokyoTyrant::copy",
						"copy",
						"::copy"
					],
					"id": "tokyotyrant.copy",
					"name": "TokyoTyrant::copy",
					"description": "Copies the database"
				},
				"tokyotyrant.ext": {
					"tokens": [
						"TokyoTyrant::ext",
						"ext",
						"::ext"
					],
					"id": "tokyotyrant.ext",
					"name": "TokyoTyrant::ext",
					"description": "Execute a remote script"
				},
				"tokyotyrant.fwmkeys": {
					"tokens": [
						"TokyoTyrant::fwmKeys",
						"fwmKeys",
						"::fwmKeys"
					],
					"id": "tokyotyrant.fwmkeys",
					"name": "TokyoTyrant::fwmKeys",
					"description": "Returns the forward matching keys"
				},
				"tokyotyrant.get": {
					"tokens": [
						"TokyoTyrant::get",
						"get",
						"::get"
					],
					"id": "tokyotyrant.get",
					"name": "TokyoTyrant::get",
					"description": "The get purpose"
				},
				"tokyotyrant.getiterator": {
					"tokens": [
						"TokyoTyrant::getIterator",
						"getIterator",
						"::getIterator"
					],
					"id": "tokyotyrant.getiterator",
					"name": "TokyoTyrant::getIterator",
					"description": "Get an iterator"
				},
				"tokyotyrant.num": {
					"tokens": [
						"TokyoTyrant::num",
						"num",
						"::num"
					],
					"id": "tokyotyrant.num",
					"name": "TokyoTyrant::num",
					"description": "Number of records in the database"
				},
				"tokyotyrant.out": {
					"tokens": [
						"TokyoTyrant::out",
						"out",
						"::out"
					],
					"id": "tokyotyrant.out",
					"name": "TokyoTyrant::out",
					"description": "Removes records"
				},
				"tokyotyrant.put": {
					"tokens": [
						"TokyoTyrant::put",
						"put",
						"::put"
					],
					"id": "tokyotyrant.put",
					"name": "TokyoTyrant::put",
					"description": "Puts values"
				},
				"tokyotyrant.putcat": {
					"tokens": [
						"TokyoTyrant::putCat",
						"putCat",
						"::putCat"
					],
					"id": "tokyotyrant.putcat",
					"name": "TokyoTyrant::putCat",
					"description": "Concatenates to a record"
				},
				"tokyotyrant.putkeep": {
					"tokens": [
						"TokyoTyrant::putKeep",
						"putKeep",
						"::putKeep"
					],
					"id": "tokyotyrant.putkeep",
					"name": "TokyoTyrant::putKeep",
					"description": "Puts a record"
				},
				"tokyotyrant.putnr": {
					"tokens": [
						"TokyoTyrant::putNr",
						"putNr",
						"::putNr"
					],
					"id": "tokyotyrant.putnr",
					"name": "TokyoTyrant::putNr",
					"description": "Puts value"
				},
				"tokyotyrant.putshl": {
					"tokens": [
						"TokyoTyrant::putShl",
						"putShl",
						"::putShl"
					],
					"id": "tokyotyrant.putshl",
					"name": "TokyoTyrant::putShl",
					"description": "Concatenates to a record"
				},
				"tokyotyrant.restore": {
					"tokens": [
						"TokyoTyrant::restore",
						"restore",
						"::restore"
					],
					"id": "tokyotyrant.restore",
					"name": "TokyoTyrant::restore",
					"description": "Restore the database"
				},
				"tokyotyrant.setmaster": {
					"tokens": [
						"TokyoTyrant::setMaster",
						"setMaster",
						"::setMaster"
					],
					"id": "tokyotyrant.setmaster",
					"name": "TokyoTyrant::setMaster",
					"description": "Set the replication master"
				},
				"tokyotyrant.size": {
					"tokens": [
						"TokyoTyrant::size",
						"size",
						"::size"
					],
					"id": "tokyotyrant.size",
					"name": "TokyoTyrant::size",
					"description": "Returns the size of the value"
				},
				"tokyotyrant.stat": {
					"tokens": [
						"TokyoTyrant::stat",
						"stat",
						"::stat"
					],
					"id": "tokyotyrant.stat",
					"name": "TokyoTyrant::stat",
					"description": "Get statistics"
				},
				"tokyotyrant.sync": {
					"tokens": [
						"TokyoTyrant::sync",
						"sync",
						"::sync"
					],
					"id": "tokyotyrant.sync",
					"name": "TokyoTyrant::sync",
					"description": "Synchronize the database"
				},
				"tokyotyrant.tune": {
					"tokens": [
						"TokyoTyrant::tune",
						"tune",
						"::tune"
					],
					"id": "tokyotyrant.tune",
					"name": "TokyoTyrant::tune",
					"description": "Tunes connection values"
				},
				"tokyotyrant.vanish": {
					"tokens": [
						"TokyoTyrant::vanish",
						"vanish",
						"::vanish"
					],
					"id": "tokyotyrant.vanish",
					"name": "TokyoTyrant::vanish",
					"description": "Empties the database"
				},
				"tokyotyranttable.add": {
					"tokens": [
						"TokyoTyrantTable::add",
						"add",
						"::add"
					],
					"id": "tokyotyranttable.add",
					"name": "TokyoTyrantTable::add",
					"description": "Adds a record"
				},
				"tokyotyranttable.genuid": {
					"tokens": [
						"TokyoTyrantTable::genUid",
						"genUid",
						"::genUid"
					],
					"id": "tokyotyranttable.genuid",
					"name": "TokyoTyrantTable::genUid",
					"description": "Generate unique id"
				},
				"tokyotyranttable.get": {
					"tokens": [
						"TokyoTyrantTable::get",
						"get",
						"::get"
					],
					"id": "tokyotyranttable.get",
					"name": "TokyoTyrantTable::get",
					"description": "Get a row"
				},
				"tokyotyranttable.getiterator": {
					"tokens": [
						"TokyoTyrantTable::getIterator",
						"getIterator",
						"::getIterator"
					],
					"id": "tokyotyranttable.getiterator",
					"name": "TokyoTyrantTable::getIterator",
					"description": "Get an iterator"
				},
				"tokyotyranttable.getquery": {
					"tokens": [
						"TokyoTyrantTable::getQuery",
						"getQuery",
						"::getQuery"
					],
					"id": "tokyotyranttable.getquery",
					"name": "TokyoTyrantTable::getQuery",
					"description": "Get a query object"
				},
				"tokyotyranttable.out": {
					"tokens": [
						"TokyoTyrantTable::out",
						"out",
						"::out"
					],
					"id": "tokyotyranttable.out",
					"name": "TokyoTyrantTable::out",
					"description": "Remove records"
				},
				"tokyotyranttable.put": {
					"tokens": [
						"TokyoTyrantTable::put",
						"put",
						"::put"
					],
					"id": "tokyotyranttable.put",
					"name": "TokyoTyrantTable::put",
					"description": "Store a row"
				},
				"tokyotyranttable.putcat": {
					"tokens": [
						"TokyoTyrantTable::putCat",
						"putCat",
						"::putCat"
					],
					"id": "tokyotyranttable.putcat",
					"name": "TokyoTyrantTable::putCat",
					"description": "Concatenates to a row"
				},
				"tokyotyranttable.putkeep": {
					"tokens": [
						"TokyoTyrantTable::putKeep",
						"putKeep",
						"::putKeep"
					],
					"id": "tokyotyranttable.putkeep",
					"name": "TokyoTyrantTable::putKeep",
					"description": "Put a new record"
				},
				"tokyotyranttable.putnr": {
					"tokens": [
						"TokyoTyrantTable::putNr",
						"putNr",
						"::putNr"
					],
					"id": "tokyotyranttable.putnr",
					"name": "TokyoTyrantTable::putNr",
					"description": "Puts value"
				},
				"tokyotyranttable.putshl": {
					"tokens": [
						"TokyoTyrantTable::putShl",
						"putShl",
						"::putShl"
					],
					"id": "tokyotyranttable.putshl",
					"name": "TokyoTyrantTable::putShl",
					"description": "Concatenates to a record"
				},
				"tokyotyranttable.setindex": {
					"tokens": [
						"TokyoTyrantTable::setIndex",
						"setIndex",
						"::setIndex"
					],
					"id": "tokyotyranttable.setindex",
					"name": "TokyoTyrantTable::setIndex",
					"description": "Sets index"
				},
				"tokyotyrantquery.addcond": {
					"tokens": [
						"TokyoTyrantQuery::addCond",
						"addCond",
						"::addCond"
					],
					"id": "tokyotyrantquery.addcond",
					"name": "TokyoTyrantQuery::addCond",
					"description": "Adds a condition to the query"
				},
				"tokyotyrantquery.construct": {
					"tokens": [
						"TokyoTyrantQuery::__construct",
						"TokyoTyrantQuery::_construct",
						"__construct",
						"::__construct"
					],
					"id": "tokyotyrantquery.construct",
					"name": "TokyoTyrantQuery::__construct",
					"description": "Construct a new query"
				},
				"tokyotyrantquery.count": {
					"tokens": [
						"TokyoTyrantQuery::count",
						"count",
						"::count"
					],
					"id": "tokyotyrantquery.count",
					"name": "TokyoTyrantQuery::count",
					"description": "Counts records"
				},
				"tokyotyrantquery.current": {
					"tokens": [
						"TokyoTyrantQuery::current",
						"current",
						"::current"
					],
					"id": "tokyotyrantquery.current",
					"name": "TokyoTyrantQuery::current",
					"description": "Returns the current element"
				},
				"tokyotyrantquery.hint": {
					"tokens": [
						"TokyoTyrantQuery::hint",
						"hint",
						"::hint"
					],
					"id": "tokyotyrantquery.hint",
					"name": "TokyoTyrantQuery::hint",
					"description": "Get the hint string of the query"
				},
				"tokyotyrantquery.key": {
					"tokens": [
						"TokyoTyrantQuery::key",
						"key",
						"::key"
					],
					"id": "tokyotyrantquery.key",
					"name": "TokyoTyrantQuery::key",
					"description": "Returns the current key"
				},
				"tokyotyrantquery.metasearch": {
					"tokens": [
						"TokyoTyrantQuery::metaSearch",
						"metaSearch",
						"::metaSearch"
					],
					"id": "tokyotyrantquery.metasearch",
					"name": "TokyoTyrantQuery::metaSearch",
					"description": "Retrieve records with multiple queries"
				},
				"tokyotyrantquery.next": {
					"tokens": [
						"TokyoTyrantQuery::next",
						"next",
						"::next"
					],
					"id": "tokyotyrantquery.next",
					"name": "TokyoTyrantQuery::next",
					"description": "Moves the iterator to next entry"
				},
				"tokyotyrantquery.out": {
					"tokens": [
						"TokyoTyrantQuery::out",
						"out",
						"::out"
					],
					"id": "tokyotyrantquery.out",
					"name": "TokyoTyrantQuery::out",
					"description": "Removes records based on query"
				},
				"tokyotyrantquery.rewind": {
					"tokens": [
						"TokyoTyrantQuery::rewind",
						"rewind",
						"::rewind"
					],
					"id": "tokyotyrantquery.rewind",
					"name": "TokyoTyrantQuery::rewind",
					"description": "Rewinds the iterator"
				},
				"tokyotyrantquery.search": {
					"tokens": [
						"TokyoTyrantQuery::search",
						"search",
						"::search"
					],
					"id": "tokyotyrantquery.search",
					"name": "TokyoTyrantQuery::search",
					"description": "Searches records"
				},
				"tokyotyrantquery.setlimit": {
					"tokens": [
						"TokyoTyrantQuery::setLimit",
						"setLimit",
						"::setLimit"
					],
					"id": "tokyotyrantquery.setlimit",
					"name": "TokyoTyrantQuery::setLimit",
					"description": "Limit results"
				},
				"tokyotyrantquery.setorder": {
					"tokens": [
						"TokyoTyrantQuery::setOrder",
						"setOrder",
						"::setOrder"
					],
					"id": "tokyotyrantquery.setorder",
					"name": "TokyoTyrantQuery::setOrder",
					"description": "Orders results"
				},
				"tokyotyrantquery.valid": {
					"tokens": [
						"TokyoTyrantQuery::valid",
						"valid",
						"::valid"
					],
					"id": "tokyotyrantquery.valid",
					"name": "TokyoTyrantQuery::valid",
					"description": "Checks the validity of current item"
				},
				"tokyotyrantiterator.construct": {
					"tokens": [
						"TokyoTyrantIterator::__construct",
						"TokyoTyrantIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "tokyotyrantiterator.construct",
					"name": "TokyoTyrantIterator::__construct",
					"description": "Construct an iterator"
				},
				"tokyotyrantiterator.current": {
					"tokens": [
						"TokyoTyrantIterator::current",
						"current",
						"::current"
					],
					"id": "tokyotyrantiterator.current",
					"name": "TokyoTyrantIterator::current",
					"description": "Get the current value"
				},
				"tokyotyrantiterator.key": {
					"tokens": [
						"TokyoTyrantIterator::key",
						"key",
						"::key"
					],
					"id": "tokyotyrantiterator.key",
					"name": "TokyoTyrantIterator::key",
					"description": "Returns the current key"
				},
				"tokyotyrantiterator.next": {
					"tokens": [
						"TokyoTyrantIterator::next",
						"next",
						"::next"
					],
					"id": "tokyotyrantiterator.next",
					"name": "TokyoTyrantIterator::next",
					"description": "Move to next key"
				},
				"tokyotyrantiterator.rewind": {
					"tokens": [
						"TokyoTyrantIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "tokyotyrantiterator.rewind",
					"name": "TokyoTyrantIterator::rewind",
					"description": "Rewinds the iterator"
				},
				"tokyotyrantiterator.valid": {
					"tokens": [
						"TokyoTyrantIterator::valid",
						"valid",
						"::valid"
					],
					"id": "tokyotyrantiterator.valid",
					"name": "TokyoTyrantIterator::valid",
					"description": "Rewinds the iterator"
				},
				"function.cal-days-in-month": {
					"tokens": [
						"cal_days_in_month",
						"caldays_in_month"
					],
					"id": "function.cal-days-in-month",
					"name": "cal_days_in_month",
					"description": "Return the number of days in a month for a given year and calendar"
				},
				"function.cal-from-jd": {
					"tokens": [
						"cal_from_jd",
						"calfrom_jd"
					],
					"id": "function.cal-from-jd",
					"name": "cal_from_jd",
					"description": "Converts from Julian Day Count to a supported calendar"
				},
				"function.cal-info": {
					"tokens": [
						"cal_info",
						"calinfo"
					],
					"id": "function.cal-info",
					"name": "cal_info",
					"description": "Returns information about a particular calendar"
				},
				"function.cal-to-jd": {
					"tokens": [
						"cal_to_jd",
						"calto_jd"
					],
					"id": "function.cal-to-jd",
					"name": "cal_to_jd",
					"description": "Converts from a supported calendar to Julian Day Count"
				},
				"function.easter-date": {
					"tokens": [
						"easter_date",
						"easterdate"
					],
					"id": "function.easter-date",
					"name": "easter_date",
					"description": "Get Unix timestamp for midnight on Easter of a given year"
				},
				"function.easter-days": {
					"tokens": [
						"easter_days",
						"easterdays"
					],
					"id": "function.easter-days",
					"name": "easter_days",
					"description": "Get number of days after March 21 on which Easter falls for a given year"
				},
				"function.frenchtojd": {
					"tokens": [
						"frenchtojd"
					],
					"id": "function.frenchtojd",
					"name": "frenchtojd",
					"description": "Converts a date from the French Republican Calendar to a Julian Day Count"
				},
				"function.gregoriantojd": {
					"tokens": [
						"gregoriantojd"
					],
					"id": "function.gregoriantojd",
					"name": "gregoriantojd",
					"description": "Converts a Gregorian date to Julian Day Count"
				},
				"function.jddayofweek": {
					"tokens": [
						"jddayofweek"
					],
					"id": "function.jddayofweek",
					"name": "jddayofweek",
					"description": "Returns the day of the week"
				},
				"function.jdmonthname": {
					"tokens": [
						"jdmonthname"
					],
					"id": "function.jdmonthname",
					"name": "jdmonthname",
					"description": "Returns a month name"
				},
				"function.jdtofrench": {
					"tokens": [
						"jdtofrench"
					],
					"id": "function.jdtofrench",
					"name": "jdtofrench",
					"description": "Converts a Julian Day Count to the French Republican Calendar"
				},
				"function.jdtogregorian": {
					"tokens": [
						"jdtogregorian"
					],
					"id": "function.jdtogregorian",
					"name": "jdtogregorian",
					"description": "Converts Julian Day Count to Gregorian date"
				},
				"function.jdtojewish": {
					"tokens": [
						"jdtojewish"
					],
					"id": "function.jdtojewish",
					"name": "jdtojewish",
					"description": "Converts a Julian day count to a Jewish calendar date"
				},
				"function.jdtojulian": {
					"tokens": [
						"jdtojulian"
					],
					"id": "function.jdtojulian",
					"name": "jdtojulian",
					"description": "Converts a Julian Day Count to a Julian Calendar Date"
				},
				"function.jdtounix": {
					"tokens": [
						"jdtounix"
					],
					"id": "function.jdtounix",
					"name": "jdtounix",
					"description": "Convert Julian Day to Unix timestamp"
				},
				"function.jewishtojd": {
					"tokens": [
						"jewishtojd"
					],
					"id": "function.jewishtojd",
					"name": "jewishtojd",
					"description": "Converts a date in the Jewish Calendar to Julian Day Count"
				},
				"function.juliantojd": {
					"tokens": [
						"juliantojd"
					],
					"id": "function.juliantojd",
					"name": "juliantojd",
					"description": "Converts a Julian Calendar date to Julian Day Count"
				},
				"function.unixtojd": {
					"tokens": [
						"unixtojd"
					],
					"id": "function.unixtojd",
					"name": "unixtojd",
					"description": "Convert Unix timestamp to Julian Day"
				},
				"datetime.add": {
					"tokens": [
						"DateTime::add",
						"add",
						"::add"
					],
					"id": "datetime.add",
					"name": "DateTime::add",
					"description": "Adds an amount of days, months, years, hours, minutes and seconds to a\n   DateTime object"
				},
				"datetime.construct": {
					"tokens": [
						"DateTime::__construct",
						"DateTime::_construct",
						"__construct",
						"::__construct"
					],
					"id": "datetime.construct",
					"name": "DateTime::__construct",
					"description": "Returns new DateTime object"
				},
				"datetime.createfromformat": {
					"tokens": [
						"DateTime::createFromFormat",
						"createFromFormat",
						"::createFromFormat"
					],
					"id": "datetime.createfromformat",
					"name": "DateTime::createFromFormat",
					"description": "Returns new DateTime object formatted according to the specified format"
				},
				"datetime.getlasterrors": {
					"tokens": [
						"DateTime::getLastErrors",
						"getLastErrors",
						"::getLastErrors"
					],
					"id": "datetime.getlasterrors",
					"name": "DateTime::getLastErrors",
					"description": "Returns the warnings and errors"
				},
				"datetime.modify": {
					"tokens": [
						"DateTime::modify",
						"modify",
						"::modify"
					],
					"id": "datetime.modify",
					"name": "DateTime::modify",
					"description": "Alters the timestamp"
				},
				"datetime.set-state": {
					"tokens": [
						"DateTime::__set_state",
						"DateTime::_set_state",
						"__set_state",
						"::__set_state"
					],
					"id": "datetime.set-state",
					"name": "DateTime::__set_state",
					"description": "The __set_state handler"
				},
				"datetime.setdate": {
					"tokens": [
						"DateTime::setDate",
						"setDate",
						"::setDate"
					],
					"id": "datetime.setdate",
					"name": "DateTime::setDate",
					"description": "Sets the date"
				},
				"datetime.setisodate": {
					"tokens": [
						"DateTime::setISODate",
						"setISODate",
						"::setISODate"
					],
					"id": "datetime.setisodate",
					"name": "DateTime::setISODate",
					"description": "Sets the ISO date"
				},
				"datetime.settime": {
					"tokens": [
						"DateTime::setTime",
						"setTime",
						"::setTime"
					],
					"id": "datetime.settime",
					"name": "DateTime::setTime",
					"description": "Sets the time"
				},
				"datetime.settimestamp": {
					"tokens": [
						"DateTime::setTimestamp",
						"setTimestamp",
						"::setTimestamp"
					],
					"id": "datetime.settimestamp",
					"name": "DateTime::setTimestamp",
					"description": "Sets the date and time based on an Unix timestamp"
				},
				"datetime.settimezone": {
					"tokens": [
						"DateTime::setTimezone",
						"setTimezone",
						"::setTimezone"
					],
					"id": "datetime.settimezone",
					"name": "DateTime::setTimezone",
					"description": "Sets the time zone for the DateTime object"
				},
				"datetime.sub": {
					"tokens": [
						"DateTime::sub",
						"sub",
						"::sub"
					],
					"id": "datetime.sub",
					"name": "DateTime::sub",
					"description": "Subtracts an amount of days, months, years, hours, minutes and seconds from\n   a DateTime object"
				},
				"datetimeimmutable.add": {
					"tokens": [
						"DateTimeImmutable::add",
						"add",
						"::add"
					],
					"id": "datetimeimmutable.add",
					"name": "DateTimeImmutable::add",
					"description": "Adds an amount of days, months, years, hours, minutes and seconds"
				},
				"datetimeimmutable.construct": {
					"tokens": [
						"DateTimeImmutable::__construct",
						"DateTimeImmutable::_construct",
						"__construct",
						"::__construct"
					],
					"id": "datetimeimmutable.construct",
					"name": "DateTimeImmutable::__construct",
					"description": "Returns new DateTimeImmutable object"
				},
				"datetimeimmutable.createfromformat": {
					"tokens": [
						"DateTimeImmutable::createFromFormat",
						"createFromFormat",
						"::createFromFormat"
					],
					"id": "datetimeimmutable.createfromformat",
					"name": "DateTimeImmutable::createFromFormat",
					"description": "Returns new DateTimeImmutable object formatted according to the specified format"
				},
				"datetimeimmutable.createfrommutable": {
					"tokens": [
						"DateTimeImmutable::createFromMutable",
						"createFromMutable",
						"::createFromMutable"
					],
					"id": "datetimeimmutable.createfrommutable",
					"name": "DateTimeImmutable::createFromMutable",
					"description": "Returns new DateTimeImmutable object encapsulating the given DateTime object"
				},
				"datetimeimmutable.getlasterrors": {
					"tokens": [
						"DateTimeImmutable::getLastErrors",
						"getLastErrors",
						"::getLastErrors"
					],
					"id": "datetimeimmutable.getlasterrors",
					"name": "DateTimeImmutable::getLastErrors",
					"description": "Returns the warnings and errors"
				},
				"datetimeimmutable.modify": {
					"tokens": [
						"DateTimeImmutable::modify",
						"modify",
						"::modify"
					],
					"id": "datetimeimmutable.modify",
					"name": "DateTimeImmutable::modify",
					"description": "Creates a new object with modified timestamp"
				},
				"datetimeimmutable.set-state": {
					"tokens": [
						"DateTimeImmutable::__set_state",
						"DateTimeImmutable::_set_state",
						"__set_state",
						"::__set_state"
					],
					"id": "datetimeimmutable.set-state",
					"name": "DateTimeImmutable::__set_state",
					"description": "The __set_state handler"
				},
				"datetimeimmutable.setdate": {
					"tokens": [
						"DateTimeImmutable::setDate",
						"setDate",
						"::setDate"
					],
					"id": "datetimeimmutable.setdate",
					"name": "DateTimeImmutable::setDate",
					"description": "Sets the date"
				},
				"datetimeimmutable.setisodate": {
					"tokens": [
						"DateTimeImmutable::setISODate",
						"setISODate",
						"::setISODate"
					],
					"id": "datetimeimmutable.setisodate",
					"name": "DateTimeImmutable::setISODate",
					"description": "Sets the ISO date"
				},
				"datetimeimmutable.settime": {
					"tokens": [
						"DateTimeImmutable::setTime",
						"setTime",
						"::setTime"
					],
					"id": "datetimeimmutable.settime",
					"name": "DateTimeImmutable::setTime",
					"description": "Sets the time"
				},
				"datetimeimmutable.settimestamp": {
					"tokens": [
						"DateTimeImmutable::setTimestamp",
						"setTimestamp",
						"::setTimestamp"
					],
					"id": "datetimeimmutable.settimestamp",
					"name": "DateTimeImmutable::setTimestamp",
					"description": "Sets the date and time based on an Unix timestamp"
				},
				"datetimeimmutable.settimezone": {
					"tokens": [
						"DateTimeImmutable::setTimezone",
						"setTimezone",
						"::setTimezone"
					],
					"id": "datetimeimmutable.settimezone",
					"name": "DateTimeImmutable::setTimezone",
					"description": "Sets the time zone"
				},
				"datetimeimmutable.sub": {
					"tokens": [
						"DateTimeImmutable::sub",
						"sub",
						"::sub"
					],
					"id": "datetimeimmutable.sub",
					"name": "DateTimeImmutable::sub",
					"description": "Subtracts an amount of days, months, years, hours, minutes and seconds"
				},
				"datetime.diff": {
					"tokens": [
						"DateTime::diff",
						"diff",
						"::diff"
					],
					"id": "datetime.diff",
					"name": "DateTime::diff",
					"description": "Returns the difference between two DateTime objects"
				},
				"datetime.format": {
					"tokens": [
						"DateTime::format",
						"format",
						"::format"
					],
					"id": "datetime.format",
					"name": "DateTime::format",
					"description": "Returns date formatted according to given format"
				},
				"datetime.getoffset": {
					"tokens": [
						"DateTime::getOffset",
						"getOffset",
						"::getOffset"
					],
					"id": "datetime.getoffset",
					"name": "DateTime::getOffset",
					"description": "Returns the timezone offset"
				},
				"datetime.gettimestamp": {
					"tokens": [
						"DateTime::getTimestamp",
						"getTimestamp",
						"::getTimestamp"
					],
					"id": "datetime.gettimestamp",
					"name": "DateTime::getTimestamp",
					"description": "Gets the Unix timestamp"
				},
				"datetime.gettimezone": {
					"tokens": [
						"DateTime::getTimezone",
						"getTimezone",
						"::getTimezone"
					],
					"id": "datetime.gettimezone",
					"name": "DateTime::getTimezone",
					"description": "Return time zone relative to given DateTime"
				},
				"datetime.wakeup": {
					"tokens": [
						"DateTime::__wakeup",
						"DateTime::_wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "datetime.wakeup",
					"name": "DateTime::__wakeup",
					"description": "The __wakeup handler"
				},
				"datetimezone.construct": {
					"tokens": [
						"DateTimeZone::__construct",
						"DateTimeZone::_construct",
						"__construct",
						"::__construct"
					],
					"id": "datetimezone.construct",
					"name": "DateTimeZone::__construct",
					"description": "Creates new DateTimeZone object"
				},
				"datetimezone.getlocation": {
					"tokens": [
						"DateTimeZone::getLocation",
						"getLocation",
						"::getLocation"
					],
					"id": "datetimezone.getlocation",
					"name": "DateTimeZone::getLocation",
					"description": "Returns location information for a timezone"
				},
				"datetimezone.getname": {
					"tokens": [
						"DateTimeZone::getName",
						"getName",
						"::getName"
					],
					"id": "datetimezone.getname",
					"name": "DateTimeZone::getName",
					"description": "Returns the name of the timezone"
				},
				"datetimezone.getoffset": {
					"tokens": [
						"DateTimeZone::getOffset",
						"getOffset",
						"::getOffset"
					],
					"id": "datetimezone.getoffset",
					"name": "DateTimeZone::getOffset",
					"description": "Returns the timezone offset from GMT"
				},
				"datetimezone.gettransitions": {
					"tokens": [
						"DateTimeZone::getTransitions",
						"getTransitions",
						"::getTransitions"
					],
					"id": "datetimezone.gettransitions",
					"name": "DateTimeZone::getTransitions",
					"description": "Returns all transitions for the timezone"
				},
				"datetimezone.listabbreviations": {
					"tokens": [
						"DateTimeZone::listAbbreviations",
						"listAbbreviations",
						"::listAbbreviations"
					],
					"id": "datetimezone.listabbreviations",
					"name": "DateTimeZone::listAbbreviations",
					"description": "Returns associative array containing dst, offset and the timezone name"
				},
				"datetimezone.listidentifiers": {
					"tokens": [
						"DateTimeZone::listIdentifiers",
						"listIdentifiers",
						"::listIdentifiers"
					],
					"id": "datetimezone.listidentifiers",
					"name": "DateTimeZone::listIdentifiers",
					"description": "Returns a numerically indexed array containing all defined timezone identifiers"
				},
				"dateinterval.construct": {
					"tokens": [
						"DateInterval::__construct",
						"DateInterval::_construct",
						"__construct",
						"::__construct"
					],
					"id": "dateinterval.construct",
					"name": "DateInterval::__construct",
					"description": "Creates a new DateInterval object"
				},
				"dateinterval.createfromdatestring": {
					"tokens": [
						"DateInterval::createFromDateString",
						"createFromDateString",
						"::createFromDateString"
					],
					"id": "dateinterval.createfromdatestring",
					"name": "DateInterval::createFromDateString",
					"description": "Sets up a DateInterval from the relative parts of the string"
				},
				"dateinterval.format": {
					"tokens": [
						"DateInterval::format",
						"format",
						"::format"
					],
					"id": "dateinterval.format",
					"name": "DateInterval::format",
					"description": "Formats the interval"
				},
				"dateperiod.construct": {
					"tokens": [
						"DatePeriod::__construct",
						"DatePeriod::_construct",
						"__construct",
						"::__construct"
					],
					"id": "dateperiod.construct",
					"name": "DatePeriod::__construct",
					"description": "Creates a new DatePeriod object"
				},
				"dateperiod.getdateinterval": {
					"tokens": [
						"DatePeriod::getDateInterval",
						"getDateInterval",
						"::getDateInterval"
					],
					"id": "dateperiod.getdateinterval",
					"name": "DatePeriod::getDateInterval",
					"description": "Gets the interval"
				},
				"dateperiod.getenddate": {
					"tokens": [
						"DatePeriod::getEndDate",
						"getEndDate",
						"::getEndDate"
					],
					"id": "dateperiod.getenddate",
					"name": "DatePeriod::getEndDate",
					"description": "Gets the end date"
				},
				"dateperiod.getstartdate": {
					"tokens": [
						"DatePeriod::getStartDate",
						"getStartDate",
						"::getStartDate"
					],
					"id": "dateperiod.getstartdate",
					"name": "DatePeriod::getStartDate",
					"description": "Gets the start date"
				},
				"function.checkdate": {
					"tokens": [
						"checkdate"
					],
					"id": "function.checkdate",
					"name": "checkdate",
					"description": "Validate a Gregorian date"
				},
				"function.date-add": {
					"tokens": [
						"date_add",
						"dateadd"
					],
					"id": "function.date-add",
					"name": "date_add",
					"description": "Alias of DateTime::add"
				},
				"function.date-create-from-format": {
					"tokens": [
						"date_create_from_format",
						"datecreate_from_format"
					],
					"id": "function.date-create-from-format",
					"name": "date_create_from_format",
					"description": "Alias of DateTime::createFromFormat"
				},
				"function.date-create-immutable-from-format": {
					"tokens": [
						"date_create_immutable_from_format",
						"datecreate_immutable_from_format"
					],
					"id": "function.date-create-immutable-from-format",
					"name": "date_create_immutable_from_format",
					"description": "Alias of DateTimeImmutable::createFromFormat"
				},
				"function.date-create-immutable": {
					"tokens": [
						"date_create_immutable",
						"datecreate_immutable"
					],
					"id": "function.date-create-immutable",
					"name": "date_create_immutable",
					"description": "Alias of DateTimeImmutable::__construct"
				},
				"function.date-create": {
					"tokens": [
						"date_create",
						"datecreate"
					],
					"id": "function.date-create",
					"name": "date_create",
					"description": "Alias of DateTime::__construct"
				},
				"function.date-date-set": {
					"tokens": [
						"date_date_set",
						"datedate_set"
					],
					"id": "function.date-date-set",
					"name": "date_date_set",
					"description": "Alias of DateTime::setDate"
				},
				"function.date-default-timezone-get": {
					"tokens": [
						"date_default_timezone_get",
						"datedefault_timezone_get"
					],
					"id": "function.date-default-timezone-get",
					"name": "date_default_timezone_get",
					"description": "Gets the default timezone used by all date/time functions in a script"
				},
				"function.date-default-timezone-set": {
					"tokens": [
						"date_default_timezone_set",
						"datedefault_timezone_set"
					],
					"id": "function.date-default-timezone-set",
					"name": "date_default_timezone_set",
					"description": "Sets the default timezone used by all date/time functions in a script"
				},
				"function.date-diff": {
					"tokens": [
						"date_diff",
						"datediff"
					],
					"id": "function.date-diff",
					"name": "date_diff",
					"description": "Alias of DateTime::diff"
				},
				"function.date-format": {
					"tokens": [
						"date_format",
						"dateformat"
					],
					"id": "function.date-format",
					"name": "date_format",
					"description": "Alias of DateTime::format"
				},
				"function.date-get-last-errors": {
					"tokens": [
						"date_get_last_errors",
						"dateget_last_errors"
					],
					"id": "function.date-get-last-errors",
					"name": "date_get_last_errors",
					"description": "Alias of DateTime::getLastErrors"
				},
				"function.date-interval-create-from-date-string": {
					"tokens": [
						"date_interval_create_from_date_string",
						"dateinterval_create_from_date_string"
					],
					"id": "function.date-interval-create-from-date-string",
					"name": "date_interval_create_from_date_string",
					"description": "Alias of DateInterval::createFromDateString"
				},
				"function.date-interval-format": {
					"tokens": [
						"date_interval_format",
						"dateinterval_format"
					],
					"id": "function.date-interval-format",
					"name": "date_interval_format",
					"description": "Alias of DateInterval::format"
				},
				"function.date-isodate-set": {
					"tokens": [
						"date_isodate_set",
						"dateisodate_set"
					],
					"id": "function.date-isodate-set",
					"name": "date_isodate_set",
					"description": "Alias of DateTime::setISODate"
				},
				"function.date-modify": {
					"tokens": [
						"date_modify",
						"datemodify"
					],
					"id": "function.date-modify",
					"name": "date_modify",
					"description": "Alias of DateTime::modify"
				},
				"function.date-offset-get": {
					"tokens": [
						"date_offset_get",
						"dateoffset_get"
					],
					"id": "function.date-offset-get",
					"name": "date_offset_get",
					"description": "Alias of DateTime::getOffset"
				},
				"function.date-parse-from-format": {
					"tokens": [
						"date_parse_from_format",
						"dateparse_from_format"
					],
					"id": "function.date-parse-from-format",
					"name": "date_parse_from_format",
					"description": "Get info about given date formatted according to the specified format"
				},
				"function.date-parse": {
					"tokens": [
						"date_parse",
						"dateparse"
					],
					"id": "function.date-parse",
					"name": "date_parse",
					"description": "Returns associative array with detailed info about given date"
				},
				"function.date-sub": {
					"tokens": [
						"date_sub",
						"datesub"
					],
					"id": "function.date-sub",
					"name": "date_sub",
					"description": "Alias of DateTime::sub"
				},
				"function.date-sun-info": {
					"tokens": [
						"date_sun_info",
						"datesun_info"
					],
					"id": "function.date-sun-info",
					"name": "date_sun_info",
					"description": "Returns an array with information about sunset/sunrise and twilight begin/end"
				},
				"function.date-sunrise": {
					"tokens": [
						"date_sunrise",
						"datesunrise"
					],
					"id": "function.date-sunrise",
					"name": "date_sunrise",
					"description": "Returns time of sunrise for a given day and location"
				},
				"function.date-sunset": {
					"tokens": [
						"date_sunset",
						"datesunset"
					],
					"id": "function.date-sunset",
					"name": "date_sunset",
					"description": "Returns time of sunset for a given day and location"
				},
				"function.date-time-set": {
					"tokens": [
						"date_time_set",
						"datetime_set"
					],
					"id": "function.date-time-set",
					"name": "date_time_set",
					"description": "Alias of DateTime::setTime"
				},
				"function.date-timestamp-get": {
					"tokens": [
						"date_timestamp_get",
						"datetimestamp_get"
					],
					"id": "function.date-timestamp-get",
					"name": "date_timestamp_get",
					"description": "Alias of DateTime::getTimestamp"
				},
				"function.date-timestamp-set": {
					"tokens": [
						"date_timestamp_set",
						"datetimestamp_set"
					],
					"id": "function.date-timestamp-set",
					"name": "date_timestamp_set",
					"description": "Alias of DateTime::setTimestamp"
				},
				"function.date-timezone-get": {
					"tokens": [
						"date_timezone_get",
						"datetimezone_get"
					],
					"id": "function.date-timezone-get",
					"name": "date_timezone_get",
					"description": "Alias of DateTime::getTimezone"
				},
				"function.date-timezone-set": {
					"tokens": [
						"date_timezone_set",
						"datetimezone_set"
					],
					"id": "function.date-timezone-set",
					"name": "date_timezone_set",
					"description": "Alias of DateTime::setTimezone"
				},
				"function.date": {
					"tokens": [
						"date"
					],
					"id": "function.date",
					"name": "date",
					"description": "Format a local time/date"
				},
				"function.getdate": {
					"tokens": [
						"getdate"
					],
					"id": "function.getdate",
					"name": "getdate",
					"description": "Get date/time information"
				},
				"function.gettimeofday": {
					"tokens": [
						"gettimeofday"
					],
					"id": "function.gettimeofday",
					"name": "gettimeofday",
					"description": "Get current time"
				},
				"function.gmdate": {
					"tokens": [
						"gmdate"
					],
					"id": "function.gmdate",
					"name": "gmdate",
					"description": "Format a GMT/UTC date/time"
				},
				"function.gmmktime": {
					"tokens": [
						"gmmktime"
					],
					"id": "function.gmmktime",
					"name": "gmmktime",
					"description": "Get Unix timestamp for a GMT date"
				},
				"function.gmstrftime": {
					"tokens": [
						"gmstrftime"
					],
					"id": "function.gmstrftime",
					"name": "gmstrftime",
					"description": "Format a GMT/UTC time/date according to locale settings"
				},
				"function.idate": {
					"tokens": [
						"idate"
					],
					"id": "function.idate",
					"name": "idate",
					"description": "Format a local time/date as integer"
				},
				"function.localtime": {
					"tokens": [
						"localtime"
					],
					"id": "function.localtime",
					"name": "localtime",
					"description": "Get the local time"
				},
				"function.microtime": {
					"tokens": [
						"microtime"
					],
					"id": "function.microtime",
					"name": "microtime",
					"description": "Return current Unix timestamp with microseconds"
				},
				"function.mktime": {
					"tokens": [
						"mktime"
					],
					"id": "function.mktime",
					"name": "mktime",
					"description": "Get Unix timestamp for a date"
				},
				"function.strftime": {
					"tokens": [
						"strftime"
					],
					"id": "function.strftime",
					"name": "strftime",
					"description": "Format a local time/date according to locale settings"
				},
				"function.strptime": {
					"tokens": [
						"strptime"
					],
					"id": "function.strptime",
					"name": "strptime",
					"description": "Parse a time/date generated with strftime"
				},
				"function.strtotime": {
					"tokens": [
						"strtotime"
					],
					"id": "function.strtotime",
					"name": "strtotime",
					"description": "Parse about any English textual datetime description into a Unix timestamp"
				},
				"function.time": {
					"tokens": [
						"time"
					],
					"id": "function.time",
					"name": "time",
					"description": "Return current Unix timestamp"
				},
				"function.timezone-abbreviations-list": {
					"tokens": [
						"timezone_abbreviations_list",
						"timezoneabbreviations_list"
					],
					"id": "function.timezone-abbreviations-list",
					"name": "timezone_abbreviations_list",
					"description": "Alias of DateTimeZone::listAbbreviations"
				},
				"function.timezone-identifiers-list": {
					"tokens": [
						"timezone_identifiers_list",
						"timezoneidentifiers_list"
					],
					"id": "function.timezone-identifiers-list",
					"name": "timezone_identifiers_list",
					"description": "Alias of DateTimeZone::listIdentifiers"
				},
				"function.timezone-location-get": {
					"tokens": [
						"timezone_location_get",
						"timezonelocation_get"
					],
					"id": "function.timezone-location-get",
					"name": "timezone_location_get",
					"description": "Alias of DateTimeZone::getLocation"
				},
				"function.timezone-name-from-abbr": {
					"tokens": [
						"timezone_name_from_abbr",
						"timezonename_from_abbr"
					],
					"id": "function.timezone-name-from-abbr",
					"name": "timezone_name_from_abbr",
					"description": "Returns the timezone name from abbreviation"
				},
				"function.timezone-name-get": {
					"tokens": [
						"timezone_name_get",
						"timezonename_get"
					],
					"id": "function.timezone-name-get",
					"name": "timezone_name_get",
					"description": "Alias of DateTimeZone::getName"
				},
				"function.timezone-offset-get": {
					"tokens": [
						"timezone_offset_get",
						"timezoneoffset_get"
					],
					"id": "function.timezone-offset-get",
					"name": "timezone_offset_get",
					"description": "Alias of DateTimeZone::getOffset"
				},
				"function.timezone-open": {
					"tokens": [
						"timezone_open",
						"timezoneopen"
					],
					"id": "function.timezone-open",
					"name": "timezone_open",
					"description": "Alias of DateTimeZone::__construct"
				},
				"function.timezone-transitions-get": {
					"tokens": [
						"timezone_transitions_get",
						"timezonetransitions_get"
					],
					"id": "function.timezone-transitions-get",
					"name": "timezone_transitions_get",
					"description": "Alias of DateTimeZone::getTransitions"
				},
				"function.timezone-version-get": {
					"tokens": [
						"timezone_version_get",
						"timezoneversion_get"
					],
					"id": "function.timezone-version-get",
					"name": "timezone_version_get",
					"description": "Gets the version of the timezonedb"
				},
				"hrtime-performancecounter.getelapsedticks": {
					"tokens": [
						"HRTime\\PerformanceCounter::getElapsedTicks",
						"getElapsedTicks",
						"::getElapsedTicks"
					],
					"id": "hrtime-performancecounter.getelapsedticks",
					"name": "HRTime\\PerformanceCounter::getElapsedTicks",
					"description": "Get elapsed ticks for all intervals."
				},
				"hrtime-performancecounter.getfrequency": {
					"tokens": [
						"HRTime\\PerformanceCounter::getFrequency",
						"getFrequency",
						"::getFrequency"
					],
					"id": "hrtime-performancecounter.getfrequency",
					"name": "HRTime\\PerformanceCounter::getFrequency",
					"description": "Timer frequency in ticks per second"
				},
				"hrtime-performancecounter.getlastelapsedticks": {
					"tokens": [
						"HRTime\\PerformanceCounter::getLastElapsedTicks",
						"getLastElapsedTicks",
						"::getLastElapsedTicks"
					],
					"id": "hrtime-performancecounter.getlastelapsedticks",
					"name": "HRTime\\PerformanceCounter::getLastElapsedTicks",
					"description": "Get elapsed ticks for the last interval."
				},
				"hrtime-performancecounter.isrunning": {
					"tokens": [
						"HRTime\\PerformanceCounter::isRunning",
						"isRunning",
						"::isRunning"
					],
					"id": "hrtime-performancecounter.isrunning",
					"name": "HRTime\\PerformanceCounter::isRunning",
					"description": "Whether the measurement is running."
				},
				"hrtime-performancecounter.start": {
					"tokens": [
						"HRTime\\PerformanceCounter::start",
						"start",
						"::start"
					],
					"id": "hrtime-performancecounter.start",
					"name": "HRTime\\PerformanceCounter::start",
					"description": "Start time measurement"
				},
				"hrtime-performancecounter.stop": {
					"tokens": [
						"HRTime\\PerformanceCounter::stop",
						"stop",
						"::stop"
					],
					"id": "hrtime-performancecounter.stop",
					"name": "HRTime\\PerformanceCounter::stop",
					"description": "Stop time measurement"
				},
				"hrtime-stopwatch.getelapsedtime": {
					"tokens": [
						"HRTime\\StopWatch::getElapsedTime",
						"getElapsedTime",
						"::getElapsedTime"
					],
					"id": "hrtime-stopwatch.getelapsedtime",
					"name": "HRTime\\StopWatch::getElapsedTime",
					"description": "Get elapsed time for all intervals."
				},
				"hrtime-stopwatch.getlastelapsedtime": {
					"tokens": [
						"HRTime\\StopWatch::getLastElapsedTime",
						"getLastElapsedTime",
						"::getLastElapsedTime"
					],
					"id": "hrtime-stopwatch.getlastelapsedtime",
					"name": "HRTime\\StopWatch::getLastElapsedTime",
					"description": "Get elapsed time for the last interval."
				},
				"function.dio-close": {
					"tokens": [
						"dio_close",
						"dioclose"
					],
					"id": "function.dio-close",
					"name": "dio_close",
					"description": "Closes the file descriptor given by fd"
				},
				"function.dio-fcntl": {
					"tokens": [
						"dio_fcntl",
						"diofcntl"
					],
					"id": "function.dio-fcntl",
					"name": "dio_fcntl",
					"description": "Performs a c library fcntl on fd"
				},
				"function.dio-open": {
					"tokens": [
						"dio_open",
						"dioopen"
					],
					"id": "function.dio-open",
					"name": "dio_open",
					"description": "Opens a file (creating it if necessary) at a lower level than the\n   C library input/ouput stream functions allow."
				},
				"function.dio-read": {
					"tokens": [
						"dio_read",
						"dioread"
					],
					"id": "function.dio-read",
					"name": "dio_read",
					"description": "Reads bytes from a file descriptor"
				},
				"function.dio-seek": {
					"tokens": [
						"dio_seek",
						"dioseek"
					],
					"id": "function.dio-seek",
					"name": "dio_seek",
					"description": "Seeks to pos on fd from whence"
				},
				"function.dio-stat": {
					"tokens": [
						"dio_stat",
						"diostat"
					],
					"id": "function.dio-stat",
					"name": "dio_stat",
					"description": "Gets stat information about the file descriptor fd"
				},
				"function.dio-tcsetattr": {
					"tokens": [
						"dio_tcsetattr",
						"diotcsetattr"
					],
					"id": "function.dio-tcsetattr",
					"name": "dio_tcsetattr",
					"description": "Sets terminal attributes and baud rate for a serial port"
				},
				"function.dio-truncate": {
					"tokens": [
						"dio_truncate",
						"diotruncate"
					],
					"id": "function.dio-truncate",
					"name": "dio_truncate",
					"description": "Truncates file descriptor fd to offset bytes"
				},
				"function.dio-write": {
					"tokens": [
						"dio_write",
						"diowrite"
					],
					"id": "function.dio-write",
					"name": "dio_write",
					"description": "Writes data to fd with optional truncation at length"
				},
				"directory.close": {
					"tokens": [
						"Directory::close",
						"close",
						"::close"
					],
					"id": "directory.close",
					"name": "Directory::close",
					"description": "Close directory handle"
				},
				"directory.read": {
					"tokens": [
						"Directory::read",
						"read",
						"::read"
					],
					"id": "directory.read",
					"name": "Directory::read",
					"description": "Read entry from directory handle"
				},
				"directory.rewind": {
					"tokens": [
						"Directory::rewind",
						"rewind",
						"::rewind"
					],
					"id": "directory.rewind",
					"name": "Directory::rewind",
					"description": "Rewind directory handle"
				},
				"function.chdir": {
					"tokens": [
						"chdir"
					],
					"id": "function.chdir",
					"name": "chdir",
					"description": "Change directory"
				},
				"function.chroot": {
					"tokens": [
						"chroot"
					],
					"id": "function.chroot",
					"name": "chroot",
					"description": "Change the root directory"
				},
				"function.closedir": {
					"tokens": [
						"closedir"
					],
					"id": "function.closedir",
					"name": "closedir",
					"description": "Close directory handle"
				},
				"function.dir": {
					"tokens": [
						"dir"
					],
					"id": "function.dir",
					"name": "dir",
					"description": "Return an instance of the Directory class"
				},
				"function.getcwd": {
					"tokens": [
						"getcwd"
					],
					"id": "function.getcwd",
					"name": "getcwd",
					"description": "Gets the current working directory"
				},
				"function.opendir": {
					"tokens": [
						"opendir"
					],
					"id": "function.opendir",
					"name": "opendir",
					"description": "Open directory handle"
				},
				"function.readdir": {
					"tokens": [
						"readdir"
					],
					"id": "function.readdir",
					"name": "readdir",
					"description": "Read entry from directory handle"
				},
				"function.rewinddir": {
					"tokens": [
						"rewinddir"
					],
					"id": "function.rewinddir",
					"name": "rewinddir",
					"description": "Rewind directory handle"
				},
				"function.scandir": {
					"tokens": [
						"scandir"
					],
					"id": "function.scandir",
					"name": "scandir",
					"description": "List files and directories inside the specified path"
				},
				"function.finfo-buffer": {
					"tokens": [
						"finfo_buffer",
						"finfobuffer"
					],
					"id": "function.finfo-buffer",
					"name": "finfo_buffer",
					"description": "Return information about a string buffer"
				},
				"function.finfo-close": {
					"tokens": [
						"finfo_close",
						"finfoclose"
					],
					"id": "function.finfo-close",
					"name": "finfo_close",
					"description": "Close fileinfo resource"
				},
				"function.finfo-file": {
					"tokens": [
						"finfo_file",
						"finfofile"
					],
					"id": "function.finfo-file",
					"name": "finfo_file",
					"description": "Return information about a file"
				},
				"function.finfo-open": {
					"tokens": [
						"finfo_open",
						"finfoopen"
					],
					"id": "function.finfo-open",
					"name": "finfo_open",
					"description": "Create a new fileinfo resource"
				},
				"function.finfo-set-flags": {
					"tokens": [
						"finfo_set_flags",
						"finfoset_flags"
					],
					"id": "function.finfo-set-flags",
					"name": "finfo_set_flags",
					"description": "Set libmagic configuration options"
				},
				"function.mime-content-type": {
					"tokens": [
						"mime_content_type",
						"mimecontent_type"
					],
					"id": "function.mime-content-type",
					"name": "mime_content_type",
					"description": "Detect MIME Content-type for a file"
				},
				"finfo.buffer": {
					"tokens": [
						"finfo::buffer",
						"buffer",
						"::buffer"
					],
					"id": "finfo.buffer",
					"name": "finfo::buffer",
					"description": "Alias of finfo_buffer()"
				},
				"finfo.construct": {
					"tokens": [
						"finfo::__construct",
						"finfo::_construct",
						"__construct",
						"::__construct"
					],
					"id": "finfo.construct",
					"name": "finfo::__construct",
					"description": "Alias of finfo_open"
				},
				"finfo.file": {
					"tokens": [
						"finfo::file",
						"file",
						"::file"
					],
					"id": "finfo.file",
					"name": "finfo::file",
					"description": "Alias of finfo_file()"
				},
				"finfo.set-flags": {
					"tokens": [
						"finfo::set_flags",
						"finfo::setflags",
						"set_flags",
						"::set_flags"
					],
					"id": "finfo.set-flags",
					"name": "finfo::set_flags",
					"description": "Alias of finfo_set_flags()"
				},
				"function.basename": {
					"tokens": [
						"basename"
					],
					"id": "function.basename",
					"name": "basename",
					"description": "Returns trailing name component of path"
				},
				"function.chgrp": {
					"tokens": [
						"chgrp"
					],
					"id": "function.chgrp",
					"name": "chgrp",
					"description": "Changes file group"
				},
				"function.chmod": {
					"tokens": [
						"chmod"
					],
					"id": "function.chmod",
					"name": "chmod",
					"description": "Changes file mode"
				},
				"function.chown": {
					"tokens": [
						"chown"
					],
					"id": "function.chown",
					"name": "chown",
					"description": "Changes file owner"
				},
				"function.clearstatcache": {
					"tokens": [
						"clearstatcache"
					],
					"id": "function.clearstatcache",
					"name": "clearstatcache",
					"description": "Clears file status cache"
				},
				"function.copy": {
					"tokens": [
						"copy"
					],
					"id": "function.copy",
					"name": "copy",
					"description": "Copies file"
				},
				"function.delete": {
					"tokens": [
						"delete"
					],
					"id": "function.delete",
					"name": "delete",
					"description": "See unlink or unset"
				},
				"function.dirname": {
					"tokens": [
						"dirname"
					],
					"id": "function.dirname",
					"name": "dirname",
					"description": "Returns a parent directory's path"
				},
				"function.disk-free-space": {
					"tokens": [
						"disk_free_space",
						"diskfree_space"
					],
					"id": "function.disk-free-space",
					"name": "disk_free_space",
					"description": "Returns available space on filesystem or disk partition"
				},
				"function.disk-total-space": {
					"tokens": [
						"disk_total_space",
						"disktotal_space"
					],
					"id": "function.disk-total-space",
					"name": "disk_total_space",
					"description": "Returns the total size of a filesystem or disk partition"
				},
				"function.diskfreespace": {
					"tokens": [
						"diskfreespace"
					],
					"id": "function.diskfreespace",
					"name": "diskfreespace",
					"description": "Alias of disk_free_space"
				},
				"function.fclose": {
					"tokens": [
						"fclose"
					],
					"id": "function.fclose",
					"name": "fclose",
					"description": "Closes an open file pointer"
				},
				"function.feof": {
					"tokens": [
						"feof"
					],
					"id": "function.feof",
					"name": "feof",
					"description": "Tests for end-of-file on a file pointer"
				},
				"function.fflush": {
					"tokens": [
						"fflush"
					],
					"id": "function.fflush",
					"name": "fflush",
					"description": "Flushes the output to a file"
				},
				"function.fgetc": {
					"tokens": [
						"fgetc"
					],
					"id": "function.fgetc",
					"name": "fgetc",
					"description": "Gets character from file pointer"
				},
				"function.fgetcsv": {
					"tokens": [
						"fgetcsv"
					],
					"id": "function.fgetcsv",
					"name": "fgetcsv",
					"description": "Gets line from file pointer and parse for CSV fields"
				},
				"function.fgets": {
					"tokens": [
						"fgets"
					],
					"id": "function.fgets",
					"name": "fgets",
					"description": "Gets line from file pointer"
				},
				"function.fgetss": {
					"tokens": [
						"fgetss"
					],
					"id": "function.fgetss",
					"name": "fgetss",
					"description": "Gets line from file pointer and strip HTML tags"
				},
				"function.file-exists": {
					"tokens": [
						"file_exists",
						"fileexists"
					],
					"id": "function.file-exists",
					"name": "file_exists",
					"description": "Checks whether a file or directory exists"
				},
				"function.file-get-contents": {
					"tokens": [
						"file_get_contents",
						"fileget_contents"
					],
					"id": "function.file-get-contents",
					"name": "file_get_contents",
					"description": "Reads entire file into a string"
				},
				"function.file-put-contents": {
					"tokens": [
						"file_put_contents",
						"fileput_contents"
					],
					"id": "function.file-put-contents",
					"name": "file_put_contents",
					"description": "Write a string to a file"
				},
				"function.file": {
					"tokens": [
						"file"
					],
					"id": "function.file",
					"name": "file",
					"description": "Reads entire file into an array"
				},
				"function.fileatime": {
					"tokens": [
						"fileatime"
					],
					"id": "function.fileatime",
					"name": "fileatime",
					"description": "Gets last access time of file"
				},
				"function.filectime": {
					"tokens": [
						"filectime"
					],
					"id": "function.filectime",
					"name": "filectime",
					"description": "Gets inode change time of file"
				},
				"function.filegroup": {
					"tokens": [
						"filegroup"
					],
					"id": "function.filegroup",
					"name": "filegroup",
					"description": "Gets file group"
				},
				"function.fileinode": {
					"tokens": [
						"fileinode"
					],
					"id": "function.fileinode",
					"name": "fileinode",
					"description": "Gets file inode"
				},
				"function.filemtime": {
					"tokens": [
						"filemtime"
					],
					"id": "function.filemtime",
					"name": "filemtime",
					"description": "Gets file modification time"
				},
				"function.fileowner": {
					"tokens": [
						"fileowner"
					],
					"id": "function.fileowner",
					"name": "fileowner",
					"description": "Gets file owner"
				},
				"function.fileperms": {
					"tokens": [
						"fileperms"
					],
					"id": "function.fileperms",
					"name": "fileperms",
					"description": "Gets file permissions"
				},
				"function.filesize": {
					"tokens": [
						"filesize"
					],
					"id": "function.filesize",
					"name": "filesize",
					"description": "Gets file size"
				},
				"function.filetype": {
					"tokens": [
						"filetype"
					],
					"id": "function.filetype",
					"name": "filetype",
					"description": "Gets file type"
				},
				"function.flock": {
					"tokens": [
						"flock"
					],
					"id": "function.flock",
					"name": "flock",
					"description": "Portable advisory file locking"
				},
				"function.fnmatch": {
					"tokens": [
						"fnmatch"
					],
					"id": "function.fnmatch",
					"name": "fnmatch",
					"description": "Match filename against a pattern"
				},
				"function.fopen": {
					"tokens": [
						"fopen"
					],
					"id": "function.fopen",
					"name": "fopen",
					"description": "Opens file or URL"
				},
				"function.fpassthru": {
					"tokens": [
						"fpassthru"
					],
					"id": "function.fpassthru",
					"name": "fpassthru",
					"description": "Output all remaining data on a file pointer"
				},
				"function.fputcsv": {
					"tokens": [
						"fputcsv"
					],
					"id": "function.fputcsv",
					"name": "fputcsv",
					"description": "Format line as CSV and write to file pointer"
				},
				"function.fputs": {
					"tokens": [
						"fputs"
					],
					"id": "function.fputs",
					"name": "fputs",
					"description": "Alias of fwrite"
				},
				"function.fread": {
					"tokens": [
						"fread"
					],
					"id": "function.fread",
					"name": "fread",
					"description": "Binary-safe file read"
				},
				"function.fscanf": {
					"tokens": [
						"fscanf"
					],
					"id": "function.fscanf",
					"name": "fscanf",
					"description": "Parses input from a file according to a format"
				},
				"function.fseek": {
					"tokens": [
						"fseek"
					],
					"id": "function.fseek",
					"name": "fseek",
					"description": "Seeks on a file pointer"
				},
				"function.fstat": {
					"tokens": [
						"fstat"
					],
					"id": "function.fstat",
					"name": "fstat",
					"description": "Gets information about a file using an open file pointer"
				},
				"function.ftell": {
					"tokens": [
						"ftell"
					],
					"id": "function.ftell",
					"name": "ftell",
					"description": "Returns the current position of the file read/write pointer"
				},
				"function.ftruncate": {
					"tokens": [
						"ftruncate"
					],
					"id": "function.ftruncate",
					"name": "ftruncate",
					"description": "Truncates a file to a given length"
				},
				"function.fwrite": {
					"tokens": [
						"fwrite"
					],
					"id": "function.fwrite",
					"name": "fwrite",
					"description": "Binary-safe file write"
				},
				"function.glob": {
					"tokens": [
						"glob"
					],
					"id": "function.glob",
					"name": "glob",
					"description": "Find pathnames matching a pattern"
				},
				"function.is-dir": {
					"tokens": [
						"is_dir",
						"isdir"
					],
					"id": "function.is-dir",
					"name": "is_dir",
					"description": "Tells whether the filename is a directory"
				},
				"function.is-executable": {
					"tokens": [
						"is_executable",
						"isexecutable"
					],
					"id": "function.is-executable",
					"name": "is_executable",
					"description": "Tells whether the filename is executable"
				},
				"function.is-file": {
					"tokens": [
						"is_file",
						"isfile"
					],
					"id": "function.is-file",
					"name": "is_file",
					"description": "Tells whether the filename is a regular file"
				},
				"function.is-link": {
					"tokens": [
						"is_link",
						"islink"
					],
					"id": "function.is-link",
					"name": "is_link",
					"description": "Tells whether the filename is a symbolic link"
				},
				"function.is-readable": {
					"tokens": [
						"is_readable",
						"isreadable"
					],
					"id": "function.is-readable",
					"name": "is_readable",
					"description": "Tells whether a file exists and is readable"
				},
				"function.is-uploaded-file": {
					"tokens": [
						"is_uploaded_file",
						"isuploaded_file"
					],
					"id": "function.is-uploaded-file",
					"name": "is_uploaded_file",
					"description": "Tells whether the file was uploaded via HTTP POST"
				},
				"function.is-writable": {
					"tokens": [
						"is_writable",
						"iswritable"
					],
					"id": "function.is-writable",
					"name": "is_writable",
					"description": "Tells whether the filename is writable"
				},
				"function.is-writeable": {
					"tokens": [
						"is_writeable",
						"iswriteable"
					],
					"id": "function.is-writeable",
					"name": "is_writeable",
					"description": "Alias of is_writable"
				},
				"function.lchgrp": {
					"tokens": [
						"lchgrp"
					],
					"id": "function.lchgrp",
					"name": "lchgrp",
					"description": "Changes group ownership of symlink"
				},
				"function.lchown": {
					"tokens": [
						"lchown"
					],
					"id": "function.lchown",
					"name": "lchown",
					"description": "Changes user ownership of symlink"
				},
				"function.link": {
					"tokens": [
						"link"
					],
					"id": "function.link",
					"name": "link",
					"description": "Create a hard link"
				},
				"function.linkinfo": {
					"tokens": [
						"linkinfo"
					],
					"id": "function.linkinfo",
					"name": "linkinfo",
					"description": "Gets information about a link"
				},
				"function.lstat": {
					"tokens": [
						"lstat"
					],
					"id": "function.lstat",
					"name": "lstat",
					"description": "Gives information about a file or symbolic link"
				},
				"function.mkdir": {
					"tokens": [
						"mkdir"
					],
					"id": "function.mkdir",
					"name": "mkdir",
					"description": "Makes directory"
				},
				"function.move-uploaded-file": {
					"tokens": [
						"move_uploaded_file",
						"moveuploaded_file"
					],
					"id": "function.move-uploaded-file",
					"name": "move_uploaded_file",
					"description": "Moves an uploaded file to a new location"
				},
				"function.parse-ini-file": {
					"tokens": [
						"parse_ini_file",
						"parseini_file"
					],
					"id": "function.parse-ini-file",
					"name": "parse_ini_file",
					"description": "Parse a configuration file"
				},
				"function.parse-ini-string": {
					"tokens": [
						"parse_ini_string",
						"parseini_string"
					],
					"id": "function.parse-ini-string",
					"name": "parse_ini_string",
					"description": "Parse a configuration string"
				},
				"function.pathinfo": {
					"tokens": [
						"pathinfo"
					],
					"id": "function.pathinfo",
					"name": "pathinfo",
					"description": "Returns information about a file path"
				},
				"function.pclose": {
					"tokens": [
						"pclose"
					],
					"id": "function.pclose",
					"name": "pclose",
					"description": "Closes process file pointer"
				},
				"function.popen": {
					"tokens": [
						"popen"
					],
					"id": "function.popen",
					"name": "popen",
					"description": "Opens process file pointer"
				},
				"function.readfile": {
					"tokens": [
						"readfile"
					],
					"id": "function.readfile",
					"name": "readfile",
					"description": "Outputs a file"
				},
				"function.readlink": {
					"tokens": [
						"readlink"
					],
					"id": "function.readlink",
					"name": "readlink",
					"description": "Returns the target of a symbolic link"
				},
				"function.realpath-cache-get": {
					"tokens": [
						"realpath_cache_get",
						"realpathcache_get"
					],
					"id": "function.realpath-cache-get",
					"name": "realpath_cache_get",
					"description": "Get realpath cache entries"
				},
				"function.realpath-cache-size": {
					"tokens": [
						"realpath_cache_size",
						"realpathcache_size"
					],
					"id": "function.realpath-cache-size",
					"name": "realpath_cache_size",
					"description": "Get realpath cache size"
				},
				"function.realpath": {
					"tokens": [
						"realpath"
					],
					"id": "function.realpath",
					"name": "realpath",
					"description": "Returns canonicalized absolute pathname"
				},
				"function.rename": {
					"tokens": [
						"rename"
					],
					"id": "function.rename",
					"name": "rename",
					"description": "Renames a file or directory"
				},
				"function.rewind": {
					"tokens": [
						"rewind"
					],
					"id": "function.rewind",
					"name": "rewind",
					"description": "Rewind the position of a file pointer"
				},
				"function.rmdir": {
					"tokens": [
						"rmdir"
					],
					"id": "function.rmdir",
					"name": "rmdir",
					"description": "Removes directory"
				},
				"function.set-file-buffer": {
					"tokens": [
						"set_file_buffer",
						"setfile_buffer"
					],
					"id": "function.set-file-buffer",
					"name": "set_file_buffer",
					"description": "Alias of stream_set_write_buffer"
				},
				"function.stat": {
					"tokens": [
						"stat"
					],
					"id": "function.stat",
					"name": "stat",
					"description": "Gives information about a file"
				},
				"function.symlink": {
					"tokens": [
						"symlink"
					],
					"id": "function.symlink",
					"name": "symlink",
					"description": "Creates a symbolic link"
				},
				"function.tempnam": {
					"tokens": [
						"tempnam"
					],
					"id": "function.tempnam",
					"name": "tempnam",
					"description": "Create file with unique file name"
				},
				"function.tmpfile": {
					"tokens": [
						"tmpfile"
					],
					"id": "function.tmpfile",
					"name": "tmpfile",
					"description": "Creates a temporary file"
				},
				"function.touch": {
					"tokens": [
						"touch"
					],
					"id": "function.touch",
					"name": "touch",
					"description": "Sets access and modification time of file"
				},
				"function.umask": {
					"tokens": [
						"umask"
					],
					"id": "function.umask",
					"name": "umask",
					"description": "Changes the current umask"
				},
				"function.unlink": {
					"tokens": [
						"unlink"
					],
					"id": "function.unlink",
					"name": "unlink",
					"description": "Deletes a file"
				},
				"function.inotify-add-watch": {
					"tokens": [
						"inotify_add_watch",
						"inotifyadd_watch"
					],
					"id": "function.inotify-add-watch",
					"name": "inotify_add_watch",
					"description": "Add a watch to an initialized inotify instance"
				},
				"function.inotify-init": {
					"tokens": [
						"inotify_init",
						"inotifyinit"
					],
					"id": "function.inotify-init",
					"name": "inotify_init",
					"description": "Initialize an inotify instance"
				},
				"function.inotify-queue-len": {
					"tokens": [
						"inotify_queue_len",
						"inotifyqueue_len"
					],
					"id": "function.inotify-queue-len",
					"name": "inotify_queue_len",
					"description": "Return a number upper than zero if there are pending events"
				},
				"function.inotify-read": {
					"tokens": [
						"inotify_read",
						"inotifyread"
					],
					"id": "function.inotify-read",
					"name": "inotify_read",
					"description": "Read events from an inotify instance"
				},
				"function.inotify-rm-watch": {
					"tokens": [
						"inotify_rm_watch",
						"inotifyrm_watch"
					],
					"id": "function.inotify-rm-watch",
					"name": "inotify_rm_watch",
					"description": "Remove an existing watch from an inotify instance"
				},
				"function.setproctitle": {
					"tokens": [
						"setproctitle"
					],
					"id": "function.setproctitle",
					"name": "setproctitle",
					"description": "Set the process title"
				},
				"function.setthreadtitle": {
					"tokens": [
						"setthreadtitle"
					],
					"id": "function.setthreadtitle",
					"name": "setthreadtitle",
					"description": "Set the thread title"
				},
				"function.xattr-get": {
					"tokens": [
						"xattr_get",
						"xattrget"
					],
					"id": "function.xattr-get",
					"name": "xattr_get",
					"description": "Get an extended attribute"
				},
				"function.xattr-list": {
					"tokens": [
						"xattr_list",
						"xattrlist"
					],
					"id": "function.xattr-list",
					"name": "xattr_list",
					"description": "Get a list of extended attributes"
				},
				"function.xattr-remove": {
					"tokens": [
						"xattr_remove",
						"xattrremove"
					],
					"id": "function.xattr-remove",
					"name": "xattr_remove",
					"description": "Remove an extended attribute"
				},
				"function.xattr-set": {
					"tokens": [
						"xattr_set",
						"xattrset"
					],
					"id": "function.xattr-set",
					"name": "xattr_set",
					"description": "Set an extended attribute"
				},
				"function.xattr-supported": {
					"tokens": [
						"xattr_supported",
						"xattrsupported"
					],
					"id": "function.xattr-supported",
					"name": "xattr_supported",
					"description": "Check if filesystem supports extended attributes"
				},
				"function.xdiff-file-bdiff-size": {
					"tokens": [
						"xdiff_file_bdiff_size",
						"xdifffile_bdiff_size"
					],
					"id": "function.xdiff-file-bdiff-size",
					"name": "xdiff_file_bdiff_size",
					"description": "Read a size of file created by applying a binary diff"
				},
				"function.xdiff-file-bdiff": {
					"tokens": [
						"xdiff_file_bdiff",
						"xdifffile_bdiff"
					],
					"id": "function.xdiff-file-bdiff",
					"name": "xdiff_file_bdiff",
					"description": "Make binary diff of two files"
				},
				"function.xdiff-file-bpatch": {
					"tokens": [
						"xdiff_file_bpatch",
						"xdifffile_bpatch"
					],
					"id": "function.xdiff-file-bpatch",
					"name": "xdiff_file_bpatch",
					"description": "Patch a file with a binary diff"
				},
				"function.xdiff-file-diff-binary": {
					"tokens": [
						"xdiff_file_diff_binary",
						"xdifffile_diff_binary"
					],
					"id": "function.xdiff-file-diff-binary",
					"name": "xdiff_file_diff_binary",
					"description": "Alias of xdiff_file_bdiff"
				},
				"function.xdiff-file-diff": {
					"tokens": [
						"xdiff_file_diff",
						"xdifffile_diff"
					],
					"id": "function.xdiff-file-diff",
					"name": "xdiff_file_diff",
					"description": "Make unified diff of two files"
				},
				"function.xdiff-file-merge3": {
					"tokens": [
						"xdiff_file_merge3",
						"xdifffile_merge3"
					],
					"id": "function.xdiff-file-merge3",
					"name": "xdiff_file_merge3",
					"description": "Merge 3 files into one"
				},
				"function.xdiff-file-patch-binary": {
					"tokens": [
						"xdiff_file_patch_binary",
						"xdifffile_patch_binary"
					],
					"id": "function.xdiff-file-patch-binary",
					"name": "xdiff_file_patch_binary",
					"description": "Alias of xdiff_file_bpatch"
				},
				"function.xdiff-file-patch": {
					"tokens": [
						"xdiff_file_patch",
						"xdifffile_patch"
					],
					"id": "function.xdiff-file-patch",
					"name": "xdiff_file_patch",
					"description": "Patch a file with an unified diff"
				},
				"function.xdiff-file-rabdiff": {
					"tokens": [
						"xdiff_file_rabdiff",
						"xdifffile_rabdiff"
					],
					"id": "function.xdiff-file-rabdiff",
					"name": "xdiff_file_rabdiff",
					"description": "Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm"
				},
				"function.xdiff-string-bdiff-size": {
					"tokens": [
						"xdiff_string_bdiff_size",
						"xdiffstring_bdiff_size"
					],
					"id": "function.xdiff-string-bdiff-size",
					"name": "xdiff_string_bdiff_size",
					"description": "Read a size of file created by applying a binary diff"
				},
				"function.xdiff-string-bdiff": {
					"tokens": [
						"xdiff_string_bdiff",
						"xdiffstring_bdiff"
					],
					"id": "function.xdiff-string-bdiff",
					"name": "xdiff_string_bdiff",
					"description": "Make binary diff of two strings"
				},
				"function.xdiff-string-bpatch": {
					"tokens": [
						"xdiff_string_bpatch",
						"xdiffstring_bpatch"
					],
					"id": "function.xdiff-string-bpatch",
					"name": "xdiff_string_bpatch",
					"description": "Patch a string with a binary diff"
				},
				"function.xdiff-string-diff-binary": {
					"tokens": [
						"xdiff_string_diff_binary",
						"xdiffstring_diff_binary"
					],
					"id": "function.xdiff-string-diff-binary",
					"name": "xdiff_string_diff_binary",
					"description": "Alias of xdiff_string_bdiff"
				},
				"function.xdiff-string-diff": {
					"tokens": [
						"xdiff_string_diff",
						"xdiffstring_diff"
					],
					"id": "function.xdiff-string-diff",
					"name": "xdiff_string_diff",
					"description": "Make unified diff of two strings"
				},
				"function.xdiff-string-merge3": {
					"tokens": [
						"xdiff_string_merge3",
						"xdiffstring_merge3"
					],
					"id": "function.xdiff-string-merge3",
					"name": "xdiff_string_merge3",
					"description": "Merge 3 strings into one"
				},
				"function.xdiff-string-patch-binary": {
					"tokens": [
						"xdiff_string_patch_binary",
						"xdiffstring_patch_binary"
					],
					"id": "function.xdiff-string-patch-binary",
					"name": "xdiff_string_patch_binary",
					"description": "Alias of xdiff_string_bpatch"
				},
				"function.xdiff-string-patch": {
					"tokens": [
						"xdiff_string_patch",
						"xdiffstring_patch"
					],
					"id": "function.xdiff-string-patch",
					"name": "xdiff_string_patch",
					"description": "Patch a string with an unified diff"
				},
				"function.xdiff-string-rabdiff": {
					"tokens": [
						"xdiff_string_rabdiff",
						"xdiffstring_rabdiff"
					],
					"id": "function.xdiff-string-rabdiff",
					"name": "xdiff_string_rabdiff",
					"description": "Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm"
				},
				"function.enchant-broker-describe": {
					"tokens": [
						"enchant_broker_describe",
						"enchantbroker_describe"
					],
					"id": "function.enchant-broker-describe",
					"name": "enchant_broker_describe",
					"description": "Enumerates the Enchant providers"
				},
				"function.enchant-broker-dict-exists": {
					"tokens": [
						"enchant_broker_dict_exists",
						"enchantbroker_dict_exists"
					],
					"id": "function.enchant-broker-dict-exists",
					"name": "enchant_broker_dict_exists",
					"description": "Whether a dictionary exists or not. Using non-empty tag"
				},
				"function.enchant-broker-free-dict": {
					"tokens": [
						"enchant_broker_free_dict",
						"enchantbroker_free_dict"
					],
					"id": "function.enchant-broker-free-dict",
					"name": "enchant_broker_free_dict",
					"description": "Free a dictionary resource"
				},
				"function.enchant-broker-free": {
					"tokens": [
						"enchant_broker_free",
						"enchantbroker_free"
					],
					"id": "function.enchant-broker-free",
					"name": "enchant_broker_free",
					"description": "Free the broker resource and its dictionnaries"
				},
				"function.enchant-broker-get-dict-path": {
					"tokens": [
						"enchant_broker_get_dict_path",
						"enchantbroker_get_dict_path"
					],
					"id": "function.enchant-broker-get-dict-path",
					"name": "enchant_broker_get_dict_path",
					"description": "Get the directory path for a given backend"
				},
				"function.enchant-broker-get-error": {
					"tokens": [
						"enchant_broker_get_error",
						"enchantbroker_get_error"
					],
					"id": "function.enchant-broker-get-error",
					"name": "enchant_broker_get_error",
					"description": "Returns the last error of the broker"
				},
				"function.enchant-broker-init": {
					"tokens": [
						"enchant_broker_init",
						"enchantbroker_init"
					],
					"id": "function.enchant-broker-init",
					"name": "enchant_broker_init",
					"description": "create a new broker object capable of requesting"
				},
				"function.enchant-broker-list-dicts": {
					"tokens": [
						"enchant_broker_list_dicts",
						"enchantbroker_list_dicts"
					],
					"id": "function.enchant-broker-list-dicts",
					"name": "enchant_broker_list_dicts",
					"description": "Returns a list of available dictionaries"
				},
				"function.enchant-broker-request-dict": {
					"tokens": [
						"enchant_broker_request_dict",
						"enchantbroker_request_dict"
					],
					"id": "function.enchant-broker-request-dict",
					"name": "enchant_broker_request_dict",
					"description": "create a new dictionary using a tag"
				},
				"function.enchant-broker-request-pwl-dict": {
					"tokens": [
						"enchant_broker_request_pwl_dict",
						"enchantbroker_request_pwl_dict"
					],
					"id": "function.enchant-broker-request-pwl-dict",
					"name": "enchant_broker_request_pwl_dict",
					"description": "creates a dictionary using a PWL file"
				},
				"function.enchant-broker-set-dict-path": {
					"tokens": [
						"enchant_broker_set_dict_path",
						"enchantbroker_set_dict_path"
					],
					"id": "function.enchant-broker-set-dict-path",
					"name": "enchant_broker_set_dict_path",
					"description": "Set the directory path for a given backend"
				},
				"function.enchant-broker-set-ordering": {
					"tokens": [
						"enchant_broker_set_ordering",
						"enchantbroker_set_ordering"
					],
					"id": "function.enchant-broker-set-ordering",
					"name": "enchant_broker_set_ordering",
					"description": "Declares a preference of dictionaries to use for the language"
				},
				"function.enchant-dict-add-to-personal": {
					"tokens": [
						"enchant_dict_add_to_personal",
						"enchantdict_add_to_personal"
					],
					"id": "function.enchant-dict-add-to-personal",
					"name": "enchant_dict_add_to_personal",
					"description": "add a word to personal word list"
				},
				"function.enchant-dict-add-to-session": {
					"tokens": [
						"enchant_dict_add_to_session",
						"enchantdict_add_to_session"
					],
					"id": "function.enchant-dict-add-to-session",
					"name": "enchant_dict_add_to_session",
					"description": "add 'word' to this spell-checking session"
				},
				"function.enchant-dict-check": {
					"tokens": [
						"enchant_dict_check",
						"enchantdict_check"
					],
					"id": "function.enchant-dict-check",
					"name": "enchant_dict_check",
					"description": "Check whether a word is correctly spelled or not"
				},
				"function.enchant-dict-describe": {
					"tokens": [
						"enchant_dict_describe",
						"enchantdict_describe"
					],
					"id": "function.enchant-dict-describe",
					"name": "enchant_dict_describe",
					"description": "Describes an individual dictionary"
				},
				"function.enchant-dict-get-error": {
					"tokens": [
						"enchant_dict_get_error",
						"enchantdict_get_error"
					],
					"id": "function.enchant-dict-get-error",
					"name": "enchant_dict_get_error",
					"description": "Returns the last error of the current spelling-session"
				},
				"function.enchant-dict-is-in-session": {
					"tokens": [
						"enchant_dict_is_in_session",
						"enchantdict_is_in_session"
					],
					"id": "function.enchant-dict-is-in-session",
					"name": "enchant_dict_is_in_session",
					"description": "whether or not 'word' exists in this spelling-session"
				},
				"function.enchant-dict-quick-check": {
					"tokens": [
						"enchant_dict_quick_check",
						"enchantdict_quick_check"
					],
					"id": "function.enchant-dict-quick-check",
					"name": "enchant_dict_quick_check",
					"description": "Check the word is correctly spelled and provide suggestions"
				},
				"function.enchant-dict-store-replacement": {
					"tokens": [
						"enchant_dict_store_replacement",
						"enchantdict_store_replacement"
					],
					"id": "function.enchant-dict-store-replacement",
					"name": "enchant_dict_store_replacement",
					"description": "Add a correction for a word"
				},
				"function.enchant-dict-suggest": {
					"tokens": [
						"enchant_dict_suggest",
						"enchantdict_suggest"
					],
					"id": "function.enchant-dict-suggest",
					"name": "enchant_dict_suggest",
					"description": "Will return a list of values if any of those pre-conditions are not met"
				},
				"function.fribidi-log2vis": {
					"tokens": [
						"fribidi_log2vis",
						"fribidilog2vis"
					],
					"id": "function.fribidi-log2vis",
					"name": "fribidi_log2vis",
					"description": "Convert a logical string to a visual one"
				},
				"gender-gender.connect": {
					"tokens": [
						"Gender\\Gender::connect",
						"connect",
						"::connect"
					],
					"id": "gender-gender.connect",
					"name": "Gender\\Gender::connect",
					"description": "Connect to an external name dictionary."
				},
				"gender-gender.construct": {
					"tokens": [
						"Gender\\Gender::__construct",
						"Gender\\Gender::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gender-gender.construct",
					"name": "Gender\\Gender::__construct",
					"description": "Construct the Gender object."
				},
				"gender-gender.country": {
					"tokens": [
						"Gender\\Gender::country",
						"country",
						"::country"
					],
					"id": "gender-gender.country",
					"name": "Gender\\Gender::country",
					"description": "Get textual country representation"
				},
				"gender-gender.get": {
					"tokens": [
						"Gender\\Gender::get",
						"get",
						"::get"
					],
					"id": "gender-gender.get",
					"name": "Gender\\Gender::get",
					"description": "Get gender of a name."
				},
				"gender-gender.isnick": {
					"tokens": [
						"Gender\\Gender::isNick",
						"isNick",
						"::isNick"
					],
					"id": "gender-gender.isnick",
					"name": "Gender\\Gender::isNick",
					"description": "Check if the name0 is an alias of the name1."
				},
				"gender-gender.similarnames": {
					"tokens": [
						"Gender\\Gender::similarNames",
						"similarNames",
						"::similarNames"
					],
					"id": "gender-gender.similarnames",
					"name": "Gender\\Gender::similarNames",
					"description": "Get similar names."
				},
				"function.bind-textdomain-codeset": {
					"tokens": [
						"bind_textdomain_codeset",
						"bindtextdomain_codeset"
					],
					"id": "function.bind-textdomain-codeset",
					"name": "bind_textdomain_codeset",
					"description": "Specify the character encoding in which the messages from the DOMAIN message catalog will be returned"
				},
				"function.bindtextdomain": {
					"tokens": [
						"bindtextdomain"
					],
					"id": "function.bindtextdomain",
					"name": "bindtextdomain",
					"description": "Sets the path for a domain"
				},
				"function.dcgettext": {
					"tokens": [
						"dcgettext"
					],
					"id": "function.dcgettext",
					"name": "dcgettext",
					"description": "Overrides the domain for a single lookup"
				},
				"function.dcngettext": {
					"tokens": [
						"dcngettext"
					],
					"id": "function.dcngettext",
					"name": "dcngettext",
					"description": "Plural version of dcgettext"
				},
				"function.dgettext": {
					"tokens": [
						"dgettext"
					],
					"id": "function.dgettext",
					"name": "dgettext",
					"description": "Override the current domain"
				},
				"function.dngettext": {
					"tokens": [
						"dngettext"
					],
					"id": "function.dngettext",
					"name": "dngettext",
					"description": "Plural version of dgettext"
				},
				"function.gettext": {
					"tokens": [
						"gettext"
					],
					"id": "function.gettext",
					"name": "gettext",
					"description": "Lookup a message in the current domain"
				},
				"function.ngettext": {
					"tokens": [
						"ngettext"
					],
					"id": "function.ngettext",
					"name": "ngettext",
					"description": "Plural version of gettext"
				},
				"function.textdomain": {
					"tokens": [
						"textdomain"
					],
					"id": "function.textdomain",
					"name": "textdomain",
					"description": "Sets the default domain"
				},
				"function.iconv-get-encoding": {
					"tokens": [
						"iconv_get_encoding",
						"iconvget_encoding"
					],
					"id": "function.iconv-get-encoding",
					"name": "iconv_get_encoding",
					"description": "Retrieve internal configuration variables of iconv extension"
				},
				"function.iconv-mime-decode-headers": {
					"tokens": [
						"iconv_mime_decode_headers",
						"iconvmime_decode_headers"
					],
					"id": "function.iconv-mime-decode-headers",
					"name": "iconv_mime_decode_headers",
					"description": "Decodes multiple MIME header fields at once"
				},
				"function.iconv-mime-decode": {
					"tokens": [
						"iconv_mime_decode",
						"iconvmime_decode"
					],
					"id": "function.iconv-mime-decode",
					"name": "iconv_mime_decode",
					"description": "Decodes a MIME header field"
				},
				"function.iconv-mime-encode": {
					"tokens": [
						"iconv_mime_encode",
						"iconvmime_encode"
					],
					"id": "function.iconv-mime-encode",
					"name": "iconv_mime_encode",
					"description": "Composes a MIME header field"
				},
				"function.iconv-set-encoding": {
					"tokens": [
						"iconv_set_encoding",
						"iconvset_encoding"
					],
					"id": "function.iconv-set-encoding",
					"name": "iconv_set_encoding",
					"description": "Set current setting for character encoding conversion"
				},
				"function.iconv-strlen": {
					"tokens": [
						"iconv_strlen",
						"iconvstrlen"
					],
					"id": "function.iconv-strlen",
					"name": "iconv_strlen",
					"description": "Returns the character count of string"
				},
				"function.iconv-strpos": {
					"tokens": [
						"iconv_strpos",
						"iconvstrpos"
					],
					"id": "function.iconv-strpos",
					"name": "iconv_strpos",
					"description": "Finds position of first occurrence of a needle within a haystack"
				},
				"function.iconv-strrpos": {
					"tokens": [
						"iconv_strrpos",
						"iconvstrrpos"
					],
					"id": "function.iconv-strrpos",
					"name": "iconv_strrpos",
					"description": "Finds the last occurrence of a needle within a haystack"
				},
				"function.iconv-substr": {
					"tokens": [
						"iconv_substr",
						"iconvsubstr"
					],
					"id": "function.iconv-substr",
					"name": "iconv_substr",
					"description": "Cut out part of a string"
				},
				"function.iconv": {
					"tokens": [
						"iconv"
					],
					"id": "function.iconv",
					"name": "iconv",
					"description": "Convert string to requested character encoding"
				},
				"function.ob-iconv-handler": {
					"tokens": [
						"ob_iconv_handler",
						"obiconv_handler"
					],
					"id": "function.ob-iconv-handler",
					"name": "ob_iconv_handler",
					"description": "Convert character encoding as output buffer handler"
				},
				"collator.asort": {
					"tokens": [
						"Collator::asort",
						"asort",
						"::asort"
					],
					"id": "collator.asort",
					"name": "Collator::asort",
					"description": "Sort array maintaining index association"
				},
				"collator.compare": {
					"tokens": [
						"Collator::compare",
						"compare",
						"::compare"
					],
					"id": "collator.compare",
					"name": "Collator::compare",
					"description": "Compare two Unicode strings"
				},
				"collator.construct": {
					"tokens": [
						"Collator::__construct",
						"Collator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "collator.construct",
					"name": "Collator::__construct",
					"description": "Create a collator"
				},
				"collator.create": {
					"tokens": [
						"Collator::create",
						"create",
						"::create"
					],
					"id": "collator.create",
					"name": "Collator::create",
					"description": "Create a collator"
				},
				"collator.getattribute": {
					"tokens": [
						"Collator::getAttribute",
						"getAttribute",
						"::getAttribute"
					],
					"id": "collator.getattribute",
					"name": "Collator::getAttribute",
					"description": "Get collation attribute value"
				},
				"collator.geterrorcode": {
					"tokens": [
						"Collator::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "collator.geterrorcode",
					"name": "Collator::getErrorCode",
					"description": "Get collator's last error code"
				},
				"collator.geterrormessage": {
					"tokens": [
						"Collator::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "collator.geterrormessage",
					"name": "Collator::getErrorMessage",
					"description": "Get text for collator's last error code"
				},
				"collator.getlocale": {
					"tokens": [
						"Collator::getLocale",
						"getLocale",
						"::getLocale"
					],
					"id": "collator.getlocale",
					"name": "Collator::getLocale",
					"description": "Get the locale name of the collator"
				},
				"collator.getsortkey": {
					"tokens": [
						"Collator::getSortKey",
						"getSortKey",
						"::getSortKey"
					],
					"id": "collator.getsortkey",
					"name": "Collator::getSortKey",
					"description": "Get sorting key for a string"
				},
				"collator.getstrength": {
					"tokens": [
						"Collator::getStrength",
						"getStrength",
						"::getStrength"
					],
					"id": "collator.getstrength",
					"name": "Collator::getStrength",
					"description": "Get current collation strength"
				},
				"collator.setattribute": {
					"tokens": [
						"Collator::setAttribute",
						"setAttribute",
						"::setAttribute"
					],
					"id": "collator.setattribute",
					"name": "Collator::setAttribute",
					"description": "Set collation attribute"
				},
				"collator.setstrength": {
					"tokens": [
						"Collator::setStrength",
						"setStrength",
						"::setStrength"
					],
					"id": "collator.setstrength",
					"name": "Collator::setStrength",
					"description": "Set collation strength"
				},
				"collator.sortwithsortkeys": {
					"tokens": [
						"Collator::sortWithSortKeys",
						"sortWithSortKeys",
						"::sortWithSortKeys"
					],
					"id": "collator.sortwithsortkeys",
					"name": "Collator::sortWithSortKeys",
					"description": "Sort array using specified collator and sort keys"
				},
				"collator.sort": {
					"tokens": [
						"Collator::sort",
						"sort",
						"::sort"
					],
					"id": "collator.sort",
					"name": "Collator::sort",
					"description": "Sort array using specified collator"
				},
				"numberformatter.create": {
					"tokens": [
						"NumberFormatter::create",
						"create",
						"::create"
					],
					"id": "numberformatter.create",
					"name": "NumberFormatter::create",
					"description": "Create a number formatter"
				},
				"numberformatter.formatcurrency": {
					"tokens": [
						"NumberFormatter::formatCurrency",
						"formatCurrency",
						"::formatCurrency"
					],
					"id": "numberformatter.formatcurrency",
					"name": "NumberFormatter::formatCurrency",
					"description": "Format a currency value"
				},
				"numberformatter.format": {
					"tokens": [
						"NumberFormatter::format",
						"format",
						"::format"
					],
					"id": "numberformatter.format",
					"name": "NumberFormatter::format",
					"description": "Format a number"
				},
				"numberformatter.getattribute": {
					"tokens": [
						"NumberFormatter::getAttribute",
						"getAttribute",
						"::getAttribute"
					],
					"id": "numberformatter.getattribute",
					"name": "NumberFormatter::getAttribute",
					"description": "Get an attribute"
				},
				"numberformatter.geterrorcode": {
					"tokens": [
						"NumberFormatter::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "numberformatter.geterrorcode",
					"name": "NumberFormatter::getErrorCode",
					"description": "Get formatter's last error code."
				},
				"numberformatter.geterrormessage": {
					"tokens": [
						"NumberFormatter::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "numberformatter.geterrormessage",
					"name": "NumberFormatter::getErrorMessage",
					"description": "Get formatter's last error message."
				},
				"numberformatter.getlocale": {
					"tokens": [
						"NumberFormatter::getLocale",
						"getLocale",
						"::getLocale"
					],
					"id": "numberformatter.getlocale",
					"name": "NumberFormatter::getLocale",
					"description": "Get formatter locale"
				},
				"numberformatter.getpattern": {
					"tokens": [
						"NumberFormatter::getPattern",
						"getPattern",
						"::getPattern"
					],
					"id": "numberformatter.getpattern",
					"name": "NumberFormatter::getPattern",
					"description": "Get formatter pattern"
				},
				"numberformatter.getsymbol": {
					"tokens": [
						"NumberFormatter::getSymbol",
						"getSymbol",
						"::getSymbol"
					],
					"id": "numberformatter.getsymbol",
					"name": "NumberFormatter::getSymbol",
					"description": "Get a symbol value"
				},
				"numberformatter.gettextattribute": {
					"tokens": [
						"NumberFormatter::getTextAttribute",
						"getTextAttribute",
						"::getTextAttribute"
					],
					"id": "numberformatter.gettextattribute",
					"name": "NumberFormatter::getTextAttribute",
					"description": "Get a text attribute"
				},
				"numberformatter.parsecurrency": {
					"tokens": [
						"NumberFormatter::parseCurrency",
						"parseCurrency",
						"::parseCurrency"
					],
					"id": "numberformatter.parsecurrency",
					"name": "NumberFormatter::parseCurrency",
					"description": "Parse a currency number"
				},
				"numberformatter.parse": {
					"tokens": [
						"NumberFormatter::parse",
						"parse",
						"::parse"
					],
					"id": "numberformatter.parse",
					"name": "NumberFormatter::parse",
					"description": "Parse a number"
				},
				"numberformatter.setattribute": {
					"tokens": [
						"NumberFormatter::setAttribute",
						"setAttribute",
						"::setAttribute"
					],
					"id": "numberformatter.setattribute",
					"name": "NumberFormatter::setAttribute",
					"description": "Set an attribute"
				},
				"numberformatter.setpattern": {
					"tokens": [
						"NumberFormatter::setPattern",
						"setPattern",
						"::setPattern"
					],
					"id": "numberformatter.setpattern",
					"name": "NumberFormatter::setPattern",
					"description": "Set formatter pattern"
				},
				"numberformatter.setsymbol": {
					"tokens": [
						"NumberFormatter::setSymbol",
						"setSymbol",
						"::setSymbol"
					],
					"id": "numberformatter.setsymbol",
					"name": "NumberFormatter::setSymbol",
					"description": "Set a symbol value"
				},
				"numberformatter.settextattribute": {
					"tokens": [
						"NumberFormatter::setTextAttribute",
						"setTextAttribute",
						"::setTextAttribute"
					],
					"id": "numberformatter.settextattribute",
					"name": "NumberFormatter::setTextAttribute",
					"description": "Set a text attribute"
				},
				"locale.acceptfromhttp": {
					"tokens": [
						"Locale::acceptFromHttp",
						"acceptFromHttp",
						"::acceptFromHttp"
					],
					"id": "locale.acceptfromhttp",
					"name": "Locale::acceptFromHttp",
					"description": "Tries to find out best available locale based on HTTP &quot;Accept-Language&quot; header"
				},
				"locale.canonicalize": {
					"tokens": [
						"Locale::canonicalize",
						"canonicalize",
						"::canonicalize"
					],
					"id": "locale.canonicalize",
					"name": "Locale::canonicalize",
					"description": "Canonicalize the locale string"
				},
				"locale.composelocale": {
					"tokens": [
						"Locale::composeLocale",
						"composeLocale",
						"::composeLocale"
					],
					"id": "locale.composelocale",
					"name": "Locale::composeLocale",
					"description": "Returns a correctly ordered and delimited locale ID"
				},
				"locale.filtermatches": {
					"tokens": [
						"Locale::filterMatches",
						"filterMatches",
						"::filterMatches"
					],
					"id": "locale.filtermatches",
					"name": "Locale::filterMatches",
					"description": "Checks if a language tag filter matches with locale"
				},
				"locale.getallvariants": {
					"tokens": [
						"Locale::getAllVariants",
						"getAllVariants",
						"::getAllVariants"
					],
					"id": "locale.getallvariants",
					"name": "Locale::getAllVariants",
					"description": "Gets the variants for the input locale"
				},
				"locale.getdefault": {
					"tokens": [
						"Locale::getDefault",
						"getDefault",
						"::getDefault"
					],
					"id": "locale.getdefault",
					"name": "Locale::getDefault",
					"description": "Gets the default locale value from the INTL global 'default_locale'"
				},
				"locale.getdisplaylanguage": {
					"tokens": [
						"Locale::getDisplayLanguage",
						"getDisplayLanguage",
						"::getDisplayLanguage"
					],
					"id": "locale.getdisplaylanguage",
					"name": "Locale::getDisplayLanguage",
					"description": "Returns an appropriately localized display name for language of the inputlocale"
				},
				"locale.getdisplayname": {
					"tokens": [
						"Locale::getDisplayName",
						"getDisplayName",
						"::getDisplayName"
					],
					"id": "locale.getdisplayname",
					"name": "Locale::getDisplayName",
					"description": "Returns an appropriately localized display name for the input locale"
				},
				"locale.getdisplayregion": {
					"tokens": [
						"Locale::getDisplayRegion",
						"getDisplayRegion",
						"::getDisplayRegion"
					],
					"id": "locale.getdisplayregion",
					"name": "Locale::getDisplayRegion",
					"description": "Returns an appropriately localized display name for region of the input locale"
				},
				"locale.getdisplayscript": {
					"tokens": [
						"Locale::getDisplayScript",
						"getDisplayScript",
						"::getDisplayScript"
					],
					"id": "locale.getdisplayscript",
					"name": "Locale::getDisplayScript",
					"description": "Returns an appropriately localized display name for script of the input locale"
				},
				"locale.getdisplayvariant": {
					"tokens": [
						"Locale::getDisplayVariant",
						"getDisplayVariant",
						"::getDisplayVariant"
					],
					"id": "locale.getdisplayvariant",
					"name": "Locale::getDisplayVariant",
					"description": "Returns an appropriately localized display name for variants of the input locale"
				},
				"locale.getkeywords": {
					"tokens": [
						"Locale::getKeywords",
						"getKeywords",
						"::getKeywords"
					],
					"id": "locale.getkeywords",
					"name": "Locale::getKeywords",
					"description": "Gets the keywords for the input locale"
				},
				"locale.getprimarylanguage": {
					"tokens": [
						"Locale::getPrimaryLanguage",
						"getPrimaryLanguage",
						"::getPrimaryLanguage"
					],
					"id": "locale.getprimarylanguage",
					"name": "Locale::getPrimaryLanguage",
					"description": "Gets the primary language for the input locale"
				},
				"locale.getregion": {
					"tokens": [
						"Locale::getRegion",
						"getRegion",
						"::getRegion"
					],
					"id": "locale.getregion",
					"name": "Locale::getRegion",
					"description": "Gets the region for the input locale"
				},
				"locale.getscript": {
					"tokens": [
						"Locale::getScript",
						"getScript",
						"::getScript"
					],
					"id": "locale.getscript",
					"name": "Locale::getScript",
					"description": "Gets the script for the input locale"
				},
				"locale.lookup": {
					"tokens": [
						"Locale::lookup",
						"lookup",
						"::lookup"
					],
					"id": "locale.lookup",
					"name": "Locale::lookup",
					"description": "Searches the language tag list for the best match to the language"
				},
				"locale.parselocale": {
					"tokens": [
						"Locale::parseLocale",
						"parseLocale",
						"::parseLocale"
					],
					"id": "locale.parselocale",
					"name": "Locale::parseLocale",
					"description": "Returns a key-value array of locale ID subtag elements."
				},
				"locale.setdefault": {
					"tokens": [
						"Locale::setDefault",
						"setDefault",
						"::setDefault"
					],
					"id": "locale.setdefault",
					"name": "Locale::setDefault",
					"description": "sets the default runtime locale"
				},
				"normalizer.isnormalized": {
					"tokens": [
						"Normalizer::isNormalized",
						"isNormalized",
						"::isNormalized"
					],
					"id": "normalizer.isnormalized",
					"name": "Normalizer::isNormalized",
					"description": "Checks if the provided string is already in the specified normalization\n   form."
				},
				"normalizer.normalize": {
					"tokens": [
						"Normalizer::normalize",
						"normalize",
						"::normalize"
					],
					"id": "normalizer.normalize",
					"name": "Normalizer::normalize",
					"description": "Normalizes the input provided and returns the normalized string"
				},
				"messageformatter.create": {
					"tokens": [
						"MessageFormatter::create",
						"create",
						"::create"
					],
					"id": "messageformatter.create",
					"name": "MessageFormatter::create",
					"description": "Constructs a new Message Formatter"
				},
				"messageformatter.formatmessage": {
					"tokens": [
						"MessageFormatter::formatMessage",
						"formatMessage",
						"::formatMessage"
					],
					"id": "messageformatter.formatmessage",
					"name": "MessageFormatter::formatMessage",
					"description": "Quick format message"
				},
				"messageformatter.format": {
					"tokens": [
						"MessageFormatter::format",
						"format",
						"::format"
					],
					"id": "messageformatter.format",
					"name": "MessageFormatter::format",
					"description": "Format the message"
				},
				"messageformatter.geterrorcode": {
					"tokens": [
						"MessageFormatter::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "messageformatter.geterrorcode",
					"name": "MessageFormatter::getErrorCode",
					"description": "Get the error code from last operation"
				},
				"messageformatter.geterrormessage": {
					"tokens": [
						"MessageFormatter::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "messageformatter.geterrormessage",
					"name": "MessageFormatter::getErrorMessage",
					"description": "Get the error text from the last operation"
				},
				"messageformatter.getlocale": {
					"tokens": [
						"MessageFormatter::getLocale",
						"getLocale",
						"::getLocale"
					],
					"id": "messageformatter.getlocale",
					"name": "MessageFormatter::getLocale",
					"description": "Get the locale for which the formatter was created."
				},
				"messageformatter.getpattern": {
					"tokens": [
						"MessageFormatter::getPattern",
						"getPattern",
						"::getPattern"
					],
					"id": "messageformatter.getpattern",
					"name": "MessageFormatter::getPattern",
					"description": "Get the pattern used by the formatter"
				},
				"messageformatter.parsemessage": {
					"tokens": [
						"MessageFormatter::parseMessage",
						"parseMessage",
						"::parseMessage"
					],
					"id": "messageformatter.parsemessage",
					"name": "MessageFormatter::parseMessage",
					"description": "Quick parse input string"
				},
				"messageformatter.parse": {
					"tokens": [
						"MessageFormatter::parse",
						"parse",
						"::parse"
					],
					"id": "messageformatter.parse",
					"name": "MessageFormatter::parse",
					"description": "Parse input string according to pattern"
				},
				"messageformatter.setpattern": {
					"tokens": [
						"MessageFormatter::setPattern",
						"setPattern",
						"::setPattern"
					],
					"id": "messageformatter.setpattern",
					"name": "MessageFormatter::setPattern",
					"description": "Set the pattern used by the formatter"
				},
				"intlcalendar.add": {
					"tokens": [
						"IntlCalendar::add",
						"add",
						"::add"
					],
					"id": "intlcalendar.add",
					"name": "IntlCalendar::add",
					"description": "Add a (signed) amount of time to a field"
				},
				"intlcalendar.after": {
					"tokens": [
						"IntlCalendar::after",
						"after",
						"::after"
					],
					"id": "intlcalendar.after",
					"name": "IntlCalendar::after",
					"description": "Whether this objectʼs time is after that of the passed object"
				},
				"intlcalendar.before": {
					"tokens": [
						"IntlCalendar::before",
						"before",
						"::before"
					],
					"id": "intlcalendar.before",
					"name": "IntlCalendar::before",
					"description": "Whether this objectʼs time is before that of the passed object"
				},
				"intlcalendar.clear": {
					"tokens": [
						"IntlCalendar::clear",
						"clear",
						"::clear"
					],
					"id": "intlcalendar.clear",
					"name": "IntlCalendar::clear",
					"description": "Clear a field or all fields"
				},
				"intlcalendar.construct": {
					"tokens": [
						"IntlCalendar::__construct",
						"IntlCalendar::_construct",
						"__construct",
						"::__construct"
					],
					"id": "intlcalendar.construct",
					"name": "IntlCalendar::__construct",
					"description": "Private constructor for disallowing instantiation"
				},
				"intlcalendar.createinstance": {
					"tokens": [
						"IntlCalendar::createInstance",
						"createInstance",
						"::createInstance"
					],
					"id": "intlcalendar.createinstance",
					"name": "IntlCalendar::createInstance",
					"description": "Create a new IntlCalendar"
				},
				"intlcalendar.equals": {
					"tokens": [
						"IntlCalendar::equals",
						"equals",
						"::equals"
					],
					"id": "intlcalendar.equals",
					"name": "IntlCalendar::equals",
					"description": "Compare time of two IntlCalendar objects for equality"
				},
				"intlcalendar.fielddifference": {
					"tokens": [
						"IntlCalendar::fieldDifference",
						"fieldDifference",
						"::fieldDifference"
					],
					"id": "intlcalendar.fielddifference",
					"name": "IntlCalendar::fieldDifference",
					"description": "Calculate difference between given time and this objectʼs time"
				},
				"intlcalendar.fromdatetime": {
					"tokens": [
						"IntlCalendar::fromDateTime",
						"fromDateTime",
						"::fromDateTime"
					],
					"id": "intlcalendar.fromdatetime",
					"name": "IntlCalendar::fromDateTime",
					"description": "Create an IntlCalendar from a DateTime object or string"
				},
				"intlcalendar.get": {
					"tokens": [
						"IntlCalendar::get",
						"get",
						"::get"
					],
					"id": "intlcalendar.get",
					"name": "IntlCalendar::get",
					"description": "Get the value for a field"
				},
				"intlcalendar.getactualmaximum": {
					"tokens": [
						"IntlCalendar::getActualMaximum",
						"getActualMaximum",
						"::getActualMaximum"
					],
					"id": "intlcalendar.getactualmaximum",
					"name": "IntlCalendar::getActualMaximum",
					"description": "The maximum value for a field, considering the objectʼs current time"
				},
				"intlcalendar.getactualminimum": {
					"tokens": [
						"IntlCalendar::getActualMinimum",
						"getActualMinimum",
						"::getActualMinimum"
					],
					"id": "intlcalendar.getactualminimum",
					"name": "IntlCalendar::getActualMinimum",
					"description": "The minimum value for a field, considering the objectʼs current time"
				},
				"intlcalendar.getavailablelocales": {
					"tokens": [
						"IntlCalendar::getAvailableLocales",
						"getAvailableLocales",
						"::getAvailableLocales"
					],
					"id": "intlcalendar.getavailablelocales",
					"name": "IntlCalendar::getAvailableLocales",
					"description": "Get array of locales for which there is data"
				},
				"intlcalendar.getdayofweektype": {
					"tokens": [
						"IntlCalendar::getDayOfWeekType",
						"getDayOfWeekType",
						"::getDayOfWeekType"
					],
					"id": "intlcalendar.getdayofweektype",
					"name": "IntlCalendar::getDayOfWeekType",
					"description": "Tell whether a day is a weekday, weekend or a day that has a transition between the two"
				},
				"intlcalendar.geterrorcode": {
					"tokens": [
						"IntlCalendar::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "intlcalendar.geterrorcode",
					"name": "IntlCalendar::getErrorCode",
					"description": "Get last error code on the object"
				},
				"intlcalendar.geterrormessage": {
					"tokens": [
						"IntlCalendar::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "intlcalendar.geterrormessage",
					"name": "IntlCalendar::getErrorMessage",
					"description": "Get last error message on the object"
				},
				"intlcalendar.getfirstdayofweek": {
					"tokens": [
						"IntlCalendar::getFirstDayOfWeek",
						"getFirstDayOfWeek",
						"::getFirstDayOfWeek"
					],
					"id": "intlcalendar.getfirstdayofweek",
					"name": "IntlCalendar::getFirstDayOfWeek",
					"description": "Get the first day of the week for the calendarʼs locale"
				},
				"intlcalendar.getgreatestminimum": {
					"tokens": [
						"IntlCalendar::getGreatestMinimum",
						"getGreatestMinimum",
						"::getGreatestMinimum"
					],
					"id": "intlcalendar.getgreatestminimum",
					"name": "IntlCalendar::getGreatestMinimum",
					"description": "Get the largest local minimum value for a field"
				},
				"intlcalendar.getkeywordvaluesforlocale": {
					"tokens": [
						"IntlCalendar::getKeywordValuesForLocale",
						"getKeywordValuesForLocale",
						"::getKeywordValuesForLocale"
					],
					"id": "intlcalendar.getkeywordvaluesforlocale",
					"name": "IntlCalendar::getKeywordValuesForLocale",
					"description": "Get set of locale keyword values"
				},
				"intlcalendar.getleastmaximum": {
					"tokens": [
						"IntlCalendar::getLeastMaximum",
						"getLeastMaximum",
						"::getLeastMaximum"
					],
					"id": "intlcalendar.getleastmaximum",
					"name": "IntlCalendar::getLeastMaximum",
					"description": "Get the smallest local maximum for a field"
				},
				"intlcalendar.getlocale": {
					"tokens": [
						"IntlCalendar::getLocale",
						"getLocale",
						"::getLocale"
					],
					"id": "intlcalendar.getlocale",
					"name": "IntlCalendar::getLocale",
					"description": "Get the locale associated with the object"
				},
				"intlcalendar.getmaximum": {
					"tokens": [
						"IntlCalendar::getMaximum",
						"getMaximum",
						"::getMaximum"
					],
					"id": "intlcalendar.getmaximum",
					"name": "IntlCalendar::getMaximum",
					"description": "Get the global maximum value for a field"
				},
				"intlcalendar.getminimaldaysinfirstweek": {
					"tokens": [
						"IntlCalendar::getMinimalDaysInFirstWeek",
						"getMinimalDaysInFirstWeek",
						"::getMinimalDaysInFirstWeek"
					],
					"id": "intlcalendar.getminimaldaysinfirstweek",
					"name": "IntlCalendar::getMinimalDaysInFirstWeek",
					"description": "Get minimal number of days the first week in a year or month can have"
				},
				"intlcalendar.getminimum": {
					"tokens": [
						"IntlCalendar::getMinimum",
						"getMinimum",
						"::getMinimum"
					],
					"id": "intlcalendar.getminimum",
					"name": "IntlCalendar::getMinimum",
					"description": "Get the global minimum value for a field"
				},
				"intlcalendar.getnow": {
					"tokens": [
						"IntlCalendar::getNow",
						"getNow",
						"::getNow"
					],
					"id": "intlcalendar.getnow",
					"name": "IntlCalendar::getNow",
					"description": "Get number representing the current time"
				},
				"intlcalendar.getrepeatedwalltimeoption": {
					"tokens": [
						"IntlCalendar::getRepeatedWallTimeOption",
						"getRepeatedWallTimeOption",
						"::getRepeatedWallTimeOption"
					],
					"id": "intlcalendar.getrepeatedwalltimeoption",
					"name": "IntlCalendar::getRepeatedWallTimeOption",
					"description": "Get behavior for handling repeating wall time"
				},
				"intlcalendar.getskippedwalltimeoption": {
					"tokens": [
						"IntlCalendar::getSkippedWallTimeOption",
						"getSkippedWallTimeOption",
						"::getSkippedWallTimeOption"
					],
					"id": "intlcalendar.getskippedwalltimeoption",
					"name": "IntlCalendar::getSkippedWallTimeOption",
					"description": "Get behavior for handling skipped wall time"
				},
				"intlcalendar.gettime": {
					"tokens": [
						"IntlCalendar::getTime",
						"getTime",
						"::getTime"
					],
					"id": "intlcalendar.gettime",
					"name": "IntlCalendar::getTime",
					"description": "Get time currently represented by the object"
				},
				"intlcalendar.gettimezone": {
					"tokens": [
						"IntlCalendar::getTimeZone",
						"getTimeZone",
						"::getTimeZone"
					],
					"id": "intlcalendar.gettimezone",
					"name": "IntlCalendar::getTimeZone",
					"description": "Get the objectʼs timezone"
				},
				"intlcalendar.gettype": {
					"tokens": [
						"IntlCalendar::getType",
						"getType",
						"::getType"
					],
					"id": "intlcalendar.gettype",
					"name": "IntlCalendar::getType",
					"description": "Get the calendar type"
				},
				"intlcalendar.getweekendtransition": {
					"tokens": [
						"IntlCalendar::getWeekendTransition",
						"getWeekendTransition",
						"::getWeekendTransition"
					],
					"id": "intlcalendar.getweekendtransition",
					"name": "IntlCalendar::getWeekendTransition",
					"description": "Get time of the day at which weekend begins or ends"
				},
				"intlcalendar.indaylighttime": {
					"tokens": [
						"IntlCalendar::inDaylightTime",
						"inDaylightTime",
						"::inDaylightTime"
					],
					"id": "intlcalendar.indaylighttime",
					"name": "IntlCalendar::inDaylightTime",
					"description": "Whether the objectʼs time is in Daylight Savings Time"
				},
				"intlcalendar.isequivalentto": {
					"tokens": [
						"IntlCalendar::isEquivalentTo",
						"isEquivalentTo",
						"::isEquivalentTo"
					],
					"id": "intlcalendar.isequivalentto",
					"name": "IntlCalendar::isEquivalentTo",
					"description": "Whether another calendar is equal but for a different time"
				},
				"intlcalendar.islenient": {
					"tokens": [
						"IntlCalendar::isLenient",
						"isLenient",
						"::isLenient"
					],
					"id": "intlcalendar.islenient",
					"name": "IntlCalendar::isLenient",
					"description": "Whether date/time interpretation is in lenient mode"
				},
				"intlcalendar.isset": {
					"tokens": [
						"IntlCalendar::isSet",
						"isSet",
						"::isSet"
					],
					"id": "intlcalendar.isset",
					"name": "IntlCalendar::isSet",
					"description": "Whether a field is set"
				},
				"intlcalendar.isweekend": {
					"tokens": [
						"IntlCalendar::isWeekend",
						"isWeekend",
						"::isWeekend"
					],
					"id": "intlcalendar.isweekend",
					"name": "IntlCalendar::isWeekend",
					"description": "Whether a certain date/time is in the weekend"
				},
				"intlcalendar.roll": {
					"tokens": [
						"IntlCalendar::roll",
						"roll",
						"::roll"
					],
					"id": "intlcalendar.roll",
					"name": "IntlCalendar::roll",
					"description": "Add value to field without carrying into more significant fields"
				},
				"intlcalendar.set": {
					"tokens": [
						"IntlCalendar::set",
						"set",
						"::set"
					],
					"id": "intlcalendar.set",
					"name": "IntlCalendar::set",
					"description": "Set a time field or several common fields at once"
				},
				"intlcalendar.setfirstdayofweek": {
					"tokens": [
						"IntlCalendar::setFirstDayOfWeek",
						"setFirstDayOfWeek",
						"::setFirstDayOfWeek"
					],
					"id": "intlcalendar.setfirstdayofweek",
					"name": "IntlCalendar::setFirstDayOfWeek",
					"description": "Set the day on which the week is deemed to start"
				},
				"intlcalendar.setlenient": {
					"tokens": [
						"IntlCalendar::setLenient",
						"setLenient",
						"::setLenient"
					],
					"id": "intlcalendar.setlenient",
					"name": "IntlCalendar::setLenient",
					"description": "Set whether date/time interpretation is to be lenient"
				},
				"intlcalendar.setminimaldaysinfirstweek": {
					"tokens": [
						"IntlCalendar::setMinimalDaysInFirstWeek",
						"setMinimalDaysInFirstWeek",
						"::setMinimalDaysInFirstWeek"
					],
					"id": "intlcalendar.setminimaldaysinfirstweek",
					"name": "IntlCalendar::setMinimalDaysInFirstWeek",
					"description": "Set minimal number of days the first week in a year or month can have"
				},
				"intlcalendar.setrepeatedwalltimeoption": {
					"tokens": [
						"IntlCalendar::setRepeatedWallTimeOption",
						"setRepeatedWallTimeOption",
						"::setRepeatedWallTimeOption"
					],
					"id": "intlcalendar.setrepeatedwalltimeoption",
					"name": "IntlCalendar::setRepeatedWallTimeOption",
					"description": "Set behavior for handling repeating wall times at negative timezone offset transitions"
				},
				"intlcalendar.setskippedwalltimeoption": {
					"tokens": [
						"IntlCalendar::setSkippedWallTimeOption",
						"setSkippedWallTimeOption",
						"::setSkippedWallTimeOption"
					],
					"id": "intlcalendar.setskippedwalltimeoption",
					"name": "IntlCalendar::setSkippedWallTimeOption",
					"description": "Set behavior for handling skipped wall times at positive timezone offset transitions"
				},
				"intlcalendar.settime": {
					"tokens": [
						"IntlCalendar::setTime",
						"setTime",
						"::setTime"
					],
					"id": "intlcalendar.settime",
					"name": "IntlCalendar::setTime",
					"description": "Set the calendar time in milliseconds since the epoch"
				},
				"intlcalendar.settimezone": {
					"tokens": [
						"IntlCalendar::setTimeZone",
						"setTimeZone",
						"::setTimeZone"
					],
					"id": "intlcalendar.settimezone",
					"name": "IntlCalendar::setTimeZone",
					"description": "Set the timezone used by this calendar"
				},
				"intlcalendar.todatetime": {
					"tokens": [
						"IntlCalendar::toDateTime",
						"toDateTime",
						"::toDateTime"
					],
					"id": "intlcalendar.todatetime",
					"name": "IntlCalendar::toDateTime",
					"description": "Convert an IntlCalendar into a DateTime object"
				},
				"intltimezone.countequivalentids": {
					"tokens": [
						"IntlTimeZone::countEquivalentIDs",
						"countEquivalentIDs",
						"::countEquivalentIDs"
					],
					"id": "intltimezone.countequivalentids",
					"name": "IntlTimeZone::countEquivalentIDs",
					"description": "Get the number of IDs in the equivalency group that includes the given ID"
				},
				"intltimezone.createdefault": {
					"tokens": [
						"IntlTimeZone::createDefault",
						"createDefault",
						"::createDefault"
					],
					"id": "intltimezone.createdefault",
					"name": "IntlTimeZone::createDefault",
					"description": "Create a new copy of the default timezone for this host"
				},
				"intltimezone.createenumeration": {
					"tokens": [
						"IntlTimeZone::createEnumeration",
						"createEnumeration",
						"::createEnumeration"
					],
					"id": "intltimezone.createenumeration",
					"name": "IntlTimeZone::createEnumeration",
					"description": "Get an enumeration over time zone IDs associated with the\n  given country or offset"
				},
				"intltimezone.createtimezone": {
					"tokens": [
						"IntlTimeZone::createTimeZone",
						"createTimeZone",
						"::createTimeZone"
					],
					"id": "intltimezone.createtimezone",
					"name": "IntlTimeZone::createTimeZone",
					"description": "Create a timezone object for the given ID"
				},
				"intltimezone.fromdatetimezone": {
					"tokens": [
						"IntlTimeZone::fromDateTimeZone",
						"fromDateTimeZone",
						"::fromDateTimeZone"
					],
					"id": "intltimezone.fromdatetimezone",
					"name": "IntlTimeZone::fromDateTimeZone",
					"description": "Create a timezone object from DateTimeZone"
				},
				"intltimezone.getcanonicalid": {
					"tokens": [
						"IntlTimeZone::getCanonicalID",
						"getCanonicalID",
						"::getCanonicalID"
					],
					"id": "intltimezone.getcanonicalid",
					"name": "IntlTimeZone::getCanonicalID",
					"description": "Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID"
				},
				"intltimezone.getdisplayname": {
					"tokens": [
						"IntlTimeZone::getDisplayName",
						"getDisplayName",
						"::getDisplayName"
					],
					"id": "intltimezone.getdisplayname",
					"name": "IntlTimeZone::getDisplayName",
					"description": "Get a name of this time zone suitable for presentation to the user"
				},
				"intltimezone.getdstsavings": {
					"tokens": [
						"IntlTimeZone::getDSTSavings",
						"getDSTSavings",
						"::getDSTSavings"
					],
					"id": "intltimezone.getdstsavings",
					"name": "IntlTimeZone::getDSTSavings",
					"description": "Get the amount of time to be added to local standard time to get local wall clock time"
				},
				"intltimezone.getequivalentid": {
					"tokens": [
						"IntlTimeZone::getEquivalentID",
						"getEquivalentID",
						"::getEquivalentID"
					],
					"id": "intltimezone.getequivalentid",
					"name": "IntlTimeZone::getEquivalentID",
					"description": "Get an ID in the equivalency group that includes the given ID"
				},
				"intltimezone.geterrorcode": {
					"tokens": [
						"IntlTimeZone::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "intltimezone.geterrorcode",
					"name": "IntlTimeZone::getErrorCode",
					"description": "Get last error code on the object"
				},
				"intltimezone.geterrormessage": {
					"tokens": [
						"IntlTimeZone::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "intltimezone.geterrormessage",
					"name": "IntlTimeZone::getErrorMessage",
					"description": "Get last error message on the object"
				},
				"intltimezone.getgmt": {
					"tokens": [
						"IntlTimeZone::getGMT",
						"getGMT",
						"::getGMT"
					],
					"id": "intltimezone.getgmt",
					"name": "IntlTimeZone::getGMT",
					"description": "Create GMT (UTC) timezone"
				},
				"intltimezone.getid": {
					"tokens": [
						"IntlTimeZone::getID",
						"getID",
						"::getID"
					],
					"id": "intltimezone.getid",
					"name": "IntlTimeZone::getID",
					"description": "Get timezone ID"
				},
				"intltimezone.getoffset": {
					"tokens": [
						"IntlTimeZone::getOffset",
						"getOffset",
						"::getOffset"
					],
					"id": "intltimezone.getoffset",
					"name": "IntlTimeZone::getOffset",
					"description": "Get the time zone raw and GMT offset for the given moment in time"
				},
				"intltimezone.getrawoffset": {
					"tokens": [
						"IntlTimeZone::getRawOffset",
						"getRawOffset",
						"::getRawOffset"
					],
					"id": "intltimezone.getrawoffset",
					"name": "IntlTimeZone::getRawOffset",
					"description": "Get the raw GMT offset (before taking daylight savings time into account"
				},
				"intltimezone.gettzdataversion": {
					"tokens": [
						"IntlTimeZone::getTZDataVersion",
						"getTZDataVersion",
						"::getTZDataVersion"
					],
					"id": "intltimezone.gettzdataversion",
					"name": "IntlTimeZone::getTZDataVersion",
					"description": "Get the timezone data version currently used by ICU"
				},
				"intltimezone.hassamerules": {
					"tokens": [
						"IntlTimeZone::hasSameRules",
						"hasSameRules",
						"::hasSameRules"
					],
					"id": "intltimezone.hassamerules",
					"name": "IntlTimeZone::hasSameRules",
					"description": "Check if this zone has the same rules and offset as another zone"
				},
				"intltimezone.todatetimezone": {
					"tokens": [
						"IntlTimeZone::toDateTimeZone",
						"toDateTimeZone",
						"::toDateTimeZone"
					],
					"id": "intltimezone.todatetimezone",
					"name": "IntlTimeZone::toDateTimeZone",
					"description": "Convert to DateTimeZone object"
				},
				"intltimezone.usedaylighttime": {
					"tokens": [
						"IntlTimeZone::useDaylightTime",
						"useDaylightTime",
						"::useDaylightTime"
					],
					"id": "intltimezone.usedaylighttime",
					"name": "IntlTimeZone::useDaylightTime",
					"description": "Check if this time zone uses daylight savings time"
				},
				"intldateformatter.create": {
					"tokens": [
						"IntlDateFormatter::create",
						"create",
						"::create"
					],
					"id": "intldateformatter.create",
					"name": "IntlDateFormatter::create",
					"description": "Create a date formatter"
				},
				"intldateformatter.format": {
					"tokens": [
						"IntlDateFormatter::format",
						"format",
						"::format"
					],
					"id": "intldateformatter.format",
					"name": "IntlDateFormatter::format",
					"description": "Format the date/time value as a string"
				},
				"intldateformatter.formatobject": {
					"tokens": [
						"IntlDateFormatter::formatObject",
						"formatObject",
						"::formatObject"
					],
					"id": "intldateformatter.formatobject",
					"name": "IntlDateFormatter::formatObject",
					"description": "Formats an object"
				},
				"intldateformatter.getcalendar": {
					"tokens": [
						"IntlDateFormatter::getCalendar",
						"getCalendar",
						"::getCalendar"
					],
					"id": "intldateformatter.getcalendar",
					"name": "IntlDateFormatter::getCalendar",
					"description": "Get the calendar type used for the IntlDateFormatter"
				},
				"intldateformatter.getdatetype": {
					"tokens": [
						"IntlDateFormatter::getDateType",
						"getDateType",
						"::getDateType"
					],
					"id": "intldateformatter.getdatetype",
					"name": "IntlDateFormatter::getDateType",
					"description": "Get the datetype used for the IntlDateFormatter"
				},
				"intldateformatter.geterrorcode": {
					"tokens": [
						"IntlDateFormatter::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "intldateformatter.geterrorcode",
					"name": "IntlDateFormatter::getErrorCode",
					"description": "Get the error code from last operation"
				},
				"intldateformatter.geterrormessage": {
					"tokens": [
						"IntlDateFormatter::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "intldateformatter.geterrormessage",
					"name": "IntlDateFormatter::getErrorMessage",
					"description": "Get the error text from the last operation."
				},
				"intldateformatter.getlocale": {
					"tokens": [
						"IntlDateFormatter::getLocale",
						"getLocale",
						"::getLocale"
					],
					"id": "intldateformatter.getlocale",
					"name": "IntlDateFormatter::getLocale",
					"description": "Get the locale used by formatter"
				},
				"intldateformatter.getpattern": {
					"tokens": [
						"IntlDateFormatter::getPattern",
						"getPattern",
						"::getPattern"
					],
					"id": "intldateformatter.getpattern",
					"name": "IntlDateFormatter::getPattern",
					"description": "Get the pattern used for the IntlDateFormatter"
				},
				"intldateformatter.gettimetype": {
					"tokens": [
						"IntlDateFormatter::getTimeType",
						"getTimeType",
						"::getTimeType"
					],
					"id": "intldateformatter.gettimetype",
					"name": "IntlDateFormatter::getTimeType",
					"description": "Get the timetype used for the IntlDateFormatter"
				},
				"intldateformatter.gettimezoneid": {
					"tokens": [
						"IntlDateFormatter::getTimeZoneId",
						"getTimeZoneId",
						"::getTimeZoneId"
					],
					"id": "intldateformatter.gettimezoneid",
					"name": "IntlDateFormatter::getTimeZoneId",
					"description": "Get the timezone-id used for the IntlDateFormatter"
				},
				"intldateformatter.getcalendarobject": {
					"tokens": [
						"IntlDateFormatter::getCalendarObject",
						"getCalendarObject",
						"::getCalendarObject"
					],
					"id": "intldateformatter.getcalendarobject",
					"name": "IntlDateFormatter::getCalendarObject",
					"description": "Get copy of formatterʼs calendar object"
				},
				"intldateformatter.gettimezone": {
					"tokens": [
						"IntlDateFormatter::getTimeZone",
						"getTimeZone",
						"::getTimeZone"
					],
					"id": "intldateformatter.gettimezone",
					"name": "IntlDateFormatter::getTimeZone",
					"description": "Get formatterʼs timezone"
				},
				"intldateformatter.islenient": {
					"tokens": [
						"IntlDateFormatter::isLenient",
						"isLenient",
						"::isLenient"
					],
					"id": "intldateformatter.islenient",
					"name": "IntlDateFormatter::isLenient",
					"description": "Get the lenient used for the IntlDateFormatter"
				},
				"intldateformatter.localtime": {
					"tokens": [
						"IntlDateFormatter::localtime",
						"localtime",
						"::localtime"
					],
					"id": "intldateformatter.localtime",
					"name": "IntlDateFormatter::localtime",
					"description": "Parse string to a field-based time value"
				},
				"intldateformatter.parse": {
					"tokens": [
						"IntlDateFormatter::parse",
						"parse",
						"::parse"
					],
					"id": "intldateformatter.parse",
					"name": "IntlDateFormatter::parse",
					"description": "Parse string to a timestamp value"
				},
				"intldateformatter.setcalendar": {
					"tokens": [
						"IntlDateFormatter::setCalendar",
						"setCalendar",
						"::setCalendar"
					],
					"id": "intldateformatter.setcalendar",
					"name": "IntlDateFormatter::setCalendar",
					"description": "Sets the calendar type used by the formatter"
				},
				"intldateformatter.setlenient": {
					"tokens": [
						"IntlDateFormatter::setLenient",
						"setLenient",
						"::setLenient"
					],
					"id": "intldateformatter.setlenient",
					"name": "IntlDateFormatter::setLenient",
					"description": "Set the leniency of the parser"
				},
				"intldateformatter.setpattern": {
					"tokens": [
						"IntlDateFormatter::setPattern",
						"setPattern",
						"::setPattern"
					],
					"id": "intldateformatter.setpattern",
					"name": "IntlDateFormatter::setPattern",
					"description": "Set the pattern used for the IntlDateFormatter"
				},
				"intldateformatter.settimezoneid": {
					"tokens": [
						"IntlDateFormatter::setTimeZoneId",
						"setTimeZoneId",
						"::setTimeZoneId"
					],
					"id": "intldateformatter.settimezoneid",
					"name": "IntlDateFormatter::setTimeZoneId",
					"description": "Sets the time zone to use"
				},
				"intldateformatter.settimezone": {
					"tokens": [
						"IntlDateFormatter::setTimeZone",
						"setTimeZone",
						"::setTimeZone"
					],
					"id": "intldateformatter.settimezone",
					"name": "IntlDateFormatter::setTimeZone",
					"description": "Sets formatterʼs timezone"
				},
				"resourcebundle.count": {
					"tokens": [
						"ResourceBundle::count",
						"count",
						"::count"
					],
					"id": "resourcebundle.count",
					"name": "ResourceBundle::count",
					"description": "Get number of elements in the bundle"
				},
				"resourcebundle.create": {
					"tokens": [
						"ResourceBundle::create",
						"create",
						"::create"
					],
					"id": "resourcebundle.create",
					"name": "ResourceBundle::create",
					"description": "Create a resource bundle"
				},
				"resourcebundle.geterrorcode": {
					"tokens": [
						"ResourceBundle::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "resourcebundle.geterrorcode",
					"name": "ResourceBundle::getErrorCode",
					"description": "Get bundle's last error code."
				},
				"resourcebundle.geterrormessage": {
					"tokens": [
						"ResourceBundle::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "resourcebundle.geterrormessage",
					"name": "ResourceBundle::getErrorMessage",
					"description": "Get bundle's last error message."
				},
				"resourcebundle.get": {
					"tokens": [
						"ResourceBundle::get",
						"get",
						"::get"
					],
					"id": "resourcebundle.get",
					"name": "ResourceBundle::get",
					"description": "Get data from the bundle"
				},
				"resourcebundle.locales": {
					"tokens": [
						"ResourceBundle::getLocales",
						"getLocales",
						"::getLocales"
					],
					"id": "resourcebundle.locales",
					"name": "ResourceBundle::getLocales",
					"description": "Get supported locales"
				},
				"spoofchecker.areconfusable": {
					"tokens": [
						"Spoofchecker::areConfusable",
						"areConfusable",
						"::areConfusable"
					],
					"id": "spoofchecker.areconfusable",
					"name": "Spoofchecker::areConfusable",
					"description": "Checks if a given text contains any confusable characters"
				},
				"spoofchecker.construct": {
					"tokens": [
						"Spoofchecker::__construct",
						"Spoofchecker::_construct",
						"__construct",
						"::__construct"
					],
					"id": "spoofchecker.construct",
					"name": "Spoofchecker::__construct",
					"description": "Constructor"
				},
				"spoofchecker.issuspicious": {
					"tokens": [
						"Spoofchecker::isSuspicious",
						"isSuspicious",
						"::isSuspicious"
					],
					"id": "spoofchecker.issuspicious",
					"name": "Spoofchecker::isSuspicious",
					"description": "Checks if a given text contains any suspicious characters"
				},
				"spoofchecker.setallowedlocales": {
					"tokens": [
						"Spoofchecker::setAllowedLocales",
						"setAllowedLocales",
						"::setAllowedLocales"
					],
					"id": "spoofchecker.setallowedlocales",
					"name": "Spoofchecker::setAllowedLocales",
					"description": "Locales to use when running checks"
				},
				"spoofchecker.setchecks": {
					"tokens": [
						"Spoofchecker::setChecks",
						"setChecks",
						"::setChecks"
					],
					"id": "spoofchecker.setchecks",
					"name": "Spoofchecker::setChecks",
					"description": "Set the checks to run"
				},
				"transliterator.construct": {
					"tokens": [
						"Transliterator::__construct",
						"Transliterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "transliterator.construct",
					"name": "Transliterator::__construct",
					"description": "Private constructor to deny instantiation"
				},
				"transliterator.create": {
					"tokens": [
						"Transliterator::create",
						"create",
						"::create"
					],
					"id": "transliterator.create",
					"name": "Transliterator::create",
					"description": "Create a transliterator"
				},
				"transliterator.createfromrules": {
					"tokens": [
						"Transliterator::createFromRules",
						"createFromRules",
						"::createFromRules"
					],
					"id": "transliterator.createfromrules",
					"name": "Transliterator::createFromRules",
					"description": "Create transliterator from rules"
				},
				"transliterator.createinverse": {
					"tokens": [
						"Transliterator::createInverse",
						"createInverse",
						"::createInverse"
					],
					"id": "transliterator.createinverse",
					"name": "Transliterator::createInverse",
					"description": "Create an inverse transliterator"
				},
				"transliterator.geterrorcode": {
					"tokens": [
						"Transliterator::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "transliterator.geterrorcode",
					"name": "Transliterator::getErrorCode",
					"description": "Get last error code"
				},
				"transliterator.geterrormessage": {
					"tokens": [
						"Transliterator::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "transliterator.geterrormessage",
					"name": "Transliterator::getErrorMessage",
					"description": "Get last error message"
				},
				"transliterator.listids": {
					"tokens": [
						"Transliterator::listIDs",
						"listIDs",
						"::listIDs"
					],
					"id": "transliterator.listids",
					"name": "Transliterator::listIDs",
					"description": "Get transliterator IDs"
				},
				"transliterator.transliterate": {
					"tokens": [
						"Transliterator::transliterate",
						"transliterate",
						"::transliterate"
					],
					"id": "transliterator.transliterate",
					"name": "Transliterator::transliterate",
					"description": "Transliterate a string"
				},
				"intlbreakiterator.construct": {
					"tokens": [
						"IntlBreakIterator::__construct",
						"IntlBreakIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "intlbreakiterator.construct",
					"name": "IntlBreakIterator::__construct",
					"description": "Private constructor for disallowing instantiation"
				},
				"intlbreakiterator.createcharacterinstance": {
					"tokens": [
						"IntlBreakIterator::createCharacterInstance",
						"createCharacterInstance",
						"::createCharacterInstance"
					],
					"id": "intlbreakiterator.createcharacterinstance",
					"name": "IntlBreakIterator::createCharacterInstance",
					"description": "Create break iterator for boundaries of combining character sequences"
				},
				"intlbreakiterator.createcodepointinstance": {
					"tokens": [
						"IntlBreakIterator::createCodePointInstance",
						"createCodePointInstance",
						"::createCodePointInstance"
					],
					"id": "intlbreakiterator.createcodepointinstance",
					"name": "IntlBreakIterator::createCodePointInstance",
					"description": "Create break iterator for boundaries of code points"
				},
				"intlbreakiterator.createlineinstance": {
					"tokens": [
						"IntlBreakIterator::createLineInstance",
						"createLineInstance",
						"::createLineInstance"
					],
					"id": "intlbreakiterator.createlineinstance",
					"name": "IntlBreakIterator::createLineInstance",
					"description": "Create break iterator for logically possible line breaks"
				},
				"intlbreakiterator.createsentenceinstance": {
					"tokens": [
						"IntlBreakIterator::createSentenceInstance",
						"createSentenceInstance",
						"::createSentenceInstance"
					],
					"id": "intlbreakiterator.createsentenceinstance",
					"name": "IntlBreakIterator::createSentenceInstance",
					"description": "Create break iterator for sentence breaks"
				},
				"intlbreakiterator.createtitleinstance": {
					"tokens": [
						"IntlBreakIterator::createTitleInstance",
						"createTitleInstance",
						"::createTitleInstance"
					],
					"id": "intlbreakiterator.createtitleinstance",
					"name": "IntlBreakIterator::createTitleInstance",
					"description": "Create break iterator for title-casing breaks"
				},
				"intlbreakiterator.createwordinstance": {
					"tokens": [
						"IntlBreakIterator::createWordInstance",
						"createWordInstance",
						"::createWordInstance"
					],
					"id": "intlbreakiterator.createwordinstance",
					"name": "IntlBreakIterator::createWordInstance",
					"description": "Create break iterator for word breaks"
				},
				"intlbreakiterator.current": {
					"tokens": [
						"IntlBreakIterator::current",
						"current",
						"::current"
					],
					"id": "intlbreakiterator.current",
					"name": "IntlBreakIterator::current",
					"description": "Get index of current position"
				},
				"intlbreakiterator.first": {
					"tokens": [
						"IntlBreakIterator::first",
						"first",
						"::first"
					],
					"id": "intlbreakiterator.first",
					"name": "IntlBreakIterator::first",
					"description": "Set position to the first character in the text"
				},
				"intlbreakiterator.following": {
					"tokens": [
						"IntlBreakIterator::following",
						"following",
						"::following"
					],
					"id": "intlbreakiterator.following",
					"name": "IntlBreakIterator::following",
					"description": "Advance the iterator to the first boundary following specified offset"
				},
				"intlbreakiterator.geterrorcode": {
					"tokens": [
						"IntlBreakIterator::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "intlbreakiterator.geterrorcode",
					"name": "IntlBreakIterator::getErrorCode",
					"description": "Get last error code on the object"
				},
				"intlbreakiterator.geterrormessage": {
					"tokens": [
						"IntlBreakIterator::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "intlbreakiterator.geterrormessage",
					"name": "IntlBreakIterator::getErrorMessage",
					"description": "Get last error message on the object"
				},
				"intlbreakiterator.getlocale": {
					"tokens": [
						"IntlBreakIterator::getLocale",
						"getLocale",
						"::getLocale"
					],
					"id": "intlbreakiterator.getlocale",
					"name": "IntlBreakIterator::getLocale",
					"description": "Get the locale associated with the object"
				},
				"intlbreakiterator.getpartsiterator": {
					"tokens": [
						"IntlBreakIterator::getPartsIterator",
						"getPartsIterator",
						"::getPartsIterator"
					],
					"id": "intlbreakiterator.getpartsiterator",
					"name": "IntlBreakIterator::getPartsIterator",
					"description": "Create iterator for navigating fragments between boundaries"
				},
				"intlbreakiterator.gettext": {
					"tokens": [
						"IntlBreakIterator::getText",
						"getText",
						"::getText"
					],
					"id": "intlbreakiterator.gettext",
					"name": "IntlBreakIterator::getText",
					"description": "Get the text being scanned"
				},
				"intlbreakiterator.isboundary": {
					"tokens": [
						"IntlBreakIterator::isBoundary",
						"isBoundary",
						"::isBoundary"
					],
					"id": "intlbreakiterator.isboundary",
					"name": "IntlBreakIterator::isBoundary",
					"description": "Tell whether an offset is a boundaryʼs offset"
				},
				"intlbreakiterator.last": {
					"tokens": [
						"IntlBreakIterator::last",
						"last",
						"::last"
					],
					"id": "intlbreakiterator.last",
					"name": "IntlBreakIterator::last",
					"description": "Set the iterator position to index beyond the last character"
				},
				"intlbreakiterator.next": {
					"tokens": [
						"IntlBreakIterator::next",
						"next",
						"::next"
					],
					"id": "intlbreakiterator.next",
					"name": "IntlBreakIterator::next",
					"description": "Advance the iterator the next boundary"
				},
				"intlbreakiterator.preceding": {
					"tokens": [
						"IntlBreakIterator::preceding",
						"preceding",
						"::preceding"
					],
					"id": "intlbreakiterator.preceding",
					"name": "IntlBreakIterator::preceding",
					"description": "Set the iterator position to the first boundary before an offset"
				},
				"intlbreakiterator.previous": {
					"tokens": [
						"IntlBreakIterator::previous",
						"previous",
						"::previous"
					],
					"id": "intlbreakiterator.previous",
					"name": "IntlBreakIterator::previous",
					"description": "Set the iterator position to the boundary immediately before the current"
				},
				"intlbreakiterator.settext": {
					"tokens": [
						"IntlBreakIterator::setText",
						"setText",
						"::setText"
					],
					"id": "intlbreakiterator.settext",
					"name": "IntlBreakIterator::setText",
					"description": "Set the text being scanned"
				},
				"intlrulebasedbreakiterator.construct": {
					"tokens": [
						"IntlRuleBasedBreakIterator::__construct",
						"IntlRuleBasedBreakIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "intlrulebasedbreakiterator.construct",
					"name": "IntlRuleBasedBreakIterator::__construct",
					"description": "Create iterator from ruleset"
				},
				"intlrulebasedbreakiterator.getbinaryrules": {
					"tokens": [
						"IntlRuleBasedBreakIterator::getBinaryRules",
						"getBinaryRules",
						"::getBinaryRules"
					],
					"id": "intlrulebasedbreakiterator.getbinaryrules",
					"name": "IntlRuleBasedBreakIterator::getBinaryRules",
					"description": "Get the binary form of compiled rules"
				},
				"intlrulebasedbreakiterator.getrules": {
					"tokens": [
						"IntlRuleBasedBreakIterator::getRules",
						"getRules",
						"::getRules"
					],
					"id": "intlrulebasedbreakiterator.getrules",
					"name": "IntlRuleBasedBreakIterator::getRules",
					"description": "Get the rule set used to create this object"
				},
				"intlrulebasedbreakiterator.getrulestatus": {
					"tokens": [
						"IntlRuleBasedBreakIterator::getRuleStatus",
						"getRuleStatus",
						"::getRuleStatus"
					],
					"id": "intlrulebasedbreakiterator.getrulestatus",
					"name": "IntlRuleBasedBreakIterator::getRuleStatus",
					"description": "Get the largest status value from the break rules that determined the current break position"
				},
				"intlrulebasedbreakiterator.getrulestatusvec": {
					"tokens": [
						"IntlRuleBasedBreakIterator::getRuleStatusVec",
						"getRuleStatusVec",
						"::getRuleStatusVec"
					],
					"id": "intlrulebasedbreakiterator.getrulestatusvec",
					"name": "IntlRuleBasedBreakIterator::getRuleStatusVec",
					"description": "Get the status values from the break rules that determined the current break position"
				},
				"intlcodepointbreakiterator.getlastcodepoint": {
					"tokens": [
						"IntlCodePointBreakIterator::getLastCodePoint",
						"getLastCodePoint",
						"::getLastCodePoint"
					],
					"id": "intlcodepointbreakiterator.getlastcodepoint",
					"name": "IntlCodePointBreakIterator::getLastCodePoint",
					"description": "Get last code point passed over after advancing or receding the iterator"
				},
				"intlpartsiterator.getbreakiterator": {
					"tokens": [
						"IntlPartsIterator::getBreakIterator",
						"getBreakIterator",
						"::getBreakIterator"
					],
					"id": "intlpartsiterator.getbreakiterator",
					"name": "IntlPartsIterator::getBreakIterator",
					"description": "Get IntlBreakIterator backing this parts iterator"
				},
				"uconverter.construct": {
					"tokens": [
						"UConverter::__construct",
						"UConverter::_construct",
						"__construct",
						"::__construct"
					],
					"id": "uconverter.construct",
					"name": "UConverter::__construct",
					"description": "Create UConverter object"
				},
				"uconverter.convert": {
					"tokens": [
						"UConverter::convert",
						"convert",
						"::convert"
					],
					"id": "uconverter.convert",
					"name": "UConverter::convert",
					"description": "Convert string from one charset to another"
				},
				"uconverter.fromucallback": {
					"tokens": [
						"UConverter::fromUCallback",
						"fromUCallback",
						"::fromUCallback"
					],
					"id": "uconverter.fromucallback",
					"name": "UConverter::fromUCallback",
					"description": "Default &quot;from&quot; callback function"
				},
				"uconverter.getaliases": {
					"tokens": [
						"UConverter::getAliases",
						"getAliases",
						"::getAliases"
					],
					"id": "uconverter.getaliases",
					"name": "UConverter::getAliases",
					"description": "Get the aliases of the given name"
				},
				"uconverter.getavailable": {
					"tokens": [
						"UConverter::getAvailable",
						"getAvailable",
						"::getAvailable"
					],
					"id": "uconverter.getavailable",
					"name": "UConverter::getAvailable",
					"description": "Get the available canonical converter names"
				},
				"uconverter.getdestinationencoding": {
					"tokens": [
						"UConverter::getDestinationEncoding",
						"getDestinationEncoding",
						"::getDestinationEncoding"
					],
					"id": "uconverter.getdestinationencoding",
					"name": "UConverter::getDestinationEncoding",
					"description": "Get the destination encoding"
				},
				"uconverter.getdestinationtype": {
					"tokens": [
						"UConverter::getDestinationType",
						"getDestinationType",
						"::getDestinationType"
					],
					"id": "uconverter.getdestinationtype",
					"name": "UConverter::getDestinationType",
					"description": "Get the destination converter type"
				},
				"uconverter.geterrorcode": {
					"tokens": [
						"UConverter::getErrorCode",
						"getErrorCode",
						"::getErrorCode"
					],
					"id": "uconverter.geterrorcode",
					"name": "UConverter::getErrorCode",
					"description": "Get last error code on the object"
				},
				"uconverter.geterrormessage": {
					"tokens": [
						"UConverter::getErrorMessage",
						"getErrorMessage",
						"::getErrorMessage"
					],
					"id": "uconverter.geterrormessage",
					"name": "UConverter::getErrorMessage",
					"description": "Get last error message on the object"
				},
				"uconverter.getsourceencoding": {
					"tokens": [
						"UConverter::getSourceEncoding",
						"getSourceEncoding",
						"::getSourceEncoding"
					],
					"id": "uconverter.getsourceencoding",
					"name": "UConverter::getSourceEncoding",
					"description": "Get the source encoding"
				},
				"uconverter.getsourcetype": {
					"tokens": [
						"UConverter::getSourceType",
						"getSourceType",
						"::getSourceType"
					],
					"id": "uconverter.getsourcetype",
					"name": "UConverter::getSourceType",
					"description": "Get the source convertor type"
				},
				"uconverter.getstandards": {
					"tokens": [
						"UConverter::getStandards",
						"getStandards",
						"::getStandards"
					],
					"id": "uconverter.getstandards",
					"name": "UConverter::getStandards",
					"description": "Get standards associated to converter names"
				},
				"uconverter.getsubstchars": {
					"tokens": [
						"UConverter::getSubstChars",
						"getSubstChars",
						"::getSubstChars"
					],
					"id": "uconverter.getsubstchars",
					"name": "UConverter::getSubstChars",
					"description": "Get substitution chars"
				},
				"uconverter.reasontext": {
					"tokens": [
						"UConverter::reasonText",
						"reasonText",
						"::reasonText"
					],
					"id": "uconverter.reasontext",
					"name": "UConverter::reasonText",
					"description": "Get string representation of the callback reason"
				},
				"uconverter.setdestinationencoding": {
					"tokens": [
						"UConverter::setDestinationEncoding",
						"setDestinationEncoding",
						"::setDestinationEncoding"
					],
					"id": "uconverter.setdestinationencoding",
					"name": "UConverter::setDestinationEncoding",
					"description": "Set the destination encoding"
				},
				"uconverter.setsourceencoding": {
					"tokens": [
						"UConverter::setSourceEncoding",
						"setSourceEncoding",
						"::setSourceEncoding"
					],
					"id": "uconverter.setsourceencoding",
					"name": "UConverter::setSourceEncoding",
					"description": "Set the source encoding"
				},
				"uconverter.setsubstchars": {
					"tokens": [
						"UConverter::setSubstChars",
						"setSubstChars",
						"::setSubstChars"
					],
					"id": "uconverter.setsubstchars",
					"name": "UConverter::setSubstChars",
					"description": "Set the substitution chars"
				},
				"uconverter.toucallback": {
					"tokens": [
						"UConverter::toUCallback",
						"toUCallback",
						"::toUCallback"
					],
					"id": "uconverter.toucallback",
					"name": "UConverter::toUCallback",
					"description": "Default &quot;to&quot; callback function"
				},
				"uconverter.transcode": {
					"tokens": [
						"UConverter::transcode",
						"transcode",
						"::transcode"
					],
					"id": "uconverter.transcode",
					"name": "UConverter::transcode",
					"description": "Convert string from one charset to another"
				},
				"function.grapheme-extract": {
					"tokens": [
						"grapheme_extract",
						"graphemeextract"
					],
					"id": "function.grapheme-extract",
					"name": "grapheme_extract",
					"description": "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8."
				},
				"function.grapheme-stripos": {
					"tokens": [
						"grapheme_stripos",
						"graphemestripos"
					],
					"id": "function.grapheme-stripos",
					"name": "grapheme_stripos",
					"description": "Find position (in grapheme units) of first occurrence of a case-insensitive string"
				},
				"function.grapheme-stristr": {
					"tokens": [
						"grapheme_stristr",
						"graphemestristr"
					],
					"id": "function.grapheme-stristr",
					"name": "grapheme_stristr",
					"description": "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack."
				},
				"function.grapheme-strlen": {
					"tokens": [
						"grapheme_strlen",
						"graphemestrlen"
					],
					"id": "function.grapheme-strlen",
					"name": "grapheme_strlen",
					"description": "Get string length in grapheme units"
				},
				"function.grapheme-strpos": {
					"tokens": [
						"grapheme_strpos",
						"graphemestrpos"
					],
					"id": "function.grapheme-strpos",
					"name": "grapheme_strpos",
					"description": "Find position (in grapheme units) of first occurrence of a string"
				},
				"function.grapheme-strripos": {
					"tokens": [
						"grapheme_strripos",
						"graphemestrripos"
					],
					"id": "function.grapheme-strripos",
					"name": "grapheme_strripos",
					"description": "Find position (in grapheme units) of last occurrence of a case-insensitive string"
				},
				"function.grapheme-strrpos": {
					"tokens": [
						"grapheme_strrpos",
						"graphemestrrpos"
					],
					"id": "function.grapheme-strrpos",
					"name": "grapheme_strrpos",
					"description": "Find position (in grapheme units) of last occurrence of a string"
				},
				"function.grapheme-strstr": {
					"tokens": [
						"grapheme_strstr",
						"graphemestrstr"
					],
					"id": "function.grapheme-strstr",
					"name": "grapheme_strstr",
					"description": "Returns part of haystack string from the first occurrence of needle to the end of haystack."
				},
				"function.grapheme-substr": {
					"tokens": [
						"grapheme_substr",
						"graphemesubstr"
					],
					"id": "function.grapheme-substr",
					"name": "grapheme_substr",
					"description": "Return part of a string"
				},
				"function.idn-to-ascii": {
					"tokens": [
						"idn_to_ascii",
						"idnto_ascii"
					],
					"id": "function.idn-to-ascii",
					"name": "idn_to_ascii",
					"description": "Convert domain name to IDNA ASCII form."
				},
				"function.idn-to-utf8": {
					"tokens": [
						"idn_to_utf8",
						"idnto_utf8"
					],
					"id": "function.idn-to-utf8",
					"name": "idn_to_utf8",
					"description": "Convert domain name from IDNA ASCII to Unicode."
				},
				"intlchar.charage": {
					"tokens": [
						"IntlChar::charAge",
						"charAge",
						"::charAge"
					],
					"id": "intlchar.charage",
					"name": "IntlChar::charAge",
					"description": "Get the &quot;age&quot; of the code point"
				},
				"intlchar.chardigitvalue": {
					"tokens": [
						"IntlChar::charDigitValue",
						"charDigitValue",
						"::charDigitValue"
					],
					"id": "intlchar.chardigitvalue",
					"name": "IntlChar::charDigitValue",
					"description": "Get the decimal digit value of a decimal digit character"
				},
				"intlchar.chardirection": {
					"tokens": [
						"IntlChar::charDirection",
						"charDirection",
						"::charDirection"
					],
					"id": "intlchar.chardirection",
					"name": "IntlChar::charDirection",
					"description": "Get bidirectional category value for a code point"
				},
				"intlchar.charfromname": {
					"tokens": [
						"IntlChar::charFromName",
						"charFromName",
						"::charFromName"
					],
					"id": "intlchar.charfromname",
					"name": "IntlChar::charFromName",
					"description": "Find Unicode character by name and return its code point value"
				},
				"intlchar.charmirror": {
					"tokens": [
						"IntlChar::charMirror",
						"charMirror",
						"::charMirror"
					],
					"id": "intlchar.charmirror",
					"name": "IntlChar::charMirror",
					"description": "Get the &quot;mirror-image&quot; character for a code point"
				},
				"intlchar.charname": {
					"tokens": [
						"IntlChar::charName",
						"charName",
						"::charName"
					],
					"id": "intlchar.charname",
					"name": "IntlChar::charName",
					"description": "Retrieve the name of a Unicode character"
				},
				"intlchar.chartype": {
					"tokens": [
						"IntlChar::charType",
						"charType",
						"::charType"
					],
					"id": "intlchar.chartype",
					"name": "IntlChar::charType",
					"description": "Get the general category value for a code point"
				},
				"intlchar.chr": {
					"tokens": [
						"IntlChar::chr",
						"chr",
						"::chr"
					],
					"id": "intlchar.chr",
					"name": "IntlChar::chr",
					"description": "Return Unicode character by code point value"
				},
				"intlchar.digit": {
					"tokens": [
						"IntlChar::digit",
						"digit",
						"::digit"
					],
					"id": "intlchar.digit",
					"name": "IntlChar::digit",
					"description": "Get the decimal digit value of a code point for a given radix"
				},
				"intlchar.enumcharnames": {
					"tokens": [
						"IntlChar::enumCharNames",
						"enumCharNames",
						"::enumCharNames"
					],
					"id": "intlchar.enumcharnames",
					"name": "IntlChar::enumCharNames",
					"description": "Enumerate all assigned Unicode characters within a range"
				},
				"intlchar.enumchartypes": {
					"tokens": [
						"IntlChar::enumCharTypes",
						"enumCharTypes",
						"::enumCharTypes"
					],
					"id": "intlchar.enumchartypes",
					"name": "IntlChar::enumCharTypes",
					"description": "Enumerate all code points with their Unicode general categories"
				},
				"intlchar.foldcase": {
					"tokens": [
						"IntlChar::foldCase",
						"foldCase",
						"::foldCase"
					],
					"id": "intlchar.foldcase",
					"name": "IntlChar::foldCase",
					"description": "Perform case folding on a code point"
				},
				"intlchar.fordigit": {
					"tokens": [
						"IntlChar::forDigit",
						"forDigit",
						"::forDigit"
					],
					"id": "intlchar.fordigit",
					"name": "IntlChar::forDigit",
					"description": "Get character representation for a given digit and radix"
				},
				"intlchar.getbidipairedbracket": {
					"tokens": [
						"IntlChar::getBidiPairedBracket",
						"getBidiPairedBracket",
						"::getBidiPairedBracket"
					],
					"id": "intlchar.getbidipairedbracket",
					"name": "IntlChar::getBidiPairedBracket",
					"description": "Get the paired bracket character for a code point"
				},
				"intlchar.getblockcode": {
					"tokens": [
						"IntlChar::getBlockCode",
						"getBlockCode",
						"::getBlockCode"
					],
					"id": "intlchar.getblockcode",
					"name": "IntlChar::getBlockCode",
					"description": "Get the Unicode allocation block containing a code point"
				},
				"intlchar.getcombiningclass": {
					"tokens": [
						"IntlChar::getCombiningClass",
						"getCombiningClass",
						"::getCombiningClass"
					],
					"id": "intlchar.getcombiningclass",
					"name": "IntlChar::getCombiningClass",
					"description": "Get the combining class of a code point"
				},
				"intlchar.getfc-nfkc-closure": {
					"tokens": [
						"IntlChar::getFC_NFKC_Closure",
						"IntlChar::getFCNFKC_Closure",
						"getFC_NFKC_Closure",
						"::getFC_NFKC_Closure"
					],
					"id": "intlchar.getfc-nfkc-closure",
					"name": "IntlChar::getFC_NFKC_Closure",
					"description": "Get the FC_NFKC_Closure property for a code point"
				},
				"intlchar.getintpropertymaxvalue": {
					"tokens": [
						"IntlChar::getIntPropertyMaxValue",
						"getIntPropertyMaxValue",
						"::getIntPropertyMaxValue"
					],
					"id": "intlchar.getintpropertymaxvalue",
					"name": "IntlChar::getIntPropertyMaxValue",
					"description": "Get the max value for a Unicode property"
				},
				"intlchar.getintpropertyminvalue": {
					"tokens": [
						"IntlChar::getIntPropertyMinValue",
						"getIntPropertyMinValue",
						"::getIntPropertyMinValue"
					],
					"id": "intlchar.getintpropertyminvalue",
					"name": "IntlChar::getIntPropertyMinValue",
					"description": "Get the min value for a Unicode property"
				},
				"intlchar.getintpropertyvalue": {
					"tokens": [
						"IntlChar::getIntPropertyValue",
						"getIntPropertyValue",
						"::getIntPropertyValue"
					],
					"id": "intlchar.getintpropertyvalue",
					"name": "IntlChar::getIntPropertyValue",
					"description": "Get the value for a Unicode property for a code point"
				},
				"intlchar.getnumericvalue": {
					"tokens": [
						"IntlChar::getNumericValue",
						"getNumericValue",
						"::getNumericValue"
					],
					"id": "intlchar.getnumericvalue",
					"name": "IntlChar::getNumericValue",
					"description": "Get the numeric value for a Unicode code point"
				},
				"intlchar.getpropertyenum": {
					"tokens": [
						"IntlChar::getPropertyEnum",
						"getPropertyEnum",
						"::getPropertyEnum"
					],
					"id": "intlchar.getpropertyenum",
					"name": "IntlChar::getPropertyEnum",
					"description": "Get the property constant value for a given property name"
				},
				"intlchar.getpropertyname": {
					"tokens": [
						"IntlChar::getPropertyName",
						"getPropertyName",
						"::getPropertyName"
					],
					"id": "intlchar.getpropertyname",
					"name": "IntlChar::getPropertyName",
					"description": "Get the Unicode name for a property"
				},
				"intlchar.getpropertyvalueenum": {
					"tokens": [
						"IntlChar::getPropertyValueEnum",
						"getPropertyValueEnum",
						"::getPropertyValueEnum"
					],
					"id": "intlchar.getpropertyvalueenum",
					"name": "IntlChar::getPropertyValueEnum",
					"description": "Get the property value for a given value name"
				},
				"intlchar.getpropertyvaluename": {
					"tokens": [
						"IntlChar::getPropertyValueName",
						"getPropertyValueName",
						"::getPropertyValueName"
					],
					"id": "intlchar.getpropertyvaluename",
					"name": "IntlChar::getPropertyValueName",
					"description": "Get the Unicode name for a property value"
				},
				"intlchar.getunicodeversion": {
					"tokens": [
						"IntlChar::getUnicodeVersion",
						"getUnicodeVersion",
						"::getUnicodeVersion"
					],
					"id": "intlchar.getunicodeversion",
					"name": "IntlChar::getUnicodeVersion",
					"description": "Get the Unicode version"
				},
				"intlchar.hasbinaryproperty": {
					"tokens": [
						"IntlChar::hasBinaryProperty",
						"hasBinaryProperty",
						"::hasBinaryProperty"
					],
					"id": "intlchar.hasbinaryproperty",
					"name": "IntlChar::hasBinaryProperty",
					"description": "Check a binary Unicode property for a code point"
				},
				"intlchar.isalnum": {
					"tokens": [
						"IntlChar::isalnum",
						"isalnum",
						"::isalnum"
					],
					"id": "intlchar.isalnum",
					"name": "IntlChar::isalnum",
					"description": "Check if code point is an alphanumeric character"
				},
				"intlchar.isalpha": {
					"tokens": [
						"IntlChar::isalpha",
						"isalpha",
						"::isalpha"
					],
					"id": "intlchar.isalpha",
					"name": "IntlChar::isalpha",
					"description": "Check if code point is a letter character"
				},
				"intlchar.isbase": {
					"tokens": [
						"IntlChar::isbase",
						"isbase",
						"::isbase"
					],
					"id": "intlchar.isbase",
					"name": "IntlChar::isbase",
					"description": "Check if code point is a base character"
				},
				"intlchar.isblank": {
					"tokens": [
						"IntlChar::isblank",
						"isblank",
						"::isblank"
					],
					"id": "intlchar.isblank",
					"name": "IntlChar::isblank",
					"description": "Check if code point is a &quot;blank&quot; or &quot;horizontal space&quot; character"
				},
				"intlchar.iscntrl": {
					"tokens": [
						"IntlChar::iscntrl",
						"iscntrl",
						"::iscntrl"
					],
					"id": "intlchar.iscntrl",
					"name": "IntlChar::iscntrl",
					"description": "Check if code point is a control character"
				},
				"intlchar.isdefined": {
					"tokens": [
						"IntlChar::isdefined",
						"isdefined",
						"::isdefined"
					],
					"id": "intlchar.isdefined",
					"name": "IntlChar::isdefined",
					"description": "Check whether the code point is defined"
				},
				"intlchar.isdigit": {
					"tokens": [
						"IntlChar::isdigit",
						"isdigit",
						"::isdigit"
					],
					"id": "intlchar.isdigit",
					"name": "IntlChar::isdigit",
					"description": "Check if code point is a digit character"
				},
				"intlchar.isgraph": {
					"tokens": [
						"IntlChar::isgraph",
						"isgraph",
						"::isgraph"
					],
					"id": "intlchar.isgraph",
					"name": "IntlChar::isgraph",
					"description": "Check if code point is a graphic character"
				},
				"intlchar.isidignorable": {
					"tokens": [
						"IntlChar::isIDIgnorable",
						"isIDIgnorable",
						"::isIDIgnorable"
					],
					"id": "intlchar.isidignorable",
					"name": "IntlChar::isIDIgnorable",
					"description": "Check if code point is an ignorable character"
				},
				"intlchar.isidpart": {
					"tokens": [
						"IntlChar::isIDPart",
						"isIDPart",
						"::isIDPart"
					],
					"id": "intlchar.isidpart",
					"name": "IntlChar::isIDPart",
					"description": "Check if code point is permissible in an identifier"
				},
				"intlchar.isidstart": {
					"tokens": [
						"IntlChar::isIDStart",
						"isIDStart",
						"::isIDStart"
					],
					"id": "intlchar.isidstart",
					"name": "IntlChar::isIDStart",
					"description": "Check if code point is permissible as the first character in an identifier"
				},
				"intlchar.isisocontrol": {
					"tokens": [
						"IntlChar::isISOControl",
						"isISOControl",
						"::isISOControl"
					],
					"id": "intlchar.isisocontrol",
					"name": "IntlChar::isISOControl",
					"description": "Check if code point is an ISO control code"
				},
				"intlchar.isjavaidpart": {
					"tokens": [
						"IntlChar::isJavaIDPart",
						"isJavaIDPart",
						"::isJavaIDPart"
					],
					"id": "intlchar.isjavaidpart",
					"name": "IntlChar::isJavaIDPart",
					"description": "Check if code point is permissible in a Java identifier"
				},
				"intlchar.isjavaidstart": {
					"tokens": [
						"IntlChar::isJavaIDStart",
						"isJavaIDStart",
						"::isJavaIDStart"
					],
					"id": "intlchar.isjavaidstart",
					"name": "IntlChar::isJavaIDStart",
					"description": "Check if code point is permissible as the first character in a Java identifier"
				},
				"intlchar.isjavaspacechar": {
					"tokens": [
						"IntlChar::isJavaSpaceChar",
						"isJavaSpaceChar",
						"::isJavaSpaceChar"
					],
					"id": "intlchar.isjavaspacechar",
					"name": "IntlChar::isJavaSpaceChar",
					"description": "Check if code point is a space character according to Java"
				},
				"intlchar.islower": {
					"tokens": [
						"IntlChar::islower",
						"islower",
						"::islower"
					],
					"id": "intlchar.islower",
					"name": "IntlChar::islower",
					"description": "Check if code point is a lowercase letter"
				},
				"intlchar.ismirrored": {
					"tokens": [
						"IntlChar::isMirrored",
						"isMirrored",
						"::isMirrored"
					],
					"id": "intlchar.ismirrored",
					"name": "IntlChar::isMirrored",
					"description": "Check if code point has the Bidi_Mirrored property"
				},
				"intlchar.isprint": {
					"tokens": [
						"IntlChar::isprint",
						"isprint",
						"::isprint"
					],
					"id": "intlchar.isprint",
					"name": "IntlChar::isprint",
					"description": "Check if code point is a printable character"
				},
				"intlchar.ispunct": {
					"tokens": [
						"IntlChar::ispunct",
						"ispunct",
						"::ispunct"
					],
					"id": "intlchar.ispunct",
					"name": "IntlChar::ispunct",
					"description": "Check if code point is punctuation character"
				},
				"intlchar.isspace": {
					"tokens": [
						"IntlChar::isspace",
						"isspace",
						"::isspace"
					],
					"id": "intlchar.isspace",
					"name": "IntlChar::isspace",
					"description": "Check if code point is a space character"
				},
				"intlchar.istitle": {
					"tokens": [
						"IntlChar::istitle",
						"istitle",
						"::istitle"
					],
					"id": "intlchar.istitle",
					"name": "IntlChar::istitle",
					"description": "Check if code point is a titlecase letter"
				},
				"intlchar.isualphabetic": {
					"tokens": [
						"IntlChar::isUAlphabetic",
						"isUAlphabetic",
						"::isUAlphabetic"
					],
					"id": "intlchar.isualphabetic",
					"name": "IntlChar::isUAlphabetic",
					"description": "Check if code point has the Alphabetic Unicode property"
				},
				"intlchar.isulowercase": {
					"tokens": [
						"IntlChar::isULowercase",
						"isULowercase",
						"::isULowercase"
					],
					"id": "intlchar.isulowercase",
					"name": "IntlChar::isULowercase",
					"description": "Check if code point has the Lowercase Unicode property"
				},
				"intlchar.isupper": {
					"tokens": [
						"IntlChar::isupper",
						"isupper",
						"::isupper"
					],
					"id": "intlchar.isupper",
					"name": "IntlChar::isupper",
					"description": "Check if code point has the general category &quot;Lu&quot; (uppercase letter)"
				},
				"intlchar.isuuppercase": {
					"tokens": [
						"IntlChar::isUUppercase",
						"isUUppercase",
						"::isUUppercase"
					],
					"id": "intlchar.isuuppercase",
					"name": "IntlChar::isUUppercase",
					"description": "Check if code point has the Uppercase Unicode property"
				},
				"intlchar.isuwhitespace": {
					"tokens": [
						"IntlChar::isUWhiteSpace",
						"isUWhiteSpace",
						"::isUWhiteSpace"
					],
					"id": "intlchar.isuwhitespace",
					"name": "IntlChar::isUWhiteSpace",
					"description": "Check if code point has the White_Space Unicode property"
				},
				"intlchar.iswhitespace": {
					"tokens": [
						"IntlChar::isWhitespace",
						"isWhitespace",
						"::isWhitespace"
					],
					"id": "intlchar.iswhitespace",
					"name": "IntlChar::isWhitespace",
					"description": "Check if code point is a whitespace character according to ICU"
				},
				"intlchar.isxdigit": {
					"tokens": [
						"IntlChar::isxdigit",
						"isxdigit",
						"::isxdigit"
					],
					"id": "intlchar.isxdigit",
					"name": "IntlChar::isxdigit",
					"description": "Check if code point is a hexadecimal digit"
				},
				"intlchar.ord": {
					"tokens": [
						"IntlChar::ord",
						"ord",
						"::ord"
					],
					"id": "intlchar.ord",
					"name": "IntlChar::ord",
					"description": "Return Unicode code point value of character"
				},
				"intlchar.tolower": {
					"tokens": [
						"IntlChar::tolower",
						"tolower",
						"::tolower"
					],
					"id": "intlchar.tolower",
					"name": "IntlChar::tolower",
					"description": "Make Unicode character lowercase"
				},
				"intlchar.totitle": {
					"tokens": [
						"IntlChar::totitle",
						"totitle",
						"::totitle"
					],
					"id": "intlchar.totitle",
					"name": "IntlChar::totitle",
					"description": "Make Unicode character titlecase"
				},
				"intlchar.toupper": {
					"tokens": [
						"IntlChar::toupper",
						"toupper",
						"::toupper"
					],
					"id": "intlchar.toupper",
					"name": "IntlChar::toupper",
					"description": "Make Unicode character uppercase"
				},
				"intliterator.current": {
					"tokens": [
						"IntlIterator::current",
						"current",
						"::current"
					],
					"id": "intliterator.current",
					"name": "IntlIterator::current",
					"description": "Get the current element"
				},
				"intliterator.key": {
					"tokens": [
						"IntlIterator::key",
						"key",
						"::key"
					],
					"id": "intliterator.key",
					"name": "IntlIterator::key",
					"description": "Get the current key"
				},
				"intliterator.next": {
					"tokens": [
						"IntlIterator::next",
						"next",
						"::next"
					],
					"id": "intliterator.next",
					"name": "IntlIterator::next",
					"description": "Move forward to the next element"
				},
				"intliterator.rewind": {
					"tokens": [
						"IntlIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "intliterator.rewind",
					"name": "IntlIterator::rewind",
					"description": "Rewind the iterator to the first element"
				},
				"intliterator.valid": {
					"tokens": [
						"IntlIterator::valid",
						"valid",
						"::valid"
					],
					"id": "intliterator.valid",
					"name": "IntlIterator::valid",
					"description": "Check if current position is valid"
				},
				"function.intl-error-name": {
					"tokens": [
						"intl_error_name",
						"intlerror_name"
					],
					"id": "function.intl-error-name",
					"name": "intl_error_name",
					"description": "Get symbolic name for a given error code"
				},
				"function.intl-get-error-code": {
					"tokens": [
						"intl_get_error_code",
						"intlget_error_code"
					],
					"id": "function.intl-get-error-code",
					"name": "intl_get_error_code",
					"description": "Get the last error code"
				},
				"function.intl-get-error-message": {
					"tokens": [
						"intl_get_error_message",
						"intlget_error_message"
					],
					"id": "function.intl-get-error-message",
					"name": "intl_get_error_message",
					"description": "Get description of the last error"
				},
				"function.intl-is-failure": {
					"tokens": [
						"intl_is_failure",
						"intlis_failure"
					],
					"id": "function.intl-is-failure",
					"name": "intl_is_failure",
					"description": "Check whether the given error code indicates failure"
				},
				"function.mb-check-encoding": {
					"tokens": [
						"mb_check_encoding",
						"mbcheck_encoding"
					],
					"id": "function.mb-check-encoding",
					"name": "mb_check_encoding",
					"description": "Check if the string is valid for the specified encoding"
				},
				"function.mb-convert-case": {
					"tokens": [
						"mb_convert_case",
						"mbconvert_case"
					],
					"id": "function.mb-convert-case",
					"name": "mb_convert_case",
					"description": "Perform case folding on a string"
				},
				"function.mb-convert-encoding": {
					"tokens": [
						"mb_convert_encoding",
						"mbconvert_encoding"
					],
					"id": "function.mb-convert-encoding",
					"name": "mb_convert_encoding",
					"description": "Convert character encoding"
				},
				"function.mb-convert-kana": {
					"tokens": [
						"mb_convert_kana",
						"mbconvert_kana"
					],
					"id": "function.mb-convert-kana",
					"name": "mb_convert_kana",
					"description": "Convert &quot;kana&quot; one from another (&quot;zen-kaku&quot;, &quot;han-kaku&quot; and more)"
				},
				"function.mb-convert-variables": {
					"tokens": [
						"mb_convert_variables",
						"mbconvert_variables"
					],
					"id": "function.mb-convert-variables",
					"name": "mb_convert_variables",
					"description": "Convert character code in variable(s)"
				},
				"function.mb-decode-mimeheader": {
					"tokens": [
						"mb_decode_mimeheader",
						"mbdecode_mimeheader"
					],
					"id": "function.mb-decode-mimeheader",
					"name": "mb_decode_mimeheader",
					"description": "Decode string in MIME header field"
				},
				"function.mb-decode-numericentity": {
					"tokens": [
						"mb_decode_numericentity",
						"mbdecode_numericentity"
					],
					"id": "function.mb-decode-numericentity",
					"name": "mb_decode_numericentity",
					"description": "Decode HTML numeric string reference to character"
				},
				"function.mb-detect-encoding": {
					"tokens": [
						"mb_detect_encoding",
						"mbdetect_encoding"
					],
					"id": "function.mb-detect-encoding",
					"name": "mb_detect_encoding",
					"description": "Detect character encoding"
				},
				"function.mb-detect-order": {
					"tokens": [
						"mb_detect_order",
						"mbdetect_order"
					],
					"id": "function.mb-detect-order",
					"name": "mb_detect_order",
					"description": "Set/Get character encoding detection order"
				},
				"function.mb-encode-mimeheader": {
					"tokens": [
						"mb_encode_mimeheader",
						"mbencode_mimeheader"
					],
					"id": "function.mb-encode-mimeheader",
					"name": "mb_encode_mimeheader",
					"description": "Encode string for MIME header"
				},
				"function.mb-encode-numericentity": {
					"tokens": [
						"mb_encode_numericentity",
						"mbencode_numericentity"
					],
					"id": "function.mb-encode-numericentity",
					"name": "mb_encode_numericentity",
					"description": "Encode character to HTML numeric string reference"
				},
				"function.mb-encoding-aliases": {
					"tokens": [
						"mb_encoding_aliases",
						"mbencoding_aliases"
					],
					"id": "function.mb-encoding-aliases",
					"name": "mb_encoding_aliases",
					"description": "Get aliases of a known encoding type"
				},
				"function.mb-ereg-match": {
					"tokens": [
						"mb_ereg_match",
						"mbereg_match"
					],
					"id": "function.mb-ereg-match",
					"name": "mb_ereg_match",
					"description": "Regular expression match for multibyte string"
				},
				"function.mb-ereg-replace-callback": {
					"tokens": [
						"mb_ereg_replace_callback",
						"mbereg_replace_callback"
					],
					"id": "function.mb-ereg-replace-callback",
					"name": "mb_ereg_replace_callback",
					"description": "Perform a regular expresssion seach and replace with multibyte support using a callback"
				},
				"function.mb-ereg-replace": {
					"tokens": [
						"mb_ereg_replace",
						"mbereg_replace"
					],
					"id": "function.mb-ereg-replace",
					"name": "mb_ereg_replace",
					"description": "Replace regular expression with multibyte support"
				},
				"function.mb-ereg-search-getpos": {
					"tokens": [
						"mb_ereg_search_getpos",
						"mbereg_search_getpos"
					],
					"id": "function.mb-ereg-search-getpos",
					"name": "mb_ereg_search_getpos",
					"description": "Returns start point for next regular expression match"
				},
				"function.mb-ereg-search-getregs": {
					"tokens": [
						"mb_ereg_search_getregs",
						"mbereg_search_getregs"
					],
					"id": "function.mb-ereg-search-getregs",
					"name": "mb_ereg_search_getregs",
					"description": "Retrieve the result from the last multibyte regular expression match"
				},
				"function.mb-ereg-search-init": {
					"tokens": [
						"mb_ereg_search_init",
						"mbereg_search_init"
					],
					"id": "function.mb-ereg-search-init",
					"name": "mb_ereg_search_init",
					"description": "Setup string and regular expression for a multibyte regular expression match"
				},
				"function.mb-ereg-search-pos": {
					"tokens": [
						"mb_ereg_search_pos",
						"mbereg_search_pos"
					],
					"id": "function.mb-ereg-search-pos",
					"name": "mb_ereg_search_pos",
					"description": "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string"
				},
				"function.mb-ereg-search-regs": {
					"tokens": [
						"mb_ereg_search_regs",
						"mbereg_search_regs"
					],
					"id": "function.mb-ereg-search-regs",
					"name": "mb_ereg_search_regs",
					"description": "Returns the matched part of a multibyte regular expression"
				},
				"function.mb-ereg-search-setpos": {
					"tokens": [
						"mb_ereg_search_setpos",
						"mbereg_search_setpos"
					],
					"id": "function.mb-ereg-search-setpos",
					"name": "mb_ereg_search_setpos",
					"description": "Set start point of next regular expression match"
				},
				"function.mb-ereg-search": {
					"tokens": [
						"mb_ereg_search",
						"mbereg_search"
					],
					"id": "function.mb-ereg-search",
					"name": "mb_ereg_search",
					"description": "Multibyte regular expression match for predefined multibyte string"
				},
				"function.mb-ereg": {
					"tokens": [
						"mb_ereg",
						"mbereg"
					],
					"id": "function.mb-ereg",
					"name": "mb_ereg",
					"description": "Regular expression match with multibyte support"
				},
				"function.mb-eregi-replace": {
					"tokens": [
						"mb_eregi_replace",
						"mberegi_replace"
					],
					"id": "function.mb-eregi-replace",
					"name": "mb_eregi_replace",
					"description": "Replace regular expression with multibyte support ignoring case"
				},
				"function.mb-eregi": {
					"tokens": [
						"mb_eregi",
						"mberegi"
					],
					"id": "function.mb-eregi",
					"name": "mb_eregi",
					"description": "Regular expression match ignoring case with multibyte support"
				},
				"function.mb-get-info": {
					"tokens": [
						"mb_get_info",
						"mbget_info"
					],
					"id": "function.mb-get-info",
					"name": "mb_get_info",
					"description": "Get internal settings of mbstring"
				},
				"function.mb-http-input": {
					"tokens": [
						"mb_http_input",
						"mbhttp_input"
					],
					"id": "function.mb-http-input",
					"name": "mb_http_input",
					"description": "Detect HTTP input character encoding"
				},
				"function.mb-http-output": {
					"tokens": [
						"mb_http_output",
						"mbhttp_output"
					],
					"id": "function.mb-http-output",
					"name": "mb_http_output",
					"description": "Set/Get HTTP output character encoding"
				},
				"function.mb-internal-encoding": {
					"tokens": [
						"mb_internal_encoding",
						"mbinternal_encoding"
					],
					"id": "function.mb-internal-encoding",
					"name": "mb_internal_encoding",
					"description": "Set/Get internal character encoding"
				},
				"function.mb-language": {
					"tokens": [
						"mb_language",
						"mblanguage"
					],
					"id": "function.mb-language",
					"name": "mb_language",
					"description": "Set/Get current language"
				},
				"function.mb-list-encodings": {
					"tokens": [
						"mb_list_encodings",
						"mblist_encodings"
					],
					"id": "function.mb-list-encodings",
					"name": "mb_list_encodings",
					"description": "Returns an array of all supported encodings"
				},
				"function.mb-output-handler": {
					"tokens": [
						"mb_output_handler",
						"mboutput_handler"
					],
					"id": "function.mb-output-handler",
					"name": "mb_output_handler",
					"description": "Callback function converts character encoding in output buffer"
				},
				"function.mb-parse-str": {
					"tokens": [
						"mb_parse_str",
						"mbparse_str"
					],
					"id": "function.mb-parse-str",
					"name": "mb_parse_str",
					"description": "Parse GET/POST/COOKIE data and set global variable"
				},
				"function.mb-preferred-mime-name": {
					"tokens": [
						"mb_preferred_mime_name",
						"mbpreferred_mime_name"
					],
					"id": "function.mb-preferred-mime-name",
					"name": "mb_preferred_mime_name",
					"description": "Get MIME charset string"
				},
				"function.mb-regex-encoding": {
					"tokens": [
						"mb_regex_encoding",
						"mbregex_encoding"
					],
					"id": "function.mb-regex-encoding",
					"name": "mb_regex_encoding",
					"description": "Set/Get character encoding for multibyte regex"
				},
				"function.mb-regex-set-options": {
					"tokens": [
						"mb_regex_set_options",
						"mbregex_set_options"
					],
					"id": "function.mb-regex-set-options",
					"name": "mb_regex_set_options",
					"description": "Set/Get the default options for mbregex functions"
				},
				"function.mb-send-mail": {
					"tokens": [
						"mb_send_mail",
						"mbsend_mail"
					],
					"id": "function.mb-send-mail",
					"name": "mb_send_mail",
					"description": "Send encoded mail"
				},
				"function.mb-split": {
					"tokens": [
						"mb_split",
						"mbsplit"
					],
					"id": "function.mb-split",
					"name": "mb_split",
					"description": "Split multibyte string using regular expression"
				},
				"function.mb-strcut": {
					"tokens": [
						"mb_strcut",
						"mbstrcut"
					],
					"id": "function.mb-strcut",
					"name": "mb_strcut",
					"description": "Get part of string"
				},
				"function.mb-strimwidth": {
					"tokens": [
						"mb_strimwidth",
						"mbstrimwidth"
					],
					"id": "function.mb-strimwidth",
					"name": "mb_strimwidth",
					"description": "Get truncated string with specified width"
				},
				"function.mb-stripos": {
					"tokens": [
						"mb_stripos",
						"mbstripos"
					],
					"id": "function.mb-stripos",
					"name": "mb_stripos",
					"description": "Finds position of first occurrence of a string within another, case insensitive"
				},
				"function.mb-stristr": {
					"tokens": [
						"mb_stristr",
						"mbstristr"
					],
					"id": "function.mb-stristr",
					"name": "mb_stristr",
					"description": "Finds first occurrence of a string within another, case insensitive"
				},
				"function.mb-strlen": {
					"tokens": [
						"mb_strlen",
						"mbstrlen"
					],
					"id": "function.mb-strlen",
					"name": "mb_strlen",
					"description": "Get string length"
				},
				"function.mb-strpos": {
					"tokens": [
						"mb_strpos",
						"mbstrpos"
					],
					"id": "function.mb-strpos",
					"name": "mb_strpos",
					"description": "Find position of first occurrence of string in a string"
				},
				"function.mb-strrchr": {
					"tokens": [
						"mb_strrchr",
						"mbstrrchr"
					],
					"id": "function.mb-strrchr",
					"name": "mb_strrchr",
					"description": "Finds the last occurrence of a character in a string within another"
				},
				"function.mb-strrichr": {
					"tokens": [
						"mb_strrichr",
						"mbstrrichr"
					],
					"id": "function.mb-strrichr",
					"name": "mb_strrichr",
					"description": "Finds the last occurrence of a character in a string within another, case insensitive"
				},
				"function.mb-strripos": {
					"tokens": [
						"mb_strripos",
						"mbstrripos"
					],
					"id": "function.mb-strripos",
					"name": "mb_strripos",
					"description": "Finds position of last occurrence of a string within another, case insensitive"
				},
				"function.mb-strrpos": {
					"tokens": [
						"mb_strrpos",
						"mbstrrpos"
					],
					"id": "function.mb-strrpos",
					"name": "mb_strrpos",
					"description": "Find position of last occurrence of a string in a string"
				},
				"function.mb-strstr": {
					"tokens": [
						"mb_strstr",
						"mbstrstr"
					],
					"id": "function.mb-strstr",
					"name": "mb_strstr",
					"description": "Finds first occurrence of a string within another"
				},
				"function.mb-strtolower": {
					"tokens": [
						"mb_strtolower",
						"mbstrtolower"
					],
					"id": "function.mb-strtolower",
					"name": "mb_strtolower",
					"description": "Make a string lowercase"
				},
				"function.mb-strtoupper": {
					"tokens": [
						"mb_strtoupper",
						"mbstrtoupper"
					],
					"id": "function.mb-strtoupper",
					"name": "mb_strtoupper",
					"description": "Make a string uppercase"
				},
				"function.mb-strwidth": {
					"tokens": [
						"mb_strwidth",
						"mbstrwidth"
					],
					"id": "function.mb-strwidth",
					"name": "mb_strwidth",
					"description": "Return width of string"
				},
				"function.mb-substitute-character": {
					"tokens": [
						"mb_substitute_character",
						"mbsubstitute_character"
					],
					"id": "function.mb-substitute-character",
					"name": "mb_substitute_character",
					"description": "Set/Get substitution character"
				},
				"function.mb-substr-count": {
					"tokens": [
						"mb_substr_count",
						"mbsubstr_count"
					],
					"id": "function.mb-substr-count",
					"name": "mb_substr_count",
					"description": "Count the number of substring occurrences"
				},
				"function.mb-substr": {
					"tokens": [
						"mb_substr",
						"mbsubstr"
					],
					"id": "function.mb-substr",
					"name": "mb_substr",
					"description": "Get part of string"
				},
				"function.pspell-add-to-personal": {
					"tokens": [
						"pspell_add_to_personal",
						"pspelladd_to_personal"
					],
					"id": "function.pspell-add-to-personal",
					"name": "pspell_add_to_personal",
					"description": "Add the word to a personal wordlist"
				},
				"function.pspell-add-to-session": {
					"tokens": [
						"pspell_add_to_session",
						"pspelladd_to_session"
					],
					"id": "function.pspell-add-to-session",
					"name": "pspell_add_to_session",
					"description": "Add the word to the wordlist in the current session"
				},
				"function.pspell-check": {
					"tokens": [
						"pspell_check",
						"pspellcheck"
					],
					"id": "function.pspell-check",
					"name": "pspell_check",
					"description": "Check a word"
				},
				"function.pspell-clear-session": {
					"tokens": [
						"pspell_clear_session",
						"pspellclear_session"
					],
					"id": "function.pspell-clear-session",
					"name": "pspell_clear_session",
					"description": "Clear the current session"
				},
				"function.pspell-config-create": {
					"tokens": [
						"pspell_config_create",
						"pspellconfig_create"
					],
					"id": "function.pspell-config-create",
					"name": "pspell_config_create",
					"description": "Create a config used to open a dictionary"
				},
				"function.pspell-config-data-dir": {
					"tokens": [
						"pspell_config_data_dir",
						"pspellconfig_data_dir"
					],
					"id": "function.pspell-config-data-dir",
					"name": "pspell_config_data_dir",
					"description": "location of language data files"
				},
				"function.pspell-config-dict-dir": {
					"tokens": [
						"pspell_config_dict_dir",
						"pspellconfig_dict_dir"
					],
					"id": "function.pspell-config-dict-dir",
					"name": "pspell_config_dict_dir",
					"description": "Location of the main word list"
				},
				"function.pspell-config-ignore": {
					"tokens": [
						"pspell_config_ignore",
						"pspellconfig_ignore"
					],
					"id": "function.pspell-config-ignore",
					"name": "pspell_config_ignore",
					"description": "Ignore words less than N characters long"
				},
				"function.pspell-config-mode": {
					"tokens": [
						"pspell_config_mode",
						"pspellconfig_mode"
					],
					"id": "function.pspell-config-mode",
					"name": "pspell_config_mode",
					"description": "Change the mode number of suggestions returned"
				},
				"function.pspell-config-personal": {
					"tokens": [
						"pspell_config_personal",
						"pspellconfig_personal"
					],
					"id": "function.pspell-config-personal",
					"name": "pspell_config_personal",
					"description": "Set a file that contains personal wordlist"
				},
				"function.pspell-config-repl": {
					"tokens": [
						"pspell_config_repl",
						"pspellconfig_repl"
					],
					"id": "function.pspell-config-repl",
					"name": "pspell_config_repl",
					"description": "Set a file that contains replacement pairs"
				},
				"function.pspell-config-runtogether": {
					"tokens": [
						"pspell_config_runtogether",
						"pspellconfig_runtogether"
					],
					"id": "function.pspell-config-runtogether",
					"name": "pspell_config_runtogether",
					"description": "Consider run-together words as valid compounds"
				},
				"function.pspell-config-save-repl": {
					"tokens": [
						"pspell_config_save_repl",
						"pspellconfig_save_repl"
					],
					"id": "function.pspell-config-save-repl",
					"name": "pspell_config_save_repl",
					"description": "Determine whether to save a replacement pairs list\n  along with the wordlist"
				},
				"function.pspell-new-config": {
					"tokens": [
						"pspell_new_config",
						"pspellnew_config"
					],
					"id": "function.pspell-new-config",
					"name": "pspell_new_config",
					"description": "Load a new dictionary with settings based on a given config"
				},
				"function.pspell-new-personal": {
					"tokens": [
						"pspell_new_personal",
						"pspellnew_personal"
					],
					"id": "function.pspell-new-personal",
					"name": "pspell_new_personal",
					"description": "Load a new dictionary with personal wordlist"
				},
				"function.pspell-new": {
					"tokens": [
						"pspell_new",
						"pspellnew"
					],
					"id": "function.pspell-new",
					"name": "pspell_new",
					"description": "Load a new dictionary"
				},
				"function.pspell-save-wordlist": {
					"tokens": [
						"pspell_save_wordlist",
						"pspellsave_wordlist"
					],
					"id": "function.pspell-save-wordlist",
					"name": "pspell_save_wordlist",
					"description": "Save the personal wordlist to a file"
				},
				"function.pspell-store-replacement": {
					"tokens": [
						"pspell_store_replacement",
						"pspellstore_replacement"
					],
					"id": "function.pspell-store-replacement",
					"name": "pspell_store_replacement",
					"description": "Store a replacement pair for a word"
				},
				"function.pspell-suggest": {
					"tokens": [
						"pspell_suggest",
						"pspellsuggest"
					],
					"id": "function.pspell-suggest",
					"name": "pspell_suggest",
					"description": "Suggest spellings of a word"
				},
				"function.recode-file": {
					"tokens": [
						"recode_file",
						"recodefile"
					],
					"id": "function.recode-file",
					"name": "recode_file",
					"description": "Recode from file to file according to recode request"
				},
				"function.recode-string": {
					"tokens": [
						"recode_string",
						"recodestring"
					],
					"id": "function.recode-string",
					"name": "recode_string",
					"description": "Recode a string according to a recode request"
				},
				"function.recode": {
					"tokens": [
						"recode"
					],
					"id": "function.recode",
					"name": "recode",
					"description": "Alias of recode_string"
				},
				"function.cairo-create": {
					"tokens": [
						"cairo_create",
						"cairocreate"
					],
					"id": "function.cairo-create",
					"name": "cairo_create",
					"description": "Returns a new CairoContext object on the requested surface."
				},
				"function.cairo-font-face-get-type": {
					"tokens": [
						"cairo_font_face_get_type",
						"cairofont_face_get_type"
					],
					"id": "function.cairo-font-face-get-type",
					"name": "cairo_font_face_get_type",
					"description": "Description"
				},
				"function.cairo-font-face-status": {
					"tokens": [
						"cairo_font_face_status",
						"cairofont_face_status"
					],
					"id": "function.cairo-font-face-status",
					"name": "cairo_font_face_status",
					"description": "Description"
				},
				"function.cairo-font-options-create": {
					"tokens": [
						"cairo_font_options_create",
						"cairofont_options_create"
					],
					"id": "function.cairo-font-options-create",
					"name": "cairo_font_options_create",
					"description": "Description"
				},
				"function.cairo-font-options-equal": {
					"tokens": [
						"cairo_font_options_equal",
						"cairofont_options_equal"
					],
					"id": "function.cairo-font-options-equal",
					"name": "cairo_font_options_equal",
					"description": "Description"
				},
				"function.cairo-font-options-get-antialias": {
					"tokens": [
						"cairo_font_options_get_antialias",
						"cairofont_options_get_antialias"
					],
					"id": "function.cairo-font-options-get-antialias",
					"name": "cairo_font_options_get_antialias",
					"description": "Description"
				},
				"function.cairo-font-options-get-hint-metrics": {
					"tokens": [
						"cairo_font_options_get_hint_metrics",
						"cairofont_options_get_hint_metrics"
					],
					"id": "function.cairo-font-options-get-hint-metrics",
					"name": "cairo_font_options_get_hint_metrics",
					"description": "Description"
				},
				"function.cairo-font-options-get-hint-style": {
					"tokens": [
						"cairo_font_options_get_hint_style",
						"cairofont_options_get_hint_style"
					],
					"id": "function.cairo-font-options-get-hint-style",
					"name": "cairo_font_options_get_hint_style",
					"description": "Description"
				},
				"function.cairo-font-options-get-subpixel-order": {
					"tokens": [
						"cairo_font_options_get_subpixel_order",
						"cairofont_options_get_subpixel_order"
					],
					"id": "function.cairo-font-options-get-subpixel-order",
					"name": "cairo_font_options_get_subpixel_order",
					"description": "Description"
				},
				"function.cairo-font-options-hash": {
					"tokens": [
						"cairo_font_options_hash",
						"cairofont_options_hash"
					],
					"id": "function.cairo-font-options-hash",
					"name": "cairo_font_options_hash",
					"description": "Description"
				},
				"function.cairo-font-options-merge": {
					"tokens": [
						"cairo_font_options_merge",
						"cairofont_options_merge"
					],
					"id": "function.cairo-font-options-merge",
					"name": "cairo_font_options_merge",
					"description": "Description"
				},
				"function.cairo-font-options-set-antialias": {
					"tokens": [
						"cairo_font_options_set_antialias",
						"cairofont_options_set_antialias"
					],
					"id": "function.cairo-font-options-set-antialias",
					"name": "cairo_font_options_set_antialias",
					"description": "Description"
				},
				"function.cairo-font-options-set-hint-metrics": {
					"tokens": [
						"cairo_font_options_set_hint_metrics",
						"cairofont_options_set_hint_metrics"
					],
					"id": "function.cairo-font-options-set-hint-metrics",
					"name": "cairo_font_options_set_hint_metrics",
					"description": "Description"
				},
				"function.cairo-font-options-set-hint-style": {
					"tokens": [
						"cairo_font_options_set_hint_style",
						"cairofont_options_set_hint_style"
					],
					"id": "function.cairo-font-options-set-hint-style",
					"name": "cairo_font_options_set_hint_style",
					"description": "Description"
				},
				"function.cairo-font-options-set-subpixel-order": {
					"tokens": [
						"cairo_font_options_set_subpixel_order",
						"cairofont_options_set_subpixel_order"
					],
					"id": "function.cairo-font-options-set-subpixel-order",
					"name": "cairo_font_options_set_subpixel_order",
					"description": "Description"
				},
				"function.cairo-font-options-status": {
					"tokens": [
						"cairo_font_options_status",
						"cairofont_options_status"
					],
					"id": "function.cairo-font-options-status",
					"name": "cairo_font_options_status",
					"description": "Description"
				},
				"function.cairo-format-stride-for-width": {
					"tokens": [
						"cairo_format_stride_for_width",
						"cairoformat_stride_for_width"
					],
					"id": "function.cairo-format-stride-for-width",
					"name": "cairo_format_stride_for_width",
					"description": "Description"
				},
				"function.cairo-image-surface-create-for-data": {
					"tokens": [
						"cairo_image_surface_create_for_data",
						"cairoimage_surface_create_for_data"
					],
					"id": "function.cairo-image-surface-create-for-data",
					"name": "cairo_image_surface_create_for_data",
					"description": "Description"
				},
				"function.cairo-image-surface-create-from-png": {
					"tokens": [
						"cairo_image_surface_create_from_png",
						"cairoimage_surface_create_from_png"
					],
					"id": "function.cairo-image-surface-create-from-png",
					"name": "cairo_image_surface_create_from_png",
					"description": "Description"
				},
				"function.cairo-image-surface-create": {
					"tokens": [
						"cairo_image_surface_create",
						"cairoimage_surface_create"
					],
					"id": "function.cairo-image-surface-create",
					"name": "cairo_image_surface_create",
					"description": "Description"
				},
				"function.cairo-image-surface-get-data": {
					"tokens": [
						"cairo_image_surface_get_data",
						"cairoimage_surface_get_data"
					],
					"id": "function.cairo-image-surface-get-data",
					"name": "cairo_image_surface_get_data",
					"description": "Description"
				},
				"function.cairo-image-surface-get-format": {
					"tokens": [
						"cairo_image_surface_get_format",
						"cairoimage_surface_get_format"
					],
					"id": "function.cairo-image-surface-get-format",
					"name": "cairo_image_surface_get_format",
					"description": "Description"
				},
				"function.cairo-image-surface-get-height": {
					"tokens": [
						"cairo_image_surface_get_height",
						"cairoimage_surface_get_height"
					],
					"id": "function.cairo-image-surface-get-height",
					"name": "cairo_image_surface_get_height",
					"description": "Description"
				},
				"function.cairo-image-surface-get-stride": {
					"tokens": [
						"cairo_image_surface_get_stride",
						"cairoimage_surface_get_stride"
					],
					"id": "function.cairo-image-surface-get-stride",
					"name": "cairo_image_surface_get_stride",
					"description": "Description"
				},
				"function.cairo-image-surface-get-width": {
					"tokens": [
						"cairo_image_surface_get_width",
						"cairoimage_surface_get_width"
					],
					"id": "function.cairo-image-surface-get-width",
					"name": "cairo_image_surface_get_width",
					"description": "Description"
				},
				"function.cairo-matrix-create-scale": {
					"tokens": [
						"cairo_matrix_create_scale",
						"cairomatrix_create_scale"
					],
					"id": "function.cairo-matrix-create-scale",
					"name": "cairo_matrix_create_scale",
					"description": "Alias of CairoMatrix::initScale"
				},
				"function.cairo-matrix-create-translate": {
					"tokens": [
						"cairo_matrix_create_translate",
						"cairomatrix_create_translate"
					],
					"id": "function.cairo-matrix-create-translate",
					"name": "cairo_matrix_create_translate",
					"description": "Alias of CairoMatrix::initTranslate"
				},
				"function.cairo-matrix-invert": {
					"tokens": [
						"cairo_matrix_invert",
						"cairomatrix_invert"
					],
					"id": "function.cairo-matrix-invert",
					"name": "cairo_matrix_invert",
					"description": "Description"
				},
				"function.cairo-matrix-multiply": {
					"tokens": [
						"cairo_matrix_multiply",
						"cairomatrix_multiply"
					],
					"id": "function.cairo-matrix-multiply",
					"name": "cairo_matrix_multiply",
					"description": "Description"
				},
				"function.cairo-matrix-rotate": {
					"tokens": [
						"cairo_matrix_rotate",
						"cairomatrix_rotate"
					],
					"id": "function.cairo-matrix-rotate",
					"name": "cairo_matrix_rotate",
					"description": "Description"
				},
				"function.cairo-matrix-transform-distance": {
					"tokens": [
						"cairo_matrix_transform_distance",
						"cairomatrix_transform_distance"
					],
					"id": "function.cairo-matrix-transform-distance",
					"name": "cairo_matrix_transform_distance",
					"description": "Description"
				},
				"function.cairo-matrix-transform-point": {
					"tokens": [
						"cairo_matrix_transform_point",
						"cairomatrix_transform_point"
					],
					"id": "function.cairo-matrix-transform-point",
					"name": "cairo_matrix_transform_point",
					"description": "Description"
				},
				"function.cairo-matrix-translate": {
					"tokens": [
						"cairo_matrix_translate",
						"cairomatrix_translate"
					],
					"id": "function.cairo-matrix-translate",
					"name": "cairo_matrix_translate",
					"description": "Description"
				},
				"function.cairo-pattern-add-color-stop-rgb": {
					"tokens": [
						"cairo_pattern_add_color_stop_rgb",
						"cairopattern_add_color_stop_rgb"
					],
					"id": "function.cairo-pattern-add-color-stop-rgb",
					"name": "cairo_pattern_add_color_stop_rgb",
					"description": "Description"
				},
				"function.cairo-pattern-add-color-stop-rgba": {
					"tokens": [
						"cairo_pattern_add_color_stop_rgba",
						"cairopattern_add_color_stop_rgba"
					],
					"id": "function.cairo-pattern-add-color-stop-rgba",
					"name": "cairo_pattern_add_color_stop_rgba",
					"description": "Description"
				},
				"function.cairo-pattern-create-for-surface": {
					"tokens": [
						"cairo_pattern_create_for_surface",
						"cairopattern_create_for_surface"
					],
					"id": "function.cairo-pattern-create-for-surface",
					"name": "cairo_pattern_create_for_surface",
					"description": "Description"
				},
				"function.cairo-pattern-create-linear": {
					"tokens": [
						"cairo_pattern_create_linear",
						"cairopattern_create_linear"
					],
					"id": "function.cairo-pattern-create-linear",
					"name": "cairo_pattern_create_linear",
					"description": "Description"
				},
				"function.cairo-pattern-create-radial": {
					"tokens": [
						"cairo_pattern_create_radial",
						"cairopattern_create_radial"
					],
					"id": "function.cairo-pattern-create-radial",
					"name": "cairo_pattern_create_radial",
					"description": "Description"
				},
				"function.cairo-pattern-create-rgb": {
					"tokens": [
						"cairo_pattern_create_rgb",
						"cairopattern_create_rgb"
					],
					"id": "function.cairo-pattern-create-rgb",
					"name": "cairo_pattern_create_rgb",
					"description": "Description"
				},
				"function.cairo-pattern-create-rgba": {
					"tokens": [
						"cairo_pattern_create_rgba",
						"cairopattern_create_rgba"
					],
					"id": "function.cairo-pattern-create-rgba",
					"name": "cairo_pattern_create_rgba",
					"description": "Description"
				},
				"function.cairo-pattern-get-color-stop-count": {
					"tokens": [
						"cairo_pattern_get_color_stop_count",
						"cairopattern_get_color_stop_count"
					],
					"id": "function.cairo-pattern-get-color-stop-count",
					"name": "cairo_pattern_get_color_stop_count",
					"description": "Description"
				},
				"function.cairo-pattern-get-color-stop-rgba": {
					"tokens": [
						"cairo_pattern_get_color_stop_rgba",
						"cairopattern_get_color_stop_rgba"
					],
					"id": "function.cairo-pattern-get-color-stop-rgba",
					"name": "cairo_pattern_get_color_stop_rgba",
					"description": "Description"
				},
				"function.cairo-pattern-get-extend": {
					"tokens": [
						"cairo_pattern_get_extend",
						"cairopattern_get_extend"
					],
					"id": "function.cairo-pattern-get-extend",
					"name": "cairo_pattern_get_extend",
					"description": "Description"
				},
				"function.cairo-pattern-get-filter": {
					"tokens": [
						"cairo_pattern_get_filter",
						"cairopattern_get_filter"
					],
					"id": "function.cairo-pattern-get-filter",
					"name": "cairo_pattern_get_filter",
					"description": "Description"
				},
				"function.cairo-pattern-get-linear-points": {
					"tokens": [
						"cairo_pattern_get_linear_points",
						"cairopattern_get_linear_points"
					],
					"id": "function.cairo-pattern-get-linear-points",
					"name": "cairo_pattern_get_linear_points",
					"description": "Description"
				},
				"function.cairo-pattern-get-matrix": {
					"tokens": [
						"cairo_pattern_get_matrix",
						"cairopattern_get_matrix"
					],
					"id": "function.cairo-pattern-get-matrix",
					"name": "cairo_pattern_get_matrix",
					"description": "Description"
				},
				"function.cairo-pattern-get-radial-circles": {
					"tokens": [
						"cairo_pattern_get_radial_circles",
						"cairopattern_get_radial_circles"
					],
					"id": "function.cairo-pattern-get-radial-circles",
					"name": "cairo_pattern_get_radial_circles",
					"description": "Description"
				},
				"function.cairo-pattern-get-rgba": {
					"tokens": [
						"cairo_pattern_get_rgba",
						"cairopattern_get_rgba"
					],
					"id": "function.cairo-pattern-get-rgba",
					"name": "cairo_pattern_get_rgba",
					"description": "Description"
				},
				"function.cairo-pattern-get-surface": {
					"tokens": [
						"cairo_pattern_get_surface",
						"cairopattern_get_surface"
					],
					"id": "function.cairo-pattern-get-surface",
					"name": "cairo_pattern_get_surface",
					"description": "Description"
				},
				"function.cairo-pattern-get-type": {
					"tokens": [
						"cairo_pattern_get_type",
						"cairopattern_get_type"
					],
					"id": "function.cairo-pattern-get-type",
					"name": "cairo_pattern_get_type",
					"description": "Description"
				},
				"function.cairo-pattern-set-extend": {
					"tokens": [
						"cairo_pattern_set_extend",
						"cairopattern_set_extend"
					],
					"id": "function.cairo-pattern-set-extend",
					"name": "cairo_pattern_set_extend",
					"description": "Description"
				},
				"function.cairo-pattern-set-filter": {
					"tokens": [
						"cairo_pattern_set_filter",
						"cairopattern_set_filter"
					],
					"id": "function.cairo-pattern-set-filter",
					"name": "cairo_pattern_set_filter",
					"description": "Description"
				},
				"function.cairo-pattern-set-matrix": {
					"tokens": [
						"cairo_pattern_set_matrix",
						"cairopattern_set_matrix"
					],
					"id": "function.cairo-pattern-set-matrix",
					"name": "cairo_pattern_set_matrix",
					"description": "Description"
				},
				"function.cairo-pattern-status": {
					"tokens": [
						"cairo_pattern_status",
						"cairopattern_status"
					],
					"id": "function.cairo-pattern-status",
					"name": "cairo_pattern_status",
					"description": "Description"
				},
				"function.cairo-pdf-surface-create": {
					"tokens": [
						"cairo_pdf_surface_create",
						"cairopdf_surface_create"
					],
					"id": "function.cairo-pdf-surface-create",
					"name": "cairo_pdf_surface_create",
					"description": "Description"
				},
				"function.cairo-pdf-surface-set-size": {
					"tokens": [
						"cairo_pdf_surface_set_size",
						"cairopdf_surface_set_size"
					],
					"id": "function.cairo-pdf-surface-set-size",
					"name": "cairo_pdf_surface_set_size",
					"description": "Description"
				},
				"function.cairo-ps-get-levels": {
					"tokens": [
						"cairo_ps_get_levels",
						"cairops_get_levels"
					],
					"id": "function.cairo-ps-get-levels",
					"name": "cairo_ps_get_levels",
					"description": "Description"
				},
				"function.cairo-ps-level-to-string": {
					"tokens": [
						"cairo_ps_level_to_string",
						"cairops_level_to_string"
					],
					"id": "function.cairo-ps-level-to-string",
					"name": "cairo_ps_level_to_string",
					"description": "Description"
				},
				"function.cairo-ps-surface-create": {
					"tokens": [
						"cairo_ps_surface_create",
						"cairops_surface_create"
					],
					"id": "function.cairo-ps-surface-create",
					"name": "cairo_ps_surface_create",
					"description": "Description"
				},
				"function.cairo-ps-surface-dsc-begin-page-setup": {
					"tokens": [
						"cairo_ps_surface_dsc_begin_page_setup",
						"cairops_surface_dsc_begin_page_setup"
					],
					"id": "function.cairo-ps-surface-dsc-begin-page-setup",
					"name": "cairo_ps_surface_dsc_begin_page_setup",
					"description": "Description"
				},
				"function.cairo-ps-surface-dsc-begin-setup": {
					"tokens": [
						"cairo_ps_surface_dsc_begin_setup",
						"cairops_surface_dsc_begin_setup"
					],
					"id": "function.cairo-ps-surface-dsc-begin-setup",
					"name": "cairo_ps_surface_dsc_begin_setup",
					"description": "Description"
				},
				"function.cairo-ps-surface-dsc-comment": {
					"tokens": [
						"cairo_ps_surface_dsc_comment",
						"cairops_surface_dsc_comment"
					],
					"id": "function.cairo-ps-surface-dsc-comment",
					"name": "cairo_ps_surface_dsc_comment",
					"description": "Description"
				},
				"function.cairo-ps-surface-get-eps": {
					"tokens": [
						"cairo_ps_surface_get_eps",
						"cairops_surface_get_eps"
					],
					"id": "function.cairo-ps-surface-get-eps",
					"name": "cairo_ps_surface_get_eps",
					"description": "Description"
				},
				"function.cairo-ps-surface-restrict-to-level": {
					"tokens": [
						"cairo_ps_surface_restrict_to_level",
						"cairops_surface_restrict_to_level"
					],
					"id": "function.cairo-ps-surface-restrict-to-level",
					"name": "cairo_ps_surface_restrict_to_level",
					"description": "Description"
				},
				"function.cairo-ps-surface-set-eps": {
					"tokens": [
						"cairo_ps_surface_set_eps",
						"cairops_surface_set_eps"
					],
					"id": "function.cairo-ps-surface-set-eps",
					"name": "cairo_ps_surface_set_eps",
					"description": "Description"
				},
				"function.cairo-ps-surface-set-size": {
					"tokens": [
						"cairo_ps_surface_set_size",
						"cairops_surface_set_size"
					],
					"id": "function.cairo-ps-surface-set-size",
					"name": "cairo_ps_surface_set_size",
					"description": "Description"
				},
				"function.cairo-scaled-font-create": {
					"tokens": [
						"cairo_scaled_font_create",
						"cairoscaled_font_create"
					],
					"id": "function.cairo-scaled-font-create",
					"name": "cairo_scaled_font_create",
					"description": "Description"
				},
				"function.cairo-scaled-font-extents": {
					"tokens": [
						"cairo_scaled_font_extents",
						"cairoscaled_font_extents"
					],
					"id": "function.cairo-scaled-font-extents",
					"name": "cairo_scaled_font_extents",
					"description": "Description"
				},
				"function.cairo-scaled-font-get-ctm": {
					"tokens": [
						"cairo_scaled_font_get_ctm",
						"cairoscaled_font_get_ctm"
					],
					"id": "function.cairo-scaled-font-get-ctm",
					"name": "cairo_scaled_font_get_ctm",
					"description": "Description"
				},
				"function.cairo-scaled-font-get-font-face": {
					"tokens": [
						"cairo_scaled_font_get_font_face",
						"cairoscaled_font_get_font_face"
					],
					"id": "function.cairo-scaled-font-get-font-face",
					"name": "cairo_scaled_font_get_font_face",
					"description": "Description"
				},
				"function.cairo-scaled-font-get-font-matrix": {
					"tokens": [
						"cairo_scaled_font_get_font_matrix",
						"cairoscaled_font_get_font_matrix"
					],
					"id": "function.cairo-scaled-font-get-font-matrix",
					"name": "cairo_scaled_font_get_font_matrix",
					"description": "Description"
				},
				"function.cairo-scaled-font-get-font-options": {
					"tokens": [
						"cairo_scaled_font_get_font_options",
						"cairoscaled_font_get_font_options"
					],
					"id": "function.cairo-scaled-font-get-font-options",
					"name": "cairo_scaled_font_get_font_options",
					"description": "Description"
				},
				"function.cairo-scaled-font-get-scale-matrix": {
					"tokens": [
						"cairo_scaled_font_get_scale_matrix",
						"cairoscaled_font_get_scale_matrix"
					],
					"id": "function.cairo-scaled-font-get-scale-matrix",
					"name": "cairo_scaled_font_get_scale_matrix",
					"description": "Description"
				},
				"function.cairo-scaled-font-get-type": {
					"tokens": [
						"cairo_scaled_font_get_type",
						"cairoscaled_font_get_type"
					],
					"id": "function.cairo-scaled-font-get-type",
					"name": "cairo_scaled_font_get_type",
					"description": "Description"
				},
				"function.cairo-scaled-font-glyph-extents": {
					"tokens": [
						"cairo_scaled_font_glyph_extents",
						"cairoscaled_font_glyph_extents"
					],
					"id": "function.cairo-scaled-font-glyph-extents",
					"name": "cairo_scaled_font_glyph_extents",
					"description": "Description"
				},
				"function.cairo-scaled-font-status": {
					"tokens": [
						"cairo_scaled_font_status",
						"cairoscaled_font_status"
					],
					"id": "function.cairo-scaled-font-status",
					"name": "cairo_scaled_font_status",
					"description": "Description"
				},
				"function.cairo-scaled-font-text-extents": {
					"tokens": [
						"cairo_scaled_font_text_extents",
						"cairoscaled_font_text_extents"
					],
					"id": "function.cairo-scaled-font-text-extents",
					"name": "cairo_scaled_font_text_extents",
					"description": "Description"
				},
				"function.cairo-surface-copy-page": {
					"tokens": [
						"cairo_surface_copy_page",
						"cairosurface_copy_page"
					],
					"id": "function.cairo-surface-copy-page",
					"name": "cairo_surface_copy_page",
					"description": "Description"
				},
				"function.cairo-surface-create-similar": {
					"tokens": [
						"cairo_surface_create_similar",
						"cairosurface_create_similar"
					],
					"id": "function.cairo-surface-create-similar",
					"name": "cairo_surface_create_similar",
					"description": "Description"
				},
				"function.cairo-surface-finish": {
					"tokens": [
						"cairo_surface_finish",
						"cairosurface_finish"
					],
					"id": "function.cairo-surface-finish",
					"name": "cairo_surface_finish",
					"description": "Description"
				},
				"function.cairo-surface-flush": {
					"tokens": [
						"cairo_surface_flush",
						"cairosurface_flush"
					],
					"id": "function.cairo-surface-flush",
					"name": "cairo_surface_flush",
					"description": "Description"
				},
				"function.cairo-surface-get-content": {
					"tokens": [
						"cairo_surface_get_content",
						"cairosurface_get_content"
					],
					"id": "function.cairo-surface-get-content",
					"name": "cairo_surface_get_content",
					"description": "Description"
				},
				"function.cairo-surface-get-device-offset": {
					"tokens": [
						"cairo_surface_get_device_offset",
						"cairosurface_get_device_offset"
					],
					"id": "function.cairo-surface-get-device-offset",
					"name": "cairo_surface_get_device_offset",
					"description": "Description"
				},
				"function.cairo-surface-get-font-options": {
					"tokens": [
						"cairo_surface_get_font_options",
						"cairosurface_get_font_options"
					],
					"id": "function.cairo-surface-get-font-options",
					"name": "cairo_surface_get_font_options",
					"description": "Description"
				},
				"function.cairo-surface-get-type": {
					"tokens": [
						"cairo_surface_get_type",
						"cairosurface_get_type"
					],
					"id": "function.cairo-surface-get-type",
					"name": "cairo_surface_get_type",
					"description": "Description"
				},
				"function.cairo-surface-mark-dirty-rectangle": {
					"tokens": [
						"cairo_surface_mark_dirty_rectangle",
						"cairosurface_mark_dirty_rectangle"
					],
					"id": "function.cairo-surface-mark-dirty-rectangle",
					"name": "cairo_surface_mark_dirty_rectangle",
					"description": "Description"
				},
				"function.cairo-surface-mark-dirty": {
					"tokens": [
						"cairo_surface_mark_dirty",
						"cairosurface_mark_dirty"
					],
					"id": "function.cairo-surface-mark-dirty",
					"name": "cairo_surface_mark_dirty",
					"description": "Description"
				},
				"function.cairo-surface-set-device-offset": {
					"tokens": [
						"cairo_surface_set_device_offset",
						"cairosurface_set_device_offset"
					],
					"id": "function.cairo-surface-set-device-offset",
					"name": "cairo_surface_set_device_offset",
					"description": "Description"
				},
				"function.cairo-surface-set-fallback-resolution": {
					"tokens": [
						"cairo_surface_set_fallback_resolution",
						"cairosurface_set_fallback_resolution"
					],
					"id": "function.cairo-surface-set-fallback-resolution",
					"name": "cairo_surface_set_fallback_resolution",
					"description": "Description"
				},
				"function.cairo-surface-show-page": {
					"tokens": [
						"cairo_surface_show_page",
						"cairosurface_show_page"
					],
					"id": "function.cairo-surface-show-page",
					"name": "cairo_surface_show_page",
					"description": "Description"
				},
				"function.cairo-surface-status": {
					"tokens": [
						"cairo_surface_status",
						"cairosurface_status"
					],
					"id": "function.cairo-surface-status",
					"name": "cairo_surface_status",
					"description": "Description"
				},
				"function.cairo-surface-write-to-png": {
					"tokens": [
						"cairo_surface_write_to_png",
						"cairosurface_write_to_png"
					],
					"id": "function.cairo-surface-write-to-png",
					"name": "cairo_surface_write_to_png",
					"description": "Description"
				},
				"function.cairo-svg-surface-create": {
					"tokens": [
						"cairo_svg_surface_create",
						"cairosvg_surface_create"
					],
					"id": "function.cairo-svg-surface-create",
					"name": "cairo_svg_surface_create",
					"description": "Description"
				},
				"function.cairo-svg-surface-restrict-to-version": {
					"tokens": [
						"cairo_svg_surface_restrict_to_version",
						"cairosvg_surface_restrict_to_version"
					],
					"id": "function.cairo-svg-surface-restrict-to-version",
					"name": "cairo_svg_surface_restrict_to_version",
					"description": "Description"
				},
				"function.cairo-svg-version-to-string": {
					"tokens": [
						"cairo_svg_version_to_string",
						"cairosvg_version_to_string"
					],
					"id": "function.cairo-svg-version-to-string",
					"name": "cairo_svg_version_to_string",
					"description": "Description"
				},
				"cairo.availablefonts": {
					"tokens": [
						"Cairo::availableFonts",
						"availableFonts",
						"::availableFonts"
					],
					"id": "cairo.availablefonts",
					"name": "Cairo::availableFonts",
					"description": "Retrieves the availables font types"
				},
				"cairo.availablesurfaces": {
					"tokens": [
						"Cairo::availableSurfaces",
						"availableSurfaces",
						"::availableSurfaces"
					],
					"id": "cairo.availablesurfaces",
					"name": "Cairo::availableSurfaces",
					"description": "Retrieves all available surfaces"
				},
				"cairo.statustostring": {
					"tokens": [
						"Cairo::statusToString",
						"statusToString",
						"::statusToString"
					],
					"id": "cairo.statustostring",
					"name": "Cairo::statusToString",
					"description": "Retrieves the current status as string"
				},
				"cairo.version": {
					"tokens": [
						"Cairo::version",
						"version",
						"::version"
					],
					"id": "cairo.version",
					"name": "Cairo::version",
					"description": "Retrives cairo's library version"
				},
				"cairo.versionstring": {
					"tokens": [
						"Cairo::versionString",
						"versionString",
						"::versionString"
					],
					"id": "cairo.versionstring",
					"name": "Cairo::versionString",
					"description": "Retrieves cairo version as string"
				},
				"cairocontext.appendpath": {
					"tokens": [
						"CairoContext::appendPath",
						"appendPath",
						"::appendPath"
					],
					"id": "cairocontext.appendpath",
					"name": "CairoContext::appendPath",
					"description": "Appends a path to current path"
				},
				"cairocontext.arc": {
					"tokens": [
						"CairoContext::arc",
						"arc",
						"::arc"
					],
					"id": "cairocontext.arc",
					"name": "CairoContext::arc",
					"description": "Adds a circular arc"
				},
				"cairocontext.arcnegative": {
					"tokens": [
						"CairoContext::arcNegative",
						"arcNegative",
						"::arcNegative"
					],
					"id": "cairocontext.arcnegative",
					"name": "CairoContext::arcNegative",
					"description": "Adds a negative arc"
				},
				"cairocontext.clip": {
					"tokens": [
						"CairoContext::clip",
						"clip",
						"::clip"
					],
					"id": "cairocontext.clip",
					"name": "CairoContext::clip",
					"description": "Establishes a new clip region"
				},
				"cairocontext.clipextents": {
					"tokens": [
						"CairoContext::clipExtents",
						"clipExtents",
						"::clipExtents"
					],
					"id": "cairocontext.clipextents",
					"name": "CairoContext::clipExtents",
					"description": "Computes the area inside the current clip"
				},
				"cairocontext.clippreserve": {
					"tokens": [
						"CairoContext::clipPreserve",
						"clipPreserve",
						"::clipPreserve"
					],
					"id": "cairocontext.clippreserve",
					"name": "CairoContext::clipPreserve",
					"description": "Establishes a new clip region from the current clip"
				},
				"cairocontext.cliprectanglelist": {
					"tokens": [
						"CairoContext::clipRectangleList",
						"clipRectangleList",
						"::clipRectangleList"
					],
					"id": "cairocontext.cliprectanglelist",
					"name": "CairoContext::clipRectangleList",
					"description": "Retrieves the current clip as a list of rectangles"
				},
				"cairocontext.closepath": {
					"tokens": [
						"CairoContext::closePath",
						"closePath",
						"::closePath"
					],
					"id": "cairocontext.closepath",
					"name": "CairoContext::closePath",
					"description": "Closes the current path"
				},
				"cairocontext.construct": {
					"tokens": [
						"CairoContext::__construct",
						"CairoContext::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairocontext.construct",
					"name": "CairoContext::__construct",
					"description": "Creates a new CairoContext"
				},
				"cairocontext.copypage": {
					"tokens": [
						"CairoContext::copyPage",
						"copyPage",
						"::copyPage"
					],
					"id": "cairocontext.copypage",
					"name": "CairoContext::copyPage",
					"description": "Emits the current page"
				},
				"cairocontext.copypath": {
					"tokens": [
						"CairoContext::copyPath",
						"copyPath",
						"::copyPath"
					],
					"id": "cairocontext.copypath",
					"name": "CairoContext::copyPath",
					"description": "Creates a copy of the current path"
				},
				"cairocontext.copypathflat": {
					"tokens": [
						"CairoContext::copyPathFlat",
						"copyPathFlat",
						"::copyPathFlat"
					],
					"id": "cairocontext.copypathflat",
					"name": "CairoContext::copyPathFlat",
					"description": "Gets a flattened copy of the current path"
				},
				"cairocontext.curveto": {
					"tokens": [
						"CairoContext::curveTo",
						"curveTo",
						"::curveTo"
					],
					"id": "cairocontext.curveto",
					"name": "CairoContext::curveTo",
					"description": "Adds a curve"
				},
				"cairocontext.devicetouser": {
					"tokens": [
						"CairoContext::deviceToUser",
						"deviceToUser",
						"::deviceToUser"
					],
					"id": "cairocontext.devicetouser",
					"name": "CairoContext::deviceToUser",
					"description": "Transform a coordinate"
				},
				"cairocontext.devicetouserdistance": {
					"tokens": [
						"CairoContext::deviceToUserDistance",
						"deviceToUserDistance",
						"::deviceToUserDistance"
					],
					"id": "cairocontext.devicetouserdistance",
					"name": "CairoContext::deviceToUserDistance",
					"description": "Transform a distance"
				},
				"cairocontext.fill": {
					"tokens": [
						"CairoContext::fill",
						"fill",
						"::fill"
					],
					"id": "cairocontext.fill",
					"name": "CairoContext::fill",
					"description": "Fills the current path"
				},
				"cairocontext.fillextents": {
					"tokens": [
						"CairoContext::fillExtents",
						"fillExtents",
						"::fillExtents"
					],
					"id": "cairocontext.fillextents",
					"name": "CairoContext::fillExtents",
					"description": "Computes the filled area"
				},
				"cairocontext.fillpreserve": {
					"tokens": [
						"CairoContext::fillPreserve",
						"fillPreserve",
						"::fillPreserve"
					],
					"id": "cairocontext.fillpreserve",
					"name": "CairoContext::fillPreserve",
					"description": "Fills and preserve the current path"
				},
				"cairocontext.fontextents": {
					"tokens": [
						"CairoContext::fontExtents",
						"fontExtents",
						"::fontExtents"
					],
					"id": "cairocontext.fontextents",
					"name": "CairoContext::fontExtents",
					"description": "Get the font extents"
				},
				"cairocontext.getantialias": {
					"tokens": [
						"CairoContext::getAntialias",
						"getAntialias",
						"::getAntialias"
					],
					"id": "cairocontext.getantialias",
					"name": "CairoContext::getAntialias",
					"description": "Retrives the current antialias mode"
				},
				"cairocontext.getcurrentpoint": {
					"tokens": [
						"CairoContext::getCurrentPoint",
						"getCurrentPoint",
						"::getCurrentPoint"
					],
					"id": "cairocontext.getcurrentpoint",
					"name": "CairoContext::getCurrentPoint",
					"description": "The getCurrentPoint purpose"
				},
				"cairocontext.getdash": {
					"tokens": [
						"CairoContext::getDash",
						"getDash",
						"::getDash"
					],
					"id": "cairocontext.getdash",
					"name": "CairoContext::getDash",
					"description": "The getDash purpose"
				},
				"cairocontext.getdashcount": {
					"tokens": [
						"CairoContext::getDashCount",
						"getDashCount",
						"::getDashCount"
					],
					"id": "cairocontext.getdashcount",
					"name": "CairoContext::getDashCount",
					"description": "The getDashCount purpose"
				},
				"cairocontext.getfillrule": {
					"tokens": [
						"CairoContext::getFillRule",
						"getFillRule",
						"::getFillRule"
					],
					"id": "cairocontext.getfillrule",
					"name": "CairoContext::getFillRule",
					"description": "The getFillRule purpose"
				},
				"cairocontext.getfontface": {
					"tokens": [
						"CairoContext::getFontFace",
						"getFontFace",
						"::getFontFace"
					],
					"id": "cairocontext.getfontface",
					"name": "CairoContext::getFontFace",
					"description": "The getFontFace purpose"
				},
				"cairocontext.getfontmatrix": {
					"tokens": [
						"CairoContext::getFontMatrix",
						"getFontMatrix",
						"::getFontMatrix"
					],
					"id": "cairocontext.getfontmatrix",
					"name": "CairoContext::getFontMatrix",
					"description": "The getFontMatrix purpose"
				},
				"cairocontext.getfontoptions": {
					"tokens": [
						"CairoContext::getFontOptions",
						"getFontOptions",
						"::getFontOptions"
					],
					"id": "cairocontext.getfontoptions",
					"name": "CairoContext::getFontOptions",
					"description": "The getFontOptions purpose"
				},
				"cairocontext.getgrouptarget": {
					"tokens": [
						"CairoContext::getGroupTarget",
						"getGroupTarget",
						"::getGroupTarget"
					],
					"id": "cairocontext.getgrouptarget",
					"name": "CairoContext::getGroupTarget",
					"description": "The getGroupTarget purpose"
				},
				"cairocontext.getlinecap": {
					"tokens": [
						"CairoContext::getLineCap",
						"getLineCap",
						"::getLineCap"
					],
					"id": "cairocontext.getlinecap",
					"name": "CairoContext::getLineCap",
					"description": "The getLineCap purpose"
				},
				"cairocontext.getlinejoin": {
					"tokens": [
						"CairoContext::getLineJoin",
						"getLineJoin",
						"::getLineJoin"
					],
					"id": "cairocontext.getlinejoin",
					"name": "CairoContext::getLineJoin",
					"description": "The getLineJoin purpose"
				},
				"cairocontext.getlinewidth": {
					"tokens": [
						"CairoContext::getLineWidth",
						"getLineWidth",
						"::getLineWidth"
					],
					"id": "cairocontext.getlinewidth",
					"name": "CairoContext::getLineWidth",
					"description": "The getLineWidth purpose"
				},
				"cairocontext.getmatrix": {
					"tokens": [
						"CairoContext::getMatrix",
						"getMatrix",
						"::getMatrix"
					],
					"id": "cairocontext.getmatrix",
					"name": "CairoContext::getMatrix",
					"description": "The getMatrix purpose"
				},
				"cairocontext.getmiterlimit": {
					"tokens": [
						"CairoContext::getMiterLimit",
						"getMiterLimit",
						"::getMiterLimit"
					],
					"id": "cairocontext.getmiterlimit",
					"name": "CairoContext::getMiterLimit",
					"description": "The getMiterLimit purpose"
				},
				"cairocontext.getoperator": {
					"tokens": [
						"CairoContext::getOperator",
						"getOperator",
						"::getOperator"
					],
					"id": "cairocontext.getoperator",
					"name": "CairoContext::getOperator",
					"description": "The getOperator purpose"
				},
				"cairocontext.getscaledfont": {
					"tokens": [
						"CairoContext::getScaledFont",
						"getScaledFont",
						"::getScaledFont"
					],
					"id": "cairocontext.getscaledfont",
					"name": "CairoContext::getScaledFont",
					"description": "The getScaledFont purpose"
				},
				"cairocontext.getsource": {
					"tokens": [
						"CairoContext::getSource",
						"getSource",
						"::getSource"
					],
					"id": "cairocontext.getsource",
					"name": "CairoContext::getSource",
					"description": "The getSource purpose"
				},
				"cairocontext.gettarget": {
					"tokens": [
						"CairoContext::getTarget",
						"getTarget",
						"::getTarget"
					],
					"id": "cairocontext.gettarget",
					"name": "CairoContext::getTarget",
					"description": "The getTarget purpose"
				},
				"cairocontext.gettolerance": {
					"tokens": [
						"CairoContext::getTolerance",
						"getTolerance",
						"::getTolerance"
					],
					"id": "cairocontext.gettolerance",
					"name": "CairoContext::getTolerance",
					"description": "The getTolerance purpose"
				},
				"cairocontext.glyphpath": {
					"tokens": [
						"CairoContext::glyphPath",
						"glyphPath",
						"::glyphPath"
					],
					"id": "cairocontext.glyphpath",
					"name": "CairoContext::glyphPath",
					"description": "The glyphPath purpose"
				},
				"cairocontext.hascurrentpoint": {
					"tokens": [
						"CairoContext::hasCurrentPoint",
						"hasCurrentPoint",
						"::hasCurrentPoint"
					],
					"id": "cairocontext.hascurrentpoint",
					"name": "CairoContext::hasCurrentPoint",
					"description": "The hasCurrentPoint purpose"
				},
				"cairocontext.identitymatrix": {
					"tokens": [
						"CairoContext::identityMatrix",
						"identityMatrix",
						"::identityMatrix"
					],
					"id": "cairocontext.identitymatrix",
					"name": "CairoContext::identityMatrix",
					"description": "The identityMatrix purpose"
				},
				"cairocontext.infill": {
					"tokens": [
						"CairoContext::inFill",
						"inFill",
						"::inFill"
					],
					"id": "cairocontext.infill",
					"name": "CairoContext::inFill",
					"description": "The inFill purpose"
				},
				"cairocontext.instroke": {
					"tokens": [
						"CairoContext::inStroke",
						"inStroke",
						"::inStroke"
					],
					"id": "cairocontext.instroke",
					"name": "CairoContext::inStroke",
					"description": "The inStroke purpose"
				},
				"cairocontext.lineto": {
					"tokens": [
						"CairoContext::lineTo",
						"lineTo",
						"::lineTo"
					],
					"id": "cairocontext.lineto",
					"name": "CairoContext::lineTo",
					"description": "The lineTo purpose"
				},
				"cairocontext.mask": {
					"tokens": [
						"CairoContext::mask",
						"mask",
						"::mask"
					],
					"id": "cairocontext.mask",
					"name": "CairoContext::mask",
					"description": "The mask purpose"
				},
				"cairocontext.masksurface": {
					"tokens": [
						"CairoContext::maskSurface",
						"maskSurface",
						"::maskSurface"
					],
					"id": "cairocontext.masksurface",
					"name": "CairoContext::maskSurface",
					"description": "The maskSurface purpose"
				},
				"cairocontext.moveto": {
					"tokens": [
						"CairoContext::moveTo",
						"moveTo",
						"::moveTo"
					],
					"id": "cairocontext.moveto",
					"name": "CairoContext::moveTo",
					"description": "The moveTo purpose"
				},
				"cairocontext.newpath": {
					"tokens": [
						"CairoContext::newPath",
						"newPath",
						"::newPath"
					],
					"id": "cairocontext.newpath",
					"name": "CairoContext::newPath",
					"description": "The newPath purpose"
				},
				"cairocontext.newsubpath": {
					"tokens": [
						"CairoContext::newSubPath",
						"newSubPath",
						"::newSubPath"
					],
					"id": "cairocontext.newsubpath",
					"name": "CairoContext::newSubPath",
					"description": "The newSubPath purpose"
				},
				"cairocontext.paint": {
					"tokens": [
						"CairoContext::paint",
						"paint",
						"::paint"
					],
					"id": "cairocontext.paint",
					"name": "CairoContext::paint",
					"description": "The paint purpose"
				},
				"cairocontext.paintwithalpha": {
					"tokens": [
						"CairoContext::paintWithAlpha",
						"paintWithAlpha",
						"::paintWithAlpha"
					],
					"id": "cairocontext.paintwithalpha",
					"name": "CairoContext::paintWithAlpha",
					"description": "The paintWithAlpha purpose"
				},
				"cairocontext.pathextents": {
					"tokens": [
						"CairoContext::pathExtents",
						"pathExtents",
						"::pathExtents"
					],
					"id": "cairocontext.pathextents",
					"name": "CairoContext::pathExtents",
					"description": "The pathExtents purpose"
				},
				"cairocontext.popgroup": {
					"tokens": [
						"CairoContext::popGroup",
						"popGroup",
						"::popGroup"
					],
					"id": "cairocontext.popgroup",
					"name": "CairoContext::popGroup",
					"description": "The popGroup purpose"
				},
				"cairocontext.popgrouptosource": {
					"tokens": [
						"CairoContext::popGroupToSource",
						"popGroupToSource",
						"::popGroupToSource"
					],
					"id": "cairocontext.popgrouptosource",
					"name": "CairoContext::popGroupToSource",
					"description": "The popGroupToSource purpose"
				},
				"cairocontext.pushgroup": {
					"tokens": [
						"CairoContext::pushGroup",
						"pushGroup",
						"::pushGroup"
					],
					"id": "cairocontext.pushgroup",
					"name": "CairoContext::pushGroup",
					"description": "The pushGroup purpose"
				},
				"cairocontext.pushgroupwithcontent": {
					"tokens": [
						"CairoContext::pushGroupWithContent",
						"pushGroupWithContent",
						"::pushGroupWithContent"
					],
					"id": "cairocontext.pushgroupwithcontent",
					"name": "CairoContext::pushGroupWithContent",
					"description": "The pushGroupWithContent purpose"
				},
				"cairocontext.rectangle": {
					"tokens": [
						"CairoContext::rectangle",
						"rectangle",
						"::rectangle"
					],
					"id": "cairocontext.rectangle",
					"name": "CairoContext::rectangle",
					"description": "The rectangle purpose"
				},
				"cairocontext.relcurveto": {
					"tokens": [
						"CairoContext::relCurveTo",
						"relCurveTo",
						"::relCurveTo"
					],
					"id": "cairocontext.relcurveto",
					"name": "CairoContext::relCurveTo",
					"description": "The relCurveTo purpose"
				},
				"cairocontext.rellineto": {
					"tokens": [
						"CairoContext::relLineTo",
						"relLineTo",
						"::relLineTo"
					],
					"id": "cairocontext.rellineto",
					"name": "CairoContext::relLineTo",
					"description": "The relLineTo purpose"
				},
				"cairocontext.relmoveto": {
					"tokens": [
						"CairoContext::relMoveTo",
						"relMoveTo",
						"::relMoveTo"
					],
					"id": "cairocontext.relmoveto",
					"name": "CairoContext::relMoveTo",
					"description": "The relMoveTo purpose"
				},
				"cairocontext.resetclip": {
					"tokens": [
						"CairoContext::resetClip",
						"resetClip",
						"::resetClip"
					],
					"id": "cairocontext.resetclip",
					"name": "CairoContext::resetClip",
					"description": "The resetClip purpose"
				},
				"cairocontext.restore": {
					"tokens": [
						"CairoContext::restore",
						"restore",
						"::restore"
					],
					"id": "cairocontext.restore",
					"name": "CairoContext::restore",
					"description": "The restore purpose"
				},
				"cairocontext.rotate": {
					"tokens": [
						"CairoContext::rotate",
						"rotate",
						"::rotate"
					],
					"id": "cairocontext.rotate",
					"name": "CairoContext::rotate",
					"description": "The rotate purpose"
				},
				"cairocontext.save": {
					"tokens": [
						"CairoContext::save",
						"save",
						"::save"
					],
					"id": "cairocontext.save",
					"name": "CairoContext::save",
					"description": "The save purpose"
				},
				"cairocontext.scale": {
					"tokens": [
						"CairoContext::scale",
						"scale",
						"::scale"
					],
					"id": "cairocontext.scale",
					"name": "CairoContext::scale",
					"description": "The scale purpose"
				},
				"cairocontext.selectfontface": {
					"tokens": [
						"CairoContext::selectFontFace",
						"selectFontFace",
						"::selectFontFace"
					],
					"id": "cairocontext.selectfontface",
					"name": "CairoContext::selectFontFace",
					"description": "The selectFontFace purpose"
				},
				"cairocontext.setantialias": {
					"tokens": [
						"CairoContext::setAntialias",
						"setAntialias",
						"::setAntialias"
					],
					"id": "cairocontext.setantialias",
					"name": "CairoContext::setAntialias",
					"description": "The setAntialias purpose"
				},
				"cairocontext.setdash": {
					"tokens": [
						"CairoContext::setDash",
						"setDash",
						"::setDash"
					],
					"id": "cairocontext.setdash",
					"name": "CairoContext::setDash",
					"description": "The setDash purpose"
				},
				"cairocontext.setfillrule": {
					"tokens": [
						"CairoContext::setFillRule",
						"setFillRule",
						"::setFillRule"
					],
					"id": "cairocontext.setfillrule",
					"name": "CairoContext::setFillRule",
					"description": "The setFillRule purpose"
				},
				"cairocontext.setfontface": {
					"tokens": [
						"CairoContext::setFontFace",
						"setFontFace",
						"::setFontFace"
					],
					"id": "cairocontext.setfontface",
					"name": "CairoContext::setFontFace",
					"description": "The setFontFace purpose"
				},
				"cairocontext.setfontmatrix": {
					"tokens": [
						"CairoContext::setFontMatrix",
						"setFontMatrix",
						"::setFontMatrix"
					],
					"id": "cairocontext.setfontmatrix",
					"name": "CairoContext::setFontMatrix",
					"description": "The setFontMatrix purpose"
				},
				"cairocontext.setfontoptions": {
					"tokens": [
						"CairoContext::setFontOptions",
						"setFontOptions",
						"::setFontOptions"
					],
					"id": "cairocontext.setfontoptions",
					"name": "CairoContext::setFontOptions",
					"description": "The setFontOptions purpose"
				},
				"cairocontext.setfontsize": {
					"tokens": [
						"CairoContext::setFontSize",
						"setFontSize",
						"::setFontSize"
					],
					"id": "cairocontext.setfontsize",
					"name": "CairoContext::setFontSize",
					"description": "The setFontSize purpose"
				},
				"cairocontext.setlinecap": {
					"tokens": [
						"CairoContext::setLineCap",
						"setLineCap",
						"::setLineCap"
					],
					"id": "cairocontext.setlinecap",
					"name": "CairoContext::setLineCap",
					"description": "The setLineCap purpose"
				},
				"cairocontext.setlinejoin": {
					"tokens": [
						"CairoContext::setLineJoin",
						"setLineJoin",
						"::setLineJoin"
					],
					"id": "cairocontext.setlinejoin",
					"name": "CairoContext::setLineJoin",
					"description": "The setLineJoin purpose"
				},
				"cairocontext.setlinewidth": {
					"tokens": [
						"CairoContext::setLineWidth",
						"setLineWidth",
						"::setLineWidth"
					],
					"id": "cairocontext.setlinewidth",
					"name": "CairoContext::setLineWidth",
					"description": "The setLineWidth purpose"
				},
				"cairocontext.setmatrix": {
					"tokens": [
						"CairoContext::setMatrix",
						"setMatrix",
						"::setMatrix"
					],
					"id": "cairocontext.setmatrix",
					"name": "CairoContext::setMatrix",
					"description": "The setMatrix purpose"
				},
				"cairocontext.setmiterlimit": {
					"tokens": [
						"CairoContext::setMiterLimit",
						"setMiterLimit",
						"::setMiterLimit"
					],
					"id": "cairocontext.setmiterlimit",
					"name": "CairoContext::setMiterLimit",
					"description": "The setMiterLimit purpose"
				},
				"cairocontext.setoperator": {
					"tokens": [
						"CairoContext::setOperator",
						"setOperator",
						"::setOperator"
					],
					"id": "cairocontext.setoperator",
					"name": "CairoContext::setOperator",
					"description": "The setOperator purpose"
				},
				"cairocontext.setscaledfont": {
					"tokens": [
						"CairoContext::setScaledFont",
						"setScaledFont",
						"::setScaledFont"
					],
					"id": "cairocontext.setscaledfont",
					"name": "CairoContext::setScaledFont",
					"description": "The setScaledFont purpose"
				},
				"cairocontext.setsource": {
					"tokens": [
						"CairoContext::setSource",
						"setSource",
						"::setSource"
					],
					"id": "cairocontext.setsource",
					"name": "CairoContext::setSource",
					"description": "The setSource purpose"
				},
				"cairocontext.setsourcergb": {
					"tokens": [
						"CairoContext::setSourceRGB",
						"setSourceRGB",
						"::setSourceRGB"
					],
					"id": "cairocontext.setsourcergb",
					"name": "CairoContext::setSourceRGB",
					"description": "The setSourceRGB purpose"
				},
				"cairocontext.setsourcergba": {
					"tokens": [
						"CairoContext::setSourceRGBA",
						"setSourceRGBA",
						"::setSourceRGBA"
					],
					"id": "cairocontext.setsourcergba",
					"name": "CairoContext::setSourceRGBA",
					"description": "The setSourceRGBA purpose"
				},
				"cairocontext.setsourcesurface": {
					"tokens": [
						"CairoContext::setSourceSurface",
						"setSourceSurface",
						"::setSourceSurface"
					],
					"id": "cairocontext.setsourcesurface",
					"name": "CairoContext::setSourceSurface",
					"description": "The setSourceSurface purpose"
				},
				"cairocontext.settolerance": {
					"tokens": [
						"CairoContext::setTolerance",
						"setTolerance",
						"::setTolerance"
					],
					"id": "cairocontext.settolerance",
					"name": "CairoContext::setTolerance",
					"description": "The setTolerance purpose"
				},
				"cairocontext.showpage": {
					"tokens": [
						"CairoContext::showPage",
						"showPage",
						"::showPage"
					],
					"id": "cairocontext.showpage",
					"name": "CairoContext::showPage",
					"description": "The showPage purpose"
				},
				"cairocontext.showtext": {
					"tokens": [
						"CairoContext::showText",
						"showText",
						"::showText"
					],
					"id": "cairocontext.showtext",
					"name": "CairoContext::showText",
					"description": "The showText purpose"
				},
				"cairocontext.status": {
					"tokens": [
						"CairoContext::status",
						"status",
						"::status"
					],
					"id": "cairocontext.status",
					"name": "CairoContext::status",
					"description": "The status purpose"
				},
				"cairocontext.stroke": {
					"tokens": [
						"CairoContext::stroke",
						"stroke",
						"::stroke"
					],
					"id": "cairocontext.stroke",
					"name": "CairoContext::stroke",
					"description": "The stroke purpose"
				},
				"cairocontext.strokeextents": {
					"tokens": [
						"CairoContext::strokeExtents",
						"strokeExtents",
						"::strokeExtents"
					],
					"id": "cairocontext.strokeextents",
					"name": "CairoContext::strokeExtents",
					"description": "The strokeExtents purpose"
				},
				"cairocontext.strokepreserve": {
					"tokens": [
						"CairoContext::strokePreserve",
						"strokePreserve",
						"::strokePreserve"
					],
					"id": "cairocontext.strokepreserve",
					"name": "CairoContext::strokePreserve",
					"description": "The strokePreserve purpose"
				},
				"cairocontext.textextents": {
					"tokens": [
						"CairoContext::textExtents",
						"textExtents",
						"::textExtents"
					],
					"id": "cairocontext.textextents",
					"name": "CairoContext::textExtents",
					"description": "The textExtents purpose"
				},
				"cairocontext.textpath": {
					"tokens": [
						"CairoContext::textPath",
						"textPath",
						"::textPath"
					],
					"id": "cairocontext.textpath",
					"name": "CairoContext::textPath",
					"description": "The textPath purpose"
				},
				"cairocontext.transform": {
					"tokens": [
						"CairoContext::transform",
						"transform",
						"::transform"
					],
					"id": "cairocontext.transform",
					"name": "CairoContext::transform",
					"description": "The transform purpose"
				},
				"cairocontext.translate": {
					"tokens": [
						"CairoContext::translate",
						"translate",
						"::translate"
					],
					"id": "cairocontext.translate",
					"name": "CairoContext::translate",
					"description": "The translate purpose"
				},
				"cairocontext.usertodevice": {
					"tokens": [
						"CairoContext::userToDevice",
						"userToDevice",
						"::userToDevice"
					],
					"id": "cairocontext.usertodevice",
					"name": "CairoContext::userToDevice",
					"description": "The userToDevice purpose"
				},
				"cairocontext.usertodevicedistance": {
					"tokens": [
						"CairoContext::userToDeviceDistance",
						"userToDeviceDistance",
						"::userToDeviceDistance"
					],
					"id": "cairocontext.usertodevicedistance",
					"name": "CairoContext::userToDeviceDistance",
					"description": "The userToDeviceDistance purpose"
				},
				"cairosurface.construct": {
					"tokens": [
						"CairoSurface::__construct",
						"CairoSurface::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairosurface.construct",
					"name": "CairoSurface::__construct",
					"description": "The __construct purpose"
				},
				"cairosurface.copypage": {
					"tokens": [
						"CairoSurface::copyPage",
						"copyPage",
						"::copyPage"
					],
					"id": "cairosurface.copypage",
					"name": "CairoSurface::copyPage",
					"description": "The copyPage purpose"
				},
				"cairosurface.createsimilar": {
					"tokens": [
						"CairoSurface::createSimilar",
						"createSimilar",
						"::createSimilar"
					],
					"id": "cairosurface.createsimilar",
					"name": "CairoSurface::createSimilar",
					"description": "The createSimilar purpose"
				},
				"cairosurface.finish": {
					"tokens": [
						"CairoSurface::finish",
						"finish",
						"::finish"
					],
					"id": "cairosurface.finish",
					"name": "CairoSurface::finish",
					"description": "The finish purpose"
				},
				"cairosurface.flush": {
					"tokens": [
						"CairoSurface::flush",
						"flush",
						"::flush"
					],
					"id": "cairosurface.flush",
					"name": "CairoSurface::flush",
					"description": "The flush purpose"
				},
				"cairosurface.getcontent": {
					"tokens": [
						"CairoSurface::getContent",
						"getContent",
						"::getContent"
					],
					"id": "cairosurface.getcontent",
					"name": "CairoSurface::getContent",
					"description": "The getContent purpose"
				},
				"cairosurface.getdeviceoffset": {
					"tokens": [
						"CairoSurface::getDeviceOffset",
						"getDeviceOffset",
						"::getDeviceOffset"
					],
					"id": "cairosurface.getdeviceoffset",
					"name": "CairoSurface::getDeviceOffset",
					"description": "The getDeviceOffset purpose"
				},
				"cairosurface.getfontoptions": {
					"tokens": [
						"CairoSurface::getFontOptions",
						"getFontOptions",
						"::getFontOptions"
					],
					"id": "cairosurface.getfontoptions",
					"name": "CairoSurface::getFontOptions",
					"description": "The getFontOptions purpose"
				},
				"cairosurface.gettype": {
					"tokens": [
						"CairoSurface::getType",
						"getType",
						"::getType"
					],
					"id": "cairosurface.gettype",
					"name": "CairoSurface::getType",
					"description": "The getType purpose"
				},
				"cairosurface.markdirty": {
					"tokens": [
						"CairoSurface::markDirty",
						"markDirty",
						"::markDirty"
					],
					"id": "cairosurface.markdirty",
					"name": "CairoSurface::markDirty",
					"description": "The markDirty purpose"
				},
				"cairosurface.markdirtyrectangle": {
					"tokens": [
						"CairoSurface::markDirtyRectangle",
						"markDirtyRectangle",
						"::markDirtyRectangle"
					],
					"id": "cairosurface.markdirtyrectangle",
					"name": "CairoSurface::markDirtyRectangle",
					"description": "The markDirtyRectangle purpose"
				},
				"cairosurface.setdeviceoffset": {
					"tokens": [
						"CairoSurface::setDeviceOffset",
						"setDeviceOffset",
						"::setDeviceOffset"
					],
					"id": "cairosurface.setdeviceoffset",
					"name": "CairoSurface::setDeviceOffset",
					"description": "The setDeviceOffset purpose"
				},
				"cairosurface.setfallbackresolution": {
					"tokens": [
						"CairoSurface::setFallbackResolution",
						"setFallbackResolution",
						"::setFallbackResolution"
					],
					"id": "cairosurface.setfallbackresolution",
					"name": "CairoSurface::setFallbackResolution",
					"description": "The setFallbackResolution purpose"
				},
				"cairosurface.showpage": {
					"tokens": [
						"CairoSurface::showPage",
						"showPage",
						"::showPage"
					],
					"id": "cairosurface.showpage",
					"name": "CairoSurface::showPage",
					"description": "The showPage purpose"
				},
				"cairosurface.status": {
					"tokens": [
						"CairoSurface::status",
						"status",
						"::status"
					],
					"id": "cairosurface.status",
					"name": "CairoSurface::status",
					"description": "The status purpose"
				},
				"cairosurface.writetopng": {
					"tokens": [
						"CairoSurface::writeToPng",
						"writeToPng",
						"::writeToPng"
					],
					"id": "cairosurface.writetopng",
					"name": "CairoSurface::writeToPng",
					"description": "The writeToPng purpose"
				},
				"cairosvgsurface.construct": {
					"tokens": [
						"CairoSvgSurface::__construct",
						"CairoSvgSurface::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairosvgsurface.construct",
					"name": "CairoSvgSurface::__construct",
					"description": "The __construct purpose"
				},
				"cairosvgsurface.getversions": {
					"tokens": [
						"CairoSvgSurface::getVersions",
						"getVersions",
						"::getVersions"
					],
					"id": "cairosvgsurface.getversions",
					"name": "CairoSvgSurface::getVersions",
					"description": "Used to retrieve a list of supported SVG versions"
				},
				"cairosvgsurface.restricttoversion": {
					"tokens": [
						"CairoSvgSurface::restrictToVersion",
						"restrictToVersion",
						"::restrictToVersion"
					],
					"id": "cairosvgsurface.restricttoversion",
					"name": "CairoSvgSurface::restrictToVersion",
					"description": "The restrictToVersion purpose"
				},
				"cairosvgsurface.versiontostring": {
					"tokens": [
						"CairoSvgSurface::versionToString",
						"versionToString",
						"::versionToString"
					],
					"id": "cairosvgsurface.versiontostring",
					"name": "CairoSvgSurface::versionToString",
					"description": "The versionToString purpose"
				},
				"cairoimagesurface.construct": {
					"tokens": [
						"CairoImageSurface::__construct",
						"CairoImageSurface::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairoimagesurface.construct",
					"name": "CairoImageSurface::__construct",
					"description": "Creates a new CairoImageSurface"
				},
				"cairoimagesurface.createfordata": {
					"tokens": [
						"CairoImageSurface::createForData",
						"createForData",
						"::createForData"
					],
					"id": "cairoimagesurface.createfordata",
					"name": "CairoImageSurface::createForData",
					"description": "The createForData purpose"
				},
				"cairoimagesurface.createfrompng": {
					"tokens": [
						"CairoImageSurface::createFromPng",
						"createFromPng",
						"::createFromPng"
					],
					"id": "cairoimagesurface.createfrompng",
					"name": "CairoImageSurface::createFromPng",
					"description": "Creates a new CairoImageSurface form a png image file"
				},
				"cairoimagesurface.getdata": {
					"tokens": [
						"CairoImageSurface::getData",
						"getData",
						"::getData"
					],
					"id": "cairoimagesurface.getdata",
					"name": "CairoImageSurface::getData",
					"description": "Gets the image data as string"
				},
				"cairoimagesurface.getformat": {
					"tokens": [
						"CairoImageSurface::getFormat",
						"getFormat",
						"::getFormat"
					],
					"id": "cairoimagesurface.getformat",
					"name": "CairoImageSurface::getFormat",
					"description": "Get the image format"
				},
				"cairoimagesurface.getheight": {
					"tokens": [
						"CairoImageSurface::getHeight",
						"getHeight",
						"::getHeight"
					],
					"id": "cairoimagesurface.getheight",
					"name": "CairoImageSurface::getHeight",
					"description": "Retrieves the height of the CairoImageSurface"
				},
				"cairoimagesurface.getstride": {
					"tokens": [
						"CairoImageSurface::getStride",
						"getStride",
						"::getStride"
					],
					"id": "cairoimagesurface.getstride",
					"name": "CairoImageSurface::getStride",
					"description": "The getStride purpose"
				},
				"cairoimagesurface.getwidth": {
					"tokens": [
						"CairoImageSurface::getWidth",
						"getWidth",
						"::getWidth"
					],
					"id": "cairoimagesurface.getwidth",
					"name": "CairoImageSurface::getWidth",
					"description": "Retrieves the width of the CairoImageSurface"
				},
				"cairopdfsurface.construct": {
					"tokens": [
						"CairoPdfSurface::__construct",
						"CairoPdfSurface::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairopdfsurface.construct",
					"name": "CairoPdfSurface::__construct",
					"description": "The __construct purpose"
				},
				"cairopdfsurface.setsize": {
					"tokens": [
						"CairoPdfSurface::setSize",
						"setSize",
						"::setSize"
					],
					"id": "cairopdfsurface.setsize",
					"name": "CairoPdfSurface::setSize",
					"description": "The setSize purpose"
				},
				"cairopssurface.construct": {
					"tokens": [
						"CairoPsSurface::__construct",
						"CairoPsSurface::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairopssurface.construct",
					"name": "CairoPsSurface::__construct",
					"description": "The __construct purpose"
				},
				"cairopssurface.dscbeginpagesetup": {
					"tokens": [
						"CairoPsSurface::dscBeginPageSetup",
						"dscBeginPageSetup",
						"::dscBeginPageSetup"
					],
					"id": "cairopssurface.dscbeginpagesetup",
					"name": "CairoPsSurface::dscBeginPageSetup",
					"description": "The dscBeginPageSetup purpose"
				},
				"cairopssurface.dscbeginsetup": {
					"tokens": [
						"CairoPsSurface::dscBeginSetup",
						"dscBeginSetup",
						"::dscBeginSetup"
					],
					"id": "cairopssurface.dscbeginsetup",
					"name": "CairoPsSurface::dscBeginSetup",
					"description": "The dscBeginSetup purpose"
				},
				"cairopssurface.dsccomment": {
					"tokens": [
						"CairoPsSurface::dscComment",
						"dscComment",
						"::dscComment"
					],
					"id": "cairopssurface.dsccomment",
					"name": "CairoPsSurface::dscComment",
					"description": "The dscComment purpose"
				},
				"cairopssurface.geteps": {
					"tokens": [
						"CairoPsSurface::getEps",
						"getEps",
						"::getEps"
					],
					"id": "cairopssurface.geteps",
					"name": "CairoPsSurface::getEps",
					"description": "The getEps purpose"
				},
				"cairopssurface.getlevels": {
					"tokens": [
						"CairoPsSurface::getLevels",
						"getLevels",
						"::getLevels"
					],
					"id": "cairopssurface.getlevels",
					"name": "CairoPsSurface::getLevels",
					"description": "The getLevels purpose"
				},
				"cairopssurface.leveltostring": {
					"tokens": [
						"CairoPsSurface::levelToString",
						"levelToString",
						"::levelToString"
					],
					"id": "cairopssurface.leveltostring",
					"name": "CairoPsSurface::levelToString",
					"description": "The levelToString purpose"
				},
				"cairopssurface.restricttolevel": {
					"tokens": [
						"CairoPsSurface::restrictToLevel",
						"restrictToLevel",
						"::restrictToLevel"
					],
					"id": "cairopssurface.restricttolevel",
					"name": "CairoPsSurface::restrictToLevel",
					"description": "The restrictToLevel purpose"
				},
				"cairopssurface.seteps": {
					"tokens": [
						"CairoPsSurface::setEps",
						"setEps",
						"::setEps"
					],
					"id": "cairopssurface.seteps",
					"name": "CairoPsSurface::setEps",
					"description": "The setEps purpose"
				},
				"cairopssurface.setsize": {
					"tokens": [
						"CairoPsSurface::setSize",
						"setSize",
						"::setSize"
					],
					"id": "cairopssurface.setsize",
					"name": "CairoPsSurface::setSize",
					"description": "The setSize purpose"
				},
				"cairofontface.construct": {
					"tokens": [
						"CairoFontFace::__construct",
						"CairoFontFace::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairofontface.construct",
					"name": "CairoFontFace::__construct",
					"description": "Creates a new CairoFontFace object"
				},
				"cairofontface.gettype": {
					"tokens": [
						"CairoFontFace::getType",
						"getType",
						"::getType"
					],
					"id": "cairofontface.gettype",
					"name": "CairoFontFace::getType",
					"description": "Retrieves the font face type"
				},
				"cairofontface.status": {
					"tokens": [
						"CairoFontFace::status",
						"status",
						"::status"
					],
					"id": "cairofontface.status",
					"name": "CairoFontFace::status",
					"description": "Check for CairoFontFace errors"
				},
				"cairofontoptions.construct": {
					"tokens": [
						"CairoFontOptions::__construct",
						"CairoFontOptions::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairofontoptions.construct",
					"name": "CairoFontOptions::__construct",
					"description": "The __construct purpose"
				},
				"cairofontoptions.equal": {
					"tokens": [
						"CairoFontOptions::equal",
						"equal",
						"::equal"
					],
					"id": "cairofontoptions.equal",
					"name": "CairoFontOptions::equal",
					"description": "The equal purpose"
				},
				"cairofontoptions.getantialias": {
					"tokens": [
						"CairoFontOptions::getAntialias",
						"getAntialias",
						"::getAntialias"
					],
					"id": "cairofontoptions.getantialias",
					"name": "CairoFontOptions::getAntialias",
					"description": "The getAntialias purpose"
				},
				"cairofontoptions.gethintmetrics": {
					"tokens": [
						"CairoFontOptions::getHintMetrics",
						"getHintMetrics",
						"::getHintMetrics"
					],
					"id": "cairofontoptions.gethintmetrics",
					"name": "CairoFontOptions::getHintMetrics",
					"description": "The getHintMetrics purpose"
				},
				"cairofontoptions.gethintstyle": {
					"tokens": [
						"CairoFontOptions::getHintStyle",
						"getHintStyle",
						"::getHintStyle"
					],
					"id": "cairofontoptions.gethintstyle",
					"name": "CairoFontOptions::getHintStyle",
					"description": "The getHintStyle purpose"
				},
				"cairofontoptions.getsubpixelorder": {
					"tokens": [
						"CairoFontOptions::getSubpixelOrder",
						"getSubpixelOrder",
						"::getSubpixelOrder"
					],
					"id": "cairofontoptions.getsubpixelorder",
					"name": "CairoFontOptions::getSubpixelOrder",
					"description": "The getSubpixelOrder purpose"
				},
				"cairofontoptions.hash": {
					"tokens": [
						"CairoFontOptions::hash",
						"hash",
						"::hash"
					],
					"id": "cairofontoptions.hash",
					"name": "CairoFontOptions::hash",
					"description": "The hash purpose"
				},
				"cairofontoptions.merge": {
					"tokens": [
						"CairoFontOptions::merge",
						"merge",
						"::merge"
					],
					"id": "cairofontoptions.merge",
					"name": "CairoFontOptions::merge",
					"description": "The merge purpose"
				},
				"cairofontoptions.setantialias": {
					"tokens": [
						"CairoFontOptions::setAntialias",
						"setAntialias",
						"::setAntialias"
					],
					"id": "cairofontoptions.setantialias",
					"name": "CairoFontOptions::setAntialias",
					"description": "The setAntialias purpose"
				},
				"cairofontoptions.sethintmetrics": {
					"tokens": [
						"CairoFontOptions::setHintMetrics",
						"setHintMetrics",
						"::setHintMetrics"
					],
					"id": "cairofontoptions.sethintmetrics",
					"name": "CairoFontOptions::setHintMetrics",
					"description": "The setHintMetrics purpose"
				},
				"cairofontoptions.sethintstyle": {
					"tokens": [
						"CairoFontOptions::setHintStyle",
						"setHintStyle",
						"::setHintStyle"
					],
					"id": "cairofontoptions.sethintstyle",
					"name": "CairoFontOptions::setHintStyle",
					"description": "The setHintStyle purpose"
				},
				"cairofontoptions.setsubpixelorder": {
					"tokens": [
						"CairoFontOptions::setSubpixelOrder",
						"setSubpixelOrder",
						"::setSubpixelOrder"
					],
					"id": "cairofontoptions.setsubpixelorder",
					"name": "CairoFontOptions::setSubpixelOrder",
					"description": "The setSubpixelOrder purpose"
				},
				"cairofontoptions.status": {
					"tokens": [
						"CairoFontOptions::status",
						"status",
						"::status"
					],
					"id": "cairofontoptions.status",
					"name": "CairoFontOptions::status",
					"description": "The status purpose"
				},
				"cairoscaledfont.construct": {
					"tokens": [
						"CairoScaledFont::__construct",
						"CairoScaledFont::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairoscaledfont.construct",
					"name": "CairoScaledFont::__construct",
					"description": "The __construct purpose"
				},
				"cairoscaledfont.extents": {
					"tokens": [
						"CairoScaledFont::extents",
						"extents",
						"::extents"
					],
					"id": "cairoscaledfont.extents",
					"name": "CairoScaledFont::extents",
					"description": "The extents purpose"
				},
				"cairoscaledfont.getctm": {
					"tokens": [
						"CairoScaledFont::getCtm",
						"getCtm",
						"::getCtm"
					],
					"id": "cairoscaledfont.getctm",
					"name": "CairoScaledFont::getCtm",
					"description": "The getCtm purpose"
				},
				"cairoscaledfont.getfontface": {
					"tokens": [
						"CairoScaledFont::getFontFace",
						"getFontFace",
						"::getFontFace"
					],
					"id": "cairoscaledfont.getfontface",
					"name": "CairoScaledFont::getFontFace",
					"description": "The getFontFace purpose"
				},
				"cairoscaledfont.getfontmatrix": {
					"tokens": [
						"CairoScaledFont::getFontMatrix",
						"getFontMatrix",
						"::getFontMatrix"
					],
					"id": "cairoscaledfont.getfontmatrix",
					"name": "CairoScaledFont::getFontMatrix",
					"description": "The getFontMatrix purpose"
				},
				"cairoscaledfont.getfontoptions": {
					"tokens": [
						"CairoScaledFont::getFontOptions",
						"getFontOptions",
						"::getFontOptions"
					],
					"id": "cairoscaledfont.getfontoptions",
					"name": "CairoScaledFont::getFontOptions",
					"description": "The getFontOptions purpose"
				},
				"cairoscaledfont.getscalematrix": {
					"tokens": [
						"CairoScaledFont::getScaleMatrix",
						"getScaleMatrix",
						"::getScaleMatrix"
					],
					"id": "cairoscaledfont.getscalematrix",
					"name": "CairoScaledFont::getScaleMatrix",
					"description": "The getScaleMatrix purpose"
				},
				"cairoscaledfont.gettype": {
					"tokens": [
						"CairoScaledFont::getType",
						"getType",
						"::getType"
					],
					"id": "cairoscaledfont.gettype",
					"name": "CairoScaledFont::getType",
					"description": "The getType purpose"
				},
				"cairoscaledfont.glyphextents": {
					"tokens": [
						"CairoScaledFont::glyphExtents",
						"glyphExtents",
						"::glyphExtents"
					],
					"id": "cairoscaledfont.glyphextents",
					"name": "CairoScaledFont::glyphExtents",
					"description": "The glyphExtents purpose"
				},
				"cairoscaledfont.status": {
					"tokens": [
						"CairoScaledFont::status",
						"status",
						"::status"
					],
					"id": "cairoscaledfont.status",
					"name": "CairoScaledFont::status",
					"description": "The status purpose"
				},
				"cairoscaledfont.textextents": {
					"tokens": [
						"CairoScaledFont::textExtents",
						"textExtents",
						"::textExtents"
					],
					"id": "cairoscaledfont.textextents",
					"name": "CairoScaledFont::textExtents",
					"description": "The textExtents purpose"
				},
				"cairopattern.construct": {
					"tokens": [
						"CairoPattern::__construct",
						"CairoPattern::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairopattern.construct",
					"name": "CairoPattern::__construct",
					"description": "The __construct purpose"
				},
				"cairopattern.getmatrix": {
					"tokens": [
						"CairoPattern::getMatrix",
						"getMatrix",
						"::getMatrix"
					],
					"id": "cairopattern.getmatrix",
					"name": "CairoPattern::getMatrix",
					"description": "The getMatrix purpose"
				},
				"cairopattern.gettype": {
					"tokens": [
						"CairoPattern::getType",
						"getType",
						"::getType"
					],
					"id": "cairopattern.gettype",
					"name": "CairoPattern::getType",
					"description": "The getType purpose"
				},
				"cairopattern.setmatrix": {
					"tokens": [
						"CairoPattern::setMatrix",
						"setMatrix",
						"::setMatrix"
					],
					"id": "cairopattern.setmatrix",
					"name": "CairoPattern::setMatrix",
					"description": "The setMatrix purpose"
				},
				"cairopattern.status": {
					"tokens": [
						"CairoPattern::status",
						"status",
						"::status"
					],
					"id": "cairopattern.status",
					"name": "CairoPattern::status",
					"description": "The status purpose"
				},
				"cairogradientpattern.addcolorstoprgb": {
					"tokens": [
						"CairoGradientPattern::addColorStopRgb",
						"addColorStopRgb",
						"::addColorStopRgb"
					],
					"id": "cairogradientpattern.addcolorstoprgb",
					"name": "CairoGradientPattern::addColorStopRgb",
					"description": "The addColorStopRgb purpose"
				},
				"cairogradientpattern.addcolorstoprgba": {
					"tokens": [
						"CairoGradientPattern::addColorStopRgba",
						"addColorStopRgba",
						"::addColorStopRgba"
					],
					"id": "cairogradientpattern.addcolorstoprgba",
					"name": "CairoGradientPattern::addColorStopRgba",
					"description": "The addColorStopRgba purpose"
				},
				"cairogradientpattern.getcolorstopcount": {
					"tokens": [
						"CairoGradientPattern::getColorStopCount",
						"getColorStopCount",
						"::getColorStopCount"
					],
					"id": "cairogradientpattern.getcolorstopcount",
					"name": "CairoGradientPattern::getColorStopCount",
					"description": "The getColorStopCount purpose"
				},
				"cairogradientpattern.getcolorstoprgba": {
					"tokens": [
						"CairoGradientPattern::getColorStopRgba",
						"getColorStopRgba",
						"::getColorStopRgba"
					],
					"id": "cairogradientpattern.getcolorstoprgba",
					"name": "CairoGradientPattern::getColorStopRgba",
					"description": "The getColorStopRgba purpose"
				},
				"cairogradientpattern.getextend": {
					"tokens": [
						"CairoGradientPattern::getExtend",
						"getExtend",
						"::getExtend"
					],
					"id": "cairogradientpattern.getextend",
					"name": "CairoGradientPattern::getExtend",
					"description": "The getExtend purpose"
				},
				"cairogradientpattern.setextend": {
					"tokens": [
						"CairoGradientPattern::setExtend",
						"setExtend",
						"::setExtend"
					],
					"id": "cairogradientpattern.setextend",
					"name": "CairoGradientPattern::setExtend",
					"description": "The setExtend purpose"
				},
				"cairosolidpattern.construct": {
					"tokens": [
						"CairoSolidPattern::__construct",
						"CairoSolidPattern::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairosolidpattern.construct",
					"name": "CairoSolidPattern::__construct",
					"description": "The __construct purpose"
				},
				"cairosolidpattern.getrgba": {
					"tokens": [
						"CairoSolidPattern::getRgba",
						"getRgba",
						"::getRgba"
					],
					"id": "cairosolidpattern.getrgba",
					"name": "CairoSolidPattern::getRgba",
					"description": "The getRgba purpose"
				},
				"cairosurfacepattern.construct": {
					"tokens": [
						"CairoSurfacePattern::__construct",
						"CairoSurfacePattern::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairosurfacepattern.construct",
					"name": "CairoSurfacePattern::__construct",
					"description": "The __construct purpose"
				},
				"cairosurfacepattern.getextend": {
					"tokens": [
						"CairoSurfacePattern::getExtend",
						"getExtend",
						"::getExtend"
					],
					"id": "cairosurfacepattern.getextend",
					"name": "CairoSurfacePattern::getExtend",
					"description": "The getExtend purpose"
				},
				"cairosurfacepattern.getfilter": {
					"tokens": [
						"CairoSurfacePattern::getFilter",
						"getFilter",
						"::getFilter"
					],
					"id": "cairosurfacepattern.getfilter",
					"name": "CairoSurfacePattern::getFilter",
					"description": "The getFilter purpose"
				},
				"cairosurfacepattern.getsurface": {
					"tokens": [
						"CairoSurfacePattern::getSurface",
						"getSurface",
						"::getSurface"
					],
					"id": "cairosurfacepattern.getsurface",
					"name": "CairoSurfacePattern::getSurface",
					"description": "The getSurface purpose"
				},
				"cairosurfacepattern.setextend": {
					"tokens": [
						"CairoSurfacePattern::setExtend",
						"setExtend",
						"::setExtend"
					],
					"id": "cairosurfacepattern.setextend",
					"name": "CairoSurfacePattern::setExtend",
					"description": "The setExtend purpose"
				},
				"cairosurfacepattern.setfilter": {
					"tokens": [
						"CairoSurfacePattern::setFilter",
						"setFilter",
						"::setFilter"
					],
					"id": "cairosurfacepattern.setfilter",
					"name": "CairoSurfacePattern::setFilter",
					"description": "The setFilter purpose"
				},
				"cairolineargradient.construct": {
					"tokens": [
						"CairoLinearGradient::__construct",
						"CairoLinearGradient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairolineargradient.construct",
					"name": "CairoLinearGradient::__construct",
					"description": "The __construct purpose"
				},
				"cairolineargradient.getpoints": {
					"tokens": [
						"CairoLinearGradient::getPoints",
						"getPoints",
						"::getPoints"
					],
					"id": "cairolineargradient.getpoints",
					"name": "CairoLinearGradient::getPoints",
					"description": "The getPoints purpose"
				},
				"cairoradialgradient.construct": {
					"tokens": [
						"CairoRadialGradient::__construct",
						"CairoRadialGradient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairoradialgradient.construct",
					"name": "CairoRadialGradient::__construct",
					"description": "The __construct purpose"
				},
				"cairoradialgradient.getcircles": {
					"tokens": [
						"CairoRadialGradient::getCircles",
						"getCircles",
						"::getCircles"
					],
					"id": "cairoradialgradient.getcircles",
					"name": "CairoRadialGradient::getCircles",
					"description": "The getCircles purpose"
				},
				"cairoformat.strideforwidth": {
					"tokens": [
						"CairoFormat::strideForWidth",
						"strideForWidth",
						"::strideForWidth"
					],
					"id": "cairoformat.strideforwidth",
					"name": "CairoFormat::strideForWidth",
					"description": "Provides an appropiate stride to use"
				},
				"cairomatrix.construct": {
					"tokens": [
						"CairoMatrix::__construct",
						"CairoMatrix::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cairomatrix.construct",
					"name": "CairoMatrix::__construct",
					"description": "Creates a new CairoMatrix object"
				},
				"cairomatrix.initidentity": {
					"tokens": [
						"CairoMatrix::initIdentity",
						"initIdentity",
						"::initIdentity"
					],
					"id": "cairomatrix.initidentity",
					"name": "CairoMatrix::initIdentity",
					"description": "Creates a new identity matrix"
				},
				"cairomatrix.initrotate": {
					"tokens": [
						"CairoMatrix::initRotate",
						"initRotate",
						"::initRotate"
					],
					"id": "cairomatrix.initrotate",
					"name": "CairoMatrix::initRotate",
					"description": "Creates a new rotated matrix"
				},
				"cairomatrix.initscale": {
					"tokens": [
						"CairoMatrix::initScale",
						"initScale",
						"::initScale"
					],
					"id": "cairomatrix.initscale",
					"name": "CairoMatrix::initScale",
					"description": "Creates a new scaling matrix"
				},
				"cairomatrix.inittranslate": {
					"tokens": [
						"CairoMatrix::initTranslate",
						"initTranslate",
						"::initTranslate"
					],
					"id": "cairomatrix.inittranslate",
					"name": "CairoMatrix::initTranslate",
					"description": "Creates a new translation matrix"
				},
				"cairomatrix.invert": {
					"tokens": [
						"CairoMatrix::invert",
						"invert",
						"::invert"
					],
					"id": "cairomatrix.invert",
					"name": "CairoMatrix::invert",
					"description": "The invert purpose"
				},
				"cairomatrix.multiply": {
					"tokens": [
						"CairoMatrix::multiply",
						"multiply",
						"::multiply"
					],
					"id": "cairomatrix.multiply",
					"name": "CairoMatrix::multiply",
					"description": "The multiply purpose"
				},
				"cairomatrix.rotate": {
					"tokens": [
						"CairoMatrix::rotate",
						"rotate",
						"::rotate"
					],
					"id": "cairomatrix.rotate",
					"name": "CairoMatrix::rotate",
					"description": "The rotate purpose"
				},
				"cairomatrix.scale": {
					"tokens": [
						"CairoMatrix::scale",
						"scale",
						"::scale"
					],
					"id": "cairomatrix.scale",
					"name": "CairoMatrix::scale",
					"description": "Applies scaling to a matrix"
				},
				"cairomatrix.transformdistance": {
					"tokens": [
						"CairoMatrix::transformDistance",
						"transformDistance",
						"::transformDistance"
					],
					"id": "cairomatrix.transformdistance",
					"name": "CairoMatrix::transformDistance",
					"description": "The transformDistance purpose"
				},
				"cairomatrix.transformpoint": {
					"tokens": [
						"CairoMatrix::transformPoint",
						"transformPoint",
						"::transformPoint"
					],
					"id": "cairomatrix.transformpoint",
					"name": "CairoMatrix::transformPoint",
					"description": "The transformPoint purpose"
				},
				"cairomatrix.translate": {
					"tokens": [
						"CairoMatrix::translate",
						"translate",
						"::translate"
					],
					"id": "cairomatrix.translate",
					"name": "CairoMatrix::translate",
					"description": "The translate purpose"
				},
				"function.exif-imagetype": {
					"tokens": [
						"exif_imagetype",
						"exifimagetype"
					],
					"id": "function.exif-imagetype",
					"name": "exif_imagetype",
					"description": "Determine the type of an image"
				},
				"function.exif-read-data": {
					"tokens": [
						"exif_read_data",
						"exifread_data"
					],
					"id": "function.exif-read-data",
					"name": "exif_read_data",
					"description": "Reads the EXIF headers from JPEG or TIFF"
				},
				"function.exif-tagname": {
					"tokens": [
						"exif_tagname",
						"exiftagname"
					],
					"id": "function.exif-tagname",
					"name": "exif_tagname",
					"description": "Get the header name for an index"
				},
				"function.exif-thumbnail": {
					"tokens": [
						"exif_thumbnail",
						"exifthumbnail"
					],
					"id": "function.exif-thumbnail",
					"name": "exif_thumbnail",
					"description": "Retrieve the embedded thumbnail of a TIFF or JPEG image"
				},
				"function.read-exif-data": {
					"tokens": [
						"read_exif_data",
						"readexif_data"
					],
					"id": "function.read-exif-data",
					"name": "read_exif_data",
					"description": "Alias of exif_read_data"
				},
				"function.gd-info": {
					"tokens": [
						"gd_info",
						"gdinfo"
					],
					"id": "function.gd-info",
					"name": "gd_info",
					"description": "Retrieve information about the currently installed GD library"
				},
				"function.getimagesize": {
					"tokens": [
						"getimagesize"
					],
					"id": "function.getimagesize",
					"name": "getimagesize",
					"description": "Get the size of an image"
				},
				"function.getimagesizefromstring": {
					"tokens": [
						"getimagesizefromstring"
					],
					"id": "function.getimagesizefromstring",
					"name": "getimagesizefromstring",
					"description": "Get the size of an image from a string"
				},
				"function.image-type-to-extension": {
					"tokens": [
						"image_type_to_extension",
						"imagetype_to_extension"
					],
					"id": "function.image-type-to-extension",
					"name": "image_type_to_extension",
					"description": "Get file extension for image type"
				},
				"function.image-type-to-mime-type": {
					"tokens": [
						"image_type_to_mime_type",
						"imagetype_to_mime_type"
					],
					"id": "function.image-type-to-mime-type",
					"name": "image_type_to_mime_type",
					"description": "Get Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype"
				},
				"function.image2wbmp": {
					"tokens": [
						"image2wbmp"
					],
					"id": "function.image2wbmp",
					"name": "image2wbmp",
					"description": "Output image to browser or file"
				},
				"function.imageaffine": {
					"tokens": [
						"imageaffine"
					],
					"id": "function.imageaffine",
					"name": "imageaffine",
					"description": "Return an image containing the affine transformed src image, using an optional clipping area"
				},
				"function.imageaffinematrixconcat": {
					"tokens": [
						"imageaffinematrixconcat"
					],
					"id": "function.imageaffinematrixconcat",
					"name": "imageaffinematrixconcat",
					"description": "Concatenate two affine transformation matrices"
				},
				"function.imageaffinematrixget": {
					"tokens": [
						"imageaffinematrixget"
					],
					"id": "function.imageaffinematrixget",
					"name": "imageaffinematrixget",
					"description": "Get an affine transformation matrix"
				},
				"function.imagealphablending": {
					"tokens": [
						"imagealphablending"
					],
					"id": "function.imagealphablending",
					"name": "imagealphablending",
					"description": "Set the blending mode for an image"
				},
				"function.imageantialias": {
					"tokens": [
						"imageantialias"
					],
					"id": "function.imageantialias",
					"name": "imageantialias",
					"description": "Should antialias functions be used or not"
				},
				"function.imagearc": {
					"tokens": [
						"imagearc"
					],
					"id": "function.imagearc",
					"name": "imagearc",
					"description": "Draws an arc"
				},
				"function.imagechar": {
					"tokens": [
						"imagechar"
					],
					"id": "function.imagechar",
					"name": "imagechar",
					"description": "Draw a character horizontally"
				},
				"function.imagecharup": {
					"tokens": [
						"imagecharup"
					],
					"id": "function.imagecharup",
					"name": "imagecharup",
					"description": "Draw a character vertically"
				},
				"function.imagecolorallocate": {
					"tokens": [
						"imagecolorallocate"
					],
					"id": "function.imagecolorallocate",
					"name": "imagecolorallocate",
					"description": "Allocate a color for an image"
				},
				"function.imagecolorallocatealpha": {
					"tokens": [
						"imagecolorallocatealpha"
					],
					"id": "function.imagecolorallocatealpha",
					"name": "imagecolorallocatealpha",
					"description": "Allocate a color for an image"
				},
				"function.imagecolorat": {
					"tokens": [
						"imagecolorat"
					],
					"id": "function.imagecolorat",
					"name": "imagecolorat",
					"description": "Get the index of the color of a pixel"
				},
				"function.imagecolorclosest": {
					"tokens": [
						"imagecolorclosest"
					],
					"id": "function.imagecolorclosest",
					"name": "imagecolorclosest",
					"description": "Get the index of the closest color to the specified color"
				},
				"function.imagecolorclosestalpha": {
					"tokens": [
						"imagecolorclosestalpha"
					],
					"id": "function.imagecolorclosestalpha",
					"name": "imagecolorclosestalpha",
					"description": "Get the index of the closest color to the specified color + alpha"
				},
				"function.imagecolorclosesthwb": {
					"tokens": [
						"imagecolorclosesthwb"
					],
					"id": "function.imagecolorclosesthwb",
					"name": "imagecolorclosesthwb",
					"description": "Get the index of the color which has the hue, white and blackness"
				},
				"function.imagecolordeallocate": {
					"tokens": [
						"imagecolordeallocate"
					],
					"id": "function.imagecolordeallocate",
					"name": "imagecolordeallocate",
					"description": "De-allocate a color for an image"
				},
				"function.imagecolorexact": {
					"tokens": [
						"imagecolorexact"
					],
					"id": "function.imagecolorexact",
					"name": "imagecolorexact",
					"description": "Get the index of the specified color"
				},
				"function.imagecolorexactalpha": {
					"tokens": [
						"imagecolorexactalpha"
					],
					"id": "function.imagecolorexactalpha",
					"name": "imagecolorexactalpha",
					"description": "Get the index of the specified color + alpha"
				},
				"function.imagecolormatch": {
					"tokens": [
						"imagecolormatch"
					],
					"id": "function.imagecolormatch",
					"name": "imagecolormatch",
					"description": "Makes the colors of the palette version of an image more closely match the true color version"
				},
				"function.imagecolorresolve": {
					"tokens": [
						"imagecolorresolve"
					],
					"id": "function.imagecolorresolve",
					"name": "imagecolorresolve",
					"description": "Get the index of the specified color or its closest possible alternative"
				},
				"function.imagecolorresolvealpha": {
					"tokens": [
						"imagecolorresolvealpha"
					],
					"id": "function.imagecolorresolvealpha",
					"name": "imagecolorresolvealpha",
					"description": "Get the index of the specified color + alpha or its closest possible alternative"
				},
				"function.imagecolorset": {
					"tokens": [
						"imagecolorset"
					],
					"id": "function.imagecolorset",
					"name": "imagecolorset",
					"description": "Set the color for the specified palette index"
				},
				"function.imagecolorsforindex": {
					"tokens": [
						"imagecolorsforindex"
					],
					"id": "function.imagecolorsforindex",
					"name": "imagecolorsforindex",
					"description": "Get the colors for an index"
				},
				"function.imagecolorstotal": {
					"tokens": [
						"imagecolorstotal"
					],
					"id": "function.imagecolorstotal",
					"name": "imagecolorstotal",
					"description": "Find out the number of colors in an image's palette"
				},
				"function.imagecolortransparent": {
					"tokens": [
						"imagecolortransparent"
					],
					"id": "function.imagecolortransparent",
					"name": "imagecolortransparent",
					"description": "Define a color as transparent"
				},
				"function.imageconvolution": {
					"tokens": [
						"imageconvolution"
					],
					"id": "function.imageconvolution",
					"name": "imageconvolution",
					"description": "Apply a 3x3 convolution matrix, using coefficient and offset"
				},
				"function.imagecopy": {
					"tokens": [
						"imagecopy"
					],
					"id": "function.imagecopy",
					"name": "imagecopy",
					"description": "Copy part of an image"
				},
				"function.imagecopymerge": {
					"tokens": [
						"imagecopymerge"
					],
					"id": "function.imagecopymerge",
					"name": "imagecopymerge",
					"description": "Copy and merge part of an image"
				},
				"function.imagecopymergegray": {
					"tokens": [
						"imagecopymergegray"
					],
					"id": "function.imagecopymergegray",
					"name": "imagecopymergegray",
					"description": "Copy and merge part of an image with gray scale"
				},
				"function.imagecopyresampled": {
					"tokens": [
						"imagecopyresampled"
					],
					"id": "function.imagecopyresampled",
					"name": "imagecopyresampled",
					"description": "Copy and resize part of an image with resampling"
				},
				"function.imagecopyresized": {
					"tokens": [
						"imagecopyresized"
					],
					"id": "function.imagecopyresized",
					"name": "imagecopyresized",
					"description": "Copy and resize part of an image"
				},
				"function.imagecreate": {
					"tokens": [
						"imagecreate"
					],
					"id": "function.imagecreate",
					"name": "imagecreate",
					"description": "Create a new palette based image"
				},
				"function.imagecreatefromgd2": {
					"tokens": [
						"imagecreatefromgd2"
					],
					"id": "function.imagecreatefromgd2",
					"name": "imagecreatefromgd2",
					"description": "Create a new image from GD2 file or URL"
				},
				"function.imagecreatefromgd2part": {
					"tokens": [
						"imagecreatefromgd2part"
					],
					"id": "function.imagecreatefromgd2part",
					"name": "imagecreatefromgd2part",
					"description": "Create a new image from a given part of GD2 file or URL"
				},
				"function.imagecreatefromgd": {
					"tokens": [
						"imagecreatefromgd"
					],
					"id": "function.imagecreatefromgd",
					"name": "imagecreatefromgd",
					"description": "Create a new image from GD file or URL"
				},
				"function.imagecreatefromgif": {
					"tokens": [
						"imagecreatefromgif"
					],
					"id": "function.imagecreatefromgif",
					"name": "imagecreatefromgif",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatefromjpeg": {
					"tokens": [
						"imagecreatefromjpeg"
					],
					"id": "function.imagecreatefromjpeg",
					"name": "imagecreatefromjpeg",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatefrompng": {
					"tokens": [
						"imagecreatefrompng"
					],
					"id": "function.imagecreatefrompng",
					"name": "imagecreatefrompng",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatefromstring": {
					"tokens": [
						"imagecreatefromstring"
					],
					"id": "function.imagecreatefromstring",
					"name": "imagecreatefromstring",
					"description": "Create a new image from the image stream in the string"
				},
				"function.imagecreatefromwbmp": {
					"tokens": [
						"imagecreatefromwbmp"
					],
					"id": "function.imagecreatefromwbmp",
					"name": "imagecreatefromwbmp",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatefromwebp": {
					"tokens": [
						"imagecreatefromwebp"
					],
					"id": "function.imagecreatefromwebp",
					"name": "imagecreatefromwebp",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatefromxbm": {
					"tokens": [
						"imagecreatefromxbm"
					],
					"id": "function.imagecreatefromxbm",
					"name": "imagecreatefromxbm",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatefromxpm": {
					"tokens": [
						"imagecreatefromxpm"
					],
					"id": "function.imagecreatefromxpm",
					"name": "imagecreatefromxpm",
					"description": "Create a new image from file or URL"
				},
				"function.imagecreatetruecolor": {
					"tokens": [
						"imagecreatetruecolor"
					],
					"id": "function.imagecreatetruecolor",
					"name": "imagecreatetruecolor",
					"description": "Create a new true color image"
				},
				"function.imagecrop": {
					"tokens": [
						"imagecrop"
					],
					"id": "function.imagecrop",
					"name": "imagecrop",
					"description": "Crop an image using the given coordinates and size, x, y, width and height"
				},
				"function.imagecropauto": {
					"tokens": [
						"imagecropauto"
					],
					"id": "function.imagecropauto",
					"name": "imagecropauto",
					"description": "Crop an image automatically using one of the available modes"
				},
				"function.imagedashedline": {
					"tokens": [
						"imagedashedline"
					],
					"id": "function.imagedashedline",
					"name": "imagedashedline",
					"description": "Draw a dashed line"
				},
				"function.imagedestroy": {
					"tokens": [
						"imagedestroy"
					],
					"id": "function.imagedestroy",
					"name": "imagedestroy",
					"description": "Destroy an image"
				},
				"function.imageellipse": {
					"tokens": [
						"imageellipse"
					],
					"id": "function.imageellipse",
					"name": "imageellipse",
					"description": "Draw an ellipse"
				},
				"function.imagefill": {
					"tokens": [
						"imagefill"
					],
					"id": "function.imagefill",
					"name": "imagefill",
					"description": "Flood fill"
				},
				"function.imagefilledarc": {
					"tokens": [
						"imagefilledarc"
					],
					"id": "function.imagefilledarc",
					"name": "imagefilledarc",
					"description": "Draw a partial arc and fill it"
				},
				"function.imagefilledellipse": {
					"tokens": [
						"imagefilledellipse"
					],
					"id": "function.imagefilledellipse",
					"name": "imagefilledellipse",
					"description": "Draw a filled ellipse"
				},
				"function.imagefilledpolygon": {
					"tokens": [
						"imagefilledpolygon"
					],
					"id": "function.imagefilledpolygon",
					"name": "imagefilledpolygon",
					"description": "Draw a filled polygon"
				},
				"function.imagefilledrectangle": {
					"tokens": [
						"imagefilledrectangle"
					],
					"id": "function.imagefilledrectangle",
					"name": "imagefilledrectangle",
					"description": "Draw a filled rectangle"
				},
				"function.imagefilltoborder": {
					"tokens": [
						"imagefilltoborder"
					],
					"id": "function.imagefilltoborder",
					"name": "imagefilltoborder",
					"description": "Flood fill to specific color"
				},
				"function.imagefilter": {
					"tokens": [
						"imagefilter"
					],
					"id": "function.imagefilter",
					"name": "imagefilter",
					"description": "Applies a filter to an image"
				},
				"function.imageflip": {
					"tokens": [
						"imageflip"
					],
					"id": "function.imageflip",
					"name": "imageflip",
					"description": "Flips an image using a given mode"
				},
				"function.imagefontheight": {
					"tokens": [
						"imagefontheight"
					],
					"id": "function.imagefontheight",
					"name": "imagefontheight",
					"description": "Get font height"
				},
				"function.imagefontwidth": {
					"tokens": [
						"imagefontwidth"
					],
					"id": "function.imagefontwidth",
					"name": "imagefontwidth",
					"description": "Get font width"
				},
				"function.imageftbbox": {
					"tokens": [
						"imageftbbox"
					],
					"id": "function.imageftbbox",
					"name": "imageftbbox",
					"description": "Give the bounding box of a text using fonts via freetype2"
				},
				"function.imagefttext": {
					"tokens": [
						"imagefttext"
					],
					"id": "function.imagefttext",
					"name": "imagefttext",
					"description": "Write text to the image using fonts using FreeType 2"
				},
				"function.imagegammacorrect": {
					"tokens": [
						"imagegammacorrect"
					],
					"id": "function.imagegammacorrect",
					"name": "imagegammacorrect",
					"description": "Apply a gamma correction to a GD image"
				},
				"function.imagegd2": {
					"tokens": [
						"imagegd2"
					],
					"id": "function.imagegd2",
					"name": "imagegd2",
					"description": "Output GD2 image to browser or file"
				},
				"function.imagegd": {
					"tokens": [
						"imagegd"
					],
					"id": "function.imagegd",
					"name": "imagegd",
					"description": "Output GD image to browser or file"
				},
				"function.imagegif": {
					"tokens": [
						"imagegif"
					],
					"id": "function.imagegif",
					"name": "imagegif",
					"description": "Output image to browser or file"
				},
				"function.imagegrabscreen": {
					"tokens": [
						"imagegrabscreen"
					],
					"id": "function.imagegrabscreen",
					"name": "imagegrabscreen",
					"description": "Captures the whole screen"
				},
				"function.imagegrabwindow": {
					"tokens": [
						"imagegrabwindow"
					],
					"id": "function.imagegrabwindow",
					"name": "imagegrabwindow",
					"description": "Captures a window"
				},
				"function.imageinterlace": {
					"tokens": [
						"imageinterlace"
					],
					"id": "function.imageinterlace",
					"name": "imageinterlace",
					"description": "Enable or disable interlace"
				},
				"function.imageistruecolor": {
					"tokens": [
						"imageistruecolor"
					],
					"id": "function.imageistruecolor",
					"name": "imageistruecolor",
					"description": "Finds whether an image is a truecolor image"
				},
				"function.imagejpeg": {
					"tokens": [
						"imagejpeg"
					],
					"id": "function.imagejpeg",
					"name": "imagejpeg",
					"description": "Output image to browser or file"
				},
				"function.imagelayereffect": {
					"tokens": [
						"imagelayereffect"
					],
					"id": "function.imagelayereffect",
					"name": "imagelayereffect",
					"description": "Set the alpha blending flag to use the bundled libgd layering effects"
				},
				"function.imageline": {
					"tokens": [
						"imageline"
					],
					"id": "function.imageline",
					"name": "imageline",
					"description": "Draw a line"
				},
				"function.imageloadfont": {
					"tokens": [
						"imageloadfont"
					],
					"id": "function.imageloadfont",
					"name": "imageloadfont",
					"description": "Load a new font"
				},
				"function.imagepalettecopy": {
					"tokens": [
						"imagepalettecopy"
					],
					"id": "function.imagepalettecopy",
					"name": "imagepalettecopy",
					"description": "Copy the palette from one image to another"
				},
				"function.imagepalettetotruecolor": {
					"tokens": [
						"imagepalettetotruecolor"
					],
					"id": "function.imagepalettetotruecolor",
					"name": "imagepalettetotruecolor",
					"description": "Converts a palette based image to true color"
				},
				"function.imagepng": {
					"tokens": [
						"imagepng"
					],
					"id": "function.imagepng",
					"name": "imagepng",
					"description": "Output a PNG image to either the browser or a file"
				},
				"function.imagepolygon": {
					"tokens": [
						"imagepolygon"
					],
					"id": "function.imagepolygon",
					"name": "imagepolygon",
					"description": "Draws a polygon"
				},
				"function.imagepsbbox": {
					"tokens": [
						"imagepsbbox"
					],
					"id": "function.imagepsbbox",
					"name": "imagepsbbox",
					"description": "Give the bounding box of a text rectangle using PostScript Type1 fonts"
				},
				"function.imagepsencodefont": {
					"tokens": [
						"imagepsencodefont"
					],
					"id": "function.imagepsencodefont",
					"name": "imagepsencodefont",
					"description": "Change the character encoding vector of a font"
				},
				"function.imagepsextendfont": {
					"tokens": [
						"imagepsextendfont"
					],
					"id": "function.imagepsextendfont",
					"name": "imagepsextendfont",
					"description": "Extend or condense a font"
				},
				"function.imagepsfreefont": {
					"tokens": [
						"imagepsfreefont"
					],
					"id": "function.imagepsfreefont",
					"name": "imagepsfreefont",
					"description": "Free memory used by a PostScript Type 1 font"
				},
				"function.imagepsloadfont": {
					"tokens": [
						"imagepsloadfont"
					],
					"id": "function.imagepsloadfont",
					"name": "imagepsloadfont",
					"description": "Load a PostScript Type 1 font from file"
				},
				"function.imagepsslantfont": {
					"tokens": [
						"imagepsslantfont"
					],
					"id": "function.imagepsslantfont",
					"name": "imagepsslantfont",
					"description": "Slant a font"
				},
				"function.imagepstext": {
					"tokens": [
						"imagepstext"
					],
					"id": "function.imagepstext",
					"name": "imagepstext",
					"description": "Draws a text over an image using PostScript Type1 fonts"
				},
				"function.imagerectangle": {
					"tokens": [
						"imagerectangle"
					],
					"id": "function.imagerectangle",
					"name": "imagerectangle",
					"description": "Draw a rectangle"
				},
				"function.imagerotate": {
					"tokens": [
						"imagerotate"
					],
					"id": "function.imagerotate",
					"name": "imagerotate",
					"description": "Rotate an image with a given angle"
				},
				"function.imagesavealpha": {
					"tokens": [
						"imagesavealpha"
					],
					"id": "function.imagesavealpha",
					"name": "imagesavealpha",
					"description": "Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images"
				},
				"function.imagescale": {
					"tokens": [
						"imagescale"
					],
					"id": "function.imagescale",
					"name": "imagescale",
					"description": "Scale an image using the given new width and height"
				},
				"function.imagesetbrush": {
					"tokens": [
						"imagesetbrush"
					],
					"id": "function.imagesetbrush",
					"name": "imagesetbrush",
					"description": "Set the brush image for line drawing"
				},
				"function.imagesetinterpolation": {
					"tokens": [
						"imagesetinterpolation"
					],
					"id": "function.imagesetinterpolation",
					"name": "imagesetinterpolation",
					"description": "Set the interpolation method"
				},
				"function.imagesetpixel": {
					"tokens": [
						"imagesetpixel"
					],
					"id": "function.imagesetpixel",
					"name": "imagesetpixel",
					"description": "Set a single pixel"
				},
				"function.imagesetstyle": {
					"tokens": [
						"imagesetstyle"
					],
					"id": "function.imagesetstyle",
					"name": "imagesetstyle",
					"description": "Set the style for line drawing"
				},
				"function.imagesetthickness": {
					"tokens": [
						"imagesetthickness"
					],
					"id": "function.imagesetthickness",
					"name": "imagesetthickness",
					"description": "Set the thickness for line drawing"
				},
				"function.imagesettile": {
					"tokens": [
						"imagesettile"
					],
					"id": "function.imagesettile",
					"name": "imagesettile",
					"description": "Set the tile image for filling"
				},
				"function.imagestring": {
					"tokens": [
						"imagestring"
					],
					"id": "function.imagestring",
					"name": "imagestring",
					"description": "Draw a string horizontally"
				},
				"function.imagestringup": {
					"tokens": [
						"imagestringup"
					],
					"id": "function.imagestringup",
					"name": "imagestringup",
					"description": "Draw a string vertically"
				},
				"function.imagesx": {
					"tokens": [
						"imagesx"
					],
					"id": "function.imagesx",
					"name": "imagesx",
					"description": "Get image width"
				},
				"function.imagesy": {
					"tokens": [
						"imagesy"
					],
					"id": "function.imagesy",
					"name": "imagesy",
					"description": "Get image height"
				},
				"function.imagetruecolortopalette": {
					"tokens": [
						"imagetruecolortopalette"
					],
					"id": "function.imagetruecolortopalette",
					"name": "imagetruecolortopalette",
					"description": "Convert a true color image to a palette image"
				},
				"function.imagettfbbox": {
					"tokens": [
						"imagettfbbox"
					],
					"id": "function.imagettfbbox",
					"name": "imagettfbbox",
					"description": "Give the bounding box of a text using TrueType fonts"
				},
				"function.imagettftext": {
					"tokens": [
						"imagettftext"
					],
					"id": "function.imagettftext",
					"name": "imagettftext",
					"description": "Write text to the image using TrueType fonts"
				},
				"function.imagetypes": {
					"tokens": [
						"imagetypes"
					],
					"id": "function.imagetypes",
					"name": "imagetypes",
					"description": "Return the image types supported by this PHP build"
				},
				"function.imagewbmp": {
					"tokens": [
						"imagewbmp"
					],
					"id": "function.imagewbmp",
					"name": "imagewbmp",
					"description": "Output image to browser or file"
				},
				"function.imagewebp": {
					"tokens": [
						"imagewebp"
					],
					"id": "function.imagewebp",
					"name": "imagewebp",
					"description": "Output a WebP image to browser or file"
				},
				"function.imagexbm": {
					"tokens": [
						"imagexbm"
					],
					"id": "function.imagexbm",
					"name": "imagexbm",
					"description": "Output an XBM image to browser or file"
				},
				"function.iptcembed": {
					"tokens": [
						"iptcembed"
					],
					"id": "function.iptcembed",
					"name": "iptcembed",
					"description": "Embeds binary IPTC data into a JPEG image"
				},
				"function.iptcparse": {
					"tokens": [
						"iptcparse"
					],
					"id": "function.iptcparse",
					"name": "iptcparse",
					"description": "Parse a binary IPTC block into single tags."
				},
				"function.jpeg2wbmp": {
					"tokens": [
						"jpeg2wbmp"
					],
					"id": "function.jpeg2wbmp",
					"name": "jpeg2wbmp",
					"description": "Convert JPEG image file to WBMP image file"
				},
				"function.png2wbmp": {
					"tokens": [
						"png2wbmp"
					],
					"id": "function.png2wbmp",
					"name": "png2wbmp",
					"description": "Convert PNG image file to WBMP image file"
				},
				"gmagick.addimage": {
					"tokens": [
						"Gmagick::addimage",
						"addimage",
						"::addimage"
					],
					"id": "gmagick.addimage",
					"name": "Gmagick::addimage",
					"description": "Adds new image to Gmagick object image list"
				},
				"gmagick.addnoiseimage": {
					"tokens": [
						"Gmagick::addnoiseimage",
						"addnoiseimage",
						"::addnoiseimage"
					],
					"id": "gmagick.addnoiseimage",
					"name": "Gmagick::addnoiseimage",
					"description": "Adds random noise to the image"
				},
				"gmagick.annotateimage": {
					"tokens": [
						"Gmagick::annotateimage",
						"annotateimage",
						"::annotateimage"
					],
					"id": "gmagick.annotateimage",
					"name": "Gmagick::annotateimage",
					"description": "Annotates an image with text"
				},
				"gmagick.blurimage": {
					"tokens": [
						"Gmagick::blurimage",
						"blurimage",
						"::blurimage"
					],
					"id": "gmagick.blurimage",
					"name": "Gmagick::blurimage",
					"description": "Adds blur filter to image"
				},
				"gmagick.borderimage": {
					"tokens": [
						"Gmagick::borderimage",
						"borderimage",
						"::borderimage"
					],
					"id": "gmagick.borderimage",
					"name": "Gmagick::borderimage",
					"description": "Surrounds the image with a border"
				},
				"gmagick.charcoalimage": {
					"tokens": [
						"Gmagick::charcoalimage",
						"charcoalimage",
						"::charcoalimage"
					],
					"id": "gmagick.charcoalimage",
					"name": "Gmagick::charcoalimage",
					"description": "Simulates a charcoal drawing"
				},
				"gmagick.chopimage": {
					"tokens": [
						"Gmagick::chopimage",
						"chopimage",
						"::chopimage"
					],
					"id": "gmagick.chopimage",
					"name": "Gmagick::chopimage",
					"description": "Removes a region of an image and trims"
				},
				"gmagick.clear": {
					"tokens": [
						"Gmagick::clear",
						"clear",
						"::clear"
					],
					"id": "gmagick.clear",
					"name": "Gmagick::clear",
					"description": "Clears all resources associated to Gmagick object"
				},
				"gmagick.commentimage": {
					"tokens": [
						"Gmagick::commentimage",
						"commentimage",
						"::commentimage"
					],
					"id": "gmagick.commentimage",
					"name": "Gmagick::commentimage",
					"description": "Adds a comment to your image"
				},
				"gmagick.compositeimage": {
					"tokens": [
						"Gmagick::compositeimage",
						"compositeimage",
						"::compositeimage"
					],
					"id": "gmagick.compositeimage",
					"name": "Gmagick::compositeimage",
					"description": "Composite one image onto another"
				},
				"gmagick.construct": {
					"tokens": [
						"Gmagick::__construct",
						"Gmagick::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gmagick.construct",
					"name": "Gmagick::__construct",
					"description": "The Gmagick constructor"
				},
				"gmagick.cropimage": {
					"tokens": [
						"Gmagick::cropimage",
						"cropimage",
						"::cropimage"
					],
					"id": "gmagick.cropimage",
					"name": "Gmagick::cropimage",
					"description": "Extracts a region of the image"
				},
				"gmagick.cropthumbnailimage": {
					"tokens": [
						"Gmagick::cropthumbnailimage",
						"cropthumbnailimage",
						"::cropthumbnailimage"
					],
					"id": "gmagick.cropthumbnailimage",
					"name": "Gmagick::cropthumbnailimage",
					"description": "Creates a crop thumbnail"
				},
				"gmagick.current": {
					"tokens": [
						"Gmagick::current",
						"current",
						"::current"
					],
					"id": "gmagick.current",
					"name": "Gmagick::current",
					"description": "The current purpose"
				},
				"gmagick.cyclecolormapimage": {
					"tokens": [
						"Gmagick::cyclecolormapimage",
						"cyclecolormapimage",
						"::cyclecolormapimage"
					],
					"id": "gmagick.cyclecolormapimage",
					"name": "Gmagick::cyclecolormapimage",
					"description": "Displaces an image's colormap"
				},
				"gmagick.deconstructimages": {
					"tokens": [
						"Gmagick::deconstructimages",
						"deconstructimages",
						"::deconstructimages"
					],
					"id": "gmagick.deconstructimages",
					"name": "Gmagick::deconstructimages",
					"description": "Returns certain pixel differences between images"
				},
				"gmagick.despeckleimage": {
					"tokens": [
						"Gmagick::despeckleimage",
						"despeckleimage",
						"::despeckleimage"
					],
					"id": "gmagick.despeckleimage",
					"name": "Gmagick::despeckleimage",
					"description": "The despeckleimage purpose"
				},
				"gmagick.destroy": {
					"tokens": [
						"Gmagick::destroy",
						"destroy",
						"::destroy"
					],
					"id": "gmagick.destroy",
					"name": "Gmagick::destroy",
					"description": "The destroy purpose"
				},
				"gmagick.drawimage": {
					"tokens": [
						"Gmagick::drawimage",
						"drawimage",
						"::drawimage"
					],
					"id": "gmagick.drawimage",
					"name": "Gmagick::drawimage",
					"description": "Renders the GmagickDraw object on the current image"
				},
				"gmagick.edgeimage": {
					"tokens": [
						"Gmagick::edgeimage",
						"edgeimage",
						"::edgeimage"
					],
					"id": "gmagick.edgeimage",
					"name": "Gmagick::edgeimage",
					"description": "Enhance edges within the image"
				},
				"gmagick.embossimage": {
					"tokens": [
						"Gmagick::embossimage",
						"embossimage",
						"::embossimage"
					],
					"id": "gmagick.embossimage",
					"name": "Gmagick::embossimage",
					"description": "Returns a grayscale image with a three-dimensional effect"
				},
				"gmagick.enhanceimage": {
					"tokens": [
						"Gmagick::enhanceimage",
						"enhanceimage",
						"::enhanceimage"
					],
					"id": "gmagick.enhanceimage",
					"name": "Gmagick::enhanceimage",
					"description": "Improves the quality of a noisy image"
				},
				"gmagick.equalizeimage": {
					"tokens": [
						"Gmagick::equalizeimage",
						"equalizeimage",
						"::equalizeimage"
					],
					"id": "gmagick.equalizeimage",
					"name": "Gmagick::equalizeimage",
					"description": "Equalizes the image histogram"
				},
				"gmagick.flipimage": {
					"tokens": [
						"Gmagick::flipimage",
						"flipimage",
						"::flipimage"
					],
					"id": "gmagick.flipimage",
					"name": "Gmagick::flipimage",
					"description": "Creates a vertical mirror image"
				},
				"gmagick.flopimage": {
					"tokens": [
						"Gmagick::flopimage",
						"flopimage",
						"::flopimage"
					],
					"id": "gmagick.flopimage",
					"name": "Gmagick::flopimage",
					"description": "The flopimage purpose"
				},
				"gmagick.frameimage": {
					"tokens": [
						"Gmagick::frameimage",
						"frameimage",
						"::frameimage"
					],
					"id": "gmagick.frameimage",
					"name": "Gmagick::frameimage",
					"description": "Adds a simulated three-dimensional border"
				},
				"gmagick.gammaimage": {
					"tokens": [
						"Gmagick::gammaimage",
						"gammaimage",
						"::gammaimage"
					],
					"id": "gmagick.gammaimage",
					"name": "Gmagick::gammaimage",
					"description": "Gamma-corrects an image"
				},
				"gmagick.getcopyright": {
					"tokens": [
						"Gmagick::getcopyright",
						"getcopyright",
						"::getcopyright"
					],
					"id": "gmagick.getcopyright",
					"name": "Gmagick::getcopyright",
					"description": "Returns the GraphicsMagick API copyright as a string"
				},
				"gmagick.getfilename": {
					"tokens": [
						"Gmagick::getfilename",
						"getfilename",
						"::getfilename"
					],
					"id": "gmagick.getfilename",
					"name": "Gmagick::getfilename",
					"description": "The filename associated with an image sequence"
				},
				"gmagick.getimagebackgroundcolor": {
					"tokens": [
						"Gmagick::getimagebackgroundcolor",
						"getimagebackgroundcolor",
						"::getimagebackgroundcolor"
					],
					"id": "gmagick.getimagebackgroundcolor",
					"name": "Gmagick::getimagebackgroundcolor",
					"description": "Returns the image background color"
				},
				"gmagick.getimageblueprimary": {
					"tokens": [
						"Gmagick::getimageblueprimary",
						"getimageblueprimary",
						"::getimageblueprimary"
					],
					"id": "gmagick.getimageblueprimary",
					"name": "Gmagick::getimageblueprimary",
					"description": "Returns the chromaticy blue primary point"
				},
				"gmagick.getimagebordercolor": {
					"tokens": [
						"Gmagick::getimagebordercolor",
						"getimagebordercolor",
						"::getimagebordercolor"
					],
					"id": "gmagick.getimagebordercolor",
					"name": "Gmagick::getimagebordercolor",
					"description": "Returns the image border color"
				},
				"gmagick.getimagechanneldepth": {
					"tokens": [
						"Gmagick::getimagechanneldepth",
						"getimagechanneldepth",
						"::getimagechanneldepth"
					],
					"id": "gmagick.getimagechanneldepth",
					"name": "Gmagick::getimagechanneldepth",
					"description": "Gets the depth for a particular image channel"
				},
				"gmagick.getimagecolors": {
					"tokens": [
						"Gmagick::getimagecolors",
						"getimagecolors",
						"::getimagecolors"
					],
					"id": "gmagick.getimagecolors",
					"name": "Gmagick::getimagecolors",
					"description": "Returns the color of the specified colormap index"
				},
				"gmagick.getimagecolorspace": {
					"tokens": [
						"Gmagick::getimagecolorspace",
						"getimagecolorspace",
						"::getimagecolorspace"
					],
					"id": "gmagick.getimagecolorspace",
					"name": "Gmagick::getimagecolorspace",
					"description": "Gets the image colorspace"
				},
				"gmagick.getimagecompose": {
					"tokens": [
						"Gmagick::getimagecompose",
						"getimagecompose",
						"::getimagecompose"
					],
					"id": "gmagick.getimagecompose",
					"name": "Gmagick::getimagecompose",
					"description": "Returns the composite operator associated with the image"
				},
				"gmagick.getimagedelay": {
					"tokens": [
						"Gmagick::getimagedelay",
						"getimagedelay",
						"::getimagedelay"
					],
					"id": "gmagick.getimagedelay",
					"name": "Gmagick::getimagedelay",
					"description": "Gets the image delay"
				},
				"gmagick.getimagedepth": {
					"tokens": [
						"Gmagick::getimagedepth",
						"getimagedepth",
						"::getimagedepth"
					],
					"id": "gmagick.getimagedepth",
					"name": "Gmagick::getimagedepth",
					"description": "Gets the depth of the image"
				},
				"gmagick.getimagedispose": {
					"tokens": [
						"Gmagick::getimagedispose",
						"getimagedispose",
						"::getimagedispose"
					],
					"id": "gmagick.getimagedispose",
					"name": "Gmagick::getimagedispose",
					"description": "Gets the image disposal method"
				},
				"gmagick.getimageextrema": {
					"tokens": [
						"Gmagick::getimageextrema",
						"getimageextrema",
						"::getimageextrema"
					],
					"id": "gmagick.getimageextrema",
					"name": "Gmagick::getimageextrema",
					"description": "Gets the extrema for the image"
				},
				"gmagick.getimagefilename": {
					"tokens": [
						"Gmagick::getimagefilename",
						"getimagefilename",
						"::getimagefilename"
					],
					"id": "gmagick.getimagefilename",
					"name": "Gmagick::getimagefilename",
					"description": "Returns the filename of a particular image in a sequence"
				},
				"gmagick.getimageformat": {
					"tokens": [
						"Gmagick::getimageformat",
						"getimageformat",
						"::getimageformat"
					],
					"id": "gmagick.getimageformat",
					"name": "Gmagick::getimageformat",
					"description": "Returns the format of a particular image in a sequence"
				},
				"gmagick.getimagegamma": {
					"tokens": [
						"Gmagick::getimagegamma",
						"getimagegamma",
						"::getimagegamma"
					],
					"id": "gmagick.getimagegamma",
					"name": "Gmagick::getimagegamma",
					"description": "Gets the image gamma"
				},
				"gmagick.getimagegreenprimary": {
					"tokens": [
						"Gmagick::getimagegreenprimary",
						"getimagegreenprimary",
						"::getimagegreenprimary"
					],
					"id": "gmagick.getimagegreenprimary",
					"name": "Gmagick::getimagegreenprimary",
					"description": "Returns the chromaticy green primary point"
				},
				"gmagick.getimageheight": {
					"tokens": [
						"Gmagick::getimageheight",
						"getimageheight",
						"::getimageheight"
					],
					"id": "gmagick.getimageheight",
					"name": "Gmagick::getimageheight",
					"description": "Returns the image height"
				},
				"gmagick.getimagehistogram": {
					"tokens": [
						"Gmagick::getimagehistogram",
						"getimagehistogram",
						"::getimagehistogram"
					],
					"id": "gmagick.getimagehistogram",
					"name": "Gmagick::getimagehistogram",
					"description": "Gets the image histogram"
				},
				"gmagick.getimageindex": {
					"tokens": [
						"Gmagick::getimageindex",
						"getimageindex",
						"::getimageindex"
					],
					"id": "gmagick.getimageindex",
					"name": "Gmagick::getimageindex",
					"description": "Gets the index of the current active image"
				},
				"gmagick.getimageinterlacescheme": {
					"tokens": [
						"Gmagick::getimageinterlacescheme",
						"getimageinterlacescheme",
						"::getimageinterlacescheme"
					],
					"id": "gmagick.getimageinterlacescheme",
					"name": "Gmagick::getimageinterlacescheme",
					"description": "Gets the image interlace scheme"
				},
				"gmagick.getimageiterations": {
					"tokens": [
						"Gmagick::getimageiterations",
						"getimageiterations",
						"::getimageiterations"
					],
					"id": "gmagick.getimageiterations",
					"name": "Gmagick::getimageiterations",
					"description": "Gets the image iterations"
				},
				"gmagick.getimagematte": {
					"tokens": [
						"Gmagick::getimagematte",
						"getimagematte",
						"::getimagematte"
					],
					"id": "gmagick.getimagematte",
					"name": "Gmagick::getimagematte",
					"description": "Check if the image has a matte channel"
				},
				"gmagick.getimagemattecolor": {
					"tokens": [
						"Gmagick::getimagemattecolor",
						"getimagemattecolor",
						"::getimagemattecolor"
					],
					"id": "gmagick.getimagemattecolor",
					"name": "Gmagick::getimagemattecolor",
					"description": "Returns the image matte color"
				},
				"gmagick.getimageprofile": {
					"tokens": [
						"Gmagick::getimageprofile",
						"getimageprofile",
						"::getimageprofile"
					],
					"id": "gmagick.getimageprofile",
					"name": "Gmagick::getimageprofile",
					"description": "Returns the named image profile."
				},
				"gmagick.getimageredprimary": {
					"tokens": [
						"Gmagick::getimageredprimary",
						"getimageredprimary",
						"::getimageredprimary"
					],
					"id": "gmagick.getimageredprimary",
					"name": "Gmagick::getimageredprimary",
					"description": "Returns the chromaticity red primary point"
				},
				"gmagick.getimagerenderingintent": {
					"tokens": [
						"Gmagick::getimagerenderingintent",
						"getimagerenderingintent",
						"::getimagerenderingintent"
					],
					"id": "gmagick.getimagerenderingintent",
					"name": "Gmagick::getimagerenderingintent",
					"description": "Gets the image rendering intent"
				},
				"gmagick.getimageresolution": {
					"tokens": [
						"Gmagick::getimageresolution",
						"getimageresolution",
						"::getimageresolution"
					],
					"id": "gmagick.getimageresolution",
					"name": "Gmagick::getimageresolution",
					"description": "Gets the image X and Y resolution"
				},
				"gmagick.getimagescene": {
					"tokens": [
						"Gmagick::getimagescene",
						"getimagescene",
						"::getimagescene"
					],
					"id": "gmagick.getimagescene",
					"name": "Gmagick::getimagescene",
					"description": "Gets the image scene"
				},
				"gmagick.getimagesignature": {
					"tokens": [
						"Gmagick::getimagesignature",
						"getimagesignature",
						"::getimagesignature"
					],
					"id": "gmagick.getimagesignature",
					"name": "Gmagick::getimagesignature",
					"description": "Generates an SHA-256 message digest"
				},
				"gmagick.getimagetype": {
					"tokens": [
						"Gmagick::getimagetype",
						"getimagetype",
						"::getimagetype"
					],
					"id": "gmagick.getimagetype",
					"name": "Gmagick::getimagetype",
					"description": "Gets the potential image type."
				},
				"gmagick.getimageunits": {
					"tokens": [
						"Gmagick::getimageunits",
						"getimageunits",
						"::getimageunits"
					],
					"id": "gmagick.getimageunits",
					"name": "Gmagick::getimageunits",
					"description": "Gets the image units of resolution"
				},
				"gmagick.getimagewhitepoint": {
					"tokens": [
						"Gmagick::getimagewhitepoint",
						"getimagewhitepoint",
						"::getimagewhitepoint"
					],
					"id": "gmagick.getimagewhitepoint",
					"name": "Gmagick::getimagewhitepoint",
					"description": "Returns the chromaticity white point"
				},
				"gmagick.getimagewidth": {
					"tokens": [
						"Gmagick::getimagewidth",
						"getimagewidth",
						"::getimagewidth"
					],
					"id": "gmagick.getimagewidth",
					"name": "Gmagick::getimagewidth",
					"description": "Returns the width of the image"
				},
				"gmagick.getpackagename": {
					"tokens": [
						"Gmagick::getpackagename",
						"getpackagename",
						"::getpackagename"
					],
					"id": "gmagick.getpackagename",
					"name": "Gmagick::getpackagename",
					"description": "Returns the GraphicsMagick package name."
				},
				"gmagick.getquantumdepth": {
					"tokens": [
						"Gmagick::getquantumdepth",
						"getquantumdepth",
						"::getquantumdepth"
					],
					"id": "gmagick.getquantumdepth",
					"name": "Gmagick::getquantumdepth",
					"description": "Returns the Gmagick quantum depth as a string."
				},
				"gmagick.getreleasedate": {
					"tokens": [
						"Gmagick::getreleasedate",
						"getreleasedate",
						"::getreleasedate"
					],
					"id": "gmagick.getreleasedate",
					"name": "Gmagick::getreleasedate",
					"description": "Returns the GraphicsMagick release date as a string."
				},
				"gmagick.getsamplingfactors": {
					"tokens": [
						"Gmagick::getsamplingfactors",
						"getsamplingfactors",
						"::getsamplingfactors"
					],
					"id": "gmagick.getsamplingfactors",
					"name": "Gmagick::getsamplingfactors",
					"description": "Gets the horizontal and vertical sampling factor."
				},
				"gmagick.getsize": {
					"tokens": [
						"Gmagick::getsize",
						"getsize",
						"::getsize"
					],
					"id": "gmagick.getsize",
					"name": "Gmagick::getsize",
					"description": "Returns the size associated with the Gmagick object"
				},
				"gmagick.getversion": {
					"tokens": [
						"Gmagick::getversion",
						"getversion",
						"::getversion"
					],
					"id": "gmagick.getversion",
					"name": "Gmagick::getversion",
					"description": "Returns the GraphicsMagick API version"
				},
				"gmagick.hasnextimage": {
					"tokens": [
						"Gmagick::hasnextimage",
						"hasnextimage",
						"::hasnextimage"
					],
					"id": "gmagick.hasnextimage",
					"name": "Gmagick::hasnextimage",
					"description": "Checks if the object has more images"
				},
				"gmagick.haspreviousimage": {
					"tokens": [
						"Gmagick::haspreviousimage",
						"haspreviousimage",
						"::haspreviousimage"
					],
					"id": "gmagick.haspreviousimage",
					"name": "Gmagick::haspreviousimage",
					"description": "Checks if the object has a previous image"
				},
				"gmagick.implodeimage": {
					"tokens": [
						"Gmagick::implodeimage",
						"implodeimage",
						"::implodeimage"
					],
					"id": "gmagick.implodeimage",
					"name": "Gmagick::implodeimage",
					"description": "Creates a new image as a copy"
				},
				"gmagick.labelimage": {
					"tokens": [
						"Gmagick::labelimage",
						"labelimage",
						"::labelimage"
					],
					"id": "gmagick.labelimage",
					"name": "Gmagick::labelimage",
					"description": "Adds a label to an image."
				},
				"gmagick.levelimage": {
					"tokens": [
						"Gmagick::levelimage",
						"levelimage",
						"::levelimage"
					],
					"id": "gmagick.levelimage",
					"name": "Gmagick::levelimage",
					"description": "Adjusts the levels of an image"
				},
				"gmagick.magnifyimage": {
					"tokens": [
						"Gmagick::magnifyimage",
						"magnifyimage",
						"::magnifyimage"
					],
					"id": "gmagick.magnifyimage",
					"name": "Gmagick::magnifyimage",
					"description": "Scales an image proportionally 2x"
				},
				"gmagick.mapimage": {
					"tokens": [
						"Gmagick::mapimage",
						"mapimage",
						"::mapimage"
					],
					"id": "gmagick.mapimage",
					"name": "Gmagick::mapimage",
					"description": "Replaces the colors of an image with the closest color from a reference image."
				},
				"gmagick.medianfilterimage": {
					"tokens": [
						"Gmagick::medianfilterimage",
						"medianfilterimage",
						"::medianfilterimage"
					],
					"id": "gmagick.medianfilterimage",
					"name": "Gmagick::medianfilterimage",
					"description": "Applies a digital filter"
				},
				"gmagick.minifyimage": {
					"tokens": [
						"Gmagick::minifyimage",
						"minifyimage",
						"::minifyimage"
					],
					"id": "gmagick.minifyimage",
					"name": "Gmagick::minifyimage",
					"description": "Scales an image proportionally to half its size"
				},
				"gmagick.modulateimage": {
					"tokens": [
						"Gmagick::modulateimage",
						"modulateimage",
						"::modulateimage"
					],
					"id": "gmagick.modulateimage",
					"name": "Gmagick::modulateimage",
					"description": "Control the brightness, saturation, and hue"
				},
				"gmagick.motionblurimage": {
					"tokens": [
						"Gmagick::motionblurimage",
						"motionblurimage",
						"::motionblurimage"
					],
					"id": "gmagick.motionblurimage",
					"name": "Gmagick::motionblurimage",
					"description": "Simulates motion blur"
				},
				"gmagick.newimage": {
					"tokens": [
						"Gmagick::newimage",
						"newimage",
						"::newimage"
					],
					"id": "gmagick.newimage",
					"name": "Gmagick::newimage",
					"description": "Creates a new image"
				},
				"gmagick.nextimage": {
					"tokens": [
						"Gmagick::nextimage",
						"nextimage",
						"::nextimage"
					],
					"id": "gmagick.nextimage",
					"name": "Gmagick::nextimage",
					"description": "Moves to the next image"
				},
				"gmagick.normalizeimage": {
					"tokens": [
						"Gmagick::normalizeimage",
						"normalizeimage",
						"::normalizeimage"
					],
					"id": "gmagick.normalizeimage",
					"name": "Gmagick::normalizeimage",
					"description": "Enhances the contrast of a color image"
				},
				"gmagick.oilpaintimage": {
					"tokens": [
						"Gmagick::oilpaintimage",
						"oilpaintimage",
						"::oilpaintimage"
					],
					"id": "gmagick.oilpaintimage",
					"name": "Gmagick::oilpaintimage",
					"description": "Simulates an oil painting"
				},
				"gmagick.previousimage": {
					"tokens": [
						"Gmagick::previousimage",
						"previousimage",
						"::previousimage"
					],
					"id": "gmagick.previousimage",
					"name": "Gmagick::previousimage",
					"description": "Move to the previous image in the object"
				},
				"gmagick.profileimage": {
					"tokens": [
						"Gmagick::profileimage",
						"profileimage",
						"::profileimage"
					],
					"id": "gmagick.profileimage",
					"name": "Gmagick::profileimage",
					"description": "Adds or removes a profile from an image"
				},
				"gmagick.quantizeimage": {
					"tokens": [
						"Gmagick::quantizeimage",
						"quantizeimage",
						"::quantizeimage"
					],
					"id": "gmagick.quantizeimage",
					"name": "Gmagick::quantizeimage",
					"description": "Analyzes the colors within a reference image"
				},
				"gmagick.quantizeimages": {
					"tokens": [
						"Gmagick::quantizeimages",
						"quantizeimages",
						"::quantizeimages"
					],
					"id": "gmagick.quantizeimages",
					"name": "Gmagick::quantizeimages",
					"description": "The quantizeimages purpose"
				},
				"gmagick.queryfontmetrics": {
					"tokens": [
						"Gmagick::queryfontmetrics",
						"queryfontmetrics",
						"::queryfontmetrics"
					],
					"id": "gmagick.queryfontmetrics",
					"name": "Gmagick::queryfontmetrics",
					"description": "Returns an array representing the font metrics"
				},
				"gmagick.queryfonts": {
					"tokens": [
						"Gmagick::queryfonts",
						"queryfonts",
						"::queryfonts"
					],
					"id": "gmagick.queryfonts",
					"name": "Gmagick::queryfonts",
					"description": "Returns the configured fonts"
				},
				"gmagick.queryformats": {
					"tokens": [
						"Gmagick::queryformats",
						"queryformats",
						"::queryformats"
					],
					"id": "gmagick.queryformats",
					"name": "Gmagick::queryformats",
					"description": "Returns formats supported by Gmagick."
				},
				"gmagick.radialblurimage": {
					"tokens": [
						"Gmagick::radialblurimage",
						"radialblurimage",
						"::radialblurimage"
					],
					"id": "gmagick.radialblurimage",
					"name": "Gmagick::radialblurimage",
					"description": "Radial blurs an image"
				},
				"gmagick.raiseimage": {
					"tokens": [
						"Gmagick::raiseimage",
						"raiseimage",
						"::raiseimage"
					],
					"id": "gmagick.raiseimage",
					"name": "Gmagick::raiseimage",
					"description": "Creates a simulated 3d button-like effect"
				},
				"gmagick.read": {
					"tokens": [
						"Gmagick::read",
						"read",
						"::read"
					],
					"id": "gmagick.read",
					"name": "Gmagick::read",
					"description": "Reads image from filename"
				},
				"gmagick.readimage": {
					"tokens": [
						"Gmagick::readimage",
						"readimage",
						"::readimage"
					],
					"id": "gmagick.readimage",
					"name": "Gmagick::readimage",
					"description": "Reads image from filename"
				},
				"gmagick.readimageblob": {
					"tokens": [
						"Gmagick::readimageblob",
						"readimageblob",
						"::readimageblob"
					],
					"id": "gmagick.readimageblob",
					"name": "Gmagick::readimageblob",
					"description": "Reads image from a binary string"
				},
				"gmagick.readimagefile": {
					"tokens": [
						"Gmagick::readimagefile",
						"readimagefile",
						"::readimagefile"
					],
					"id": "gmagick.readimagefile",
					"name": "Gmagick::readimagefile",
					"description": "The readimagefile purpose"
				},
				"gmagick.reducenoiseimage": {
					"tokens": [
						"Gmagick::reducenoiseimage",
						"reducenoiseimage",
						"::reducenoiseimage"
					],
					"id": "gmagick.reducenoiseimage",
					"name": "Gmagick::reducenoiseimage",
					"description": "Smooths the contours of an image"
				},
				"gmagick.removeimage": {
					"tokens": [
						"Gmagick::removeimage",
						"removeimage",
						"::removeimage"
					],
					"id": "gmagick.removeimage",
					"name": "Gmagick::removeimage",
					"description": "Removes an image from the image list"
				},
				"gmagick.removeimageprofile": {
					"tokens": [
						"Gmagick::removeimageprofile",
						"removeimageprofile",
						"::removeimageprofile"
					],
					"id": "gmagick.removeimageprofile",
					"name": "Gmagick::removeimageprofile",
					"description": "Removes the named image profile and returns it"
				},
				"gmagick.resampleimage": {
					"tokens": [
						"Gmagick::resampleimage",
						"resampleimage",
						"::resampleimage"
					],
					"id": "gmagick.resampleimage",
					"name": "Gmagick::resampleimage",
					"description": "Resample image to desired resolution"
				},
				"gmagick.resizeimage": {
					"tokens": [
						"Gmagick::resizeimage",
						"resizeimage",
						"::resizeimage"
					],
					"id": "gmagick.resizeimage",
					"name": "Gmagick::resizeimage",
					"description": "Scales an image"
				},
				"gmagick.rollimage": {
					"tokens": [
						"Gmagick::rollimage",
						"rollimage",
						"::rollimage"
					],
					"id": "gmagick.rollimage",
					"name": "Gmagick::rollimage",
					"description": "Offsets an image"
				},
				"gmagick.rotateimage": {
					"tokens": [
						"Gmagick::rotateimage",
						"rotateimage",
						"::rotateimage"
					],
					"id": "gmagick.rotateimage",
					"name": "Gmagick::rotateimage",
					"description": "Rotates an image"
				},
				"gmagick.scaleimage": {
					"tokens": [
						"Gmagick::scaleimage",
						"scaleimage",
						"::scaleimage"
					],
					"id": "gmagick.scaleimage",
					"name": "Gmagick::scaleimage",
					"description": "Scales the size of an image"
				},
				"gmagick.separateimagechannel": {
					"tokens": [
						"Gmagick::separateimagechannel",
						"separateimagechannel",
						"::separateimagechannel"
					],
					"id": "gmagick.separateimagechannel",
					"name": "Gmagick::separateimagechannel",
					"description": "Separates a channel from the image"
				},
				"gmagick.setcompressionquality": {
					"tokens": [
						"Gmagick::setCompressionQuality",
						"setCompressionQuality",
						"::setCompressionQuality"
					],
					"id": "gmagick.setcompressionquality",
					"name": "Gmagick::setCompressionQuality",
					"description": "Sets the object's default compression quality"
				},
				"gmagick.setfilename": {
					"tokens": [
						"Gmagick::setfilename",
						"setfilename",
						"::setfilename"
					],
					"id": "gmagick.setfilename",
					"name": "Gmagick::setfilename",
					"description": "Sets the filename before you read or write the image"
				},
				"gmagick.setimagebackgroundcolor": {
					"tokens": [
						"Gmagick::setimagebackgroundcolor",
						"setimagebackgroundcolor",
						"::setimagebackgroundcolor"
					],
					"id": "gmagick.setimagebackgroundcolor",
					"name": "Gmagick::setimagebackgroundcolor",
					"description": "Sets the image background color."
				},
				"gmagick.setimageblueprimary": {
					"tokens": [
						"Gmagick::setimageblueprimary",
						"setimageblueprimary",
						"::setimageblueprimary"
					],
					"id": "gmagick.setimageblueprimary",
					"name": "Gmagick::setimageblueprimary",
					"description": "Sets the image chromaticity blue primary point."
				},
				"gmagick.setimagebordercolor": {
					"tokens": [
						"Gmagick::setimagebordercolor",
						"setimagebordercolor",
						"::setimagebordercolor"
					],
					"id": "gmagick.setimagebordercolor",
					"name": "Gmagick::setimagebordercolor",
					"description": "Sets the image border color."
				},
				"gmagick.setimagechanneldepth": {
					"tokens": [
						"Gmagick::setimagechanneldepth",
						"setimagechanneldepth",
						"::setimagechanneldepth"
					],
					"id": "gmagick.setimagechanneldepth",
					"name": "Gmagick::setimagechanneldepth",
					"description": "Sets the depth of a particular image channel"
				},
				"gmagick.setimagecolorspace": {
					"tokens": [
						"Gmagick::setimagecolorspace",
						"setimagecolorspace",
						"::setimagecolorspace"
					],
					"id": "gmagick.setimagecolorspace",
					"name": "Gmagick::setimagecolorspace",
					"description": "Sets the image colorspace"
				},
				"gmagick.setimagecompose": {
					"tokens": [
						"Gmagick::setimagecompose",
						"setimagecompose",
						"::setimagecompose"
					],
					"id": "gmagick.setimagecompose",
					"name": "Gmagick::setimagecompose",
					"description": "Sets the image composite operator"
				},
				"gmagick.setimagedelay": {
					"tokens": [
						"Gmagick::setimagedelay",
						"setimagedelay",
						"::setimagedelay"
					],
					"id": "gmagick.setimagedelay",
					"name": "Gmagick::setimagedelay",
					"description": "Sets the image delay"
				},
				"gmagick.setimagedepth": {
					"tokens": [
						"Gmagick::setimagedepth",
						"setimagedepth",
						"::setimagedepth"
					],
					"id": "gmagick.setimagedepth",
					"name": "Gmagick::setimagedepth",
					"description": "Sets the image depth"
				},
				"gmagick.setimagedispose": {
					"tokens": [
						"Gmagick::setimagedispose",
						"setimagedispose",
						"::setimagedispose"
					],
					"id": "gmagick.setimagedispose",
					"name": "Gmagick::setimagedispose",
					"description": "Sets the image disposal method"
				},
				"gmagick.setimagefilename": {
					"tokens": [
						"Gmagick::setimagefilename",
						"setimagefilename",
						"::setimagefilename"
					],
					"id": "gmagick.setimagefilename",
					"name": "Gmagick::setimagefilename",
					"description": "Sets the filename of a particular image in a sequence"
				},
				"gmagick.setimageformat": {
					"tokens": [
						"Gmagick::setimageformat",
						"setimageformat",
						"::setimageformat"
					],
					"id": "gmagick.setimageformat",
					"name": "Gmagick::setimageformat",
					"description": "Sets the format of a particular image"
				},
				"gmagick.setimagegamma": {
					"tokens": [
						"Gmagick::setimagegamma",
						"setimagegamma",
						"::setimagegamma"
					],
					"id": "gmagick.setimagegamma",
					"name": "Gmagick::setimagegamma",
					"description": "Sets the image gamma"
				},
				"gmagick.setimagegreenprimary": {
					"tokens": [
						"Gmagick::setimagegreenprimary",
						"setimagegreenprimary",
						"::setimagegreenprimary"
					],
					"id": "gmagick.setimagegreenprimary",
					"name": "Gmagick::setimagegreenprimary",
					"description": "TSets the image chromaticity green primary point."
				},
				"gmagick.setimageindex": {
					"tokens": [
						"Gmagick::setimageindex",
						"setimageindex",
						"::setimageindex"
					],
					"id": "gmagick.setimageindex",
					"name": "Gmagick::setimageindex",
					"description": "Set the iterator to the position in the image list specified with the index parameter"
				},
				"gmagick.setimageinterlacescheme": {
					"tokens": [
						"Gmagick::setimageinterlacescheme",
						"setimageinterlacescheme",
						"::setimageinterlacescheme"
					],
					"id": "gmagick.setimageinterlacescheme",
					"name": "Gmagick::setimageinterlacescheme",
					"description": "Sets the interlace scheme of the image."
				},
				"gmagick.setimageiterations": {
					"tokens": [
						"Gmagick::setimageiterations",
						"setimageiterations",
						"::setimageiterations"
					],
					"id": "gmagick.setimageiterations",
					"name": "Gmagick::setimageiterations",
					"description": "Sets the image iterations."
				},
				"gmagick.setimageprofile": {
					"tokens": [
						"Gmagick::setimageprofile",
						"setimageprofile",
						"::setimageprofile"
					],
					"id": "gmagick.setimageprofile",
					"name": "Gmagick::setimageprofile",
					"description": "Adds a named profile to the Gmagick object"
				},
				"gmagick.setimageredprimary": {
					"tokens": [
						"Gmagick::setimageredprimary",
						"setimageredprimary",
						"::setimageredprimary"
					],
					"id": "gmagick.setimageredprimary",
					"name": "Gmagick::setimageredprimary",
					"description": "Sets the image chromaticity red primary point."
				},
				"gmagick.setimagerenderingintent": {
					"tokens": [
						"Gmagick::setimagerenderingintent",
						"setimagerenderingintent",
						"::setimagerenderingintent"
					],
					"id": "gmagick.setimagerenderingintent",
					"name": "Gmagick::setimagerenderingintent",
					"description": "Sets the image rendering intent"
				},
				"gmagick.setimageresolution": {
					"tokens": [
						"Gmagick::setimageresolution",
						"setimageresolution",
						"::setimageresolution"
					],
					"id": "gmagick.setimageresolution",
					"name": "Gmagick::setimageresolution",
					"description": "Sets the image resolution"
				},
				"gmagick.setimagescene": {
					"tokens": [
						"Gmagick::setimagescene",
						"setimagescene",
						"::setimagescene"
					],
					"id": "gmagick.setimagescene",
					"name": "Gmagick::setimagescene",
					"description": "Sets the image scene"
				},
				"gmagick.setimagetype": {
					"tokens": [
						"Gmagick::setimagetype",
						"setimagetype",
						"::setimagetype"
					],
					"id": "gmagick.setimagetype",
					"name": "Gmagick::setimagetype",
					"description": "Sets the image type"
				},
				"gmagick.setimageunits": {
					"tokens": [
						"Gmagick::setimageunits",
						"setimageunits",
						"::setimageunits"
					],
					"id": "gmagick.setimageunits",
					"name": "Gmagick::setimageunits",
					"description": "Sets the image units of resolution."
				},
				"gmagick.setimagewhitepoint": {
					"tokens": [
						"Gmagick::setimagewhitepoint",
						"setimagewhitepoint",
						"::setimagewhitepoint"
					],
					"id": "gmagick.setimagewhitepoint",
					"name": "Gmagick::setimagewhitepoint",
					"description": "Sets the image chromaticity white point."
				},
				"gmagick.setsamplingfactors": {
					"tokens": [
						"Gmagick::setsamplingfactors",
						"setsamplingfactors",
						"::setsamplingfactors"
					],
					"id": "gmagick.setsamplingfactors",
					"name": "Gmagick::setsamplingfactors",
					"description": "Sets the image sampling factors."
				},
				"gmagick.setsize": {
					"tokens": [
						"Gmagick::setsize",
						"setsize",
						"::setsize"
					],
					"id": "gmagick.setsize",
					"name": "Gmagick::setsize",
					"description": "Sets the size of the Gmagick object"
				},
				"gmagick.shearimage": {
					"tokens": [
						"Gmagick::shearimage",
						"shearimage",
						"::shearimage"
					],
					"id": "gmagick.shearimage",
					"name": "Gmagick::shearimage",
					"description": "Creating a parallelogram"
				},
				"gmagick.solarizeimage": {
					"tokens": [
						"Gmagick::solarizeimage",
						"solarizeimage",
						"::solarizeimage"
					],
					"id": "gmagick.solarizeimage",
					"name": "Gmagick::solarizeimage",
					"description": "Applies a solarizing effect to the image"
				},
				"gmagick.spreadimage": {
					"tokens": [
						"Gmagick::spreadimage",
						"spreadimage",
						"::spreadimage"
					],
					"id": "gmagick.spreadimage",
					"name": "Gmagick::spreadimage",
					"description": "Randomly displaces each pixel in a block"
				},
				"gmagick.stripimage": {
					"tokens": [
						"Gmagick::stripimage",
						"stripimage",
						"::stripimage"
					],
					"id": "gmagick.stripimage",
					"name": "Gmagick::stripimage",
					"description": "Strips an image of all profiles and comments"
				},
				"gmagick.swirlimage": {
					"tokens": [
						"Gmagick::swirlimage",
						"swirlimage",
						"::swirlimage"
					],
					"id": "gmagick.swirlimage",
					"name": "Gmagick::swirlimage",
					"description": "Swirls the pixels about the center of the image"
				},
				"gmagick.thumbnailimage": {
					"tokens": [
						"Gmagick::thumbnailimage",
						"thumbnailimage",
						"::thumbnailimage"
					],
					"id": "gmagick.thumbnailimage",
					"name": "Gmagick::thumbnailimage",
					"description": "Changes the size of an image"
				},
				"gmagick.trimimage": {
					"tokens": [
						"Gmagick::trimimage",
						"trimimage",
						"::trimimage"
					],
					"id": "gmagick.trimimage",
					"name": "Gmagick::trimimage",
					"description": "Remove edges from the image"
				},
				"gmagick.write": {
					"tokens": [
						"Gmagick::write",
						"write",
						"::write"
					],
					"id": "gmagick.write",
					"name": "Gmagick::write",
					"description": "Writes an image to the specified filename"
				},
				"gmagick.writeimage": {
					"tokens": [
						"Gmagick::writeimage",
						"writeimage",
						"::writeimage"
					],
					"id": "gmagick.writeimage",
					"name": "Gmagick::writeimage",
					"description": "Writes an image to the specified filename"
				},
				"gmagickdraw.annotate": {
					"tokens": [
						"GmagickDraw::annotate",
						"annotate",
						"::annotate"
					],
					"id": "gmagickdraw.annotate",
					"name": "GmagickDraw::annotate",
					"description": "Draws text on the image"
				},
				"gmagickdraw.arc": {
					"tokens": [
						"GmagickDraw::arc",
						"arc",
						"::arc"
					],
					"id": "gmagickdraw.arc",
					"name": "GmagickDraw::arc",
					"description": "Draws an arc"
				},
				"gmagickdraw.bezier": {
					"tokens": [
						"GmagickDraw::bezier",
						"bezier",
						"::bezier"
					],
					"id": "gmagickdraw.bezier",
					"name": "GmagickDraw::bezier",
					"description": "Draws a bezier curve"
				},
				"gmagickdraw.ellipse": {
					"tokens": [
						"GmagickDraw::ellipse",
						"ellipse",
						"::ellipse"
					],
					"id": "gmagickdraw.ellipse",
					"name": "GmagickDraw::ellipse",
					"description": "Draws an ellipse on the image"
				},
				"gmagickdraw.getfillcolor": {
					"tokens": [
						"GmagickDraw::getfillcolor",
						"getfillcolor",
						"::getfillcolor"
					],
					"id": "gmagickdraw.getfillcolor",
					"name": "GmagickDraw::getfillcolor",
					"description": "Returns the fill color"
				},
				"gmagickdraw.getfillopacity": {
					"tokens": [
						"GmagickDraw::getfillopacity",
						"getfillopacity",
						"::getfillopacity"
					],
					"id": "gmagickdraw.getfillopacity",
					"name": "GmagickDraw::getfillopacity",
					"description": "Returns the opacity used when drawing"
				},
				"gmagickdraw.getfont": {
					"tokens": [
						"GmagickDraw::getfont",
						"getfont",
						"::getfont"
					],
					"id": "gmagickdraw.getfont",
					"name": "GmagickDraw::getfont",
					"description": "Returns the font"
				},
				"gmagickdraw.getfontsize": {
					"tokens": [
						"GmagickDraw::getfontsize",
						"getfontsize",
						"::getfontsize"
					],
					"id": "gmagickdraw.getfontsize",
					"name": "GmagickDraw::getfontsize",
					"description": "Returns the font pointsize"
				},
				"gmagickdraw.getfontstyle": {
					"tokens": [
						"GmagickDraw::getfontstyle",
						"getfontstyle",
						"::getfontstyle"
					],
					"id": "gmagickdraw.getfontstyle",
					"name": "GmagickDraw::getfontstyle",
					"description": "Returns the font style"
				},
				"gmagickdraw.getfontweight": {
					"tokens": [
						"GmagickDraw::getfontweight",
						"getfontweight",
						"::getfontweight"
					],
					"id": "gmagickdraw.getfontweight",
					"name": "GmagickDraw::getfontweight",
					"description": "Returns the font weight"
				},
				"gmagickdraw.getstrokecolor": {
					"tokens": [
						"GmagickDraw::getstrokecolor",
						"getstrokecolor",
						"::getstrokecolor"
					],
					"id": "gmagickdraw.getstrokecolor",
					"name": "GmagickDraw::getstrokecolor",
					"description": "Returns the color used for stroking object outlines"
				},
				"gmagickdraw.getstrokeopacity": {
					"tokens": [
						"GmagickDraw::getstrokeopacity",
						"getstrokeopacity",
						"::getstrokeopacity"
					],
					"id": "gmagickdraw.getstrokeopacity",
					"name": "GmagickDraw::getstrokeopacity",
					"description": "Returns the opacity of stroked object outlines"
				},
				"gmagickdraw.getstrokewidth": {
					"tokens": [
						"GmagickDraw::getstrokewidth",
						"getstrokewidth",
						"::getstrokewidth"
					],
					"id": "gmagickdraw.getstrokewidth",
					"name": "GmagickDraw::getstrokewidth",
					"description": "Returns the width of the stroke used to draw object outlines"
				},
				"gmagickdraw.gettextdecoration": {
					"tokens": [
						"GmagickDraw::gettextdecoration",
						"gettextdecoration",
						"::gettextdecoration"
					],
					"id": "gmagickdraw.gettextdecoration",
					"name": "GmagickDraw::gettextdecoration",
					"description": "Returns the text decoration"
				},
				"gmagickdraw.gettextencoding": {
					"tokens": [
						"GmagickDraw::gettextencoding",
						"gettextencoding",
						"::gettextencoding"
					],
					"id": "gmagickdraw.gettextencoding",
					"name": "GmagickDraw::gettextencoding",
					"description": "Returns the code set used for text annotations"
				},
				"gmagickdraw.line": {
					"tokens": [
						"GmagickDraw::line",
						"line",
						"::line"
					],
					"id": "gmagickdraw.line",
					"name": "GmagickDraw::line",
					"description": "The line purpose"
				},
				"gmagickdraw.point": {
					"tokens": [
						"GmagickDraw::point",
						"point",
						"::point"
					],
					"id": "gmagickdraw.point",
					"name": "GmagickDraw::point",
					"description": "Draws a point"
				},
				"gmagickdraw.polygon": {
					"tokens": [
						"GmagickDraw::polygon",
						"polygon",
						"::polygon"
					],
					"id": "gmagickdraw.polygon",
					"name": "GmagickDraw::polygon",
					"description": "Draws a polygon"
				},
				"gmagickdraw.polyline": {
					"tokens": [
						"GmagickDraw::polyline",
						"polyline",
						"::polyline"
					],
					"id": "gmagickdraw.polyline",
					"name": "GmagickDraw::polyline",
					"description": "Draws a polyline"
				},
				"gmagickdraw.rectangle": {
					"tokens": [
						"GmagickDraw::rectangle",
						"rectangle",
						"::rectangle"
					],
					"id": "gmagickdraw.rectangle",
					"name": "GmagickDraw::rectangle",
					"description": "Draws a rectangle"
				},
				"gmagickdraw.rotate": {
					"tokens": [
						"GmagickDraw::rotate",
						"rotate",
						"::rotate"
					],
					"id": "gmagickdraw.rotate",
					"name": "GmagickDraw::rotate",
					"description": "Applies the specified rotation to the current coordinate space"
				},
				"gmagickdraw.roundrectangle": {
					"tokens": [
						"GmagickDraw::roundrectangle",
						"roundrectangle",
						"::roundrectangle"
					],
					"id": "gmagickdraw.roundrectangle",
					"name": "GmagickDraw::roundrectangle",
					"description": "Draws a rounded rectangle"
				},
				"gmagickdraw.scale": {
					"tokens": [
						"GmagickDraw::scale",
						"scale",
						"::scale"
					],
					"id": "gmagickdraw.scale",
					"name": "GmagickDraw::scale",
					"description": "Adjusts the scaling factor"
				},
				"gmagickdraw.setfillcolor": {
					"tokens": [
						"GmagickDraw::setfillcolor",
						"setfillcolor",
						"::setfillcolor"
					],
					"id": "gmagickdraw.setfillcolor",
					"name": "GmagickDraw::setfillcolor",
					"description": "Sets the fill color to be used for drawing filled objects."
				},
				"gmagickdraw.setfillopacity": {
					"tokens": [
						"GmagickDraw::setfillopacity",
						"setfillopacity",
						"::setfillopacity"
					],
					"id": "gmagickdraw.setfillopacity",
					"name": "GmagickDraw::setfillopacity",
					"description": "The setfillopacity purpose"
				},
				"gmagickdraw.setfont": {
					"tokens": [
						"GmagickDraw::setfont",
						"setfont",
						"::setfont"
					],
					"id": "gmagickdraw.setfont",
					"name": "GmagickDraw::setfont",
					"description": "Sets the fully-specified font to use when annotating with text."
				},
				"gmagickdraw.setfontsize": {
					"tokens": [
						"GmagickDraw::setfontsize",
						"setfontsize",
						"::setfontsize"
					],
					"id": "gmagickdraw.setfontsize",
					"name": "GmagickDraw::setfontsize",
					"description": "Sets the font pointsize to use when annotating with text."
				},
				"gmagickdraw.setfontstyle": {
					"tokens": [
						"GmagickDraw::setfontstyle",
						"setfontstyle",
						"::setfontstyle"
					],
					"id": "gmagickdraw.setfontstyle",
					"name": "GmagickDraw::setfontstyle",
					"description": "Sets the font style to use when annotating with text"
				},
				"gmagickdraw.setfontweight": {
					"tokens": [
						"GmagickDraw::setfontweight",
						"setfontweight",
						"::setfontweight"
					],
					"id": "gmagickdraw.setfontweight",
					"name": "GmagickDraw::setfontweight",
					"description": "Sets the font weight"
				},
				"gmagickdraw.setstrokecolor": {
					"tokens": [
						"GmagickDraw::setstrokecolor",
						"setstrokecolor",
						"::setstrokecolor"
					],
					"id": "gmagickdraw.setstrokecolor",
					"name": "GmagickDraw::setstrokecolor",
					"description": "Sets the color used for stroking object outlines."
				},
				"gmagickdraw.setstrokeopacity": {
					"tokens": [
						"GmagickDraw::setstrokeopacity",
						"setstrokeopacity",
						"::setstrokeopacity"
					],
					"id": "gmagickdraw.setstrokeopacity",
					"name": "GmagickDraw::setstrokeopacity",
					"description": "Specifies the opacity of stroked object outlines."
				},
				"gmagickdraw.setstrokewidth": {
					"tokens": [
						"GmagickDraw::setstrokewidth",
						"setstrokewidth",
						"::setstrokewidth"
					],
					"id": "gmagickdraw.setstrokewidth",
					"name": "GmagickDraw::setstrokewidth",
					"description": "Sets the width of the stroke used to draw object outlines."
				},
				"gmagickdraw.settextdecoration": {
					"tokens": [
						"GmagickDraw::settextdecoration",
						"settextdecoration",
						"::settextdecoration"
					],
					"id": "gmagickdraw.settextdecoration",
					"name": "GmagickDraw::settextdecoration",
					"description": "Specifies a decoration"
				},
				"gmagickdraw.settextencoding": {
					"tokens": [
						"GmagickDraw::settextencoding",
						"settextencoding",
						"::settextencoding"
					],
					"id": "gmagickdraw.settextencoding",
					"name": "GmagickDraw::settextencoding",
					"description": "Specifies the text code set"
				},
				"gmagickpixel.construct": {
					"tokens": [
						"GmagickPixel::__construct",
						"GmagickPixel::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gmagickpixel.construct",
					"name": "GmagickPixel::__construct",
					"description": "The GmagickPixel constructor"
				},
				"gmagickpixel.getcolor": {
					"tokens": [
						"GmagickPixel::getcolor",
						"getcolor",
						"::getcolor"
					],
					"id": "gmagickpixel.getcolor",
					"name": "GmagickPixel::getcolor",
					"description": "Returns the color"
				},
				"gmagickpixel.getcolorcount": {
					"tokens": [
						"GmagickPixel::getcolorcount",
						"getcolorcount",
						"::getcolorcount"
					],
					"id": "gmagickpixel.getcolorcount",
					"name": "GmagickPixel::getcolorcount",
					"description": "Returns the color count associated with this color"
				},
				"gmagickpixel.getcolorvalue": {
					"tokens": [
						"GmagickPixel::getcolorvalue",
						"getcolorvalue",
						"::getcolorvalue"
					],
					"id": "gmagickpixel.getcolorvalue",
					"name": "GmagickPixel::getcolorvalue",
					"description": "Gets the normalized value of the provided color channel"
				},
				"gmagickpixel.setcolor": {
					"tokens": [
						"GmagickPixel::setcolor",
						"setcolor",
						"::setcolor"
					],
					"id": "gmagickpixel.setcolor",
					"name": "GmagickPixel::setcolor",
					"description": "Sets the color"
				},
				"gmagickpixel.setcolorvalue": {
					"tokens": [
						"GmagickPixel::setcolorvalue",
						"setcolorvalue",
						"::setcolorvalue"
					],
					"id": "gmagickpixel.setcolorvalue",
					"name": "GmagickPixel::setcolorvalue",
					"description": "Sets the normalized value of one of the channels"
				},
				"imagick.adaptiveblurimage": {
					"tokens": [
						"Imagick::adaptiveBlurImage",
						"adaptiveBlurImage",
						"::adaptiveBlurImage"
					],
					"id": "imagick.adaptiveblurimage",
					"name": "Imagick::adaptiveBlurImage",
					"description": "Adds adaptive blur filter to image"
				},
				"imagick.adaptiveresizeimage": {
					"tokens": [
						"Imagick::adaptiveResizeImage",
						"adaptiveResizeImage",
						"::adaptiveResizeImage"
					],
					"id": "imagick.adaptiveresizeimage",
					"name": "Imagick::adaptiveResizeImage",
					"description": "Adaptively resize image with data dependent triangulation"
				},
				"imagick.adaptivesharpenimage": {
					"tokens": [
						"Imagick::adaptiveSharpenImage",
						"adaptiveSharpenImage",
						"::adaptiveSharpenImage"
					],
					"id": "imagick.adaptivesharpenimage",
					"name": "Imagick::adaptiveSharpenImage",
					"description": "Adaptively sharpen the image"
				},
				"imagick.adaptivethresholdimage": {
					"tokens": [
						"Imagick::adaptiveThresholdImage",
						"adaptiveThresholdImage",
						"::adaptiveThresholdImage"
					],
					"id": "imagick.adaptivethresholdimage",
					"name": "Imagick::adaptiveThresholdImage",
					"description": "Selects a threshold for each pixel based on a range of intensity"
				},
				"imagick.addimage": {
					"tokens": [
						"Imagick::addImage",
						"addImage",
						"::addImage"
					],
					"id": "imagick.addimage",
					"name": "Imagick::addImage",
					"description": "Adds new image to Imagick object image list"
				},
				"imagick.addnoiseimage": {
					"tokens": [
						"Imagick::addNoiseImage",
						"addNoiseImage",
						"::addNoiseImage"
					],
					"id": "imagick.addnoiseimage",
					"name": "Imagick::addNoiseImage",
					"description": "Adds random noise to the image"
				},
				"imagick.affinetransformimage": {
					"tokens": [
						"Imagick::affineTransformImage",
						"affineTransformImage",
						"::affineTransformImage"
					],
					"id": "imagick.affinetransformimage",
					"name": "Imagick::affineTransformImage",
					"description": "Transforms an image"
				},
				"imagick.animateimages": {
					"tokens": [
						"Imagick::animateImages",
						"animateImages",
						"::animateImages"
					],
					"id": "imagick.animateimages",
					"name": "Imagick::animateImages",
					"description": "Animates an image or images"
				},
				"imagick.annotateimage": {
					"tokens": [
						"Imagick::annotateImage",
						"annotateImage",
						"::annotateImage"
					],
					"id": "imagick.annotateimage",
					"name": "Imagick::annotateImage",
					"description": "Annotates an image with text"
				},
				"imagick.appendimages": {
					"tokens": [
						"Imagick::appendImages",
						"appendImages",
						"::appendImages"
					],
					"id": "imagick.appendimages",
					"name": "Imagick::appendImages",
					"description": "Append a set of images"
				},
				"imagick.autolevelimage": {
					"tokens": [
						"Imagick::autoLevelImage",
						"autoLevelImage",
						"::autoLevelImage"
					],
					"id": "imagick.autolevelimage",
					"name": "Imagick::autoLevelImage",
					"description": "Description"
				},
				"imagick.averageimages": {
					"tokens": [
						"Imagick::averageImages",
						"averageImages",
						"::averageImages"
					],
					"id": "imagick.averageimages",
					"name": "Imagick::averageImages",
					"description": "Average a set of images"
				},
				"imagick.blackthresholdimage": {
					"tokens": [
						"Imagick::blackThresholdImage",
						"blackThresholdImage",
						"::blackThresholdImage"
					],
					"id": "imagick.blackthresholdimage",
					"name": "Imagick::blackThresholdImage",
					"description": "Forces all pixels below the threshold into black"
				},
				"imagick.blueshiftimage": {
					"tokens": [
						"Imagick::blueShiftImage",
						"blueShiftImage",
						"::blueShiftImage"
					],
					"id": "imagick.blueshiftimage",
					"name": "Imagick::blueShiftImage",
					"description": "Description"
				},
				"imagick.blurimage": {
					"tokens": [
						"Imagick::blurImage",
						"blurImage",
						"::blurImage"
					],
					"id": "imagick.blurimage",
					"name": "Imagick::blurImage",
					"description": "Adds blur filter to image"
				},
				"imagick.borderimage": {
					"tokens": [
						"Imagick::borderImage",
						"borderImage",
						"::borderImage"
					],
					"id": "imagick.borderimage",
					"name": "Imagick::borderImage",
					"description": "Surrounds the image with a border"
				},
				"imagick.brightnesscontrastimage": {
					"tokens": [
						"Imagick::brightnessContrastImage",
						"brightnessContrastImage",
						"::brightnessContrastImage"
					],
					"id": "imagick.brightnesscontrastimage",
					"name": "Imagick::brightnessContrastImage",
					"description": "Description"
				},
				"imagick.charcoalimage": {
					"tokens": [
						"Imagick::charcoalImage",
						"charcoalImage",
						"::charcoalImage"
					],
					"id": "imagick.charcoalimage",
					"name": "Imagick::charcoalImage",
					"description": "Simulates a charcoal drawing"
				},
				"imagick.chopimage": {
					"tokens": [
						"Imagick::chopImage",
						"chopImage",
						"::chopImage"
					],
					"id": "imagick.chopimage",
					"name": "Imagick::chopImage",
					"description": "Removes a region of an image and trims"
				},
				"imagick.clampimage": {
					"tokens": [
						"Imagick::clampImage",
						"clampImage",
						"::clampImage"
					],
					"id": "imagick.clampimage",
					"name": "Imagick::clampImage",
					"description": "Description"
				},
				"imagick.clear": {
					"tokens": [
						"Imagick::clear",
						"clear",
						"::clear"
					],
					"id": "imagick.clear",
					"name": "Imagick::clear",
					"description": "Clears all resources associated to Imagick object"
				},
				"imagick.clipimage": {
					"tokens": [
						"Imagick::clipImage",
						"clipImage",
						"::clipImage"
					],
					"id": "imagick.clipimage",
					"name": "Imagick::clipImage",
					"description": "Clips along the first path from the 8BIM profile"
				},
				"imagick.clipimagepath": {
					"tokens": [
						"Imagick::clipImagePath",
						"clipImagePath",
						"::clipImagePath"
					],
					"id": "imagick.clipimagepath",
					"name": "Imagick::clipImagePath",
					"description": "Description"
				},
				"imagick.clippathimage": {
					"tokens": [
						"Imagick::clipPathImage",
						"clipPathImage",
						"::clipPathImage"
					],
					"id": "imagick.clippathimage",
					"name": "Imagick::clipPathImage",
					"description": "Clips along the named paths from the 8BIM profile"
				},
				"imagick.clone": {
					"tokens": [
						"Imagick::clone",
						"clone",
						"::clone"
					],
					"id": "imagick.clone",
					"name": "Imagick::clone",
					"description": "Makes an exact copy of the Imagick object"
				},
				"imagick.clutimage": {
					"tokens": [
						"Imagick::clutImage",
						"clutImage",
						"::clutImage"
					],
					"id": "imagick.clutimage",
					"name": "Imagick::clutImage",
					"description": "Replaces colors in the image"
				},
				"imagick.coalesceimages": {
					"tokens": [
						"Imagick::coalesceImages",
						"coalesceImages",
						"::coalesceImages"
					],
					"id": "imagick.coalesceimages",
					"name": "Imagick::coalesceImages",
					"description": "Composites a set of images"
				},
				"imagick.colorfloodfillimage": {
					"tokens": [
						"Imagick::colorFloodfillImage",
						"colorFloodfillImage",
						"::colorFloodfillImage"
					],
					"id": "imagick.colorfloodfillimage",
					"name": "Imagick::colorFloodfillImage",
					"description": "Changes the color value of any pixel that matches target"
				},
				"imagick.colorizeimage": {
					"tokens": [
						"Imagick::colorizeImage",
						"colorizeImage",
						"::colorizeImage"
					],
					"id": "imagick.colorizeimage",
					"name": "Imagick::colorizeImage",
					"description": "Blends the fill color with the image"
				},
				"imagick.colormatriximage": {
					"tokens": [
						"Imagick::colorMatrixImage",
						"colorMatrixImage",
						"::colorMatrixImage"
					],
					"id": "imagick.colormatriximage",
					"name": "Imagick::colorMatrixImage",
					"description": "Description"
				},
				"imagick.combineimages": {
					"tokens": [
						"Imagick::combineImages",
						"combineImages",
						"::combineImages"
					],
					"id": "imagick.combineimages",
					"name": "Imagick::combineImages",
					"description": "Combines one or more images into a single image"
				},
				"imagick.commentimage": {
					"tokens": [
						"Imagick::commentImage",
						"commentImage",
						"::commentImage"
					],
					"id": "imagick.commentimage",
					"name": "Imagick::commentImage",
					"description": "Adds a comment to your image"
				},
				"imagick.compareimagechannels": {
					"tokens": [
						"Imagick::compareImageChannels",
						"compareImageChannels",
						"::compareImageChannels"
					],
					"id": "imagick.compareimagechannels",
					"name": "Imagick::compareImageChannels",
					"description": "Returns the difference in one or more images"
				},
				"imagick.compareimagelayers": {
					"tokens": [
						"Imagick::compareImageLayers",
						"compareImageLayers",
						"::compareImageLayers"
					],
					"id": "imagick.compareimagelayers",
					"name": "Imagick::compareImageLayers",
					"description": "Returns the maximum bounding region between images"
				},
				"imagick.compareimages": {
					"tokens": [
						"Imagick::compareImages",
						"compareImages",
						"::compareImages"
					],
					"id": "imagick.compareimages",
					"name": "Imagick::compareImages",
					"description": "Compares an image to a reconstructed image"
				},
				"imagick.compositeimage": {
					"tokens": [
						"Imagick::compositeImage",
						"compositeImage",
						"::compositeImage"
					],
					"id": "imagick.compositeimage",
					"name": "Imagick::compositeImage",
					"description": "Composite one image onto another"
				},
				"imagick.construct": {
					"tokens": [
						"Imagick::__construct",
						"Imagick::_construct",
						"__construct",
						"::__construct"
					],
					"id": "imagick.construct",
					"name": "Imagick::__construct",
					"description": "The Imagick constructor"
				},
				"imagick.contrastimage": {
					"tokens": [
						"Imagick::contrastImage",
						"contrastImage",
						"::contrastImage"
					],
					"id": "imagick.contrastimage",
					"name": "Imagick::contrastImage",
					"description": "Change the contrast of the image"
				},
				"imagick.contraststretchimage": {
					"tokens": [
						"Imagick::contrastStretchImage",
						"contrastStretchImage",
						"::contrastStretchImage"
					],
					"id": "imagick.contraststretchimage",
					"name": "Imagick::contrastStretchImage",
					"description": "Enhances the contrast of a color image"
				},
				"imagick.convolveimage": {
					"tokens": [
						"Imagick::convolveImage",
						"convolveImage",
						"::convolveImage"
					],
					"id": "imagick.convolveimage",
					"name": "Imagick::convolveImage",
					"description": "Applies a custom convolution kernel to the image"
				},
				"imagick.count": {
					"tokens": [
						"Imagick::count",
						"count",
						"::count"
					],
					"id": "imagick.count",
					"name": "Imagick::count",
					"description": "Description"
				},
				"imagick.cropimage": {
					"tokens": [
						"Imagick::cropImage",
						"cropImage",
						"::cropImage"
					],
					"id": "imagick.cropimage",
					"name": "Imagick::cropImage",
					"description": "Extracts a region of the image"
				},
				"imagick.cropthumbnailimage": {
					"tokens": [
						"Imagick::cropThumbnailImage",
						"cropThumbnailImage",
						"::cropThumbnailImage"
					],
					"id": "imagick.cropthumbnailimage",
					"name": "Imagick::cropThumbnailImage",
					"description": "Creates a crop thumbnail"
				},
				"imagick.current": {
					"tokens": [
						"Imagick::current",
						"current",
						"::current"
					],
					"id": "imagick.current",
					"name": "Imagick::current",
					"description": "Returns a reference to the current Imagick object"
				},
				"imagick.cyclecolormapimage": {
					"tokens": [
						"Imagick::cycleColormapImage",
						"cycleColormapImage",
						"::cycleColormapImage"
					],
					"id": "imagick.cyclecolormapimage",
					"name": "Imagick::cycleColormapImage",
					"description": "Displaces an image's colormap"
				},
				"imagick.decipherimage": {
					"tokens": [
						"Imagick::decipherImage",
						"decipherImage",
						"::decipherImage"
					],
					"id": "imagick.decipherimage",
					"name": "Imagick::decipherImage",
					"description": "Deciphers an image"
				},
				"imagick.deconstructimages": {
					"tokens": [
						"Imagick::deconstructImages",
						"deconstructImages",
						"::deconstructImages"
					],
					"id": "imagick.deconstructimages",
					"name": "Imagick::deconstructImages",
					"description": "Returns certain pixel differences between images"
				},
				"imagick.deleteimageartifact": {
					"tokens": [
						"Imagick::deleteImageArtifact",
						"deleteImageArtifact",
						"::deleteImageArtifact"
					],
					"id": "imagick.deleteimageartifact",
					"name": "Imagick::deleteImageArtifact",
					"description": "Delete image artifact"
				},
				"imagick.deleteimageproperty": {
					"tokens": [
						"Imagick::deleteImageProperty",
						"deleteImageProperty",
						"::deleteImageProperty"
					],
					"id": "imagick.deleteimageproperty",
					"name": "Imagick::deleteImageProperty",
					"description": "Description"
				},
				"imagick.deskewimage": {
					"tokens": [
						"Imagick::deskewImage",
						"deskewImage",
						"::deskewImage"
					],
					"id": "imagick.deskewimage",
					"name": "Imagick::deskewImage",
					"description": "Removes skew from the image"
				},
				"imagick.despeckleimage": {
					"tokens": [
						"Imagick::despeckleImage",
						"despeckleImage",
						"::despeckleImage"
					],
					"id": "imagick.despeckleimage",
					"name": "Imagick::despeckleImage",
					"description": "Reduces the speckle noise in an image"
				},
				"imagick.destroy": {
					"tokens": [
						"Imagick::destroy",
						"destroy",
						"::destroy"
					],
					"id": "imagick.destroy",
					"name": "Imagick::destroy",
					"description": "Destroys the Imagick object"
				},
				"imagick.displayimage": {
					"tokens": [
						"Imagick::displayImage",
						"displayImage",
						"::displayImage"
					],
					"id": "imagick.displayimage",
					"name": "Imagick::displayImage",
					"description": "Displays an image"
				},
				"imagick.displayimages": {
					"tokens": [
						"Imagick::displayImages",
						"displayImages",
						"::displayImages"
					],
					"id": "imagick.displayimages",
					"name": "Imagick::displayImages",
					"description": "Displays an image or image sequence"
				},
				"imagick.distortimage": {
					"tokens": [
						"Imagick::distortImage",
						"distortImage",
						"::distortImage"
					],
					"id": "imagick.distortimage",
					"name": "Imagick::distortImage",
					"description": "Distorts an image using various distortion methods"
				},
				"imagick.drawimage": {
					"tokens": [
						"Imagick::drawImage",
						"drawImage",
						"::drawImage"
					],
					"id": "imagick.drawimage",
					"name": "Imagick::drawImage",
					"description": "Renders the ImagickDraw object on the current image"
				},
				"imagick.edgeimage": {
					"tokens": [
						"Imagick::edgeImage",
						"edgeImage",
						"::edgeImage"
					],
					"id": "imagick.edgeimage",
					"name": "Imagick::edgeImage",
					"description": "Enhance edges within the image"
				},
				"imagick.embossimage": {
					"tokens": [
						"Imagick::embossImage",
						"embossImage",
						"::embossImage"
					],
					"id": "imagick.embossimage",
					"name": "Imagick::embossImage",
					"description": "Returns a grayscale image with a three-dimensional effect"
				},
				"imagick.encipherimage": {
					"tokens": [
						"Imagick::encipherImage",
						"encipherImage",
						"::encipherImage"
					],
					"id": "imagick.encipherimage",
					"name": "Imagick::encipherImage",
					"description": "Enciphers an image"
				},
				"imagick.enhanceimage": {
					"tokens": [
						"Imagick::enhanceImage",
						"enhanceImage",
						"::enhanceImage"
					],
					"id": "imagick.enhanceimage",
					"name": "Imagick::enhanceImage",
					"description": "Improves the quality of a noisy image"
				},
				"imagick.equalizeimage": {
					"tokens": [
						"Imagick::equalizeImage",
						"equalizeImage",
						"::equalizeImage"
					],
					"id": "imagick.equalizeimage",
					"name": "Imagick::equalizeImage",
					"description": "Equalizes the image histogram"
				},
				"imagick.evaluateimage": {
					"tokens": [
						"Imagick::evaluateImage",
						"evaluateImage",
						"::evaluateImage"
					],
					"id": "imagick.evaluateimage",
					"name": "Imagick::evaluateImage",
					"description": "Applies an expression to an image"
				},
				"imagick.exportimagepixels": {
					"tokens": [
						"Imagick::exportImagePixels",
						"exportImagePixels",
						"::exportImagePixels"
					],
					"id": "imagick.exportimagepixels",
					"name": "Imagick::exportImagePixels",
					"description": "Exports raw image pixels"
				},
				"imagick.extentimage": {
					"tokens": [
						"Imagick::extentImage",
						"extentImage",
						"::extentImage"
					],
					"id": "imagick.extentimage",
					"name": "Imagick::extentImage",
					"description": "Set image size"
				},
				"imagick.filter": {
					"tokens": [
						"Imagick::filter",
						"filter",
						"::filter"
					],
					"id": "imagick.filter",
					"name": "Imagick::filter",
					"description": "Description"
				},
				"imagick.flattenimages": {
					"tokens": [
						"Imagick::flattenImages",
						"flattenImages",
						"::flattenImages"
					],
					"id": "imagick.flattenimages",
					"name": "Imagick::flattenImages",
					"description": "Merges a sequence of images"
				},
				"imagick.flipimage": {
					"tokens": [
						"Imagick::flipImage",
						"flipImage",
						"::flipImage"
					],
					"id": "imagick.flipimage",
					"name": "Imagick::flipImage",
					"description": "Creates a vertical mirror image"
				},
				"imagick.floodfillpaintimage": {
					"tokens": [
						"Imagick::floodFillPaintImage",
						"floodFillPaintImage",
						"::floodFillPaintImage"
					],
					"id": "imagick.floodfillpaintimage",
					"name": "Imagick::floodFillPaintImage",
					"description": "Changes the color value of any pixel that matches target"
				},
				"imagick.flopimage": {
					"tokens": [
						"Imagick::flopImage",
						"flopImage",
						"::flopImage"
					],
					"id": "imagick.flopimage",
					"name": "Imagick::flopImage",
					"description": "Creates a horizontal mirror image"
				},
				"imagick.forwardfouriertransformimage": {
					"tokens": [
						"Imagick::forwardFourierTransformImage",
						"forwardFourierTransformImage",
						"::forwardFourierTransformImage"
					],
					"id": "imagick.forwardfouriertransformimage",
					"name": "Imagick::forwardFourierTransformImage",
					"description": "Description"
				},
				"imagick.frameimage": {
					"tokens": [
						"Imagick::frameImage",
						"frameImage",
						"::frameImage"
					],
					"id": "imagick.frameimage",
					"name": "Imagick::frameImage",
					"description": "Adds a simulated three-dimensional border"
				},
				"imagick.functionimage": {
					"tokens": [
						"Imagick::functionImage",
						"functionImage",
						"::functionImage"
					],
					"id": "imagick.functionimage",
					"name": "Imagick::functionImage",
					"description": "Applies a function on the image"
				},
				"imagick.fximage": {
					"tokens": [
						"Imagick::fxImage",
						"fxImage",
						"::fxImage"
					],
					"id": "imagick.fximage",
					"name": "Imagick::fxImage",
					"description": "Evaluate expression for each pixel in the image"
				},
				"imagick.gammaimage": {
					"tokens": [
						"Imagick::gammaImage",
						"gammaImage",
						"::gammaImage"
					],
					"id": "imagick.gammaimage",
					"name": "Imagick::gammaImage",
					"description": "Gamma-corrects an image"
				},
				"imagick.gaussianblurimage": {
					"tokens": [
						"Imagick::gaussianBlurImage",
						"gaussianBlurImage",
						"::gaussianBlurImage"
					],
					"id": "imagick.gaussianblurimage",
					"name": "Imagick::gaussianBlurImage",
					"description": "Blurs an image"
				},
				"imagick.getcolorspace": {
					"tokens": [
						"Imagick::getColorspace",
						"getColorspace",
						"::getColorspace"
					],
					"id": "imagick.getcolorspace",
					"name": "Imagick::getColorspace",
					"description": "Gets the colorspace"
				},
				"imagick.getcompression": {
					"tokens": [
						"Imagick::getCompression",
						"getCompression",
						"::getCompression"
					],
					"id": "imagick.getcompression",
					"name": "Imagick::getCompression",
					"description": "Gets the object compression type"
				},
				"imagick.getcompressionquality": {
					"tokens": [
						"Imagick::getCompressionQuality",
						"getCompressionQuality",
						"::getCompressionQuality"
					],
					"id": "imagick.getcompressionquality",
					"name": "Imagick::getCompressionQuality",
					"description": "Gets the object compression quality"
				},
				"imagick.getcopyright": {
					"tokens": [
						"Imagick::getCopyright",
						"getCopyright",
						"::getCopyright"
					],
					"id": "imagick.getcopyright",
					"name": "Imagick::getCopyright",
					"description": "Returns the ImageMagick API copyright as a string"
				},
				"imagick.getfilename": {
					"tokens": [
						"Imagick::getFilename",
						"getFilename",
						"::getFilename"
					],
					"id": "imagick.getfilename",
					"name": "Imagick::getFilename",
					"description": "The filename associated with an image sequence"
				},
				"imagick.getfont": {
					"tokens": [
						"Imagick::getFont",
						"getFont",
						"::getFont"
					],
					"id": "imagick.getfont",
					"name": "Imagick::getFont",
					"description": "Gets font"
				},
				"imagick.getformat": {
					"tokens": [
						"Imagick::getFormat",
						"getFormat",
						"::getFormat"
					],
					"id": "imagick.getformat",
					"name": "Imagick::getFormat",
					"description": "Returns the format of the Imagick object"
				},
				"imagick.getgravity": {
					"tokens": [
						"Imagick::getGravity",
						"getGravity",
						"::getGravity"
					],
					"id": "imagick.getgravity",
					"name": "Imagick::getGravity",
					"description": "Gets the gravity"
				},
				"imagick.gethomeurl": {
					"tokens": [
						"Imagick::getHomeURL",
						"getHomeURL",
						"::getHomeURL"
					],
					"id": "imagick.gethomeurl",
					"name": "Imagick::getHomeURL",
					"description": "Returns the ImageMagick home URL"
				},
				"imagick.getimage": {
					"tokens": [
						"Imagick::getImage",
						"getImage",
						"::getImage"
					],
					"id": "imagick.getimage",
					"name": "Imagick::getImage",
					"description": "Returns a new Imagick object"
				},
				"imagick.getimagealphachannel": {
					"tokens": [
						"Imagick::getImageAlphaChannel",
						"getImageAlphaChannel",
						"::getImageAlphaChannel"
					],
					"id": "imagick.getimagealphachannel",
					"name": "Imagick::getImageAlphaChannel",
					"description": "Gets the image alpha channel"
				},
				"imagick.getimageartifact": {
					"tokens": [
						"Imagick::getImageArtifact",
						"getImageArtifact",
						"::getImageArtifact"
					],
					"id": "imagick.getimageartifact",
					"name": "Imagick::getImageArtifact",
					"description": "Get image artifact"
				},
				"imagick.getimageattribute": {
					"tokens": [
						"Imagick::getImageAttribute",
						"getImageAttribute",
						"::getImageAttribute"
					],
					"id": "imagick.getimageattribute",
					"name": "Imagick::getImageAttribute",
					"description": "Description"
				},
				"imagick.getimagebackgroundcolor": {
					"tokens": [
						"Imagick::getImageBackgroundColor",
						"getImageBackgroundColor",
						"::getImageBackgroundColor"
					],
					"id": "imagick.getimagebackgroundcolor",
					"name": "Imagick::getImageBackgroundColor",
					"description": "Returns the image background color"
				},
				"imagick.getimageblob": {
					"tokens": [
						"Imagick::getImageBlob",
						"getImageBlob",
						"::getImageBlob"
					],
					"id": "imagick.getimageblob",
					"name": "Imagick::getImageBlob",
					"description": "Returns the image sequence as a blob"
				},
				"imagick.getimageblueprimary": {
					"tokens": [
						"Imagick::getImageBluePrimary",
						"getImageBluePrimary",
						"::getImageBluePrimary"
					],
					"id": "imagick.getimageblueprimary",
					"name": "Imagick::getImageBluePrimary",
					"description": "Returns the chromaticy blue primary point"
				},
				"imagick.getimagebordercolor": {
					"tokens": [
						"Imagick::getImageBorderColor",
						"getImageBorderColor",
						"::getImageBorderColor"
					],
					"id": "imagick.getimagebordercolor",
					"name": "Imagick::getImageBorderColor",
					"description": "Returns the image border color"
				},
				"imagick.getimagechanneldepth": {
					"tokens": [
						"Imagick::getImageChannelDepth",
						"getImageChannelDepth",
						"::getImageChannelDepth"
					],
					"id": "imagick.getimagechanneldepth",
					"name": "Imagick::getImageChannelDepth",
					"description": "Gets the depth for a particular image channel"
				},
				"imagick.getimagechanneldistortion": {
					"tokens": [
						"Imagick::getImageChannelDistortion",
						"getImageChannelDistortion",
						"::getImageChannelDistortion"
					],
					"id": "imagick.getimagechanneldistortion",
					"name": "Imagick::getImageChannelDistortion",
					"description": "Compares image channels of an image to a reconstructed image"
				},
				"imagick.getimagechanneldistortions": {
					"tokens": [
						"Imagick::getImageChannelDistortions",
						"getImageChannelDistortions",
						"::getImageChannelDistortions"
					],
					"id": "imagick.getimagechanneldistortions",
					"name": "Imagick::getImageChannelDistortions",
					"description": "Gets channel distortions"
				},
				"imagick.getimagechannelextrema": {
					"tokens": [
						"Imagick::getImageChannelExtrema",
						"getImageChannelExtrema",
						"::getImageChannelExtrema"
					],
					"id": "imagick.getimagechannelextrema",
					"name": "Imagick::getImageChannelExtrema",
					"description": "Gets the extrema for one or more image channels"
				},
				"imagick.getimagechannelkurtosis": {
					"tokens": [
						"Imagick::getImageChannelKurtosis",
						"getImageChannelKurtosis",
						"::getImageChannelKurtosis"
					],
					"id": "imagick.getimagechannelkurtosis",
					"name": "Imagick::getImageChannelKurtosis",
					"description": "The getImageChannelKurtosis purpose"
				},
				"imagick.getimagechannelmean": {
					"tokens": [
						"Imagick::getImageChannelMean",
						"getImageChannelMean",
						"::getImageChannelMean"
					],
					"id": "imagick.getimagechannelmean",
					"name": "Imagick::getImageChannelMean",
					"description": "Gets the mean and standard deviation"
				},
				"imagick.getimagechannelrange": {
					"tokens": [
						"Imagick::getImageChannelRange",
						"getImageChannelRange",
						"::getImageChannelRange"
					],
					"id": "imagick.getimagechannelrange",
					"name": "Imagick::getImageChannelRange",
					"description": "Gets channel range"
				},
				"imagick.getimagechannelstatistics": {
					"tokens": [
						"Imagick::getImageChannelStatistics",
						"getImageChannelStatistics",
						"::getImageChannelStatistics"
					],
					"id": "imagick.getimagechannelstatistics",
					"name": "Imagick::getImageChannelStatistics",
					"description": "Returns statistics for each channel in the image"
				},
				"imagick.getimageclipmask": {
					"tokens": [
						"Imagick::getImageClipMask",
						"getImageClipMask",
						"::getImageClipMask"
					],
					"id": "imagick.getimageclipmask",
					"name": "Imagick::getImageClipMask",
					"description": "Gets image clip mask"
				},
				"imagick.getimagecolormapcolor": {
					"tokens": [
						"Imagick::getImageColormapColor",
						"getImageColormapColor",
						"::getImageColormapColor"
					],
					"id": "imagick.getimagecolormapcolor",
					"name": "Imagick::getImageColormapColor",
					"description": "Returns the color of the specified colormap index"
				},
				"imagick.getimagecolors": {
					"tokens": [
						"Imagick::getImageColors",
						"getImageColors",
						"::getImageColors"
					],
					"id": "imagick.getimagecolors",
					"name": "Imagick::getImageColors",
					"description": "Gets the number of unique colors in the image"
				},
				"imagick.getimagecolorspace": {
					"tokens": [
						"Imagick::getImageColorspace",
						"getImageColorspace",
						"::getImageColorspace"
					],
					"id": "imagick.getimagecolorspace",
					"name": "Imagick::getImageColorspace",
					"description": "Gets the image colorspace"
				},
				"imagick.getimagecompose": {
					"tokens": [
						"Imagick::getImageCompose",
						"getImageCompose",
						"::getImageCompose"
					],
					"id": "imagick.getimagecompose",
					"name": "Imagick::getImageCompose",
					"description": "Returns the composite operator associated with the image"
				},
				"imagick.getimagecompression": {
					"tokens": [
						"Imagick::getImageCompression",
						"getImageCompression",
						"::getImageCompression"
					],
					"id": "imagick.getimagecompression",
					"name": "Imagick::getImageCompression",
					"description": "Gets the current image's compression type"
				},
				"imagick.getimagecompressionquality": {
					"tokens": [
						"Imagick::getImageCompressionQuality",
						"getImageCompressionQuality",
						"::getImageCompressionQuality"
					],
					"id": "imagick.getimagecompressionquality",
					"name": "Imagick::getImageCompressionQuality",
					"description": "Gets the current image's compression quality"
				},
				"imagick.getimagedelay": {
					"tokens": [
						"Imagick::getImageDelay",
						"getImageDelay",
						"::getImageDelay"
					],
					"id": "imagick.getimagedelay",
					"name": "Imagick::getImageDelay",
					"description": "Gets the image delay"
				},
				"imagick.getimagedepth": {
					"tokens": [
						"Imagick::getImageDepth",
						"getImageDepth",
						"::getImageDepth"
					],
					"id": "imagick.getimagedepth",
					"name": "Imagick::getImageDepth",
					"description": "Gets the image depth"
				},
				"imagick.getimagedispose": {
					"tokens": [
						"Imagick::getImageDispose",
						"getImageDispose",
						"::getImageDispose"
					],
					"id": "imagick.getimagedispose",
					"name": "Imagick::getImageDispose",
					"description": "Gets the image disposal method"
				},
				"imagick.getimagedistortion": {
					"tokens": [
						"Imagick::getImageDistortion",
						"getImageDistortion",
						"::getImageDistortion"
					],
					"id": "imagick.getimagedistortion",
					"name": "Imagick::getImageDistortion",
					"description": "Compares an image to a reconstructed image"
				},
				"imagick.getimageextrema": {
					"tokens": [
						"Imagick::getImageExtrema",
						"getImageExtrema",
						"::getImageExtrema"
					],
					"id": "imagick.getimageextrema",
					"name": "Imagick::getImageExtrema",
					"description": "Gets the extrema for the image"
				},
				"imagick.getimagefilename": {
					"tokens": [
						"Imagick::getImageFilename",
						"getImageFilename",
						"::getImageFilename"
					],
					"id": "imagick.getimagefilename",
					"name": "Imagick::getImageFilename",
					"description": "Returns the filename of a particular image in a sequence"
				},
				"imagick.getimageformat": {
					"tokens": [
						"Imagick::getImageFormat",
						"getImageFormat",
						"::getImageFormat"
					],
					"id": "imagick.getimageformat",
					"name": "Imagick::getImageFormat",
					"description": "Returns the format of a particular image in a sequence"
				},
				"imagick.getimagegamma": {
					"tokens": [
						"Imagick::getImageGamma",
						"getImageGamma",
						"::getImageGamma"
					],
					"id": "imagick.getimagegamma",
					"name": "Imagick::getImageGamma",
					"description": "Gets the image gamma"
				},
				"imagick.getimagegeometry": {
					"tokens": [
						"Imagick::getImageGeometry",
						"getImageGeometry",
						"::getImageGeometry"
					],
					"id": "imagick.getimagegeometry",
					"name": "Imagick::getImageGeometry",
					"description": "Gets the width and height as an associative array"
				},
				"imagick.getimagegravity": {
					"tokens": [
						"Imagick::getImageGravity",
						"getImageGravity",
						"::getImageGravity"
					],
					"id": "imagick.getimagegravity",
					"name": "Imagick::getImageGravity",
					"description": "Gets the image gravity"
				},
				"imagick.getimagegreenprimary": {
					"tokens": [
						"Imagick::getImageGreenPrimary",
						"getImageGreenPrimary",
						"::getImageGreenPrimary"
					],
					"id": "imagick.getimagegreenprimary",
					"name": "Imagick::getImageGreenPrimary",
					"description": "Returns the chromaticy green primary point"
				},
				"imagick.getimageheight": {
					"tokens": [
						"Imagick::getImageHeight",
						"getImageHeight",
						"::getImageHeight"
					],
					"id": "imagick.getimageheight",
					"name": "Imagick::getImageHeight",
					"description": "Returns the image height"
				},
				"imagick.getimagehistogram": {
					"tokens": [
						"Imagick::getImageHistogram",
						"getImageHistogram",
						"::getImageHistogram"
					],
					"id": "imagick.getimagehistogram",
					"name": "Imagick::getImageHistogram",
					"description": "Gets the image histogram"
				},
				"imagick.getimageindex": {
					"tokens": [
						"Imagick::getImageIndex",
						"getImageIndex",
						"::getImageIndex"
					],
					"id": "imagick.getimageindex",
					"name": "Imagick::getImageIndex",
					"description": "Gets the index of the current active image"
				},
				"imagick.getimageinterlacescheme": {
					"tokens": [
						"Imagick::getImageInterlaceScheme",
						"getImageInterlaceScheme",
						"::getImageInterlaceScheme"
					],
					"id": "imagick.getimageinterlacescheme",
					"name": "Imagick::getImageInterlaceScheme",
					"description": "Gets the image interlace scheme"
				},
				"imagick.getimageinterpolatemethod": {
					"tokens": [
						"Imagick::getImageInterpolateMethod",
						"getImageInterpolateMethod",
						"::getImageInterpolateMethod"
					],
					"id": "imagick.getimageinterpolatemethod",
					"name": "Imagick::getImageInterpolateMethod",
					"description": "Returns the interpolation method"
				},
				"imagick.getimageiterations": {
					"tokens": [
						"Imagick::getImageIterations",
						"getImageIterations",
						"::getImageIterations"
					],
					"id": "imagick.getimageiterations",
					"name": "Imagick::getImageIterations",
					"description": "Gets the image iterations"
				},
				"imagick.getimagelength": {
					"tokens": [
						"Imagick::getImageLength",
						"getImageLength",
						"::getImageLength"
					],
					"id": "imagick.getimagelength",
					"name": "Imagick::getImageLength",
					"description": "Returns the image length in bytes"
				},
				"imagick.getimagemagicklicense": {
					"tokens": [
						"Imagick::getImageMagickLicense",
						"getImageMagickLicense",
						"::getImageMagickLicense"
					],
					"id": "imagick.getimagemagicklicense",
					"name": "Imagick::getImageMagickLicense",
					"description": "Returns a string containing the ImageMagick license"
				},
				"imagick.getimagematte": {
					"tokens": [
						"Imagick::getImageMatte",
						"getImageMatte",
						"::getImageMatte"
					],
					"id": "imagick.getimagematte",
					"name": "Imagick::getImageMatte",
					"description": "Return if the image has a matte channel"
				},
				"imagick.getimagemattecolor": {
					"tokens": [
						"Imagick::getImageMatteColor",
						"getImageMatteColor",
						"::getImageMatteColor"
					],
					"id": "imagick.getimagemattecolor",
					"name": "Imagick::getImageMatteColor",
					"description": "Returns the image matte color"
				},
				"imagick.getimagemimetype": {
					"tokens": [
						"Imagick::getImageMimeType",
						"getImageMimeType",
						"::getImageMimeType"
					],
					"id": "imagick.getimagemimetype",
					"name": "Imagick::getImageMimeType",
					"description": "Description"
				},
				"imagick.getimageorientation": {
					"tokens": [
						"Imagick::getImageOrientation",
						"getImageOrientation",
						"::getImageOrientation"
					],
					"id": "imagick.getimageorientation",
					"name": "Imagick::getImageOrientation",
					"description": "Gets the image orientation"
				},
				"imagick.getimagepage": {
					"tokens": [
						"Imagick::getImagePage",
						"getImagePage",
						"::getImagePage"
					],
					"id": "imagick.getimagepage",
					"name": "Imagick::getImagePage",
					"description": "Returns the page geometry"
				},
				"imagick.getimagepixelcolor": {
					"tokens": [
						"Imagick::getImagePixelColor",
						"getImagePixelColor",
						"::getImagePixelColor"
					],
					"id": "imagick.getimagepixelcolor",
					"name": "Imagick::getImagePixelColor",
					"description": "Returns the color of the specified pixel"
				},
				"imagick.getimageprofile": {
					"tokens": [
						"Imagick::getImageProfile",
						"getImageProfile",
						"::getImageProfile"
					],
					"id": "imagick.getimageprofile",
					"name": "Imagick::getImageProfile",
					"description": "Returns the named image profile"
				},
				"imagick.getimageprofiles": {
					"tokens": [
						"Imagick::getImageProfiles",
						"getImageProfiles",
						"::getImageProfiles"
					],
					"id": "imagick.getimageprofiles",
					"name": "Imagick::getImageProfiles",
					"description": "Returns the image profiles"
				},
				"imagick.getimageproperties": {
					"tokens": [
						"Imagick::getImageProperties",
						"getImageProperties",
						"::getImageProperties"
					],
					"id": "imagick.getimageproperties",
					"name": "Imagick::getImageProperties",
					"description": "Returns the image properties"
				},
				"imagick.getimageproperty": {
					"tokens": [
						"Imagick::getImageProperty",
						"getImageProperty",
						"::getImageProperty"
					],
					"id": "imagick.getimageproperty",
					"name": "Imagick::getImageProperty",
					"description": "Returns the named image property"
				},
				"imagick.getimageredprimary": {
					"tokens": [
						"Imagick::getImageRedPrimary",
						"getImageRedPrimary",
						"::getImageRedPrimary"
					],
					"id": "imagick.getimageredprimary",
					"name": "Imagick::getImageRedPrimary",
					"description": "Returns the chromaticity red primary point"
				},
				"imagick.getimageregion": {
					"tokens": [
						"Imagick::getImageRegion",
						"getImageRegion",
						"::getImageRegion"
					],
					"id": "imagick.getimageregion",
					"name": "Imagick::getImageRegion",
					"description": "Extracts a region of the image"
				},
				"imagick.getimagerenderingintent": {
					"tokens": [
						"Imagick::getImageRenderingIntent",
						"getImageRenderingIntent",
						"::getImageRenderingIntent"
					],
					"id": "imagick.getimagerenderingintent",
					"name": "Imagick::getImageRenderingIntent",
					"description": "Gets the image rendering intent"
				},
				"imagick.getimageresolution": {
					"tokens": [
						"Imagick::getImageResolution",
						"getImageResolution",
						"::getImageResolution"
					],
					"id": "imagick.getimageresolution",
					"name": "Imagick::getImageResolution",
					"description": "Gets the image X and Y resolution"
				},
				"imagick.getimagesblob": {
					"tokens": [
						"Imagick::getImagesBlob",
						"getImagesBlob",
						"::getImagesBlob"
					],
					"id": "imagick.getimagesblob",
					"name": "Imagick::getImagesBlob",
					"description": "Returns all image sequences as a blob"
				},
				"imagick.getimagescene": {
					"tokens": [
						"Imagick::getImageScene",
						"getImageScene",
						"::getImageScene"
					],
					"id": "imagick.getimagescene",
					"name": "Imagick::getImageScene",
					"description": "Gets the image scene"
				},
				"imagick.getimagesignature": {
					"tokens": [
						"Imagick::getImageSignature",
						"getImageSignature",
						"::getImageSignature"
					],
					"id": "imagick.getimagesignature",
					"name": "Imagick::getImageSignature",
					"description": "Generates an SHA-256 message digest"
				},
				"imagick.getimagesize": {
					"tokens": [
						"Imagick::getImageSize",
						"getImageSize",
						"::getImageSize"
					],
					"id": "imagick.getimagesize",
					"name": "Imagick::getImageSize",
					"description": "Returns the image length in bytes"
				},
				"imagick.getimagetickspersecond": {
					"tokens": [
						"Imagick::getImageTicksPerSecond",
						"getImageTicksPerSecond",
						"::getImageTicksPerSecond"
					],
					"id": "imagick.getimagetickspersecond",
					"name": "Imagick::getImageTicksPerSecond",
					"description": "Gets the image ticks-per-second"
				},
				"imagick.getimagetotalinkdensity": {
					"tokens": [
						"Imagick::getImageTotalInkDensity",
						"getImageTotalInkDensity",
						"::getImageTotalInkDensity"
					],
					"id": "imagick.getimagetotalinkdensity",
					"name": "Imagick::getImageTotalInkDensity",
					"description": "Gets the image total ink density"
				},
				"imagick.getimagetype": {
					"tokens": [
						"Imagick::getImageType",
						"getImageType",
						"::getImageType"
					],
					"id": "imagick.getimagetype",
					"name": "Imagick::getImageType",
					"description": "Gets the potential image type"
				},
				"imagick.getimageunits": {
					"tokens": [
						"Imagick::getImageUnits",
						"getImageUnits",
						"::getImageUnits"
					],
					"id": "imagick.getimageunits",
					"name": "Imagick::getImageUnits",
					"description": "Gets the image units of resolution"
				},
				"imagick.getimagevirtualpixelmethod": {
					"tokens": [
						"Imagick::getImageVirtualPixelMethod",
						"getImageVirtualPixelMethod",
						"::getImageVirtualPixelMethod"
					],
					"id": "imagick.getimagevirtualpixelmethod",
					"name": "Imagick::getImageVirtualPixelMethod",
					"description": "Returns the virtual pixel method"
				},
				"imagick.getimagewhitepoint": {
					"tokens": [
						"Imagick::getImageWhitePoint",
						"getImageWhitePoint",
						"::getImageWhitePoint"
					],
					"id": "imagick.getimagewhitepoint",
					"name": "Imagick::getImageWhitePoint",
					"description": "Returns the chromaticity white point"
				},
				"imagick.getimagewidth": {
					"tokens": [
						"Imagick::getImageWidth",
						"getImageWidth",
						"::getImageWidth"
					],
					"id": "imagick.getimagewidth",
					"name": "Imagick::getImageWidth",
					"description": "Returns the image width"
				},
				"imagick.getinterlacescheme": {
					"tokens": [
						"Imagick::getInterlaceScheme",
						"getInterlaceScheme",
						"::getInterlaceScheme"
					],
					"id": "imagick.getinterlacescheme",
					"name": "Imagick::getInterlaceScheme",
					"description": "Gets the object interlace scheme"
				},
				"imagick.getiteratorindex": {
					"tokens": [
						"Imagick::getIteratorIndex",
						"getIteratorIndex",
						"::getIteratorIndex"
					],
					"id": "imagick.getiteratorindex",
					"name": "Imagick::getIteratorIndex",
					"description": "Gets the index of the current active image"
				},
				"imagick.getnumberimages": {
					"tokens": [
						"Imagick::getNumberImages",
						"getNumberImages",
						"::getNumberImages"
					],
					"id": "imagick.getnumberimages",
					"name": "Imagick::getNumberImages",
					"description": "Returns the number of images in the object"
				},
				"imagick.getoption": {
					"tokens": [
						"Imagick::getOption",
						"getOption",
						"::getOption"
					],
					"id": "imagick.getoption",
					"name": "Imagick::getOption",
					"description": "Returns a value associated with the specified key"
				},
				"imagick.getpackagename": {
					"tokens": [
						"Imagick::getPackageName",
						"getPackageName",
						"::getPackageName"
					],
					"id": "imagick.getpackagename",
					"name": "Imagick::getPackageName",
					"description": "Returns the ImageMagick package name"
				},
				"imagick.getpage": {
					"tokens": [
						"Imagick::getPage",
						"getPage",
						"::getPage"
					],
					"id": "imagick.getpage",
					"name": "Imagick::getPage",
					"description": "Returns the page geometry"
				},
				"imagick.getpixeliterator": {
					"tokens": [
						"Imagick::getPixelIterator",
						"getPixelIterator",
						"::getPixelIterator"
					],
					"id": "imagick.getpixeliterator",
					"name": "Imagick::getPixelIterator",
					"description": "Returns a MagickPixelIterator"
				},
				"imagick.getpixelregioniterator": {
					"tokens": [
						"Imagick::getPixelRegionIterator",
						"getPixelRegionIterator",
						"::getPixelRegionIterator"
					],
					"id": "imagick.getpixelregioniterator",
					"name": "Imagick::getPixelRegionIterator",
					"description": "Get an ImagickPixelIterator for an image section"
				},
				"imagick.getpointsize": {
					"tokens": [
						"Imagick::getPointSize",
						"getPointSize",
						"::getPointSize"
					],
					"id": "imagick.getpointsize",
					"name": "Imagick::getPointSize",
					"description": "Gets point size"
				},
				"imagick.getquantum": {
					"tokens": [
						"Imagick::getQuantum",
						"getQuantum",
						"::getQuantum"
					],
					"id": "imagick.getquantum",
					"name": "Imagick::getQuantum",
					"description": "Description"
				},
				"imagick.getquantumdepth": {
					"tokens": [
						"Imagick::getQuantumDepth",
						"getQuantumDepth",
						"::getQuantumDepth"
					],
					"id": "imagick.getquantumdepth",
					"name": "Imagick::getQuantumDepth",
					"description": "Gets the quantum depth"
				},
				"imagick.getquantumrange": {
					"tokens": [
						"Imagick::getQuantumRange",
						"getQuantumRange",
						"::getQuantumRange"
					],
					"id": "imagick.getquantumrange",
					"name": "Imagick::getQuantumRange",
					"description": "Returns the Imagick quantum range"
				},
				"imagick.getregistry": {
					"tokens": [
						"Imagick::getRegistry",
						"getRegistry",
						"::getRegistry"
					],
					"id": "imagick.getregistry",
					"name": "Imagick::getRegistry",
					"description": "Description"
				},
				"imagick.getreleasedate": {
					"tokens": [
						"Imagick::getReleaseDate",
						"getReleaseDate",
						"::getReleaseDate"
					],
					"id": "imagick.getreleasedate",
					"name": "Imagick::getReleaseDate",
					"description": "Returns the ImageMagick release date"
				},
				"imagick.getresource": {
					"tokens": [
						"Imagick::getResource",
						"getResource",
						"::getResource"
					],
					"id": "imagick.getresource",
					"name": "Imagick::getResource",
					"description": "Returns the specified resource's memory usage"
				},
				"imagick.getresourcelimit": {
					"tokens": [
						"Imagick::getResourceLimit",
						"getResourceLimit",
						"::getResourceLimit"
					],
					"id": "imagick.getresourcelimit",
					"name": "Imagick::getResourceLimit",
					"description": "Returns the specified resource limit"
				},
				"imagick.getsamplingfactors": {
					"tokens": [
						"Imagick::getSamplingFactors",
						"getSamplingFactors",
						"::getSamplingFactors"
					],
					"id": "imagick.getsamplingfactors",
					"name": "Imagick::getSamplingFactors",
					"description": "Gets the horizontal and vertical sampling factor"
				},
				"imagick.getsize": {
					"tokens": [
						"Imagick::getSize",
						"getSize",
						"::getSize"
					],
					"id": "imagick.getsize",
					"name": "Imagick::getSize",
					"description": "Returns the size associated with the Imagick object"
				},
				"imagick.getsizeoffset": {
					"tokens": [
						"Imagick::getSizeOffset",
						"getSizeOffset",
						"::getSizeOffset"
					],
					"id": "imagick.getsizeoffset",
					"name": "Imagick::getSizeOffset",
					"description": "Returns the size offset"
				},
				"imagick.getversion": {
					"tokens": [
						"Imagick::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "imagick.getversion",
					"name": "Imagick::getVersion",
					"description": "Returns the ImageMagick API version"
				},
				"imagick.haldclutimage": {
					"tokens": [
						"Imagick::haldClutImage",
						"haldClutImage",
						"::haldClutImage"
					],
					"id": "imagick.haldclutimage",
					"name": "Imagick::haldClutImage",
					"description": "Replaces colors in the image"
				},
				"imagick.hasnextimage": {
					"tokens": [
						"Imagick::hasNextImage",
						"hasNextImage",
						"::hasNextImage"
					],
					"id": "imagick.hasnextimage",
					"name": "Imagick::hasNextImage",
					"description": "Checks if the object has more images"
				},
				"imagick.haspreviousimage": {
					"tokens": [
						"Imagick::hasPreviousImage",
						"hasPreviousImage",
						"::hasPreviousImage"
					],
					"id": "imagick.haspreviousimage",
					"name": "Imagick::hasPreviousImage",
					"description": "Checks if the object has a previous image"
				},
				"imagick.identifyformat": {
					"tokens": [
						"Imagick::identifyFormat",
						"identifyFormat",
						"::identifyFormat"
					],
					"id": "imagick.identifyformat",
					"name": "Imagick::identifyFormat",
					"description": "Description"
				},
				"imagick.identifyimage": {
					"tokens": [
						"Imagick::identifyImage",
						"identifyImage",
						"::identifyImage"
					],
					"id": "imagick.identifyimage",
					"name": "Imagick::identifyImage",
					"description": "Identifies an image and fetches attributes"
				},
				"imagick.implodeimage": {
					"tokens": [
						"Imagick::implodeImage",
						"implodeImage",
						"::implodeImage"
					],
					"id": "imagick.implodeimage",
					"name": "Imagick::implodeImage",
					"description": "Creates a new image as a copy"
				},
				"imagick.importimagepixels": {
					"tokens": [
						"Imagick::importImagePixels",
						"importImagePixels",
						"::importImagePixels"
					],
					"id": "imagick.importimagepixels",
					"name": "Imagick::importImagePixels",
					"description": "Imports image pixels"
				},
				"imagick.inversefouriertransformimage": {
					"tokens": [
						"Imagick::inverseFourierTransformImage",
						"inverseFourierTransformImage",
						"::inverseFourierTransformImage"
					],
					"id": "imagick.inversefouriertransformimage",
					"name": "Imagick::inverseFourierTransformImage",
					"description": "Description"
				},
				"imagick.labelimage": {
					"tokens": [
						"Imagick::labelImage",
						"labelImage",
						"::labelImage"
					],
					"id": "imagick.labelimage",
					"name": "Imagick::labelImage",
					"description": "Adds a label to an image"
				},
				"imagick.levelimage": {
					"tokens": [
						"Imagick::levelImage",
						"levelImage",
						"::levelImage"
					],
					"id": "imagick.levelimage",
					"name": "Imagick::levelImage",
					"description": "Adjusts the levels of an image"
				},
				"imagick.linearstretchimage": {
					"tokens": [
						"Imagick::linearStretchImage",
						"linearStretchImage",
						"::linearStretchImage"
					],
					"id": "imagick.linearstretchimage",
					"name": "Imagick::linearStretchImage",
					"description": "Stretches with saturation the image intensity"
				},
				"imagick.liquidrescaleimage": {
					"tokens": [
						"Imagick::liquidRescaleImage",
						"liquidRescaleImage",
						"::liquidRescaleImage"
					],
					"id": "imagick.liquidrescaleimage",
					"name": "Imagick::liquidRescaleImage",
					"description": "Animates an image or images"
				},
				"imagick.listregistry": {
					"tokens": [
						"Imagick::listRegistry",
						"listRegistry",
						"::listRegistry"
					],
					"id": "imagick.listregistry",
					"name": "Imagick::listRegistry",
					"description": "Description"
				},
				"imagick.magnifyimage": {
					"tokens": [
						"Imagick::magnifyImage",
						"magnifyImage",
						"::magnifyImage"
					],
					"id": "imagick.magnifyimage",
					"name": "Imagick::magnifyImage",
					"description": "Scales an image proportionally 2x"
				},
				"imagick.mapimage": {
					"tokens": [
						"Imagick::mapImage",
						"mapImage",
						"::mapImage"
					],
					"id": "imagick.mapimage",
					"name": "Imagick::mapImage",
					"description": "Replaces the colors of an image with the closest color from a reference image."
				},
				"imagick.mattefloodfillimage": {
					"tokens": [
						"Imagick::matteFloodfillImage",
						"matteFloodfillImage",
						"::matteFloodfillImage"
					],
					"id": "imagick.mattefloodfillimage",
					"name": "Imagick::matteFloodfillImage",
					"description": "Changes the transparency value of a color"
				},
				"imagick.medianfilterimage": {
					"tokens": [
						"Imagick::medianFilterImage",
						"medianFilterImage",
						"::medianFilterImage"
					],
					"id": "imagick.medianfilterimage",
					"name": "Imagick::medianFilterImage",
					"description": "Applies a digital filter"
				},
				"imagick.mergeimagelayers": {
					"tokens": [
						"Imagick::mergeImageLayers",
						"mergeImageLayers",
						"::mergeImageLayers"
					],
					"id": "imagick.mergeimagelayers",
					"name": "Imagick::mergeImageLayers",
					"description": "Merges image layers"
				},
				"imagick.minifyimage": {
					"tokens": [
						"Imagick::minifyImage",
						"minifyImage",
						"::minifyImage"
					],
					"id": "imagick.minifyimage",
					"name": "Imagick::minifyImage",
					"description": "Scales an image proportionally to half its size"
				},
				"imagick.modulateimage": {
					"tokens": [
						"Imagick::modulateImage",
						"modulateImage",
						"::modulateImage"
					],
					"id": "imagick.modulateimage",
					"name": "Imagick::modulateImage",
					"description": "Control the brightness, saturation, and hue"
				},
				"imagick.montageimage": {
					"tokens": [
						"Imagick::montageImage",
						"montageImage",
						"::montageImage"
					],
					"id": "imagick.montageimage",
					"name": "Imagick::montageImage",
					"description": "Creates a composite image"
				},
				"imagick.morphimages": {
					"tokens": [
						"Imagick::morphImages",
						"morphImages",
						"::morphImages"
					],
					"id": "imagick.morphimages",
					"name": "Imagick::morphImages",
					"description": "Method morphs a set of images"
				},
				"imagick.morphology": {
					"tokens": [
						"Imagick::morphology",
						"morphology",
						"::morphology"
					],
					"id": "imagick.morphology",
					"name": "Imagick::morphology",
					"description": "Description"
				},
				"imagick.mosaicimages": {
					"tokens": [
						"Imagick::mosaicImages",
						"mosaicImages",
						"::mosaicImages"
					],
					"id": "imagick.mosaicimages",
					"name": "Imagick::mosaicImages",
					"description": "Forms a mosaic from images"
				},
				"imagick.motionblurimage": {
					"tokens": [
						"Imagick::motionBlurImage",
						"motionBlurImage",
						"::motionBlurImage"
					],
					"id": "imagick.motionblurimage",
					"name": "Imagick::motionBlurImage",
					"description": "Simulates motion blur"
				},
				"imagick.negateimage": {
					"tokens": [
						"Imagick::negateImage",
						"negateImage",
						"::negateImage"
					],
					"id": "imagick.negateimage",
					"name": "Imagick::negateImage",
					"description": "Negates the colors in the reference image"
				},
				"imagick.newimage": {
					"tokens": [
						"Imagick::newImage",
						"newImage",
						"::newImage"
					],
					"id": "imagick.newimage",
					"name": "Imagick::newImage",
					"description": "Creates a new image"
				},
				"imagick.newpseudoimage": {
					"tokens": [
						"Imagick::newPseudoImage",
						"newPseudoImage",
						"::newPseudoImage"
					],
					"id": "imagick.newpseudoimage",
					"name": "Imagick::newPseudoImage",
					"description": "Creates a new image"
				},
				"imagick.nextimage": {
					"tokens": [
						"Imagick::nextImage",
						"nextImage",
						"::nextImage"
					],
					"id": "imagick.nextimage",
					"name": "Imagick::nextImage",
					"description": "Moves to the next image"
				},
				"imagick.normalizeimage": {
					"tokens": [
						"Imagick::normalizeImage",
						"normalizeImage",
						"::normalizeImage"
					],
					"id": "imagick.normalizeimage",
					"name": "Imagick::normalizeImage",
					"description": "Enhances the contrast of a color image"
				},
				"imagick.oilpaintimage": {
					"tokens": [
						"Imagick::oilPaintImage",
						"oilPaintImage",
						"::oilPaintImage"
					],
					"id": "imagick.oilpaintimage",
					"name": "Imagick::oilPaintImage",
					"description": "Simulates an oil painting"
				},
				"imagick.opaquepaintimage": {
					"tokens": [
						"Imagick::opaquePaintImage",
						"opaquePaintImage",
						"::opaquePaintImage"
					],
					"id": "imagick.opaquepaintimage",
					"name": "Imagick::opaquePaintImage",
					"description": "Changes the color value of any pixel that matches target"
				},
				"imagick.optimizeimagelayers": {
					"tokens": [
						"Imagick::optimizeImageLayers",
						"optimizeImageLayers",
						"::optimizeImageLayers"
					],
					"id": "imagick.optimizeimagelayers",
					"name": "Imagick::optimizeImageLayers",
					"description": "Removes repeated portions of images to optimize"
				},
				"imagick.orderedposterizeimage": {
					"tokens": [
						"Imagick::orderedPosterizeImage",
						"orderedPosterizeImage",
						"::orderedPosterizeImage"
					],
					"id": "imagick.orderedposterizeimage",
					"name": "Imagick::orderedPosterizeImage",
					"description": "Performs an ordered dither"
				},
				"imagick.paintfloodfillimage": {
					"tokens": [
						"Imagick::paintFloodfillImage",
						"paintFloodfillImage",
						"::paintFloodfillImage"
					],
					"id": "imagick.paintfloodfillimage",
					"name": "Imagick::paintFloodfillImage",
					"description": "Changes the color value of any pixel that matches target"
				},
				"imagick.paintopaqueimage": {
					"tokens": [
						"Imagick::paintOpaqueImage",
						"paintOpaqueImage",
						"::paintOpaqueImage"
					],
					"id": "imagick.paintopaqueimage",
					"name": "Imagick::paintOpaqueImage",
					"description": "Change any pixel that matches color"
				},
				"imagick.painttransparentimage": {
					"tokens": [
						"Imagick::paintTransparentImage",
						"paintTransparentImage",
						"::paintTransparentImage"
					],
					"id": "imagick.painttransparentimage",
					"name": "Imagick::paintTransparentImage",
					"description": "Changes any pixel that matches color with the color defined by fill"
				},
				"imagick.pingimage": {
					"tokens": [
						"Imagick::pingImage",
						"pingImage",
						"::pingImage"
					],
					"id": "imagick.pingimage",
					"name": "Imagick::pingImage",
					"description": "Fetch basic attributes about the image"
				},
				"imagick.pingimageblob": {
					"tokens": [
						"Imagick::pingImageBlob",
						"pingImageBlob",
						"::pingImageBlob"
					],
					"id": "imagick.pingimageblob",
					"name": "Imagick::pingImageBlob",
					"description": "Quickly fetch attributes"
				},
				"imagick.pingimagefile": {
					"tokens": [
						"Imagick::pingImageFile",
						"pingImageFile",
						"::pingImageFile"
					],
					"id": "imagick.pingimagefile",
					"name": "Imagick::pingImageFile",
					"description": "Get basic image attributes in a lightweight manner"
				},
				"imagick.polaroidimage": {
					"tokens": [
						"Imagick::polaroidImage",
						"polaroidImage",
						"::polaroidImage"
					],
					"id": "imagick.polaroidimage",
					"name": "Imagick::polaroidImage",
					"description": "Simulates a Polaroid picture"
				},
				"imagick.posterizeimage": {
					"tokens": [
						"Imagick::posterizeImage",
						"posterizeImage",
						"::posterizeImage"
					],
					"id": "imagick.posterizeimage",
					"name": "Imagick::posterizeImage",
					"description": "Reduces the image to a limited number of color level"
				},
				"imagick.previewimages": {
					"tokens": [
						"Imagick::previewImages",
						"previewImages",
						"::previewImages"
					],
					"id": "imagick.previewimages",
					"name": "Imagick::previewImages",
					"description": "Quickly pin-point appropriate parameters for image processing"
				},
				"imagick.previousimage": {
					"tokens": [
						"Imagick::previousImage",
						"previousImage",
						"::previousImage"
					],
					"id": "imagick.previousimage",
					"name": "Imagick::previousImage",
					"description": "Move to the previous image in the object"
				},
				"imagick.profileimage": {
					"tokens": [
						"Imagick::profileImage",
						"profileImage",
						"::profileImage"
					],
					"id": "imagick.profileimage",
					"name": "Imagick::profileImage",
					"description": "Adds or removes a profile from an image"
				},
				"imagick.quantizeimage": {
					"tokens": [
						"Imagick::quantizeImage",
						"quantizeImage",
						"::quantizeImage"
					],
					"id": "imagick.quantizeimage",
					"name": "Imagick::quantizeImage",
					"description": "Analyzes the colors within a reference image"
				},
				"imagick.quantizeimages": {
					"tokens": [
						"Imagick::quantizeImages",
						"quantizeImages",
						"::quantizeImages"
					],
					"id": "imagick.quantizeimages",
					"name": "Imagick::quantizeImages",
					"description": "Analyzes the colors within a sequence of images"
				},
				"imagick.queryfontmetrics": {
					"tokens": [
						"Imagick::queryFontMetrics",
						"queryFontMetrics",
						"::queryFontMetrics"
					],
					"id": "imagick.queryfontmetrics",
					"name": "Imagick::queryFontMetrics",
					"description": "Returns an array representing the font metrics"
				},
				"imagick.queryfonts": {
					"tokens": [
						"Imagick::queryFonts",
						"queryFonts",
						"::queryFonts"
					],
					"id": "imagick.queryfonts",
					"name": "Imagick::queryFonts",
					"description": "Returns the configured fonts"
				},
				"imagick.queryformats": {
					"tokens": [
						"Imagick::queryFormats",
						"queryFormats",
						"::queryFormats"
					],
					"id": "imagick.queryformats",
					"name": "Imagick::queryFormats",
					"description": "Returns formats supported by Imagick"
				},
				"imagick.radialblurimage": {
					"tokens": [
						"Imagick::radialBlurImage",
						"radialBlurImage",
						"::radialBlurImage"
					],
					"id": "imagick.radialblurimage",
					"name": "Imagick::radialBlurImage",
					"description": "Radial blurs an image"
				},
				"imagick.raiseimage": {
					"tokens": [
						"Imagick::raiseImage",
						"raiseImage",
						"::raiseImage"
					],
					"id": "imagick.raiseimage",
					"name": "Imagick::raiseImage",
					"description": "Creates a simulated 3d button-like effect"
				},
				"imagick.randomthresholdimage": {
					"tokens": [
						"Imagick::randomThresholdImage",
						"randomThresholdImage",
						"::randomThresholdImage"
					],
					"id": "imagick.randomthresholdimage",
					"name": "Imagick::randomThresholdImage",
					"description": "Creates a high-contrast, two-color image"
				},
				"imagick.readimage": {
					"tokens": [
						"Imagick::readImage",
						"readImage",
						"::readImage"
					],
					"id": "imagick.readimage",
					"name": "Imagick::readImage",
					"description": "Reads image from filename"
				},
				"imagick.readimageblob": {
					"tokens": [
						"Imagick::readImageBlob",
						"readImageBlob",
						"::readImageBlob"
					],
					"id": "imagick.readimageblob",
					"name": "Imagick::readImageBlob",
					"description": "Reads image from a binary string"
				},
				"imagick.readimagefile": {
					"tokens": [
						"Imagick::readImageFile",
						"readImageFile",
						"::readImageFile"
					],
					"id": "imagick.readimagefile",
					"name": "Imagick::readImageFile",
					"description": "Reads image from open filehandle"
				},
				"imagick.readimages": {
					"tokens": [
						"Imagick::readimages",
						"readimages",
						"::readimages"
					],
					"id": "imagick.readimages",
					"name": "Imagick::readimages",
					"description": "Description"
				},
				"imagick.recolorimage": {
					"tokens": [
						"Imagick::recolorImage",
						"recolorImage",
						"::recolorImage"
					],
					"id": "imagick.recolorimage",
					"name": "Imagick::recolorImage",
					"description": "Recolors image"
				},
				"imagick.reducenoiseimage": {
					"tokens": [
						"Imagick::reduceNoiseImage",
						"reduceNoiseImage",
						"::reduceNoiseImage"
					],
					"id": "imagick.reducenoiseimage",
					"name": "Imagick::reduceNoiseImage",
					"description": "Smooths the contours of an image"
				},
				"imagick.remapimage": {
					"tokens": [
						"Imagick::remapImage",
						"remapImage",
						"::remapImage"
					],
					"id": "imagick.remapimage",
					"name": "Imagick::remapImage",
					"description": "Remaps image colors"
				},
				"imagick.removeimage": {
					"tokens": [
						"Imagick::removeImage",
						"removeImage",
						"::removeImage"
					],
					"id": "imagick.removeimage",
					"name": "Imagick::removeImage",
					"description": "Removes an image from the image list"
				},
				"imagick.removeimageprofile": {
					"tokens": [
						"Imagick::removeImageProfile",
						"removeImageProfile",
						"::removeImageProfile"
					],
					"id": "imagick.removeimageprofile",
					"name": "Imagick::removeImageProfile",
					"description": "Removes the named image profile and returns it"
				},
				"imagick.render": {
					"tokens": [
						"Imagick::render",
						"render",
						"::render"
					],
					"id": "imagick.render",
					"name": "Imagick::render",
					"description": "Renders all preceding drawing commands"
				},
				"imagick.resampleimage": {
					"tokens": [
						"Imagick::resampleImage",
						"resampleImage",
						"::resampleImage"
					],
					"id": "imagick.resampleimage",
					"name": "Imagick::resampleImage",
					"description": "Resample image to desired resolution"
				},
				"imagick.resetimagepage": {
					"tokens": [
						"Imagick::resetImagePage",
						"resetImagePage",
						"::resetImagePage"
					],
					"id": "imagick.resetimagepage",
					"name": "Imagick::resetImagePage",
					"description": "Reset image page"
				},
				"imagick.resizeimage": {
					"tokens": [
						"Imagick::resizeImage",
						"resizeImage",
						"::resizeImage"
					],
					"id": "imagick.resizeimage",
					"name": "Imagick::resizeImage",
					"description": "Scales an image"
				},
				"imagick.rollimage": {
					"tokens": [
						"Imagick::rollImage",
						"rollImage",
						"::rollImage"
					],
					"id": "imagick.rollimage",
					"name": "Imagick::rollImage",
					"description": "Offsets an image"
				},
				"imagick.rotateimage": {
					"tokens": [
						"Imagick::rotateImage",
						"rotateImage",
						"::rotateImage"
					],
					"id": "imagick.rotateimage",
					"name": "Imagick::rotateImage",
					"description": "Rotates an image"
				},
				"imagick.rotationalblurimage": {
					"tokens": [
						"Imagick::rotationalBlurImage",
						"rotationalBlurImage",
						"::rotationalBlurImage"
					],
					"id": "imagick.rotationalblurimage",
					"name": "Imagick::rotationalBlurImage",
					"description": "Description"
				},
				"imagick.roundcorners": {
					"tokens": [
						"Imagick::roundCorners",
						"roundCorners",
						"::roundCorners"
					],
					"id": "imagick.roundcorners",
					"name": "Imagick::roundCorners",
					"description": "Rounds image corners"
				},
				"imagick.sampleimage": {
					"tokens": [
						"Imagick::sampleImage",
						"sampleImage",
						"::sampleImage"
					],
					"id": "imagick.sampleimage",
					"name": "Imagick::sampleImage",
					"description": "Scales an image with pixel sampling"
				},
				"imagick.scaleimage": {
					"tokens": [
						"Imagick::scaleImage",
						"scaleImage",
						"::scaleImage"
					],
					"id": "imagick.scaleimage",
					"name": "Imagick::scaleImage",
					"description": "Scales the size of an image"
				},
				"imagick.segmentimage": {
					"tokens": [
						"Imagick::segmentImage",
						"segmentImage",
						"::segmentImage"
					],
					"id": "imagick.segmentimage",
					"name": "Imagick::segmentImage",
					"description": "Segments an image"
				},
				"imagick.selectiveblurimage": {
					"tokens": [
						"Imagick::selectiveBlurImage",
						"selectiveBlurImage",
						"::selectiveBlurImage"
					],
					"id": "imagick.selectiveblurimage",
					"name": "Imagick::selectiveBlurImage",
					"description": "Description"
				},
				"imagick.separateimagechannel": {
					"tokens": [
						"Imagick::separateImageChannel",
						"separateImageChannel",
						"::separateImageChannel"
					],
					"id": "imagick.separateimagechannel",
					"name": "Imagick::separateImageChannel",
					"description": "Separates a channel from the image"
				},
				"imagick.sepiatoneimage": {
					"tokens": [
						"Imagick::sepiaToneImage",
						"sepiaToneImage",
						"::sepiaToneImage"
					],
					"id": "imagick.sepiatoneimage",
					"name": "Imagick::sepiaToneImage",
					"description": "Sepia tones an image"
				},
				"imagick.setbackgroundcolor": {
					"tokens": [
						"Imagick::setBackgroundColor",
						"setBackgroundColor",
						"::setBackgroundColor"
					],
					"id": "imagick.setbackgroundcolor",
					"name": "Imagick::setBackgroundColor",
					"description": "Sets the object's default background color"
				},
				"imagick.setcolorspace": {
					"tokens": [
						"Imagick::setColorspace",
						"setColorspace",
						"::setColorspace"
					],
					"id": "imagick.setcolorspace",
					"name": "Imagick::setColorspace",
					"description": "Set colorspace"
				},
				"imagick.setcompression": {
					"tokens": [
						"Imagick::setCompression",
						"setCompression",
						"::setCompression"
					],
					"id": "imagick.setcompression",
					"name": "Imagick::setCompression",
					"description": "Sets the object's default compression type"
				},
				"imagick.setcompressionquality": {
					"tokens": [
						"Imagick::setCompressionQuality",
						"setCompressionQuality",
						"::setCompressionQuality"
					],
					"id": "imagick.setcompressionquality",
					"name": "Imagick::setCompressionQuality",
					"description": "Sets the object's default compression quality"
				},
				"imagick.setfilename": {
					"tokens": [
						"Imagick::setFilename",
						"setFilename",
						"::setFilename"
					],
					"id": "imagick.setfilename",
					"name": "Imagick::setFilename",
					"description": "Sets the filename before you read or write the image"
				},
				"imagick.setfirstiterator": {
					"tokens": [
						"Imagick::setFirstIterator",
						"setFirstIterator",
						"::setFirstIterator"
					],
					"id": "imagick.setfirstiterator",
					"name": "Imagick::setFirstIterator",
					"description": "Sets the Imagick iterator to the first image"
				},
				"imagick.setfont": {
					"tokens": [
						"Imagick::setFont",
						"setFont",
						"::setFont"
					],
					"id": "imagick.setfont",
					"name": "Imagick::setFont",
					"description": "Sets font"
				},
				"imagick.setformat": {
					"tokens": [
						"Imagick::setFormat",
						"setFormat",
						"::setFormat"
					],
					"id": "imagick.setformat",
					"name": "Imagick::setFormat",
					"description": "Sets the format of the Imagick object"
				},
				"imagick.setgravity": {
					"tokens": [
						"Imagick::setGravity",
						"setGravity",
						"::setGravity"
					],
					"id": "imagick.setgravity",
					"name": "Imagick::setGravity",
					"description": "Sets the gravity"
				},
				"imagick.setimage": {
					"tokens": [
						"Imagick::setImage",
						"setImage",
						"::setImage"
					],
					"id": "imagick.setimage",
					"name": "Imagick::setImage",
					"description": "Replaces image in the object"
				},
				"imagick.setimagealphachannel": {
					"tokens": [
						"Imagick::setImageAlphaChannel",
						"setImageAlphaChannel",
						"::setImageAlphaChannel"
					],
					"id": "imagick.setimagealphachannel",
					"name": "Imagick::setImageAlphaChannel",
					"description": "Sets image alpha channel"
				},
				"imagick.setimageartifact": {
					"tokens": [
						"Imagick::setImageArtifact",
						"setImageArtifact",
						"::setImageArtifact"
					],
					"id": "imagick.setimageartifact",
					"name": "Imagick::setImageArtifact",
					"description": "Set image artifact"
				},
				"imagick.setimageattribute": {
					"tokens": [
						"Imagick::setImageAttribute",
						"setImageAttribute",
						"::setImageAttribute"
					],
					"id": "imagick.setimageattribute",
					"name": "Imagick::setImageAttribute",
					"description": "Description"
				},
				"imagick.setimagebackgroundcolor": {
					"tokens": [
						"Imagick::setImageBackgroundColor",
						"setImageBackgroundColor",
						"::setImageBackgroundColor"
					],
					"id": "imagick.setimagebackgroundcolor",
					"name": "Imagick::setImageBackgroundColor",
					"description": "Sets the image background color"
				},
				"imagick.setimagebias": {
					"tokens": [
						"Imagick::setImageBias",
						"setImageBias",
						"::setImageBias"
					],
					"id": "imagick.setimagebias",
					"name": "Imagick::setImageBias",
					"description": "Sets the image bias for any method that convolves an image"
				},
				"imagick.setimagebiasquantum": {
					"tokens": [
						"Imagick::setImageBiasQuantum",
						"setImageBiasQuantum",
						"::setImageBiasQuantum"
					],
					"id": "imagick.setimagebiasquantum",
					"name": "Imagick::setImageBiasQuantum",
					"description": "Description"
				},
				"imagick.setimageblueprimary": {
					"tokens": [
						"Imagick::setImageBluePrimary",
						"setImageBluePrimary",
						"::setImageBluePrimary"
					],
					"id": "imagick.setimageblueprimary",
					"name": "Imagick::setImageBluePrimary",
					"description": "Sets the image chromaticity blue primary point"
				},
				"imagick.setimagebordercolor": {
					"tokens": [
						"Imagick::setImageBorderColor",
						"setImageBorderColor",
						"::setImageBorderColor"
					],
					"id": "imagick.setimagebordercolor",
					"name": "Imagick::setImageBorderColor",
					"description": "Sets the image border color"
				},
				"imagick.setimagechanneldepth": {
					"tokens": [
						"Imagick::setImageChannelDepth",
						"setImageChannelDepth",
						"::setImageChannelDepth"
					],
					"id": "imagick.setimagechanneldepth",
					"name": "Imagick::setImageChannelDepth",
					"description": "Sets the depth of a particular image channel"
				},
				"imagick.setimageclipmask": {
					"tokens": [
						"Imagick::setImageClipMask",
						"setImageClipMask",
						"::setImageClipMask"
					],
					"id": "imagick.setimageclipmask",
					"name": "Imagick::setImageClipMask",
					"description": "Sets image clip mask"
				},
				"imagick.setimagecolormapcolor": {
					"tokens": [
						"Imagick::setImageColormapColor",
						"setImageColormapColor",
						"::setImageColormapColor"
					],
					"id": "imagick.setimagecolormapcolor",
					"name": "Imagick::setImageColormapColor",
					"description": "Sets the color of the specified colormap index"
				},
				"imagick.setimagecolorspace": {
					"tokens": [
						"Imagick::setImageColorspace",
						"setImageColorspace",
						"::setImageColorspace"
					],
					"id": "imagick.setimagecolorspace",
					"name": "Imagick::setImageColorspace",
					"description": "Sets the image colorspace"
				},
				"imagick.setimagecompose": {
					"tokens": [
						"Imagick::setImageCompose",
						"setImageCompose",
						"::setImageCompose"
					],
					"id": "imagick.setimagecompose",
					"name": "Imagick::setImageCompose",
					"description": "Sets the image composite operator"
				},
				"imagick.setimagecompression": {
					"tokens": [
						"Imagick::setImageCompression",
						"setImageCompression",
						"::setImageCompression"
					],
					"id": "imagick.setimagecompression",
					"name": "Imagick::setImageCompression",
					"description": "Sets the image compression"
				},
				"imagick.setimagecompressionquality": {
					"tokens": [
						"Imagick::setImageCompressionQuality",
						"setImageCompressionQuality",
						"::setImageCompressionQuality"
					],
					"id": "imagick.setimagecompressionquality",
					"name": "Imagick::setImageCompressionQuality",
					"description": "Sets the image compression quality"
				},
				"imagick.setimagedelay": {
					"tokens": [
						"Imagick::setImageDelay",
						"setImageDelay",
						"::setImageDelay"
					],
					"id": "imagick.setimagedelay",
					"name": "Imagick::setImageDelay",
					"description": "Sets the image delay"
				},
				"imagick.setimagedepth": {
					"tokens": [
						"Imagick::setImageDepth",
						"setImageDepth",
						"::setImageDepth"
					],
					"id": "imagick.setimagedepth",
					"name": "Imagick::setImageDepth",
					"description": "Sets the image depth"
				},
				"imagick.setimagedispose": {
					"tokens": [
						"Imagick::setImageDispose",
						"setImageDispose",
						"::setImageDispose"
					],
					"id": "imagick.setimagedispose",
					"name": "Imagick::setImageDispose",
					"description": "Sets the image disposal method"
				},
				"imagick.setimageextent": {
					"tokens": [
						"Imagick::setImageExtent",
						"setImageExtent",
						"::setImageExtent"
					],
					"id": "imagick.setimageextent",
					"name": "Imagick::setImageExtent",
					"description": "Sets the image size"
				},
				"imagick.setimagefilename": {
					"tokens": [
						"Imagick::setImageFilename",
						"setImageFilename",
						"::setImageFilename"
					],
					"id": "imagick.setimagefilename",
					"name": "Imagick::setImageFilename",
					"description": "Sets the filename of a particular image"
				},
				"imagick.setimageformat": {
					"tokens": [
						"Imagick::setImageFormat",
						"setImageFormat",
						"::setImageFormat"
					],
					"id": "imagick.setimageformat",
					"name": "Imagick::setImageFormat",
					"description": "Sets the format of a particular image"
				},
				"imagick.setimagegamma": {
					"tokens": [
						"Imagick::setImageGamma",
						"setImageGamma",
						"::setImageGamma"
					],
					"id": "imagick.setimagegamma",
					"name": "Imagick::setImageGamma",
					"description": "Sets the image gamma"
				},
				"imagick.setimagegravity": {
					"tokens": [
						"Imagick::setImageGravity",
						"setImageGravity",
						"::setImageGravity"
					],
					"id": "imagick.setimagegravity",
					"name": "Imagick::setImageGravity",
					"description": "Sets the image gravity"
				},
				"imagick.setimagegreenprimary": {
					"tokens": [
						"Imagick::setImageGreenPrimary",
						"setImageGreenPrimary",
						"::setImageGreenPrimary"
					],
					"id": "imagick.setimagegreenprimary",
					"name": "Imagick::setImageGreenPrimary",
					"description": "Sets the image chromaticity green primary point"
				},
				"imagick.setimageindex": {
					"tokens": [
						"Imagick::setImageIndex",
						"setImageIndex",
						"::setImageIndex"
					],
					"id": "imagick.setimageindex",
					"name": "Imagick::setImageIndex",
					"description": "Set the iterator position"
				},
				"imagick.setimageinterlacescheme": {
					"tokens": [
						"Imagick::setImageInterlaceScheme",
						"setImageInterlaceScheme",
						"::setImageInterlaceScheme"
					],
					"id": "imagick.setimageinterlacescheme",
					"name": "Imagick::setImageInterlaceScheme",
					"description": "Sets the image compression"
				},
				"imagick.setimageinterpolatemethod": {
					"tokens": [
						"Imagick::setImageInterpolateMethod",
						"setImageInterpolateMethod",
						"::setImageInterpolateMethod"
					],
					"id": "imagick.setimageinterpolatemethod",
					"name": "Imagick::setImageInterpolateMethod",
					"description": "Sets the image interpolate pixel method"
				},
				"imagick.setimageiterations": {
					"tokens": [
						"Imagick::setImageIterations",
						"setImageIterations",
						"::setImageIterations"
					],
					"id": "imagick.setimageiterations",
					"name": "Imagick::setImageIterations",
					"description": "Sets the image iterations"
				},
				"imagick.setimagematte": {
					"tokens": [
						"Imagick::setImageMatte",
						"setImageMatte",
						"::setImageMatte"
					],
					"id": "imagick.setimagematte",
					"name": "Imagick::setImageMatte",
					"description": "Sets the image matte channel"
				},
				"imagick.setimagemattecolor": {
					"tokens": [
						"Imagick::setImageMatteColor",
						"setImageMatteColor",
						"::setImageMatteColor"
					],
					"id": "imagick.setimagemattecolor",
					"name": "Imagick::setImageMatteColor",
					"description": "Sets the image matte color"
				},
				"imagick.setimageopacity": {
					"tokens": [
						"Imagick::setImageOpacity",
						"setImageOpacity",
						"::setImageOpacity"
					],
					"id": "imagick.setimageopacity",
					"name": "Imagick::setImageOpacity",
					"description": "Sets the image opacity level"
				},
				"imagick.setimageorientation": {
					"tokens": [
						"Imagick::setImageOrientation",
						"setImageOrientation",
						"::setImageOrientation"
					],
					"id": "imagick.setimageorientation",
					"name": "Imagick::setImageOrientation",
					"description": "Sets the image orientation"
				},
				"imagick.setimagepage": {
					"tokens": [
						"Imagick::setImagePage",
						"setImagePage",
						"::setImagePage"
					],
					"id": "imagick.setimagepage",
					"name": "Imagick::setImagePage",
					"description": "Sets the page geometry of the image"
				},
				"imagick.setimageprofile": {
					"tokens": [
						"Imagick::setImageProfile",
						"setImageProfile",
						"::setImageProfile"
					],
					"id": "imagick.setimageprofile",
					"name": "Imagick::setImageProfile",
					"description": "Adds a named profile to the Imagick object"
				},
				"imagick.setimageproperty": {
					"tokens": [
						"Imagick::setImageProperty",
						"setImageProperty",
						"::setImageProperty"
					],
					"id": "imagick.setimageproperty",
					"name": "Imagick::setImageProperty",
					"description": "Sets an image property"
				},
				"imagick.setimageredprimary": {
					"tokens": [
						"Imagick::setImageRedPrimary",
						"setImageRedPrimary",
						"::setImageRedPrimary"
					],
					"id": "imagick.setimageredprimary",
					"name": "Imagick::setImageRedPrimary",
					"description": "Sets the image chromaticity red primary point"
				},
				"imagick.setimagerenderingintent": {
					"tokens": [
						"Imagick::setImageRenderingIntent",
						"setImageRenderingIntent",
						"::setImageRenderingIntent"
					],
					"id": "imagick.setimagerenderingintent",
					"name": "Imagick::setImageRenderingIntent",
					"description": "Sets the image rendering intent"
				},
				"imagick.setimageresolution": {
					"tokens": [
						"Imagick::setImageResolution",
						"setImageResolution",
						"::setImageResolution"
					],
					"id": "imagick.setimageresolution",
					"name": "Imagick::setImageResolution",
					"description": "Sets the image resolution"
				},
				"imagick.setimagescene": {
					"tokens": [
						"Imagick::setImageScene",
						"setImageScene",
						"::setImageScene"
					],
					"id": "imagick.setimagescene",
					"name": "Imagick::setImageScene",
					"description": "Sets the image scene"
				},
				"imagick.setimagetickspersecond": {
					"tokens": [
						"Imagick::setImageTicksPerSecond",
						"setImageTicksPerSecond",
						"::setImageTicksPerSecond"
					],
					"id": "imagick.setimagetickspersecond",
					"name": "Imagick::setImageTicksPerSecond",
					"description": "Sets the image ticks-per-second"
				},
				"imagick.setimagetype": {
					"tokens": [
						"Imagick::setImageType",
						"setImageType",
						"::setImageType"
					],
					"id": "imagick.setimagetype",
					"name": "Imagick::setImageType",
					"description": "Sets the image type"
				},
				"imagick.setimageunits": {
					"tokens": [
						"Imagick::setImageUnits",
						"setImageUnits",
						"::setImageUnits"
					],
					"id": "imagick.setimageunits",
					"name": "Imagick::setImageUnits",
					"description": "Sets the image units of resolution"
				},
				"imagick.setimagevirtualpixelmethod": {
					"tokens": [
						"Imagick::setImageVirtualPixelMethod",
						"setImageVirtualPixelMethod",
						"::setImageVirtualPixelMethod"
					],
					"id": "imagick.setimagevirtualpixelmethod",
					"name": "Imagick::setImageVirtualPixelMethod",
					"description": "Sets the image virtual pixel method"
				},
				"imagick.setimagewhitepoint": {
					"tokens": [
						"Imagick::setImageWhitePoint",
						"setImageWhitePoint",
						"::setImageWhitePoint"
					],
					"id": "imagick.setimagewhitepoint",
					"name": "Imagick::setImageWhitePoint",
					"description": "Sets the image chromaticity white point"
				},
				"imagick.setinterlacescheme": {
					"tokens": [
						"Imagick::setInterlaceScheme",
						"setInterlaceScheme",
						"::setInterlaceScheme"
					],
					"id": "imagick.setinterlacescheme",
					"name": "Imagick::setInterlaceScheme",
					"description": "Sets the image compression"
				},
				"imagick.setiteratorindex": {
					"tokens": [
						"Imagick::setIteratorIndex",
						"setIteratorIndex",
						"::setIteratorIndex"
					],
					"id": "imagick.setiteratorindex",
					"name": "Imagick::setIteratorIndex",
					"description": "Set the iterator position"
				},
				"imagick.setlastiterator": {
					"tokens": [
						"Imagick::setLastIterator",
						"setLastIterator",
						"::setLastIterator"
					],
					"id": "imagick.setlastiterator",
					"name": "Imagick::setLastIterator",
					"description": "Sets the Imagick iterator to the last image"
				},
				"imagick.setoption": {
					"tokens": [
						"Imagick::setOption",
						"setOption",
						"::setOption"
					],
					"id": "imagick.setoption",
					"name": "Imagick::setOption",
					"description": "Set an option"
				},
				"imagick.setpage": {
					"tokens": [
						"Imagick::setPage",
						"setPage",
						"::setPage"
					],
					"id": "imagick.setpage",
					"name": "Imagick::setPage",
					"description": "Sets the page geometry of the Imagick object"
				},
				"imagick.setpointsize": {
					"tokens": [
						"Imagick::setPointSize",
						"setPointSize",
						"::setPointSize"
					],
					"id": "imagick.setpointsize",
					"name": "Imagick::setPointSize",
					"description": "Sets point size"
				},
				"imagick.setprogressmonitor": {
					"tokens": [
						"Imagick::setProgressMonitor",
						"setProgressMonitor",
						"::setProgressMonitor"
					],
					"id": "imagick.setprogressmonitor",
					"name": "Imagick::setProgressMonitor",
					"description": "Description"
				},
				"imagick.setregistry": {
					"tokens": [
						"Imagick::setRegistry",
						"setRegistry",
						"::setRegistry"
					],
					"id": "imagick.setregistry",
					"name": "Imagick::setRegistry",
					"description": "Description"
				},
				"imagick.setresolution": {
					"tokens": [
						"Imagick::setResolution",
						"setResolution",
						"::setResolution"
					],
					"id": "imagick.setresolution",
					"name": "Imagick::setResolution",
					"description": "Sets the image resolution"
				},
				"imagick.setresourcelimit": {
					"tokens": [
						"Imagick::setResourceLimit",
						"setResourceLimit",
						"::setResourceLimit"
					],
					"id": "imagick.setresourcelimit",
					"name": "Imagick::setResourceLimit",
					"description": "Sets the limit for a particular resource in megabytes"
				},
				"imagick.setsamplingfactors": {
					"tokens": [
						"Imagick::setSamplingFactors",
						"setSamplingFactors",
						"::setSamplingFactors"
					],
					"id": "imagick.setsamplingfactors",
					"name": "Imagick::setSamplingFactors",
					"description": "Sets the image sampling factors"
				},
				"imagick.setsize": {
					"tokens": [
						"Imagick::setSize",
						"setSize",
						"::setSize"
					],
					"id": "imagick.setsize",
					"name": "Imagick::setSize",
					"description": "Sets the size of the Imagick object"
				},
				"imagick.setsizeoffset": {
					"tokens": [
						"Imagick::setSizeOffset",
						"setSizeOffset",
						"::setSizeOffset"
					],
					"id": "imagick.setsizeoffset",
					"name": "Imagick::setSizeOffset",
					"description": "Sets the size and offset of the Imagick object"
				},
				"imagick.settype": {
					"tokens": [
						"Imagick::setType",
						"setType",
						"::setType"
					],
					"id": "imagick.settype",
					"name": "Imagick::setType",
					"description": "Sets the image type attribute"
				},
				"imagick.shadeimage": {
					"tokens": [
						"Imagick::shadeImage",
						"shadeImage",
						"::shadeImage"
					],
					"id": "imagick.shadeimage",
					"name": "Imagick::shadeImage",
					"description": "Creates a 3D effect"
				},
				"imagick.shadowimage": {
					"tokens": [
						"Imagick::shadowImage",
						"shadowImage",
						"::shadowImage"
					],
					"id": "imagick.shadowimage",
					"name": "Imagick::shadowImage",
					"description": "Simulates an image shadow"
				},
				"imagick.sharpenimage": {
					"tokens": [
						"Imagick::sharpenImage",
						"sharpenImage",
						"::sharpenImage"
					],
					"id": "imagick.sharpenimage",
					"name": "Imagick::sharpenImage",
					"description": "Sharpens an image"
				},
				"imagick.shaveimage": {
					"tokens": [
						"Imagick::shaveImage",
						"shaveImage",
						"::shaveImage"
					],
					"id": "imagick.shaveimage",
					"name": "Imagick::shaveImage",
					"description": "Shaves pixels from the image edges"
				},
				"imagick.shearimage": {
					"tokens": [
						"Imagick::shearImage",
						"shearImage",
						"::shearImage"
					],
					"id": "imagick.shearimage",
					"name": "Imagick::shearImage",
					"description": "Creating a parallelogram"
				},
				"imagick.sigmoidalcontrastimage": {
					"tokens": [
						"Imagick::sigmoidalContrastImage",
						"sigmoidalContrastImage",
						"::sigmoidalContrastImage"
					],
					"id": "imagick.sigmoidalcontrastimage",
					"name": "Imagick::sigmoidalContrastImage",
					"description": "Adjusts the contrast of an image"
				},
				"imagick.sketchimage": {
					"tokens": [
						"Imagick::sketchImage",
						"sketchImage",
						"::sketchImage"
					],
					"id": "imagick.sketchimage",
					"name": "Imagick::sketchImage",
					"description": "Simulates a pencil sketch"
				},
				"imagick.smushimages": {
					"tokens": [
						"Imagick::smushImages",
						"smushImages",
						"::smushImages"
					],
					"id": "imagick.smushimages",
					"name": "Imagick::smushImages",
					"description": "Description"
				},
				"imagick.solarizeimage": {
					"tokens": [
						"Imagick::solarizeImage",
						"solarizeImage",
						"::solarizeImage"
					],
					"id": "imagick.solarizeimage",
					"name": "Imagick::solarizeImage",
					"description": "Applies a solarizing effect to the image"
				},
				"imagick.sparsecolorimage": {
					"tokens": [
						"Imagick::sparseColorImage",
						"sparseColorImage",
						"::sparseColorImage"
					],
					"id": "imagick.sparsecolorimage",
					"name": "Imagick::sparseColorImage",
					"description": "Interpolates colors"
				},
				"imagick.spliceimage": {
					"tokens": [
						"Imagick::spliceImage",
						"spliceImage",
						"::spliceImage"
					],
					"id": "imagick.spliceimage",
					"name": "Imagick::spliceImage",
					"description": "Splices a solid color into the image"
				},
				"imagick.spreadimage": {
					"tokens": [
						"Imagick::spreadImage",
						"spreadImage",
						"::spreadImage"
					],
					"id": "imagick.spreadimage",
					"name": "Imagick::spreadImage",
					"description": "Randomly displaces each pixel in a block"
				},
				"imagick.statisticimage": {
					"tokens": [
						"Imagick::statisticImage",
						"statisticImage",
						"::statisticImage"
					],
					"id": "imagick.statisticimage",
					"name": "Imagick::statisticImage",
					"description": "Description"
				},
				"imagick.steganoimage": {
					"tokens": [
						"Imagick::steganoImage",
						"steganoImage",
						"::steganoImage"
					],
					"id": "imagick.steganoimage",
					"name": "Imagick::steganoImage",
					"description": "Hides a digital watermark within the image"
				},
				"imagick.stereoimage": {
					"tokens": [
						"Imagick::stereoImage",
						"stereoImage",
						"::stereoImage"
					],
					"id": "imagick.stereoimage",
					"name": "Imagick::stereoImage",
					"description": "Composites two images"
				},
				"imagick.stripimage": {
					"tokens": [
						"Imagick::stripImage",
						"stripImage",
						"::stripImage"
					],
					"id": "imagick.stripimage",
					"name": "Imagick::stripImage",
					"description": "Strips an image of all profiles and comments"
				},
				"imagick.subimagematch": {
					"tokens": [
						"Imagick::subImageMatch",
						"subImageMatch",
						"::subImageMatch"
					],
					"id": "imagick.subimagematch",
					"name": "Imagick::subImageMatch",
					"description": "Description"
				},
				"imagick.swirlimage": {
					"tokens": [
						"Imagick::swirlImage",
						"swirlImage",
						"::swirlImage"
					],
					"id": "imagick.swirlimage",
					"name": "Imagick::swirlImage",
					"description": "Swirls the pixels about the center of the image"
				},
				"imagick.textureimage": {
					"tokens": [
						"Imagick::textureImage",
						"textureImage",
						"::textureImage"
					],
					"id": "imagick.textureimage",
					"name": "Imagick::textureImage",
					"description": "Repeatedly tiles the texture image"
				},
				"imagick.thresholdimage": {
					"tokens": [
						"Imagick::thresholdImage",
						"thresholdImage",
						"::thresholdImage"
					],
					"id": "imagick.thresholdimage",
					"name": "Imagick::thresholdImage",
					"description": "Changes the value of individual pixels based on a threshold"
				},
				"imagick.thumbnailimage": {
					"tokens": [
						"Imagick::thumbnailImage",
						"thumbnailImage",
						"::thumbnailImage"
					],
					"id": "imagick.thumbnailimage",
					"name": "Imagick::thumbnailImage",
					"description": "Changes the size of an image"
				},
				"imagick.tintimage": {
					"tokens": [
						"Imagick::tintImage",
						"tintImage",
						"::tintImage"
					],
					"id": "imagick.tintimage",
					"name": "Imagick::tintImage",
					"description": "Applies a color vector to each pixel in the image"
				},
				"imagick.tostring": {
					"tokens": [
						"Imagick::__toString",
						"Imagick::_toString",
						"__toString",
						"::__toString"
					],
					"id": "imagick.tostring",
					"name": "Imagick::__toString",
					"description": "Returns the image as a string."
				},
				"imagick.transformimage": {
					"tokens": [
						"Imagick::transformImage",
						"transformImage",
						"::transformImage"
					],
					"id": "imagick.transformimage",
					"name": "Imagick::transformImage",
					"description": "Convenience method for setting crop size and the image geometry"
				},
				"imagick.transformimagecolorspace": {
					"tokens": [
						"Imagick::transformImageColorspace",
						"transformImageColorspace",
						"::transformImageColorspace"
					],
					"id": "imagick.transformimagecolorspace",
					"name": "Imagick::transformImageColorspace",
					"description": "Transforms an image to a new colorspace."
				},
				"imagick.transparentpaintimage": {
					"tokens": [
						"Imagick::transparentPaintImage",
						"transparentPaintImage",
						"::transparentPaintImage"
					],
					"id": "imagick.transparentpaintimage",
					"name": "Imagick::transparentPaintImage",
					"description": "Paints pixels transparent"
				},
				"imagick.transposeimage": {
					"tokens": [
						"Imagick::transposeImage",
						"transposeImage",
						"::transposeImage"
					],
					"id": "imagick.transposeimage",
					"name": "Imagick::transposeImage",
					"description": "Creates a vertical mirror image"
				},
				"imagick.transverseimage": {
					"tokens": [
						"Imagick::transverseImage",
						"transverseImage",
						"::transverseImage"
					],
					"id": "imagick.transverseimage",
					"name": "Imagick::transverseImage",
					"description": "Creates a horizontal mirror image"
				},
				"imagick.trimimage": {
					"tokens": [
						"Imagick::trimImage",
						"trimImage",
						"::trimImage"
					],
					"id": "imagick.trimimage",
					"name": "Imagick::trimImage",
					"description": "Remove edges from the image"
				},
				"imagick.uniqueimagecolors": {
					"tokens": [
						"Imagick::uniqueImageColors",
						"uniqueImageColors",
						"::uniqueImageColors"
					],
					"id": "imagick.uniqueimagecolors",
					"name": "Imagick::uniqueImageColors",
					"description": "Discards all but one of any pixel color"
				},
				"imagick.unsharpmaskimage": {
					"tokens": [
						"Imagick::unsharpMaskImage",
						"unsharpMaskImage",
						"::unsharpMaskImage"
					],
					"id": "imagick.unsharpmaskimage",
					"name": "Imagick::unsharpMaskImage",
					"description": "Sharpens an image"
				},
				"imagick.valid": {
					"tokens": [
						"Imagick::valid",
						"valid",
						"::valid"
					],
					"id": "imagick.valid",
					"name": "Imagick::valid",
					"description": "Checks if the current item is valid"
				},
				"imagick.vignetteimage": {
					"tokens": [
						"Imagick::vignetteImage",
						"vignetteImage",
						"::vignetteImage"
					],
					"id": "imagick.vignetteimage",
					"name": "Imagick::vignetteImage",
					"description": "Adds vignette filter to the image"
				},
				"imagick.waveimage": {
					"tokens": [
						"Imagick::waveImage",
						"waveImage",
						"::waveImage"
					],
					"id": "imagick.waveimage",
					"name": "Imagick::waveImage",
					"description": "Applies wave filter to the image"
				},
				"imagick.whitethresholdimage": {
					"tokens": [
						"Imagick::whiteThresholdImage",
						"whiteThresholdImage",
						"::whiteThresholdImage"
					],
					"id": "imagick.whitethresholdimage",
					"name": "Imagick::whiteThresholdImage",
					"description": "Force all pixels above the threshold into white"
				},
				"imagick.writeimage": {
					"tokens": [
						"Imagick::writeImage",
						"writeImage",
						"::writeImage"
					],
					"id": "imagick.writeimage",
					"name": "Imagick::writeImage",
					"description": "Writes an image to the specified filename"
				},
				"imagick.writeimagefile": {
					"tokens": [
						"Imagick::writeImageFile",
						"writeImageFile",
						"::writeImageFile"
					],
					"id": "imagick.writeimagefile",
					"name": "Imagick::writeImageFile",
					"description": "Writes an image to a filehandle"
				},
				"imagick.writeimages": {
					"tokens": [
						"Imagick::writeImages",
						"writeImages",
						"::writeImages"
					],
					"id": "imagick.writeimages",
					"name": "Imagick::writeImages",
					"description": "Writes an image or image sequence"
				},
				"imagick.writeimagesfile": {
					"tokens": [
						"Imagick::writeImagesFile",
						"writeImagesFile",
						"::writeImagesFile"
					],
					"id": "imagick.writeimagesfile",
					"name": "Imagick::writeImagesFile",
					"description": "Writes frames to a filehandle"
				},
				"imagickdraw.affine": {
					"tokens": [
						"ImagickDraw::affine",
						"affine",
						"::affine"
					],
					"id": "imagickdraw.affine",
					"name": "ImagickDraw::affine",
					"description": "Adjusts the current affine transformation matrix"
				},
				"imagickdraw.annotation": {
					"tokens": [
						"ImagickDraw::annotation",
						"annotation",
						"::annotation"
					],
					"id": "imagickdraw.annotation",
					"name": "ImagickDraw::annotation",
					"description": "Draws text on the image"
				},
				"imagickdraw.arc": {
					"tokens": [
						"ImagickDraw::arc",
						"arc",
						"::arc"
					],
					"id": "imagickdraw.arc",
					"name": "ImagickDraw::arc",
					"description": "Draws an arc"
				},
				"imagickdraw.bezier": {
					"tokens": [
						"ImagickDraw::bezier",
						"bezier",
						"::bezier"
					],
					"id": "imagickdraw.bezier",
					"name": "ImagickDraw::bezier",
					"description": "Draws a bezier curve"
				},
				"imagickdraw.circle": {
					"tokens": [
						"ImagickDraw::circle",
						"circle",
						"::circle"
					],
					"id": "imagickdraw.circle",
					"name": "ImagickDraw::circle",
					"description": "Draws a circle"
				},
				"imagickdraw.clear": {
					"tokens": [
						"ImagickDraw::clear",
						"clear",
						"::clear"
					],
					"id": "imagickdraw.clear",
					"name": "ImagickDraw::clear",
					"description": "Clears the ImagickDraw"
				},
				"imagickdraw.clone": {
					"tokens": [
						"ImagickDraw::clone",
						"clone",
						"::clone"
					],
					"id": "imagickdraw.clone",
					"name": "ImagickDraw::clone",
					"description": "Makes an exact copy of the specified ImagickDraw object"
				},
				"imagickdraw.color": {
					"tokens": [
						"ImagickDraw::color",
						"color",
						"::color"
					],
					"id": "imagickdraw.color",
					"name": "ImagickDraw::color",
					"description": "Draws color on image"
				},
				"imagickdraw.comment": {
					"tokens": [
						"ImagickDraw::comment",
						"comment",
						"::comment"
					],
					"id": "imagickdraw.comment",
					"name": "ImagickDraw::comment",
					"description": "Adds a comment"
				},
				"imagickdraw.composite": {
					"tokens": [
						"ImagickDraw::composite",
						"composite",
						"::composite"
					],
					"id": "imagickdraw.composite",
					"name": "ImagickDraw::composite",
					"description": "Composites an image onto the current image"
				},
				"imagickdraw.construct": {
					"tokens": [
						"ImagickDraw::__construct",
						"ImagickDraw::_construct",
						"__construct",
						"::__construct"
					],
					"id": "imagickdraw.construct",
					"name": "ImagickDraw::__construct",
					"description": "The ImagickDraw constructor"
				},
				"imagickdraw.destroy": {
					"tokens": [
						"ImagickDraw::destroy",
						"destroy",
						"::destroy"
					],
					"id": "imagickdraw.destroy",
					"name": "ImagickDraw::destroy",
					"description": "Frees all associated resources"
				},
				"imagickdraw.ellipse": {
					"tokens": [
						"ImagickDraw::ellipse",
						"ellipse",
						"::ellipse"
					],
					"id": "imagickdraw.ellipse",
					"name": "ImagickDraw::ellipse",
					"description": "Draws an ellipse on the image"
				},
				"imagickdraw.getclippath": {
					"tokens": [
						"ImagickDraw::getClipPath",
						"getClipPath",
						"::getClipPath"
					],
					"id": "imagickdraw.getclippath",
					"name": "ImagickDraw::getClipPath",
					"description": "Obtains the current clipping path ID"
				},
				"imagickdraw.getcliprule": {
					"tokens": [
						"ImagickDraw::getClipRule",
						"getClipRule",
						"::getClipRule"
					],
					"id": "imagickdraw.getcliprule",
					"name": "ImagickDraw::getClipRule",
					"description": "Returns the current polygon fill rule"
				},
				"imagickdraw.getclipunits": {
					"tokens": [
						"ImagickDraw::getClipUnits",
						"getClipUnits",
						"::getClipUnits"
					],
					"id": "imagickdraw.getclipunits",
					"name": "ImagickDraw::getClipUnits",
					"description": "Returns the interpretation of clip path units"
				},
				"imagickdraw.getfillcolor": {
					"tokens": [
						"ImagickDraw::getFillColor",
						"getFillColor",
						"::getFillColor"
					],
					"id": "imagickdraw.getfillcolor",
					"name": "ImagickDraw::getFillColor",
					"description": "Returns the fill color"
				},
				"imagickdraw.getfillopacity": {
					"tokens": [
						"ImagickDraw::getFillOpacity",
						"getFillOpacity",
						"::getFillOpacity"
					],
					"id": "imagickdraw.getfillopacity",
					"name": "ImagickDraw::getFillOpacity",
					"description": "Returns the opacity used when drawing"
				},
				"imagickdraw.getfillrule": {
					"tokens": [
						"ImagickDraw::getFillRule",
						"getFillRule",
						"::getFillRule"
					],
					"id": "imagickdraw.getfillrule",
					"name": "ImagickDraw::getFillRule",
					"description": "Returns the fill rule"
				},
				"imagickdraw.getfont": {
					"tokens": [
						"ImagickDraw::getFont",
						"getFont",
						"::getFont"
					],
					"id": "imagickdraw.getfont",
					"name": "ImagickDraw::getFont",
					"description": "Returns the font"
				},
				"imagickdraw.getfontfamily": {
					"tokens": [
						"ImagickDraw::getFontFamily",
						"getFontFamily",
						"::getFontFamily"
					],
					"id": "imagickdraw.getfontfamily",
					"name": "ImagickDraw::getFontFamily",
					"description": "Returns the font family"
				},
				"imagickdraw.getfontsize": {
					"tokens": [
						"ImagickDraw::getFontSize",
						"getFontSize",
						"::getFontSize"
					],
					"id": "imagickdraw.getfontsize",
					"name": "ImagickDraw::getFontSize",
					"description": "Returns the font pointsize"
				},
				"imagickdraw.getfontstretch": {
					"tokens": [
						"ImagickDraw::getFontStretch",
						"getFontStretch",
						"::getFontStretch"
					],
					"id": "imagickdraw.getfontstretch",
					"name": "ImagickDraw::getFontStretch",
					"description": "Description"
				},
				"imagickdraw.getfontstyle": {
					"tokens": [
						"ImagickDraw::getFontStyle",
						"getFontStyle",
						"::getFontStyle"
					],
					"id": "imagickdraw.getfontstyle",
					"name": "ImagickDraw::getFontStyle",
					"description": "Returns the font style"
				},
				"imagickdraw.getfontweight": {
					"tokens": [
						"ImagickDraw::getFontWeight",
						"getFontWeight",
						"::getFontWeight"
					],
					"id": "imagickdraw.getfontweight",
					"name": "ImagickDraw::getFontWeight",
					"description": "Returns the font weight"
				},
				"imagickdraw.getgravity": {
					"tokens": [
						"ImagickDraw::getGravity",
						"getGravity",
						"::getGravity"
					],
					"id": "imagickdraw.getgravity",
					"name": "ImagickDraw::getGravity",
					"description": "Returns the text placement gravity"
				},
				"imagickdraw.getstrokeantialias": {
					"tokens": [
						"ImagickDraw::getStrokeAntialias",
						"getStrokeAntialias",
						"::getStrokeAntialias"
					],
					"id": "imagickdraw.getstrokeantialias",
					"name": "ImagickDraw::getStrokeAntialias",
					"description": "Returns the current stroke antialias setting"
				},
				"imagickdraw.getstrokecolor": {
					"tokens": [
						"ImagickDraw::getStrokeColor",
						"getStrokeColor",
						"::getStrokeColor"
					],
					"id": "imagickdraw.getstrokecolor",
					"name": "ImagickDraw::getStrokeColor",
					"description": "Returns the color used for stroking object outlines"
				},
				"imagickdraw.getstrokedasharray": {
					"tokens": [
						"ImagickDraw::getStrokeDashArray",
						"getStrokeDashArray",
						"::getStrokeDashArray"
					],
					"id": "imagickdraw.getstrokedasharray",
					"name": "ImagickDraw::getStrokeDashArray",
					"description": "Returns an array representing the pattern of dashes and gaps used to stroke paths"
				},
				"imagickdraw.getstrokedashoffset": {
					"tokens": [
						"ImagickDraw::getStrokeDashOffset",
						"getStrokeDashOffset",
						"::getStrokeDashOffset"
					],
					"id": "imagickdraw.getstrokedashoffset",
					"name": "ImagickDraw::getStrokeDashOffset",
					"description": "Returns the offset into the dash pattern to start the dash"
				},
				"imagickdraw.getstrokelinecap": {
					"tokens": [
						"ImagickDraw::getStrokeLineCap",
						"getStrokeLineCap",
						"::getStrokeLineCap"
					],
					"id": "imagickdraw.getstrokelinecap",
					"name": "ImagickDraw::getStrokeLineCap",
					"description": "Returns the shape to be used at the end of open subpaths when they are stroked"
				},
				"imagickdraw.getstrokelinejoin": {
					"tokens": [
						"ImagickDraw::getStrokeLineJoin",
						"getStrokeLineJoin",
						"::getStrokeLineJoin"
					],
					"id": "imagickdraw.getstrokelinejoin",
					"name": "ImagickDraw::getStrokeLineJoin",
					"description": "Returns the shape to be used at the corners of paths when they are stroked"
				},
				"imagickdraw.getstrokemiterlimit": {
					"tokens": [
						"ImagickDraw::getStrokeMiterLimit",
						"getStrokeMiterLimit",
						"::getStrokeMiterLimit"
					],
					"id": "imagickdraw.getstrokemiterlimit",
					"name": "ImagickDraw::getStrokeMiterLimit",
					"description": "Returns the stroke miter limit"
				},
				"imagickdraw.getstrokeopacity": {
					"tokens": [
						"ImagickDraw::getStrokeOpacity",
						"getStrokeOpacity",
						"::getStrokeOpacity"
					],
					"id": "imagickdraw.getstrokeopacity",
					"name": "ImagickDraw::getStrokeOpacity",
					"description": "Returns the opacity of stroked object outlines"
				},
				"imagickdraw.getstrokewidth": {
					"tokens": [
						"ImagickDraw::getStrokeWidth",
						"getStrokeWidth",
						"::getStrokeWidth"
					],
					"id": "imagickdraw.getstrokewidth",
					"name": "ImagickDraw::getStrokeWidth",
					"description": "Returns the width of the stroke used to draw object outlines"
				},
				"imagickdraw.gettextalignment": {
					"tokens": [
						"ImagickDraw::getTextAlignment",
						"getTextAlignment",
						"::getTextAlignment"
					],
					"id": "imagickdraw.gettextalignment",
					"name": "ImagickDraw::getTextAlignment",
					"description": "Returns the text alignment"
				},
				"imagickdraw.gettextantialias": {
					"tokens": [
						"ImagickDraw::getTextAntialias",
						"getTextAntialias",
						"::getTextAntialias"
					],
					"id": "imagickdraw.gettextantialias",
					"name": "ImagickDraw::getTextAntialias",
					"description": "Returns the current text antialias setting"
				},
				"imagickdraw.gettextdecoration": {
					"tokens": [
						"ImagickDraw::getTextDecoration",
						"getTextDecoration",
						"::getTextDecoration"
					],
					"id": "imagickdraw.gettextdecoration",
					"name": "ImagickDraw::getTextDecoration",
					"description": "Returns the text decoration"
				},
				"imagickdraw.gettextencoding": {
					"tokens": [
						"ImagickDraw::getTextEncoding",
						"getTextEncoding",
						"::getTextEncoding"
					],
					"id": "imagickdraw.gettextencoding",
					"name": "ImagickDraw::getTextEncoding",
					"description": "Returns the code set used for text annotations"
				},
				"imagickdraw.gettextinterlinespacing": {
					"tokens": [
						"ImagickDraw::getTextInterlineSpacing",
						"getTextInterlineSpacing",
						"::getTextInterlineSpacing"
					],
					"id": "imagickdraw.gettextinterlinespacing",
					"name": "ImagickDraw::getTextInterlineSpacing",
					"description": "Description"
				},
				"imagickdraw.gettextinterwordspacing": {
					"tokens": [
						"ImagickDraw::getTextInterwordSpacing",
						"getTextInterwordSpacing",
						"::getTextInterwordSpacing"
					],
					"id": "imagickdraw.gettextinterwordspacing",
					"name": "ImagickDraw::getTextInterwordSpacing",
					"description": "Description"
				},
				"imagickdraw.gettextkerning": {
					"tokens": [
						"ImagickDraw::getTextKerning",
						"getTextKerning",
						"::getTextKerning"
					],
					"id": "imagickdraw.gettextkerning",
					"name": "ImagickDraw::getTextKerning",
					"description": "Description"
				},
				"imagickdraw.gettextundercolor": {
					"tokens": [
						"ImagickDraw::getTextUnderColor",
						"getTextUnderColor",
						"::getTextUnderColor"
					],
					"id": "imagickdraw.gettextundercolor",
					"name": "ImagickDraw::getTextUnderColor",
					"description": "Returns the text under color"
				},
				"imagickdraw.getvectorgraphics": {
					"tokens": [
						"ImagickDraw::getVectorGraphics",
						"getVectorGraphics",
						"::getVectorGraphics"
					],
					"id": "imagickdraw.getvectorgraphics",
					"name": "ImagickDraw::getVectorGraphics",
					"description": "Returns a string containing vector graphics"
				},
				"imagickdraw.line": {
					"tokens": [
						"ImagickDraw::line",
						"line",
						"::line"
					],
					"id": "imagickdraw.line",
					"name": "ImagickDraw::line",
					"description": "Draws a line"
				},
				"imagickdraw.matte": {
					"tokens": [
						"ImagickDraw::matte",
						"matte",
						"::matte"
					],
					"id": "imagickdraw.matte",
					"name": "ImagickDraw::matte",
					"description": "Paints on the image's opacity channel"
				},
				"imagickdraw.pathclose": {
					"tokens": [
						"ImagickDraw::pathClose",
						"pathClose",
						"::pathClose"
					],
					"id": "imagickdraw.pathclose",
					"name": "ImagickDraw::pathClose",
					"description": "Adds a path element to the current path"
				},
				"imagickdraw.pathcurvetoabsolute": {
					"tokens": [
						"ImagickDraw::pathCurveToAbsolute",
						"pathCurveToAbsolute",
						"::pathCurveToAbsolute"
					],
					"id": "imagickdraw.pathcurvetoabsolute",
					"name": "ImagickDraw::pathCurveToAbsolute",
					"description": "Draws a cubic Bezier curve"
				},
				"imagickdraw.pathcurvetoquadraticbezierabsolute": {
					"tokens": [
						"ImagickDraw::pathCurveToQuadraticBezierAbsolute",
						"pathCurveToQuadraticBezierAbsolute",
						"::pathCurveToQuadraticBezierAbsolute"
					],
					"id": "imagickdraw.pathcurvetoquadraticbezierabsolute",
					"name": "ImagickDraw::pathCurveToQuadraticBezierAbsolute",
					"description": "Draws a quadratic Bezier curve"
				},
				"imagickdraw.pathcurvetoquadraticbezierrelative": {
					"tokens": [
						"ImagickDraw::pathCurveToQuadraticBezierRelative",
						"pathCurveToQuadraticBezierRelative",
						"::pathCurveToQuadraticBezierRelative"
					],
					"id": "imagickdraw.pathcurvetoquadraticbezierrelative",
					"name": "ImagickDraw::pathCurveToQuadraticBezierRelative",
					"description": "Draws a quadratic Bezier curve"
				},
				"imagickdraw.pathcurvetoquadraticbeziersmoothabsolute": {
					"tokens": [
						"ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute",
						"pathCurveToQuadraticBezierSmoothAbsolute",
						"::pathCurveToQuadraticBezierSmoothAbsolute"
					],
					"id": "imagickdraw.pathcurvetoquadraticbeziersmoothabsolute",
					"name": "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute",
					"description": "Draws a quadratic Bezier curve"
				},
				"imagickdraw.pathcurvetoquadraticbeziersmoothrelative": {
					"tokens": [
						"ImagickDraw::pathCurveToQuadraticBezierSmoothRelative",
						"pathCurveToQuadraticBezierSmoothRelative",
						"::pathCurveToQuadraticBezierSmoothRelative"
					],
					"id": "imagickdraw.pathcurvetoquadraticbeziersmoothrelative",
					"name": "ImagickDraw::pathCurveToQuadraticBezierSmoothRelative",
					"description": "Draws a quadratic Bezier curve"
				},
				"imagickdraw.pathcurvetorelative": {
					"tokens": [
						"ImagickDraw::pathCurveToRelative",
						"pathCurveToRelative",
						"::pathCurveToRelative"
					],
					"id": "imagickdraw.pathcurvetorelative",
					"name": "ImagickDraw::pathCurveToRelative",
					"description": "Draws a cubic Bezier curve"
				},
				"imagickdraw.pathcurvetosmoothabsolute": {
					"tokens": [
						"ImagickDraw::pathCurveToSmoothAbsolute",
						"pathCurveToSmoothAbsolute",
						"::pathCurveToSmoothAbsolute"
					],
					"id": "imagickdraw.pathcurvetosmoothabsolute",
					"name": "ImagickDraw::pathCurveToSmoothAbsolute",
					"description": "Draws a cubic Bezier curve"
				},
				"imagickdraw.pathcurvetosmoothrelative": {
					"tokens": [
						"ImagickDraw::pathCurveToSmoothRelative",
						"pathCurveToSmoothRelative",
						"::pathCurveToSmoothRelative"
					],
					"id": "imagickdraw.pathcurvetosmoothrelative",
					"name": "ImagickDraw::pathCurveToSmoothRelative",
					"description": "Draws a cubic Bezier curve"
				},
				"imagickdraw.pathellipticarcabsolute": {
					"tokens": [
						"ImagickDraw::pathEllipticArcAbsolute",
						"pathEllipticArcAbsolute",
						"::pathEllipticArcAbsolute"
					],
					"id": "imagickdraw.pathellipticarcabsolute",
					"name": "ImagickDraw::pathEllipticArcAbsolute",
					"description": "Draws an elliptical arc"
				},
				"imagickdraw.pathellipticarcrelative": {
					"tokens": [
						"ImagickDraw::pathEllipticArcRelative",
						"pathEllipticArcRelative",
						"::pathEllipticArcRelative"
					],
					"id": "imagickdraw.pathellipticarcrelative",
					"name": "ImagickDraw::pathEllipticArcRelative",
					"description": "Draws an elliptical arc"
				},
				"imagickdraw.pathfinish": {
					"tokens": [
						"ImagickDraw::pathFinish",
						"pathFinish",
						"::pathFinish"
					],
					"id": "imagickdraw.pathfinish",
					"name": "ImagickDraw::pathFinish",
					"description": "Terminates the current path"
				},
				"imagickdraw.pathlinetoabsolute": {
					"tokens": [
						"ImagickDraw::pathLineToAbsolute",
						"pathLineToAbsolute",
						"::pathLineToAbsolute"
					],
					"id": "imagickdraw.pathlinetoabsolute",
					"name": "ImagickDraw::pathLineToAbsolute",
					"description": "Draws a line path"
				},
				"imagickdraw.pathlinetohorizontalabsolute": {
					"tokens": [
						"ImagickDraw::pathLineToHorizontalAbsolute",
						"pathLineToHorizontalAbsolute",
						"::pathLineToHorizontalAbsolute"
					],
					"id": "imagickdraw.pathlinetohorizontalabsolute",
					"name": "ImagickDraw::pathLineToHorizontalAbsolute",
					"description": "Draws a horizontal line path"
				},
				"imagickdraw.pathlinetohorizontalrelative": {
					"tokens": [
						"ImagickDraw::pathLineToHorizontalRelative",
						"pathLineToHorizontalRelative",
						"::pathLineToHorizontalRelative"
					],
					"id": "imagickdraw.pathlinetohorizontalrelative",
					"name": "ImagickDraw::pathLineToHorizontalRelative",
					"description": "Draws a horizontal line"
				},
				"imagickdraw.pathlinetorelative": {
					"tokens": [
						"ImagickDraw::pathLineToRelative",
						"pathLineToRelative",
						"::pathLineToRelative"
					],
					"id": "imagickdraw.pathlinetorelative",
					"name": "ImagickDraw::pathLineToRelative",
					"description": "Draws a line path"
				},
				"imagickdraw.pathlinetoverticalabsolute": {
					"tokens": [
						"ImagickDraw::pathLineToVerticalAbsolute",
						"pathLineToVerticalAbsolute",
						"::pathLineToVerticalAbsolute"
					],
					"id": "imagickdraw.pathlinetoverticalabsolute",
					"name": "ImagickDraw::pathLineToVerticalAbsolute",
					"description": "Draws a vertical line"
				},
				"imagickdraw.pathlinetoverticalrelative": {
					"tokens": [
						"ImagickDraw::pathLineToVerticalRelative",
						"pathLineToVerticalRelative",
						"::pathLineToVerticalRelative"
					],
					"id": "imagickdraw.pathlinetoverticalrelative",
					"name": "ImagickDraw::pathLineToVerticalRelative",
					"description": "Draws a vertical line path"
				},
				"imagickdraw.pathmovetoabsolute": {
					"tokens": [
						"ImagickDraw::pathMoveToAbsolute",
						"pathMoveToAbsolute",
						"::pathMoveToAbsolute"
					],
					"id": "imagickdraw.pathmovetoabsolute",
					"name": "ImagickDraw::pathMoveToAbsolute",
					"description": "Starts a new sub-path"
				},
				"imagickdraw.pathmovetorelative": {
					"tokens": [
						"ImagickDraw::pathMoveToRelative",
						"pathMoveToRelative",
						"::pathMoveToRelative"
					],
					"id": "imagickdraw.pathmovetorelative",
					"name": "ImagickDraw::pathMoveToRelative",
					"description": "Starts a new sub-path"
				},
				"imagickdraw.pathstart": {
					"tokens": [
						"ImagickDraw::pathStart",
						"pathStart",
						"::pathStart"
					],
					"id": "imagickdraw.pathstart",
					"name": "ImagickDraw::pathStart",
					"description": "Declares the start of a path drawing list"
				},
				"imagickdraw.point": {
					"tokens": [
						"ImagickDraw::point",
						"point",
						"::point"
					],
					"id": "imagickdraw.point",
					"name": "ImagickDraw::point",
					"description": "Draws a point"
				},
				"imagickdraw.polygon": {
					"tokens": [
						"ImagickDraw::polygon",
						"polygon",
						"::polygon"
					],
					"id": "imagickdraw.polygon",
					"name": "ImagickDraw::polygon",
					"description": "Draws a polygon"
				},
				"imagickdraw.polyline": {
					"tokens": [
						"ImagickDraw::polyline",
						"polyline",
						"::polyline"
					],
					"id": "imagickdraw.polyline",
					"name": "ImagickDraw::polyline",
					"description": "Draws a polyline"
				},
				"imagickdraw.pop": {
					"tokens": [
						"ImagickDraw::pop",
						"pop",
						"::pop"
					],
					"id": "imagickdraw.pop",
					"name": "ImagickDraw::pop",
					"description": "Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw"
				},
				"imagickdraw.popclippath": {
					"tokens": [
						"ImagickDraw::popClipPath",
						"popClipPath",
						"::popClipPath"
					],
					"id": "imagickdraw.popclippath",
					"name": "ImagickDraw::popClipPath",
					"description": "Terminates a clip path definition"
				},
				"imagickdraw.popdefs": {
					"tokens": [
						"ImagickDraw::popDefs",
						"popDefs",
						"::popDefs"
					],
					"id": "imagickdraw.popdefs",
					"name": "ImagickDraw::popDefs",
					"description": "Terminates a definition list"
				},
				"imagickdraw.poppattern": {
					"tokens": [
						"ImagickDraw::popPattern",
						"popPattern",
						"::popPattern"
					],
					"id": "imagickdraw.poppattern",
					"name": "ImagickDraw::popPattern",
					"description": "Terminates a pattern definition"
				},
				"imagickdraw.push": {
					"tokens": [
						"ImagickDraw::push",
						"push",
						"::push"
					],
					"id": "imagickdraw.push",
					"name": "ImagickDraw::push",
					"description": "Clones the current ImagickDraw and pushes it to the stack"
				},
				"imagickdraw.pushclippath": {
					"tokens": [
						"ImagickDraw::pushClipPath",
						"pushClipPath",
						"::pushClipPath"
					],
					"id": "imagickdraw.pushclippath",
					"name": "ImagickDraw::pushClipPath",
					"description": "Starts a clip path definition"
				},
				"imagickdraw.pushdefs": {
					"tokens": [
						"ImagickDraw::pushDefs",
						"pushDefs",
						"::pushDefs"
					],
					"id": "imagickdraw.pushdefs",
					"name": "ImagickDraw::pushDefs",
					"description": "Indicates that following commands create named elements for early processing"
				},
				"imagickdraw.pushpattern": {
					"tokens": [
						"ImagickDraw::pushPattern",
						"pushPattern",
						"::pushPattern"
					],
					"id": "imagickdraw.pushpattern",
					"name": "ImagickDraw::pushPattern",
					"description": "Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern"
				},
				"imagickdraw.rectangle": {
					"tokens": [
						"ImagickDraw::rectangle",
						"rectangle",
						"::rectangle"
					],
					"id": "imagickdraw.rectangle",
					"name": "ImagickDraw::rectangle",
					"description": "Draws a rectangle"
				},
				"imagickdraw.render": {
					"tokens": [
						"ImagickDraw::render",
						"render",
						"::render"
					],
					"id": "imagickdraw.render",
					"name": "ImagickDraw::render",
					"description": "Renders all preceding drawing commands onto the image"
				},
				"imagickdraw.resetvectorgraphics": {
					"tokens": [
						"ImagickDraw::resetVectorGraphics",
						"resetVectorGraphics",
						"::resetVectorGraphics"
					],
					"id": "imagickdraw.resetvectorgraphics",
					"name": "ImagickDraw::resetVectorGraphics",
					"description": "Description"
				},
				"imagickdraw.rotate": {
					"tokens": [
						"ImagickDraw::rotate",
						"rotate",
						"::rotate"
					],
					"id": "imagickdraw.rotate",
					"name": "ImagickDraw::rotate",
					"description": "Applies the specified rotation to the current coordinate space"
				},
				"imagickdraw.roundrectangle": {
					"tokens": [
						"ImagickDraw::roundRectangle",
						"roundRectangle",
						"::roundRectangle"
					],
					"id": "imagickdraw.roundrectangle",
					"name": "ImagickDraw::roundRectangle",
					"description": "Draws a rounded rectangle"
				},
				"imagickdraw.scale": {
					"tokens": [
						"ImagickDraw::scale",
						"scale",
						"::scale"
					],
					"id": "imagickdraw.scale",
					"name": "ImagickDraw::scale",
					"description": "Adjusts the scaling factor"
				},
				"imagickdraw.setclippath": {
					"tokens": [
						"ImagickDraw::setClipPath",
						"setClipPath",
						"::setClipPath"
					],
					"id": "imagickdraw.setclippath",
					"name": "ImagickDraw::setClipPath",
					"description": "Associates a named clipping path with the image"
				},
				"imagickdraw.setcliprule": {
					"tokens": [
						"ImagickDraw::setClipRule",
						"setClipRule",
						"::setClipRule"
					],
					"id": "imagickdraw.setcliprule",
					"name": "ImagickDraw::setClipRule",
					"description": "Set the polygon fill rule to be used by the clipping path"
				},
				"imagickdraw.setclipunits": {
					"tokens": [
						"ImagickDraw::setClipUnits",
						"setClipUnits",
						"::setClipUnits"
					],
					"id": "imagickdraw.setclipunits",
					"name": "ImagickDraw::setClipUnits",
					"description": "Sets the interpretation of clip path units"
				},
				"imagickdraw.setfillalpha": {
					"tokens": [
						"ImagickDraw::setFillAlpha",
						"setFillAlpha",
						"::setFillAlpha"
					],
					"id": "imagickdraw.setfillalpha",
					"name": "ImagickDraw::setFillAlpha",
					"description": "Sets the opacity to use when drawing using the fill color or fill texture"
				},
				"imagickdraw.setfillcolor": {
					"tokens": [
						"ImagickDraw::setFillColor",
						"setFillColor",
						"::setFillColor"
					],
					"id": "imagickdraw.setfillcolor",
					"name": "ImagickDraw::setFillColor",
					"description": "Sets the fill color to be used for drawing filled objects"
				},
				"imagickdraw.setfillopacity": {
					"tokens": [
						"ImagickDraw::setFillOpacity",
						"setFillOpacity",
						"::setFillOpacity"
					],
					"id": "imagickdraw.setfillopacity",
					"name": "ImagickDraw::setFillOpacity",
					"description": "Sets the opacity to use when drawing using the fill color or fill texture"
				},
				"imagickdraw.setfillpatternurl": {
					"tokens": [
						"ImagickDraw::setFillPatternURL",
						"setFillPatternURL",
						"::setFillPatternURL"
					],
					"id": "imagickdraw.setfillpatternurl",
					"name": "ImagickDraw::setFillPatternURL",
					"description": "Sets the URL to use as a fill pattern for filling objects"
				},
				"imagickdraw.setfillrule": {
					"tokens": [
						"ImagickDraw::setFillRule",
						"setFillRule",
						"::setFillRule"
					],
					"id": "imagickdraw.setfillrule",
					"name": "ImagickDraw::setFillRule",
					"description": "Sets the fill rule to use while drawing polygons"
				},
				"imagickdraw.setfont": {
					"tokens": [
						"ImagickDraw::setFont",
						"setFont",
						"::setFont"
					],
					"id": "imagickdraw.setfont",
					"name": "ImagickDraw::setFont",
					"description": "Sets the fully-specified font to use when annotating with text"
				},
				"imagickdraw.setfontfamily": {
					"tokens": [
						"ImagickDraw::setFontFamily",
						"setFontFamily",
						"::setFontFamily"
					],
					"id": "imagickdraw.setfontfamily",
					"name": "ImagickDraw::setFontFamily",
					"description": "Sets the font family to use when annotating with text"
				},
				"imagickdraw.setfontsize": {
					"tokens": [
						"ImagickDraw::setFontSize",
						"setFontSize",
						"::setFontSize"
					],
					"id": "imagickdraw.setfontsize",
					"name": "ImagickDraw::setFontSize",
					"description": "Sets the font pointsize to use when annotating with text"
				},
				"imagickdraw.setfontstretch": {
					"tokens": [
						"ImagickDraw::setFontStretch",
						"setFontStretch",
						"::setFontStretch"
					],
					"id": "imagickdraw.setfontstretch",
					"name": "ImagickDraw::setFontStretch",
					"description": "Sets the font stretch to use when annotating with text"
				},
				"imagickdraw.setfontstyle": {
					"tokens": [
						"ImagickDraw::setFontStyle",
						"setFontStyle",
						"::setFontStyle"
					],
					"id": "imagickdraw.setfontstyle",
					"name": "ImagickDraw::setFontStyle",
					"description": "Sets the font style to use when annotating with text"
				},
				"imagickdraw.setfontweight": {
					"tokens": [
						"ImagickDraw::setFontWeight",
						"setFontWeight",
						"::setFontWeight"
					],
					"id": "imagickdraw.setfontweight",
					"name": "ImagickDraw::setFontWeight",
					"description": "Sets the font weight"
				},
				"imagickdraw.setgravity": {
					"tokens": [
						"ImagickDraw::setGravity",
						"setGravity",
						"::setGravity"
					],
					"id": "imagickdraw.setgravity",
					"name": "ImagickDraw::setGravity",
					"description": "Sets the text placement gravity"
				},
				"imagickdraw.setresolution": {
					"tokens": [
						"ImagickDraw::setResolution",
						"setResolution",
						"::setResolution"
					],
					"id": "imagickdraw.setresolution",
					"name": "ImagickDraw::setResolution",
					"description": "Description"
				},
				"imagickdraw.setstrokealpha": {
					"tokens": [
						"ImagickDraw::setStrokeAlpha",
						"setStrokeAlpha",
						"::setStrokeAlpha"
					],
					"id": "imagickdraw.setstrokealpha",
					"name": "ImagickDraw::setStrokeAlpha",
					"description": "Specifies the opacity of stroked object outlines"
				},
				"imagickdraw.setstrokeantialias": {
					"tokens": [
						"ImagickDraw::setStrokeAntialias",
						"setStrokeAntialias",
						"::setStrokeAntialias"
					],
					"id": "imagickdraw.setstrokeantialias",
					"name": "ImagickDraw::setStrokeAntialias",
					"description": "Controls whether stroked outlines are antialiased"
				},
				"imagickdraw.setstrokecolor": {
					"tokens": [
						"ImagickDraw::setStrokeColor",
						"setStrokeColor",
						"::setStrokeColor"
					],
					"id": "imagickdraw.setstrokecolor",
					"name": "ImagickDraw::setStrokeColor",
					"description": "Sets the color used for stroking object outlines"
				},
				"imagickdraw.setstrokedasharray": {
					"tokens": [
						"ImagickDraw::setStrokeDashArray",
						"setStrokeDashArray",
						"::setStrokeDashArray"
					],
					"id": "imagickdraw.setstrokedasharray",
					"name": "ImagickDraw::setStrokeDashArray",
					"description": "Specifies the pattern of dashes and gaps used to stroke paths"
				},
				"imagickdraw.setstrokedashoffset": {
					"tokens": [
						"ImagickDraw::setStrokeDashOffset",
						"setStrokeDashOffset",
						"::setStrokeDashOffset"
					],
					"id": "imagickdraw.setstrokedashoffset",
					"name": "ImagickDraw::setStrokeDashOffset",
					"description": "Specifies the offset into the dash pattern to start the dash"
				},
				"imagickdraw.setstrokelinecap": {
					"tokens": [
						"ImagickDraw::setStrokeLineCap",
						"setStrokeLineCap",
						"::setStrokeLineCap"
					],
					"id": "imagickdraw.setstrokelinecap",
					"name": "ImagickDraw::setStrokeLineCap",
					"description": "Specifies the shape to be used at the end of open subpaths when they are stroked"
				},
				"imagickdraw.setstrokelinejoin": {
					"tokens": [
						"ImagickDraw::setStrokeLineJoin",
						"setStrokeLineJoin",
						"::setStrokeLineJoin"
					],
					"id": "imagickdraw.setstrokelinejoin",
					"name": "ImagickDraw::setStrokeLineJoin",
					"description": "Specifies the shape to be used at the corners of paths when they are stroked"
				},
				"imagickdraw.setstrokemiterlimit": {
					"tokens": [
						"ImagickDraw::setStrokeMiterLimit",
						"setStrokeMiterLimit",
						"::setStrokeMiterLimit"
					],
					"id": "imagickdraw.setstrokemiterlimit",
					"name": "ImagickDraw::setStrokeMiterLimit",
					"description": "Specifies the miter limit"
				},
				"imagickdraw.setstrokeopacity": {
					"tokens": [
						"ImagickDraw::setStrokeOpacity",
						"setStrokeOpacity",
						"::setStrokeOpacity"
					],
					"id": "imagickdraw.setstrokeopacity",
					"name": "ImagickDraw::setStrokeOpacity",
					"description": "Specifies the opacity of stroked object outlines"
				},
				"imagickdraw.setstrokepatternurl": {
					"tokens": [
						"ImagickDraw::setStrokePatternURL",
						"setStrokePatternURL",
						"::setStrokePatternURL"
					],
					"id": "imagickdraw.setstrokepatternurl",
					"name": "ImagickDraw::setStrokePatternURL",
					"description": "Sets the pattern used for stroking object outlines"
				},
				"imagickdraw.setstrokewidth": {
					"tokens": [
						"ImagickDraw::setStrokeWidth",
						"setStrokeWidth",
						"::setStrokeWidth"
					],
					"id": "imagickdraw.setstrokewidth",
					"name": "ImagickDraw::setStrokeWidth",
					"description": "Sets the width of the stroke used to draw object outlines"
				},
				"imagickdraw.settextalignment": {
					"tokens": [
						"ImagickDraw::setTextAlignment",
						"setTextAlignment",
						"::setTextAlignment"
					],
					"id": "imagickdraw.settextalignment",
					"name": "ImagickDraw::setTextAlignment",
					"description": "Specifies a text alignment"
				},
				"imagickdraw.settextantialias": {
					"tokens": [
						"ImagickDraw::setTextAntialias",
						"setTextAntialias",
						"::setTextAntialias"
					],
					"id": "imagickdraw.settextantialias",
					"name": "ImagickDraw::setTextAntialias",
					"description": "Controls whether text is antialiased"
				},
				"imagickdraw.settextdecoration": {
					"tokens": [
						"ImagickDraw::setTextDecoration",
						"setTextDecoration",
						"::setTextDecoration"
					],
					"id": "imagickdraw.settextdecoration",
					"name": "ImagickDraw::setTextDecoration",
					"description": "Specifies a decoration"
				},
				"imagickdraw.settextencoding": {
					"tokens": [
						"ImagickDraw::setTextEncoding",
						"setTextEncoding",
						"::setTextEncoding"
					],
					"id": "imagickdraw.settextencoding",
					"name": "ImagickDraw::setTextEncoding",
					"description": "Specifies the text code set"
				},
				"imagickdraw.settextinterlinespacing": {
					"tokens": [
						"ImagickDraw::setTextInterlineSpacing",
						"setTextInterlineSpacing",
						"::setTextInterlineSpacing"
					],
					"id": "imagickdraw.settextinterlinespacing",
					"name": "ImagickDraw::setTextInterlineSpacing",
					"description": "Description"
				},
				"imagickdraw.settextinterwordspacing": {
					"tokens": [
						"ImagickDraw::setTextInterwordSpacing",
						"setTextInterwordSpacing",
						"::setTextInterwordSpacing"
					],
					"id": "imagickdraw.settextinterwordspacing",
					"name": "ImagickDraw::setTextInterwordSpacing",
					"description": "Description"
				},
				"imagickdraw.settextkerning": {
					"tokens": [
						"ImagickDraw::setTextKerning",
						"setTextKerning",
						"::setTextKerning"
					],
					"id": "imagickdraw.settextkerning",
					"name": "ImagickDraw::setTextKerning",
					"description": "Description"
				},
				"imagickdraw.settextundercolor": {
					"tokens": [
						"ImagickDraw::setTextUnderColor",
						"setTextUnderColor",
						"::setTextUnderColor"
					],
					"id": "imagickdraw.settextundercolor",
					"name": "ImagickDraw::setTextUnderColor",
					"description": "Specifies the color of a background rectangle"
				},
				"imagickdraw.setvectorgraphics": {
					"tokens": [
						"ImagickDraw::setVectorGraphics",
						"setVectorGraphics",
						"::setVectorGraphics"
					],
					"id": "imagickdraw.setvectorgraphics",
					"name": "ImagickDraw::setVectorGraphics",
					"description": "Sets the vector graphics"
				},
				"imagickdraw.setviewbox": {
					"tokens": [
						"ImagickDraw::setViewbox",
						"setViewbox",
						"::setViewbox"
					],
					"id": "imagickdraw.setviewbox",
					"name": "ImagickDraw::setViewbox",
					"description": "Sets the overall canvas size"
				},
				"imagickdraw.skewx": {
					"tokens": [
						"ImagickDraw::skewX",
						"skewX",
						"::skewX"
					],
					"id": "imagickdraw.skewx",
					"name": "ImagickDraw::skewX",
					"description": "Skews the current coordinate system in the horizontal direction"
				},
				"imagickdraw.skewy": {
					"tokens": [
						"ImagickDraw::skewY",
						"skewY",
						"::skewY"
					],
					"id": "imagickdraw.skewy",
					"name": "ImagickDraw::skewY",
					"description": "Skews the current coordinate system in the vertical direction"
				},
				"imagickdraw.translate": {
					"tokens": [
						"ImagickDraw::translate",
						"translate",
						"::translate"
					],
					"id": "imagickdraw.translate",
					"name": "ImagickDraw::translate",
					"description": "Applies a translation to the current coordinate system"
				},
				"imagickpixel.clear": {
					"tokens": [
						"ImagickPixel::clear",
						"clear",
						"::clear"
					],
					"id": "imagickpixel.clear",
					"name": "ImagickPixel::clear",
					"description": "Clears resources associated with this object"
				},
				"imagickpixel.construct": {
					"tokens": [
						"ImagickPixel::__construct",
						"ImagickPixel::_construct",
						"__construct",
						"::__construct"
					],
					"id": "imagickpixel.construct",
					"name": "ImagickPixel::__construct",
					"description": "The ImagickPixel constructor"
				},
				"imagickpixel.destroy": {
					"tokens": [
						"ImagickPixel::destroy",
						"destroy",
						"::destroy"
					],
					"id": "imagickpixel.destroy",
					"name": "ImagickPixel::destroy",
					"description": "Deallocates resources associated with this object"
				},
				"imagickpixel.getcolor": {
					"tokens": [
						"ImagickPixel::getColor",
						"getColor",
						"::getColor"
					],
					"id": "imagickpixel.getcolor",
					"name": "ImagickPixel::getColor",
					"description": "Returns the color"
				},
				"imagickpixel.getcolorasstring": {
					"tokens": [
						"ImagickPixel::getColorAsString",
						"getColorAsString",
						"::getColorAsString"
					],
					"id": "imagickpixel.getcolorasstring",
					"name": "ImagickPixel::getColorAsString",
					"description": "Returns the color as a string"
				},
				"imagickpixel.getcolorcount": {
					"tokens": [
						"ImagickPixel::getColorCount",
						"getColorCount",
						"::getColorCount"
					],
					"id": "imagickpixel.getcolorcount",
					"name": "ImagickPixel::getColorCount",
					"description": "Returns the color count associated with this color"
				},
				"imagickpixel.getcolorquantum": {
					"tokens": [
						"ImagickPixel::getColorQuantum",
						"getColorQuantum",
						"::getColorQuantum"
					],
					"id": "imagickpixel.getcolorquantum",
					"name": "ImagickPixel::getColorQuantum",
					"description": "Description"
				},
				"imagickpixel.getcolorvalue": {
					"tokens": [
						"ImagickPixel::getColorValue",
						"getColorValue",
						"::getColorValue"
					],
					"id": "imagickpixel.getcolorvalue",
					"name": "ImagickPixel::getColorValue",
					"description": "Gets the normalized value of the provided color channel"
				},
				"imagickpixel.getcolorvaluequantum": {
					"tokens": [
						"ImagickPixel::getColorValueQuantum",
						"getColorValueQuantum",
						"::getColorValueQuantum"
					],
					"id": "imagickpixel.getcolorvaluequantum",
					"name": "ImagickPixel::getColorValueQuantum",
					"description": "Description"
				},
				"imagickpixel.gethsl": {
					"tokens": [
						"ImagickPixel::getHSL",
						"getHSL",
						"::getHSL"
					],
					"id": "imagickpixel.gethsl",
					"name": "ImagickPixel::getHSL",
					"description": "Returns the normalized HSL color of the ImagickPixel object"
				},
				"imagickpixel.getindex": {
					"tokens": [
						"ImagickPixel::getIndex",
						"getIndex",
						"::getIndex"
					],
					"id": "imagickpixel.getindex",
					"name": "ImagickPixel::getIndex",
					"description": "Description"
				},
				"imagickpixel.ispixelsimilar": {
					"tokens": [
						"ImagickPixel::isPixelSimilar",
						"isPixelSimilar",
						"::isPixelSimilar"
					],
					"id": "imagickpixel.ispixelsimilar",
					"name": "ImagickPixel::isPixelSimilar",
					"description": "Check the distance between this color and another"
				},
				"imagickpixel.ispixelsimilarquantum": {
					"tokens": [
						"ImagickPixel::isPixelSimilarQuantum",
						"isPixelSimilarQuantum",
						"::isPixelSimilarQuantum"
					],
					"id": "imagickpixel.ispixelsimilarquantum",
					"name": "ImagickPixel::isPixelSimilarQuantum",
					"description": "Description"
				},
				"imagickpixel.issimilar": {
					"tokens": [
						"ImagickPixel::isSimilar",
						"isSimilar",
						"::isSimilar"
					],
					"id": "imagickpixel.issimilar",
					"name": "ImagickPixel::isSimilar",
					"description": "Check the distance between this color and another"
				},
				"imagickpixel.setcolor": {
					"tokens": [
						"ImagickPixel::setColor",
						"setColor",
						"::setColor"
					],
					"id": "imagickpixel.setcolor",
					"name": "ImagickPixel::setColor",
					"description": "Sets the color"
				},
				"imagickpixel.setcolorcount": {
					"tokens": [
						"ImagickPixel::setColorCount",
						"setColorCount",
						"::setColorCount"
					],
					"id": "imagickpixel.setcolorcount",
					"name": "ImagickPixel::setColorCount",
					"description": "Description"
				},
				"imagickpixel.setcolorvalue": {
					"tokens": [
						"ImagickPixel::setColorValue",
						"setColorValue",
						"::setColorValue"
					],
					"id": "imagickpixel.setcolorvalue",
					"name": "ImagickPixel::setColorValue",
					"description": "Sets the normalized value of one of the channels"
				},
				"imagickpixel.setcolorvaluequantum": {
					"tokens": [
						"ImagickPixel::setColorValueQuantum",
						"setColorValueQuantum",
						"::setColorValueQuantum"
					],
					"id": "imagickpixel.setcolorvaluequantum",
					"name": "ImagickPixel::setColorValueQuantum",
					"description": "Description"
				},
				"imagickpixel.sethsl": {
					"tokens": [
						"ImagickPixel::setHSL",
						"setHSL",
						"::setHSL"
					],
					"id": "imagickpixel.sethsl",
					"name": "ImagickPixel::setHSL",
					"description": "Sets the normalized HSL color"
				},
				"imagickpixel.setindex": {
					"tokens": [
						"ImagickPixel::setIndex",
						"setIndex",
						"::setIndex"
					],
					"id": "imagickpixel.setindex",
					"name": "ImagickPixel::setIndex",
					"description": "Description"
				},
				"imagickpixeliterator.clear": {
					"tokens": [
						"ImagickPixelIterator::clear",
						"clear",
						"::clear"
					],
					"id": "imagickpixeliterator.clear",
					"name": "ImagickPixelIterator::clear",
					"description": "Clear resources associated with a PixelIterator"
				},
				"imagickpixeliterator.construct": {
					"tokens": [
						"ImagickPixelIterator::__construct",
						"ImagickPixelIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "imagickpixeliterator.construct",
					"name": "ImagickPixelIterator::__construct",
					"description": "The ImagickPixelIterator constructor"
				},
				"imagickpixeliterator.destroy": {
					"tokens": [
						"ImagickPixelIterator::destroy",
						"destroy",
						"::destroy"
					],
					"id": "imagickpixeliterator.destroy",
					"name": "ImagickPixelIterator::destroy",
					"description": "Deallocates resources associated with a PixelIterator"
				},
				"imagickpixeliterator.getcurrentiteratorrow": {
					"tokens": [
						"ImagickPixelIterator::getCurrentIteratorRow",
						"getCurrentIteratorRow",
						"::getCurrentIteratorRow"
					],
					"id": "imagickpixeliterator.getcurrentiteratorrow",
					"name": "ImagickPixelIterator::getCurrentIteratorRow",
					"description": "Returns the current row of ImagickPixel objects"
				},
				"imagickpixeliterator.getiteratorrow": {
					"tokens": [
						"ImagickPixelIterator::getIteratorRow",
						"getIteratorRow",
						"::getIteratorRow"
					],
					"id": "imagickpixeliterator.getiteratorrow",
					"name": "ImagickPixelIterator::getIteratorRow",
					"description": "Returns the current pixel iterator row"
				},
				"imagickpixeliterator.getnextiteratorrow": {
					"tokens": [
						"ImagickPixelIterator::getNextIteratorRow",
						"getNextIteratorRow",
						"::getNextIteratorRow"
					],
					"id": "imagickpixeliterator.getnextiteratorrow",
					"name": "ImagickPixelIterator::getNextIteratorRow",
					"description": "Returns the next row of the pixel iterator"
				},
				"imagickpixeliterator.getpreviousiteratorrow": {
					"tokens": [
						"ImagickPixelIterator::getPreviousIteratorRow",
						"getPreviousIteratorRow",
						"::getPreviousIteratorRow"
					],
					"id": "imagickpixeliterator.getpreviousiteratorrow",
					"name": "ImagickPixelIterator::getPreviousIteratorRow",
					"description": "Returns the previous row"
				},
				"imagickpixeliterator.newpixeliterator": {
					"tokens": [
						"ImagickPixelIterator::newPixelIterator",
						"newPixelIterator",
						"::newPixelIterator"
					],
					"id": "imagickpixeliterator.newpixeliterator",
					"name": "ImagickPixelIterator::newPixelIterator",
					"description": "Returns a new pixel iterator"
				},
				"imagickpixeliterator.newpixelregioniterator": {
					"tokens": [
						"ImagickPixelIterator::newPixelRegionIterator",
						"newPixelRegionIterator",
						"::newPixelRegionIterator"
					],
					"id": "imagickpixeliterator.newpixelregioniterator",
					"name": "ImagickPixelIterator::newPixelRegionIterator",
					"description": "Returns a new pixel iterator"
				},
				"imagickpixeliterator.resetiterator": {
					"tokens": [
						"ImagickPixelIterator::resetIterator",
						"resetIterator",
						"::resetIterator"
					],
					"id": "imagickpixeliterator.resetiterator",
					"name": "ImagickPixelIterator::resetIterator",
					"description": "Resets the pixel iterator"
				},
				"imagickpixeliterator.setiteratorfirstrow": {
					"tokens": [
						"ImagickPixelIterator::setIteratorFirstRow",
						"setIteratorFirstRow",
						"::setIteratorFirstRow"
					],
					"id": "imagickpixeliterator.setiteratorfirstrow",
					"name": "ImagickPixelIterator::setIteratorFirstRow",
					"description": "Sets the pixel iterator to the first pixel row"
				},
				"imagickpixeliterator.setiteratorlastrow": {
					"tokens": [
						"ImagickPixelIterator::setIteratorLastRow",
						"setIteratorLastRow",
						"::setIteratorLastRow"
					],
					"id": "imagickpixeliterator.setiteratorlastrow",
					"name": "ImagickPixelIterator::setIteratorLastRow",
					"description": "Sets the pixel iterator to the last pixel row"
				},
				"imagickpixeliterator.setiteratorrow": {
					"tokens": [
						"ImagickPixelIterator::setIteratorRow",
						"setIteratorRow",
						"::setIteratorRow"
					],
					"id": "imagickpixeliterator.setiteratorrow",
					"name": "ImagickPixelIterator::setIteratorRow",
					"description": "Set the pixel iterator row"
				},
				"imagickpixeliterator.synciterator": {
					"tokens": [
						"ImagickPixelIterator::syncIterator",
						"syncIterator",
						"::syncIterator"
					],
					"id": "imagickpixeliterator.synciterator",
					"name": "ImagickPixelIterator::syncIterator",
					"description": "Syncs the pixel iterator"
				},
				"imagickkernel.addkernel": {
					"tokens": [
						"ImagickKernel::addKernel",
						"addKernel",
						"::addKernel"
					],
					"id": "imagickkernel.addkernel",
					"name": "ImagickKernel::addKernel",
					"description": "Description"
				},
				"imagickkernel.addunitykernel": {
					"tokens": [
						"ImagickKernel::addUnityKernel",
						"addUnityKernel",
						"::addUnityKernel"
					],
					"id": "imagickkernel.addunitykernel",
					"name": "ImagickKernel::addUnityKernel",
					"description": "Description"
				},
				"imagickkernel.frombuiltin": {
					"tokens": [
						"ImagickKernel::fromBuiltIn",
						"fromBuiltIn",
						"::fromBuiltIn"
					],
					"id": "imagickkernel.frombuiltin",
					"name": "ImagickKernel::fromBuiltIn",
					"description": "Description"
				},
				"imagickkernel.frommatrix": {
					"tokens": [
						"ImagickKernel::fromMatrix",
						"fromMatrix",
						"::fromMatrix"
					],
					"id": "imagickkernel.frommatrix",
					"name": "ImagickKernel::fromMatrix",
					"description": "Description"
				},
				"imagickkernel.getmatrix": {
					"tokens": [
						"ImagickKernel::getMatrix",
						"getMatrix",
						"::getMatrix"
					],
					"id": "imagickkernel.getmatrix",
					"name": "ImagickKernel::getMatrix",
					"description": "Description"
				},
				"imagickkernel.scale": {
					"tokens": [
						"ImagickKernel::scale",
						"scale",
						"::scale"
					],
					"id": "imagickkernel.scale",
					"name": "ImagickKernel::scale",
					"description": "Description"
				},
				"imagickkernel.separate": {
					"tokens": [
						"ImagickKernel::separate",
						"separate",
						"::separate"
					],
					"id": "imagickkernel.separate",
					"name": "ImagickKernel::separate",
					"description": "Description"
				},
				"function.cyrus-authenticate": {
					"tokens": [
						"cyrus_authenticate",
						"cyrusauthenticate"
					],
					"id": "function.cyrus-authenticate",
					"name": "cyrus_authenticate",
					"description": "Authenticate against a Cyrus IMAP server"
				},
				"function.cyrus-bind": {
					"tokens": [
						"cyrus_bind",
						"cyrusbind"
					],
					"id": "function.cyrus-bind",
					"name": "cyrus_bind",
					"description": "Bind callbacks to a Cyrus IMAP connection"
				},
				"function.cyrus-close": {
					"tokens": [
						"cyrus_close",
						"cyrusclose"
					],
					"id": "function.cyrus-close",
					"name": "cyrus_close",
					"description": "Close connection to a Cyrus IMAP server"
				},
				"function.cyrus-connect": {
					"tokens": [
						"cyrus_connect",
						"cyrusconnect"
					],
					"id": "function.cyrus-connect",
					"name": "cyrus_connect",
					"description": "Connect to a Cyrus IMAP server"
				},
				"function.cyrus-query": {
					"tokens": [
						"cyrus_query",
						"cyrusquery"
					],
					"id": "function.cyrus-query",
					"name": "cyrus_query",
					"description": "Send a query to a Cyrus IMAP server"
				},
				"function.cyrus-unbind": {
					"tokens": [
						"cyrus_unbind",
						"cyrusunbind"
					],
					"id": "function.cyrus-unbind",
					"name": "cyrus_unbind",
					"description": "Unbind ..."
				},
				"function.imap-8bit": {
					"tokens": [
						"imap_8bit",
						"imap8bit"
					],
					"id": "function.imap-8bit",
					"name": "imap_8bit",
					"description": "Convert an 8bit string to a quoted-printable string"
				},
				"function.imap-alerts": {
					"tokens": [
						"imap_alerts",
						"imapalerts"
					],
					"id": "function.imap-alerts",
					"name": "imap_alerts",
					"description": "Returns all IMAP alert messages that have occurred"
				},
				"function.imap-append": {
					"tokens": [
						"imap_append",
						"imapappend"
					],
					"id": "function.imap-append",
					"name": "imap_append",
					"description": "Append a string message to a specified mailbox"
				},
				"function.imap-base64": {
					"tokens": [
						"imap_base64",
						"imapbase64"
					],
					"id": "function.imap-base64",
					"name": "imap_base64",
					"description": "Decode BASE64 encoded text"
				},
				"function.imap-binary": {
					"tokens": [
						"imap_binary",
						"imapbinary"
					],
					"id": "function.imap-binary",
					"name": "imap_binary",
					"description": "Convert an 8bit string to a base64 string"
				},
				"function.imap-body": {
					"tokens": [
						"imap_body",
						"imapbody"
					],
					"id": "function.imap-body",
					"name": "imap_body",
					"description": "Read the message body"
				},
				"function.imap-bodystruct": {
					"tokens": [
						"imap_bodystruct",
						"imapbodystruct"
					],
					"id": "function.imap-bodystruct",
					"name": "imap_bodystruct",
					"description": "Read the structure of a specified body section of a specific message"
				},
				"function.imap-check": {
					"tokens": [
						"imap_check",
						"imapcheck"
					],
					"id": "function.imap-check",
					"name": "imap_check",
					"description": "Check current mailbox"
				},
				"function.imap-clearflag-full": {
					"tokens": [
						"imap_clearflag_full",
						"imapclearflag_full"
					],
					"id": "function.imap-clearflag-full",
					"name": "imap_clearflag_full",
					"description": "Clears flags on messages"
				},
				"function.imap-close": {
					"tokens": [
						"imap_close",
						"imapclose"
					],
					"id": "function.imap-close",
					"name": "imap_close",
					"description": "Close an IMAP stream"
				},
				"function.imap-create": {
					"tokens": [
						"imap_create",
						"imapcreate"
					],
					"id": "function.imap-create",
					"name": "imap_create",
					"description": "Alias of imap_createmailbox"
				},
				"function.imap-createmailbox": {
					"tokens": [
						"imap_createmailbox",
						"imapcreatemailbox"
					],
					"id": "function.imap-createmailbox",
					"name": "imap_createmailbox",
					"description": "Create a new mailbox"
				},
				"function.imap-delete": {
					"tokens": [
						"imap_delete",
						"imapdelete"
					],
					"id": "function.imap-delete",
					"name": "imap_delete",
					"description": "Mark a message for deletion from current mailbox"
				},
				"function.imap-deletemailbox": {
					"tokens": [
						"imap_deletemailbox",
						"imapdeletemailbox"
					],
					"id": "function.imap-deletemailbox",
					"name": "imap_deletemailbox",
					"description": "Delete a mailbox"
				},
				"function.imap-errors": {
					"tokens": [
						"imap_errors",
						"imaperrors"
					],
					"id": "function.imap-errors",
					"name": "imap_errors",
					"description": "Returns all of the IMAP errors that have occurred"
				},
				"function.imap-expunge": {
					"tokens": [
						"imap_expunge",
						"imapexpunge"
					],
					"id": "function.imap-expunge",
					"name": "imap_expunge",
					"description": "Delete all messages marked for deletion"
				},
				"function.imap-fetch-overview": {
					"tokens": [
						"imap_fetch_overview",
						"imapfetch_overview"
					],
					"id": "function.imap-fetch-overview",
					"name": "imap_fetch_overview",
					"description": "Read an overview of the information in the headers of the given message"
				},
				"function.imap-fetchbody": {
					"tokens": [
						"imap_fetchbody",
						"imapfetchbody"
					],
					"id": "function.imap-fetchbody",
					"name": "imap_fetchbody",
					"description": "Fetch a particular section of the body of the message"
				},
				"function.imap-fetchheader": {
					"tokens": [
						"imap_fetchheader",
						"imapfetchheader"
					],
					"id": "function.imap-fetchheader",
					"name": "imap_fetchheader",
					"description": "Returns header for a message"
				},
				"function.imap-fetchmime": {
					"tokens": [
						"imap_fetchmime",
						"imapfetchmime"
					],
					"id": "function.imap-fetchmime",
					"name": "imap_fetchmime",
					"description": "Fetch MIME headers for a particular section of the message"
				},
				"function.imap-fetchstructure": {
					"tokens": [
						"imap_fetchstructure",
						"imapfetchstructure"
					],
					"id": "function.imap-fetchstructure",
					"name": "imap_fetchstructure",
					"description": "Read the structure of a particular message"
				},
				"function.imap-fetchtext": {
					"tokens": [
						"imap_fetchtext",
						"imapfetchtext"
					],
					"id": "function.imap-fetchtext",
					"name": "imap_fetchtext",
					"description": "Alias of imap_body"
				},
				"function.imap-gc": {
					"tokens": [
						"imap_gc",
						"imapgc"
					],
					"id": "function.imap-gc",
					"name": "imap_gc",
					"description": "Clears IMAP cache"
				},
				"function.imap-get-quota": {
					"tokens": [
						"imap_get_quota",
						"imapget_quota"
					],
					"id": "function.imap-get-quota",
					"name": "imap_get_quota",
					"description": "Retrieve the quota level settings, and usage statics per mailbox"
				},
				"function.imap-get-quotaroot": {
					"tokens": [
						"imap_get_quotaroot",
						"imapget_quotaroot"
					],
					"id": "function.imap-get-quotaroot",
					"name": "imap_get_quotaroot",
					"description": "Retrieve the quota settings per user"
				},
				"function.imap-getacl": {
					"tokens": [
						"imap_getacl",
						"imapgetacl"
					],
					"id": "function.imap-getacl",
					"name": "imap_getacl",
					"description": "Gets the ACL for a given mailbox"
				},
				"function.imap-getmailboxes": {
					"tokens": [
						"imap_getmailboxes",
						"imapgetmailboxes"
					],
					"id": "function.imap-getmailboxes",
					"name": "imap_getmailboxes",
					"description": "Read the list of mailboxes, returning detailed information on each one"
				},
				"function.imap-getsubscribed": {
					"tokens": [
						"imap_getsubscribed",
						"imapgetsubscribed"
					],
					"id": "function.imap-getsubscribed",
					"name": "imap_getsubscribed",
					"description": "List all the subscribed mailboxes"
				},
				"function.imap-header": {
					"tokens": [
						"imap_header",
						"imapheader"
					],
					"id": "function.imap-header",
					"name": "imap_header",
					"description": "Alias of imap_headerinfo"
				},
				"function.imap-headerinfo": {
					"tokens": [
						"imap_headerinfo",
						"imapheaderinfo"
					],
					"id": "function.imap-headerinfo",
					"name": "imap_headerinfo",
					"description": "Read the header of the message"
				},
				"function.imap-headers": {
					"tokens": [
						"imap_headers",
						"imapheaders"
					],
					"id": "function.imap-headers",
					"name": "imap_headers",
					"description": "Returns headers for all messages in a mailbox"
				},
				"function.imap-last-error": {
					"tokens": [
						"imap_last_error",
						"imaplast_error"
					],
					"id": "function.imap-last-error",
					"name": "imap_last_error",
					"description": "Gets the last IMAP error that occurred during this page request"
				},
				"function.imap-list": {
					"tokens": [
						"imap_list",
						"imaplist"
					],
					"id": "function.imap-list",
					"name": "imap_list",
					"description": "Read the list of mailboxes"
				},
				"function.imap-listmailbox": {
					"tokens": [
						"imap_listmailbox",
						"imaplistmailbox"
					],
					"id": "function.imap-listmailbox",
					"name": "imap_listmailbox",
					"description": "Alias of imap_list"
				},
				"function.imap-listscan": {
					"tokens": [
						"imap_listscan",
						"imaplistscan"
					],
					"id": "function.imap-listscan",
					"name": "imap_listscan",
					"description": "Returns the list of mailboxes that matches the given text"
				},
				"function.imap-listsubscribed": {
					"tokens": [
						"imap_listsubscribed",
						"imaplistsubscribed"
					],
					"id": "function.imap-listsubscribed",
					"name": "imap_listsubscribed",
					"description": "Alias of imap_lsub"
				},
				"function.imap-lsub": {
					"tokens": [
						"imap_lsub",
						"imaplsub"
					],
					"id": "function.imap-lsub",
					"name": "imap_lsub",
					"description": "List all the subscribed mailboxes"
				},
				"function.imap-mail-compose": {
					"tokens": [
						"imap_mail_compose",
						"imapmail_compose"
					],
					"id": "function.imap-mail-compose",
					"name": "imap_mail_compose",
					"description": "Create a MIME message based on given envelope and body sections"
				},
				"function.imap-mail-copy": {
					"tokens": [
						"imap_mail_copy",
						"imapmail_copy"
					],
					"id": "function.imap-mail-copy",
					"name": "imap_mail_copy",
					"description": "Copy specified messages to a mailbox"
				},
				"function.imap-mail-move": {
					"tokens": [
						"imap_mail_move",
						"imapmail_move"
					],
					"id": "function.imap-mail-move",
					"name": "imap_mail_move",
					"description": "Move specified messages to a mailbox"
				},
				"function.imap-mail": {
					"tokens": [
						"imap_mail",
						"imapmail"
					],
					"id": "function.imap-mail",
					"name": "imap_mail",
					"description": "Send an email message"
				},
				"function.imap-mailboxmsginfo": {
					"tokens": [
						"imap_mailboxmsginfo",
						"imapmailboxmsginfo"
					],
					"id": "function.imap-mailboxmsginfo",
					"name": "imap_mailboxmsginfo",
					"description": "Get information about the current mailbox"
				},
				"function.imap-mime-header-decode": {
					"tokens": [
						"imap_mime_header_decode",
						"imapmime_header_decode"
					],
					"id": "function.imap-mime-header-decode",
					"name": "imap_mime_header_decode",
					"description": "Decode MIME header elements"
				},
				"function.imap-msgno": {
					"tokens": [
						"imap_msgno",
						"imapmsgno"
					],
					"id": "function.imap-msgno",
					"name": "imap_msgno",
					"description": "Gets the message sequence number for the given UID"
				},
				"function.imap-num-msg": {
					"tokens": [
						"imap_num_msg",
						"imapnum_msg"
					],
					"id": "function.imap-num-msg",
					"name": "imap_num_msg",
					"description": "Gets the number of messages in the current mailbox"
				},
				"function.imap-num-recent": {
					"tokens": [
						"imap_num_recent",
						"imapnum_recent"
					],
					"id": "function.imap-num-recent",
					"name": "imap_num_recent",
					"description": "Gets the number of recent messages in current mailbox"
				},
				"function.imap-open": {
					"tokens": [
						"imap_open",
						"imapopen"
					],
					"id": "function.imap-open",
					"name": "imap_open",
					"description": "Open an IMAP stream to a mailbox"
				},
				"function.imap-ping": {
					"tokens": [
						"imap_ping",
						"imapping"
					],
					"id": "function.imap-ping",
					"name": "imap_ping",
					"description": "Check if the IMAP stream is still active"
				},
				"function.imap-qprint": {
					"tokens": [
						"imap_qprint",
						"imapqprint"
					],
					"id": "function.imap-qprint",
					"name": "imap_qprint",
					"description": "Convert a quoted-printable string to an 8 bit string"
				},
				"function.imap-rename": {
					"tokens": [
						"imap_rename",
						"imaprename"
					],
					"id": "function.imap-rename",
					"name": "imap_rename",
					"description": "Alias of imap_renamemailbox"
				},
				"function.imap-renamemailbox": {
					"tokens": [
						"imap_renamemailbox",
						"imaprenamemailbox"
					],
					"id": "function.imap-renamemailbox",
					"name": "imap_renamemailbox",
					"description": "Rename an old mailbox to new mailbox"
				},
				"function.imap-reopen": {
					"tokens": [
						"imap_reopen",
						"imapreopen"
					],
					"id": "function.imap-reopen",
					"name": "imap_reopen",
					"description": "Reopen IMAP stream to new mailbox"
				},
				"function.imap-rfc822-parse-adrlist": {
					"tokens": [
						"imap_rfc822_parse_adrlist",
						"imaprfc822_parse_adrlist"
					],
					"id": "function.imap-rfc822-parse-adrlist",
					"name": "imap_rfc822_parse_adrlist",
					"description": "Parses an address string"
				},
				"function.imap-rfc822-parse-headers": {
					"tokens": [
						"imap_rfc822_parse_headers",
						"imaprfc822_parse_headers"
					],
					"id": "function.imap-rfc822-parse-headers",
					"name": "imap_rfc822_parse_headers",
					"description": "Parse mail headers from a string"
				},
				"function.imap-rfc822-write-address": {
					"tokens": [
						"imap_rfc822_write_address",
						"imaprfc822_write_address"
					],
					"id": "function.imap-rfc822-write-address",
					"name": "imap_rfc822_write_address",
					"description": "Returns a properly formatted email address given the mailbox, host, and personal info"
				},
				"function.imap-savebody": {
					"tokens": [
						"imap_savebody",
						"imapsavebody"
					],
					"id": "function.imap-savebody",
					"name": "imap_savebody",
					"description": "Save a specific body section to a file"
				},
				"function.imap-scan": {
					"tokens": [
						"imap_scan",
						"imapscan"
					],
					"id": "function.imap-scan",
					"name": "imap_scan",
					"description": "Alias of imap_listscan"
				},
				"function.imap-scanmailbox": {
					"tokens": [
						"imap_scanmailbox",
						"imapscanmailbox"
					],
					"id": "function.imap-scanmailbox",
					"name": "imap_scanmailbox",
					"description": "Alias of imap_listscan"
				},
				"function.imap-search": {
					"tokens": [
						"imap_search",
						"imapsearch"
					],
					"id": "function.imap-search",
					"name": "imap_search",
					"description": "This function returns an array of messages matching the given search criteria"
				},
				"function.imap-set-quota": {
					"tokens": [
						"imap_set_quota",
						"imapset_quota"
					],
					"id": "function.imap-set-quota",
					"name": "imap_set_quota",
					"description": "Sets a quota for a given mailbox"
				},
				"function.imap-setacl": {
					"tokens": [
						"imap_setacl",
						"imapsetacl"
					],
					"id": "function.imap-setacl",
					"name": "imap_setacl",
					"description": "Sets the ACL for a given mailbox"
				},
				"function.imap-setflag-full": {
					"tokens": [
						"imap_setflag_full",
						"imapsetflag_full"
					],
					"id": "function.imap-setflag-full",
					"name": "imap_setflag_full",
					"description": "Sets flags on messages"
				},
				"function.imap-sort": {
					"tokens": [
						"imap_sort",
						"imapsort"
					],
					"id": "function.imap-sort",
					"name": "imap_sort",
					"description": "Gets and sort messages"
				},
				"function.imap-status": {
					"tokens": [
						"imap_status",
						"imapstatus"
					],
					"id": "function.imap-status",
					"name": "imap_status",
					"description": "Returns status information on a mailbox"
				},
				"function.imap-subscribe": {
					"tokens": [
						"imap_subscribe",
						"imapsubscribe"
					],
					"id": "function.imap-subscribe",
					"name": "imap_subscribe",
					"description": "Subscribe to a mailbox"
				},
				"function.imap-thread": {
					"tokens": [
						"imap_thread",
						"imapthread"
					],
					"id": "function.imap-thread",
					"name": "imap_thread",
					"description": "Returns a tree of threaded message"
				},
				"function.imap-timeout": {
					"tokens": [
						"imap_timeout",
						"imaptimeout"
					],
					"id": "function.imap-timeout",
					"name": "imap_timeout",
					"description": "Set or fetch imap timeout"
				},
				"function.imap-uid": {
					"tokens": [
						"imap_uid",
						"imapuid"
					],
					"id": "function.imap-uid",
					"name": "imap_uid",
					"description": "This function returns the UID for the given message sequence number"
				},
				"function.imap-undelete": {
					"tokens": [
						"imap_undelete",
						"imapundelete"
					],
					"id": "function.imap-undelete",
					"name": "imap_undelete",
					"description": "Unmark the message which is marked deleted"
				},
				"function.imap-unsubscribe": {
					"tokens": [
						"imap_unsubscribe",
						"imapunsubscribe"
					],
					"id": "function.imap-unsubscribe",
					"name": "imap_unsubscribe",
					"description": "Unsubscribe from a mailbox"
				},
				"function.imap-utf7-decode": {
					"tokens": [
						"imap_utf7_decode",
						"imaputf7_decode"
					],
					"id": "function.imap-utf7-decode",
					"name": "imap_utf7_decode",
					"description": "Decodes a modified UTF-7 encoded string"
				},
				"function.imap-utf7-encode": {
					"tokens": [
						"imap_utf7_encode",
						"imaputf7_encode"
					],
					"id": "function.imap-utf7-encode",
					"name": "imap_utf7_encode",
					"description": "Converts ISO-8859-1 string to modified UTF-7 text"
				},
				"function.imap-utf8": {
					"tokens": [
						"imap_utf8",
						"imaputf8"
					],
					"id": "function.imap-utf8",
					"name": "imap_utf8",
					"description": "Converts MIME-encoded text to UTF-8"
				},
				"function.ezmlm-hash": {
					"tokens": [
						"ezmlm_hash",
						"ezmlmhash"
					],
					"id": "function.ezmlm-hash",
					"name": "ezmlm_hash",
					"description": "Calculate the hash value needed by EZMLM"
				},
				"function.mail": {
					"tokens": [
						"mail"
					],
					"id": "function.mail",
					"name": "mail",
					"description": "Send mail"
				},
				"function.mailparse-determine-best-xfer-encoding": {
					"tokens": [
						"mailparse_determine_best_xfer_encoding",
						"mailparsedetermine_best_xfer_encoding"
					],
					"id": "function.mailparse-determine-best-xfer-encoding",
					"name": "mailparse_determine_best_xfer_encoding",
					"description": "Gets the best way of encoding"
				},
				"function.mailparse-msg-create": {
					"tokens": [
						"mailparse_msg_create",
						"mailparsemsg_create"
					],
					"id": "function.mailparse-msg-create",
					"name": "mailparse_msg_create",
					"description": "Create a mime mail resource"
				},
				"function.mailparse-msg-extract-part-file": {
					"tokens": [
						"mailparse_msg_extract_part_file",
						"mailparsemsg_extract_part_file"
					],
					"id": "function.mailparse-msg-extract-part-file",
					"name": "mailparse_msg_extract_part_file",
					"description": "Extracts/decodes a message section"
				},
				"function.mailparse-msg-extract-part": {
					"tokens": [
						"mailparse_msg_extract_part",
						"mailparsemsg_extract_part"
					],
					"id": "function.mailparse-msg-extract-part",
					"name": "mailparse_msg_extract_part",
					"description": "Extracts/decodes a message section"
				},
				"function.mailparse-msg-extract-whole-part-file": {
					"tokens": [
						"mailparse_msg_extract_whole_part_file",
						"mailparsemsg_extract_whole_part_file"
					],
					"id": "function.mailparse-msg-extract-whole-part-file",
					"name": "mailparse_msg_extract_whole_part_file",
					"description": "Extracts a message section including headers without decoding the transfer encoding"
				},
				"function.mailparse-msg-free": {
					"tokens": [
						"mailparse_msg_free",
						"mailparsemsg_free"
					],
					"id": "function.mailparse-msg-free",
					"name": "mailparse_msg_free",
					"description": "Frees a MIME resource"
				},
				"function.mailparse-msg-get-part-data": {
					"tokens": [
						"mailparse_msg_get_part_data",
						"mailparsemsg_get_part_data"
					],
					"id": "function.mailparse-msg-get-part-data",
					"name": "mailparse_msg_get_part_data",
					"description": "Returns an associative array of info about the message"
				},
				"function.mailparse-msg-get-part": {
					"tokens": [
						"mailparse_msg_get_part",
						"mailparsemsg_get_part"
					],
					"id": "function.mailparse-msg-get-part",
					"name": "mailparse_msg_get_part",
					"description": "Returns a handle on a given section in a mimemessage"
				},
				"function.mailparse-msg-get-structure": {
					"tokens": [
						"mailparse_msg_get_structure",
						"mailparsemsg_get_structure"
					],
					"id": "function.mailparse-msg-get-structure",
					"name": "mailparse_msg_get_structure",
					"description": "Returns an array of mime section names in the supplied message"
				},
				"function.mailparse-msg-parse-file": {
					"tokens": [
						"mailparse_msg_parse_file",
						"mailparsemsg_parse_file"
					],
					"id": "function.mailparse-msg-parse-file",
					"name": "mailparse_msg_parse_file",
					"description": "Parses a file"
				},
				"function.mailparse-msg-parse": {
					"tokens": [
						"mailparse_msg_parse",
						"mailparsemsg_parse"
					],
					"id": "function.mailparse-msg-parse",
					"name": "mailparse_msg_parse",
					"description": "Incrementally parse data into buffer"
				},
				"function.mailparse-rfc822-parse-addresses": {
					"tokens": [
						"mailparse_rfc822_parse_addresses",
						"mailparserfc822_parse_addresses"
					],
					"id": "function.mailparse-rfc822-parse-addresses",
					"name": "mailparse_rfc822_parse_addresses",
					"description": "Parse RFC 822 compliant addresses"
				},
				"function.mailparse-stream-encode": {
					"tokens": [
						"mailparse_stream_encode",
						"mailparsestream_encode"
					],
					"id": "function.mailparse-stream-encode",
					"name": "mailparse_stream_encode",
					"description": "Streams data from source file pointer, apply encoding and write to destfp"
				},
				"function.mailparse-uudecode-all": {
					"tokens": [
						"mailparse_uudecode_all",
						"mailparseuudecode_all"
					],
					"id": "function.mailparse-uudecode-all",
					"name": "mailparse_uudecode_all",
					"description": "Scans the data from fp and extract each embedded uuencoded file"
				},
				"function.vpopmail-add-alias-domain-ex": {
					"tokens": [
						"vpopmail_add_alias_domain_ex",
						"vpopmailadd_alias_domain_ex"
					],
					"id": "function.vpopmail-add-alias-domain-ex",
					"name": "vpopmail_add_alias_domain_ex",
					"description": "Add alias to an existing virtual domain"
				},
				"function.vpopmail-add-alias-domain": {
					"tokens": [
						"vpopmail_add_alias_domain",
						"vpopmailadd_alias_domain"
					],
					"id": "function.vpopmail-add-alias-domain",
					"name": "vpopmail_add_alias_domain",
					"description": "Add an alias for a virtual domain"
				},
				"function.vpopmail-add-domain-ex": {
					"tokens": [
						"vpopmail_add_domain_ex",
						"vpopmailadd_domain_ex"
					],
					"id": "function.vpopmail-add-domain-ex",
					"name": "vpopmail_add_domain_ex",
					"description": "Add a new virtual domain"
				},
				"function.vpopmail-add-domain": {
					"tokens": [
						"vpopmail_add_domain",
						"vpopmailadd_domain"
					],
					"id": "function.vpopmail-add-domain",
					"name": "vpopmail_add_domain",
					"description": "Add a new virtual domain"
				},
				"function.vpopmail-add-user": {
					"tokens": [
						"vpopmail_add_user",
						"vpopmailadd_user"
					],
					"id": "function.vpopmail-add-user",
					"name": "vpopmail_add_user",
					"description": "Add a new user to the specified virtual domain"
				},
				"function.vpopmail-alias-add": {
					"tokens": [
						"vpopmail_alias_add",
						"vpopmailalias_add"
					],
					"id": "function.vpopmail-alias-add",
					"name": "vpopmail_alias_add",
					"description": "Insert a virtual alias"
				},
				"function.vpopmail-alias-del-domain": {
					"tokens": [
						"vpopmail_alias_del_domain",
						"vpopmailalias_del_domain"
					],
					"id": "function.vpopmail-alias-del-domain",
					"name": "vpopmail_alias_del_domain",
					"description": "Deletes all virtual aliases of a domain"
				},
				"function.vpopmail-alias-del": {
					"tokens": [
						"vpopmail_alias_del",
						"vpopmailalias_del"
					],
					"id": "function.vpopmail-alias-del",
					"name": "vpopmail_alias_del",
					"description": "Deletes all virtual aliases of a user"
				},
				"function.vpopmail-alias-get-all": {
					"tokens": [
						"vpopmail_alias_get_all",
						"vpopmailalias_get_all"
					],
					"id": "function.vpopmail-alias-get-all",
					"name": "vpopmail_alias_get_all",
					"description": "Get all lines of an alias for a domain"
				},
				"function.vpopmail-alias-get": {
					"tokens": [
						"vpopmail_alias_get",
						"vpopmailalias_get"
					],
					"id": "function.vpopmail-alias-get",
					"name": "vpopmail_alias_get",
					"description": "Get all lines of an alias for a domain"
				},
				"function.vpopmail-auth-user": {
					"tokens": [
						"vpopmail_auth_user",
						"vpopmailauth_user"
					],
					"id": "function.vpopmail-auth-user",
					"name": "vpopmail_auth_user",
					"description": "Attempt to validate a username/domain/password"
				},
				"function.vpopmail-del-domain-ex": {
					"tokens": [
						"vpopmail_del_domain_ex",
						"vpopmaildel_domain_ex"
					],
					"id": "function.vpopmail-del-domain-ex",
					"name": "vpopmail_del_domain_ex",
					"description": "Delete a virtual domain"
				},
				"function.vpopmail-del-domain": {
					"tokens": [
						"vpopmail_del_domain",
						"vpopmaildel_domain"
					],
					"id": "function.vpopmail-del-domain",
					"name": "vpopmail_del_domain",
					"description": "Delete a virtual domain"
				},
				"function.vpopmail-del-user": {
					"tokens": [
						"vpopmail_del_user",
						"vpopmaildel_user"
					],
					"id": "function.vpopmail-del-user",
					"name": "vpopmail_del_user",
					"description": "Delete a user from a virtual domain"
				},
				"function.vpopmail-error": {
					"tokens": [
						"vpopmail_error",
						"vpopmailerror"
					],
					"id": "function.vpopmail-error",
					"name": "vpopmail_error",
					"description": "Get text message for last vpopmail error"
				},
				"function.vpopmail-passwd": {
					"tokens": [
						"vpopmail_passwd",
						"vpopmailpasswd"
					],
					"id": "function.vpopmail-passwd",
					"name": "vpopmail_passwd",
					"description": "Change a virtual user's password"
				},
				"function.vpopmail-set-user-quota": {
					"tokens": [
						"vpopmail_set_user_quota",
						"vpopmailset_user_quota"
					],
					"id": "function.vpopmail-set-user-quota",
					"name": "vpopmail_set_user_quota",
					"description": "Sets a virtual user's quota"
				},
				"function.bcadd": {
					"tokens": [
						"bcadd"
					],
					"id": "function.bcadd",
					"name": "bcadd",
					"description": "Add two arbitrary precision numbers"
				},
				"function.bccomp": {
					"tokens": [
						"bccomp"
					],
					"id": "function.bccomp",
					"name": "bccomp",
					"description": "Compare two arbitrary precision numbers"
				},
				"function.bcdiv": {
					"tokens": [
						"bcdiv"
					],
					"id": "function.bcdiv",
					"name": "bcdiv",
					"description": "Divide two arbitrary precision numbers"
				},
				"function.bcmod": {
					"tokens": [
						"bcmod"
					],
					"id": "function.bcmod",
					"name": "bcmod",
					"description": "Get modulus of an arbitrary precision number"
				},
				"function.bcmul": {
					"tokens": [
						"bcmul"
					],
					"id": "function.bcmul",
					"name": "bcmul",
					"description": "Multiply two arbitrary precision numbers"
				},
				"function.bcpow": {
					"tokens": [
						"bcpow"
					],
					"id": "function.bcpow",
					"name": "bcpow",
					"description": "Raise an arbitrary precision number to another"
				},
				"function.bcpowmod": {
					"tokens": [
						"bcpowmod"
					],
					"id": "function.bcpowmod",
					"name": "bcpowmod",
					"description": "Raise an arbitrary precision number to another, reduced by a specified modulus"
				},
				"function.bcscale": {
					"tokens": [
						"bcscale"
					],
					"id": "function.bcscale",
					"name": "bcscale",
					"description": "Set default scale parameter for all bc math functions"
				},
				"function.bcsqrt": {
					"tokens": [
						"bcsqrt"
					],
					"id": "function.bcsqrt",
					"name": "bcsqrt",
					"description": "Get the square root of an arbitrary precision number"
				},
				"function.bcsub": {
					"tokens": [
						"bcsub"
					],
					"id": "function.bcsub",
					"name": "bcsub",
					"description": "Subtract one arbitrary precision number from another"
				},
				"function.gmp-abs": {
					"tokens": [
						"gmp_abs",
						"gmpabs"
					],
					"id": "function.gmp-abs",
					"name": "gmp_abs",
					"description": "Absolute value"
				},
				"function.gmp-add": {
					"tokens": [
						"gmp_add",
						"gmpadd"
					],
					"id": "function.gmp-add",
					"name": "gmp_add",
					"description": "Add numbers"
				},
				"function.gmp-and": {
					"tokens": [
						"gmp_and",
						"gmpand"
					],
					"id": "function.gmp-and",
					"name": "gmp_and",
					"description": "Bitwise AND"
				},
				"function.gmp-clrbit": {
					"tokens": [
						"gmp_clrbit",
						"gmpclrbit"
					],
					"id": "function.gmp-clrbit",
					"name": "gmp_clrbit",
					"description": "Clear bit"
				},
				"function.gmp-cmp": {
					"tokens": [
						"gmp_cmp",
						"gmpcmp"
					],
					"id": "function.gmp-cmp",
					"name": "gmp_cmp",
					"description": "Compare numbers"
				},
				"function.gmp-com": {
					"tokens": [
						"gmp_com",
						"gmpcom"
					],
					"id": "function.gmp-com",
					"name": "gmp_com",
					"description": "Calculates one's complement"
				},
				"function.gmp-div-q": {
					"tokens": [
						"gmp_div_q",
						"gmpdiv_q"
					],
					"id": "function.gmp-div-q",
					"name": "gmp_div_q",
					"description": "Divide numbers"
				},
				"function.gmp-div-qr": {
					"tokens": [
						"gmp_div_qr",
						"gmpdiv_qr"
					],
					"id": "function.gmp-div-qr",
					"name": "gmp_div_qr",
					"description": "Divide numbers and get quotient and remainder"
				},
				"function.gmp-div-r": {
					"tokens": [
						"gmp_div_r",
						"gmpdiv_r"
					],
					"id": "function.gmp-div-r",
					"name": "gmp_div_r",
					"description": "Remainder of the division of numbers"
				},
				"function.gmp-div": {
					"tokens": [
						"gmp_div",
						"gmpdiv"
					],
					"id": "function.gmp-div",
					"name": "gmp_div",
					"description": "Alias of gmp_div_q"
				},
				"function.gmp-divexact": {
					"tokens": [
						"gmp_divexact",
						"gmpdivexact"
					],
					"id": "function.gmp-divexact",
					"name": "gmp_divexact",
					"description": "Exact division of numbers"
				},
				"function.gmp-export": {
					"tokens": [
						"gmp_export",
						"gmpexport"
					],
					"id": "function.gmp-export",
					"name": "gmp_export",
					"description": "Export to a binary string"
				},
				"function.gmp-fact": {
					"tokens": [
						"gmp_fact",
						"gmpfact"
					],
					"id": "function.gmp-fact",
					"name": "gmp_fact",
					"description": "Factorial"
				},
				"function.gmp-gcd": {
					"tokens": [
						"gmp_gcd",
						"gmpgcd"
					],
					"id": "function.gmp-gcd",
					"name": "gmp_gcd",
					"description": "Calculate GCD"
				},
				"function.gmp-gcdext": {
					"tokens": [
						"gmp_gcdext",
						"gmpgcdext"
					],
					"id": "function.gmp-gcdext",
					"name": "gmp_gcdext",
					"description": "Calculate GCD and multipliers"
				},
				"function.gmp-hamdist": {
					"tokens": [
						"gmp_hamdist",
						"gmphamdist"
					],
					"id": "function.gmp-hamdist",
					"name": "gmp_hamdist",
					"description": "Hamming distance"
				},
				"function.gmp-import": {
					"tokens": [
						"gmp_import",
						"gmpimport"
					],
					"id": "function.gmp-import",
					"name": "gmp_import",
					"description": "Import from a binary string"
				},
				"function.gmp-init": {
					"tokens": [
						"gmp_init",
						"gmpinit"
					],
					"id": "function.gmp-init",
					"name": "gmp_init",
					"description": "Create GMP number"
				},
				"function.gmp-intval": {
					"tokens": [
						"gmp_intval",
						"gmpintval"
					],
					"id": "function.gmp-intval",
					"name": "gmp_intval",
					"description": "Convert GMP number to integer"
				},
				"function.gmp-invert": {
					"tokens": [
						"gmp_invert",
						"gmpinvert"
					],
					"id": "function.gmp-invert",
					"name": "gmp_invert",
					"description": "Inverse by modulo"
				},
				"function.gmp-jacobi": {
					"tokens": [
						"gmp_jacobi",
						"gmpjacobi"
					],
					"id": "function.gmp-jacobi",
					"name": "gmp_jacobi",
					"description": "Jacobi symbol"
				},
				"function.gmp-legendre": {
					"tokens": [
						"gmp_legendre",
						"gmplegendre"
					],
					"id": "function.gmp-legendre",
					"name": "gmp_legendre",
					"description": "Legendre symbol"
				},
				"function.gmp-mod": {
					"tokens": [
						"gmp_mod",
						"gmpmod"
					],
					"id": "function.gmp-mod",
					"name": "gmp_mod",
					"description": "Modulo operation"
				},
				"function.gmp-mul": {
					"tokens": [
						"gmp_mul",
						"gmpmul"
					],
					"id": "function.gmp-mul",
					"name": "gmp_mul",
					"description": "Multiply numbers"
				},
				"function.gmp-neg": {
					"tokens": [
						"gmp_neg",
						"gmpneg"
					],
					"id": "function.gmp-neg",
					"name": "gmp_neg",
					"description": "Negate number"
				},
				"function.gmp-nextprime": {
					"tokens": [
						"gmp_nextprime",
						"gmpnextprime"
					],
					"id": "function.gmp-nextprime",
					"name": "gmp_nextprime",
					"description": "Find next prime number"
				},
				"function.gmp-or": {
					"tokens": [
						"gmp_or",
						"gmpor"
					],
					"id": "function.gmp-or",
					"name": "gmp_or",
					"description": "Bitwise OR"
				},
				"function.gmp-perfect-square": {
					"tokens": [
						"gmp_perfect_square",
						"gmpperfect_square"
					],
					"id": "function.gmp-perfect-square",
					"name": "gmp_perfect_square",
					"description": "Perfect square check"
				},
				"function.gmp-popcount": {
					"tokens": [
						"gmp_popcount",
						"gmppopcount"
					],
					"id": "function.gmp-popcount",
					"name": "gmp_popcount",
					"description": "Population count"
				},
				"function.gmp-pow": {
					"tokens": [
						"gmp_pow",
						"gmppow"
					],
					"id": "function.gmp-pow",
					"name": "gmp_pow",
					"description": "Raise number into power"
				},
				"function.gmp-powm": {
					"tokens": [
						"gmp_powm",
						"gmppowm"
					],
					"id": "function.gmp-powm",
					"name": "gmp_powm",
					"description": "Raise number into power with modulo"
				},
				"function.gmp-prob-prime": {
					"tokens": [
						"gmp_prob_prime",
						"gmpprob_prime"
					],
					"id": "function.gmp-prob-prime",
					"name": "gmp_prob_prime",
					"description": "Check if number is &quot;probably prime&quot;"
				},
				"function.gmp-random-bits": {
					"tokens": [
						"gmp_random_bits",
						"gmprandom_bits"
					],
					"id": "function.gmp-random-bits",
					"name": "gmp_random_bits",
					"description": "Random number"
				},
				"function.gmp-random-range": {
					"tokens": [
						"gmp_random_range",
						"gmprandom_range"
					],
					"id": "function.gmp-random-range",
					"name": "gmp_random_range",
					"description": "Random number"
				},
				"function.gmp-random-seed": {
					"tokens": [
						"gmp_random_seed",
						"gmprandom_seed"
					],
					"id": "function.gmp-random-seed",
					"name": "gmp_random_seed",
					"description": "Sets the RNG seed"
				},
				"function.gmp-random": {
					"tokens": [
						"gmp_random",
						"gmprandom"
					],
					"id": "function.gmp-random",
					"name": "gmp_random",
					"description": "Random number"
				},
				"function.gmp-root": {
					"tokens": [
						"gmp_root",
						"gmproot"
					],
					"id": "function.gmp-root",
					"name": "gmp_root",
					"description": "Take the integer part of nth root"
				},
				"function.gmp-rootrem": {
					"tokens": [
						"gmp_rootrem",
						"gmprootrem"
					],
					"id": "function.gmp-rootrem",
					"name": "gmp_rootrem",
					"description": "Take the integer part and remainder of nth root"
				},
				"function.gmp-scan0": {
					"tokens": [
						"gmp_scan0",
						"gmpscan0"
					],
					"id": "function.gmp-scan0",
					"name": "gmp_scan0",
					"description": "Scan for 0"
				},
				"function.gmp-scan1": {
					"tokens": [
						"gmp_scan1",
						"gmpscan1"
					],
					"id": "function.gmp-scan1",
					"name": "gmp_scan1",
					"description": "Scan for 1"
				},
				"function.gmp-setbit": {
					"tokens": [
						"gmp_setbit",
						"gmpsetbit"
					],
					"id": "function.gmp-setbit",
					"name": "gmp_setbit",
					"description": "Set bit"
				},
				"function.gmp-sign": {
					"tokens": [
						"gmp_sign",
						"gmpsign"
					],
					"id": "function.gmp-sign",
					"name": "gmp_sign",
					"description": "Sign of number"
				},
				"function.gmp-sqrt": {
					"tokens": [
						"gmp_sqrt",
						"gmpsqrt"
					],
					"id": "function.gmp-sqrt",
					"name": "gmp_sqrt",
					"description": "Calculate square root"
				},
				"function.gmp-sqrtrem": {
					"tokens": [
						"gmp_sqrtrem",
						"gmpsqrtrem"
					],
					"id": "function.gmp-sqrtrem",
					"name": "gmp_sqrtrem",
					"description": "Square root with remainder"
				},
				"function.gmp-strval": {
					"tokens": [
						"gmp_strval",
						"gmpstrval"
					],
					"id": "function.gmp-strval",
					"name": "gmp_strval",
					"description": "Convert GMP number to string"
				},
				"function.gmp-sub": {
					"tokens": [
						"gmp_sub",
						"gmpsub"
					],
					"id": "function.gmp-sub",
					"name": "gmp_sub",
					"description": "Subtract numbers"
				},
				"function.gmp-testbit": {
					"tokens": [
						"gmp_testbit",
						"gmptestbit"
					],
					"id": "function.gmp-testbit",
					"name": "gmp_testbit",
					"description": "Tests if a bit is set"
				},
				"function.gmp-xor": {
					"tokens": [
						"gmp_xor",
						"gmpxor"
					],
					"id": "function.gmp-xor",
					"name": "gmp_xor",
					"description": "Bitwise XOR"
				},
				"lapack.eigenvalues": {
					"tokens": [
						"Lapack::eigenValues",
						"eigenValues",
						"::eigenValues"
					],
					"id": "lapack.eigenvalues",
					"name": "Lapack::eigenValues",
					"description": "This function returns the eigenvalues for a given square matrix"
				},
				"lapack.identity": {
					"tokens": [
						"Lapack::identity",
						"identity",
						"::identity"
					],
					"id": "lapack.identity",
					"name": "Lapack::identity",
					"description": "Return an identity matrix"
				},
				"lapack.leastsquaresbyfactorisation": {
					"tokens": [
						"Lapack::leastSquaresByFactorisation",
						"leastSquaresByFactorisation",
						"::leastSquaresByFactorisation"
					],
					"id": "lapack.leastsquaresbyfactorisation",
					"name": "Lapack::leastSquaresByFactorisation",
					"description": "Calculate the linear least squares solution of a matrix using QR factorisation"
				},
				"lapack.leastsquaresbysvd": {
					"tokens": [
						"Lapack::leastSquaresBySVD",
						"leastSquaresBySVD",
						"::leastSquaresBySVD"
					],
					"id": "lapack.leastsquaresbysvd",
					"name": "Lapack::leastSquaresBySVD",
					"description": "Solve the linear least squares problem, using SVD"
				},
				"lapack.pseudoinverse": {
					"tokens": [
						"Lapack::pseudoInverse",
						"pseudoInverse",
						"::pseudoInverse"
					],
					"id": "lapack.pseudoinverse",
					"name": "Lapack::pseudoInverse",
					"description": "Calculate the inverse of a matrix"
				},
				"lapack.singularvalues": {
					"tokens": [
						"Lapack::singularValues",
						"singularValues",
						"::singularValues"
					],
					"id": "lapack.singularvalues",
					"name": "Lapack::singularValues",
					"description": "Calculated the singular values of a matrix"
				},
				"lapack.solvelinearequation": {
					"tokens": [
						"Lapack::solveLinearEquation",
						"solveLinearEquation",
						"::solveLinearEquation"
					],
					"id": "lapack.solvelinearequation",
					"name": "Lapack::solveLinearEquation",
					"description": "Solve a system of linear equations"
				},
				"function.abs": {
					"tokens": [
						"abs"
					],
					"id": "function.abs",
					"name": "abs",
					"description": "Absolute value"
				},
				"function.acos": {
					"tokens": [
						"acos"
					],
					"id": "function.acos",
					"name": "acos",
					"description": "Arc cosine"
				},
				"function.acosh": {
					"tokens": [
						"acosh"
					],
					"id": "function.acosh",
					"name": "acosh",
					"description": "Inverse hyperbolic cosine"
				},
				"function.asin": {
					"tokens": [
						"asin"
					],
					"id": "function.asin",
					"name": "asin",
					"description": "Arc sine"
				},
				"function.asinh": {
					"tokens": [
						"asinh"
					],
					"id": "function.asinh",
					"name": "asinh",
					"description": "Inverse hyperbolic sine"
				},
				"function.atan2": {
					"tokens": [
						"atan2"
					],
					"id": "function.atan2",
					"name": "atan2",
					"description": "Arc tangent of two variables"
				},
				"function.atan": {
					"tokens": [
						"atan"
					],
					"id": "function.atan",
					"name": "atan",
					"description": "Arc tangent"
				},
				"function.atanh": {
					"tokens": [
						"atanh"
					],
					"id": "function.atanh",
					"name": "atanh",
					"description": "Inverse hyperbolic tangent"
				},
				"function.base-convert": {
					"tokens": [
						"base_convert",
						"baseconvert"
					],
					"id": "function.base-convert",
					"name": "base_convert",
					"description": "Convert a number between arbitrary bases"
				},
				"function.bindec": {
					"tokens": [
						"bindec"
					],
					"id": "function.bindec",
					"name": "bindec",
					"description": "Binary to decimal"
				},
				"function.ceil": {
					"tokens": [
						"ceil"
					],
					"id": "function.ceil",
					"name": "ceil",
					"description": "Round fractions up"
				},
				"function.cos": {
					"tokens": [
						"cos"
					],
					"id": "function.cos",
					"name": "cos",
					"description": "Cosine"
				},
				"function.cosh": {
					"tokens": [
						"cosh"
					],
					"id": "function.cosh",
					"name": "cosh",
					"description": "Hyperbolic cosine"
				},
				"function.decbin": {
					"tokens": [
						"decbin"
					],
					"id": "function.decbin",
					"name": "decbin",
					"description": "Decimal to binary"
				},
				"function.dechex": {
					"tokens": [
						"dechex"
					],
					"id": "function.dechex",
					"name": "dechex",
					"description": "Decimal to hexadecimal"
				},
				"function.decoct": {
					"tokens": [
						"decoct"
					],
					"id": "function.decoct",
					"name": "decoct",
					"description": "Decimal to octal"
				},
				"function.deg2rad": {
					"tokens": [
						"deg2rad"
					],
					"id": "function.deg2rad",
					"name": "deg2rad",
					"description": "Converts the number in degrees to the radian equivalent"
				},
				"function.exp": {
					"tokens": [
						"exp"
					],
					"id": "function.exp",
					"name": "exp",
					"description": "Calculates the exponent of e"
				},
				"function.expm1": {
					"tokens": [
						"expm1"
					],
					"id": "function.expm1",
					"name": "expm1",
					"description": "Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero"
				},
				"function.floor": {
					"tokens": [
						"floor"
					],
					"id": "function.floor",
					"name": "floor",
					"description": "Round fractions down"
				},
				"function.fmod": {
					"tokens": [
						"fmod"
					],
					"id": "function.fmod",
					"name": "fmod",
					"description": "Returns the floating point remainder (modulo) of the division\n  of the arguments"
				},
				"function.getrandmax": {
					"tokens": [
						"getrandmax"
					],
					"id": "function.getrandmax",
					"name": "getrandmax",
					"description": "Show largest possible random value"
				},
				"function.hexdec": {
					"tokens": [
						"hexdec"
					],
					"id": "function.hexdec",
					"name": "hexdec",
					"description": "Hexadecimal to decimal"
				},
				"function.hypot": {
					"tokens": [
						"hypot"
					],
					"id": "function.hypot",
					"name": "hypot",
					"description": "Calculate the length of the hypotenuse of a right-angle triangle"
				},
				"function.intdiv": {
					"tokens": [
						"intdiv"
					],
					"id": "function.intdiv",
					"name": "intdiv",
					"description": "Integer division"
				},
				"function.is-finite": {
					"tokens": [
						"is_finite",
						"isfinite"
					],
					"id": "function.is-finite",
					"name": "is_finite",
					"description": "Finds whether a value is a legal finite number"
				},
				"function.is-infinite": {
					"tokens": [
						"is_infinite",
						"isinfinite"
					],
					"id": "function.is-infinite",
					"name": "is_infinite",
					"description": "Finds whether a value is infinite"
				},
				"function.is-nan": {
					"tokens": [
						"is_nan",
						"isnan"
					],
					"id": "function.is-nan",
					"name": "is_nan",
					"description": "Finds whether a value is not a number"
				},
				"function.lcg-value": {
					"tokens": [
						"lcg_value",
						"lcgvalue"
					],
					"id": "function.lcg-value",
					"name": "lcg_value",
					"description": "Combined linear congruential generator"
				},
				"function.log10": {
					"tokens": [
						"log10"
					],
					"id": "function.log10",
					"name": "log10",
					"description": "Base-10 logarithm"
				},
				"function.log1p": {
					"tokens": [
						"log1p"
					],
					"id": "function.log1p",
					"name": "log1p",
					"description": "Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero"
				},
				"function.log": {
					"tokens": [
						"log"
					],
					"id": "function.log",
					"name": "log",
					"description": "Natural logarithm"
				},
				"function.max": {
					"tokens": [
						"max"
					],
					"id": "function.max",
					"name": "max",
					"description": "Find highest value"
				},
				"function.min": {
					"tokens": [
						"min"
					],
					"id": "function.min",
					"name": "min",
					"description": "Find lowest value"
				},
				"function.mt-getrandmax": {
					"tokens": [
						"mt_getrandmax",
						"mtgetrandmax"
					],
					"id": "function.mt-getrandmax",
					"name": "mt_getrandmax",
					"description": "Show largest possible random value"
				},
				"function.mt-rand": {
					"tokens": [
						"mt_rand",
						"mtrand"
					],
					"id": "function.mt-rand",
					"name": "mt_rand",
					"description": "Generate a better random value"
				},
				"function.mt-srand": {
					"tokens": [
						"mt_srand",
						"mtsrand"
					],
					"id": "function.mt-srand",
					"name": "mt_srand",
					"description": "Seed the better random number generator"
				},
				"function.octdec": {
					"tokens": [
						"octdec"
					],
					"id": "function.octdec",
					"name": "octdec",
					"description": "Octal to decimal"
				},
				"function.pi": {
					"tokens": [
						"pi"
					],
					"id": "function.pi",
					"name": "pi",
					"description": "Get value of pi"
				},
				"function.pow": {
					"tokens": [
						"pow"
					],
					"id": "function.pow",
					"name": "pow",
					"description": "Exponential expression"
				},
				"function.rad2deg": {
					"tokens": [
						"rad2deg"
					],
					"id": "function.rad2deg",
					"name": "rad2deg",
					"description": "Converts the radian number to the equivalent number in degrees"
				},
				"function.rand": {
					"tokens": [
						"rand"
					],
					"id": "function.rand",
					"name": "rand",
					"description": "Generate a random integer"
				},
				"function.round": {
					"tokens": [
						"round"
					],
					"id": "function.round",
					"name": "round",
					"description": "Rounds a float"
				},
				"function.sin": {
					"tokens": [
						"sin"
					],
					"id": "function.sin",
					"name": "sin",
					"description": "Sine"
				},
				"function.sinh": {
					"tokens": [
						"sinh"
					],
					"id": "function.sinh",
					"name": "sinh",
					"description": "Hyperbolic sine"
				},
				"function.sqrt": {
					"tokens": [
						"sqrt"
					],
					"id": "function.sqrt",
					"name": "sqrt",
					"description": "Square root"
				},
				"function.srand": {
					"tokens": [
						"srand"
					],
					"id": "function.srand",
					"name": "srand",
					"description": "Seed the random number generator"
				},
				"function.tan": {
					"tokens": [
						"tan"
					],
					"id": "function.tan",
					"name": "tan",
					"description": "Tangent"
				},
				"function.tanh": {
					"tokens": [
						"tanh"
					],
					"id": "function.tanh",
					"name": "tanh",
					"description": "Hyperbolic tangent"
				},
				"function.stats-absolute-deviation": {
					"tokens": [
						"stats_absolute_deviation",
						"statsabsolute_deviation"
					],
					"id": "function.stats-absolute-deviation",
					"name": "stats_absolute_deviation",
					"description": "Returns the absolute deviation of an array of values"
				},
				"function.stats-cdf-beta": {
					"tokens": [
						"stats_cdf_beta",
						"statscdf_beta"
					],
					"id": "function.stats-cdf-beta",
					"name": "stats_cdf_beta",
					"description": "CDF function for BETA Distribution. Calculates any one parameter of the beta distribution given values for the others."
				},
				"function.stats-cdf-binomial": {
					"tokens": [
						"stats_cdf_binomial",
						"statscdf_binomial"
					],
					"id": "function.stats-cdf-binomial",
					"name": "stats_cdf_binomial",
					"description": "Calculates any one parameter of the binomial distribution given values for the others."
				},
				"function.stats-cdf-cauchy": {
					"tokens": [
						"stats_cdf_cauchy",
						"statscdf_cauchy"
					],
					"id": "function.stats-cdf-cauchy",
					"name": "stats_cdf_cauchy",
					"description": "Not documented"
				},
				"function.stats-cdf-chisquare": {
					"tokens": [
						"stats_cdf_chisquare",
						"statscdf_chisquare"
					],
					"id": "function.stats-cdf-chisquare",
					"name": "stats_cdf_chisquare",
					"description": "Calculates any one parameter of the chi-square distribution given values for the others."
				},
				"function.stats-cdf-exponential": {
					"tokens": [
						"stats_cdf_exponential",
						"statscdf_exponential"
					],
					"id": "function.stats-cdf-exponential",
					"name": "stats_cdf_exponential",
					"description": "Not documented"
				},
				"function.stats-cdf-f": {
					"tokens": [
						"stats_cdf_f",
						"statscdf_f"
					],
					"id": "function.stats-cdf-f",
					"name": "stats_cdf_f",
					"description": "Calculates any one parameter of the F distribution given values for the others."
				},
				"function.stats-cdf-gamma": {
					"tokens": [
						"stats_cdf_gamma",
						"statscdf_gamma"
					],
					"id": "function.stats-cdf-gamma",
					"name": "stats_cdf_gamma",
					"description": "Calculates any one parameter of the gamma distribution given values for the others."
				},
				"function.stats-cdf-laplace": {
					"tokens": [
						"stats_cdf_laplace",
						"statscdf_laplace"
					],
					"id": "function.stats-cdf-laplace",
					"name": "stats_cdf_laplace",
					"description": "Not documented"
				},
				"function.stats-cdf-logistic": {
					"tokens": [
						"stats_cdf_logistic",
						"statscdf_logistic"
					],
					"id": "function.stats-cdf-logistic",
					"name": "stats_cdf_logistic",
					"description": "Not documented"
				},
				"function.stats-cdf-negative-binomial": {
					"tokens": [
						"stats_cdf_negative_binomial",
						"statscdf_negative_binomial"
					],
					"id": "function.stats-cdf-negative-binomial",
					"name": "stats_cdf_negative_binomial",
					"description": "Calculates any one parameter of the negative binomial distribution given values for the others."
				},
				"function.stats-cdf-noncentral-chisquare": {
					"tokens": [
						"stats_cdf_noncentral_chisquare",
						"statscdf_noncentral_chisquare"
					],
					"id": "function.stats-cdf-noncentral-chisquare",
					"name": "stats_cdf_noncentral_chisquare",
					"description": "Calculates any one parameter of the non-central chi-square distribution given values for the others."
				},
				"function.stats-cdf-noncentral-f": {
					"tokens": [
						"stats_cdf_noncentral_f",
						"statscdf_noncentral_f"
					],
					"id": "function.stats-cdf-noncentral-f",
					"name": "stats_cdf_noncentral_f",
					"description": "Calculates any one parameter of the Non-central F distribution given values for the others."
				},
				"function.stats-cdf-poisson": {
					"tokens": [
						"stats_cdf_poisson",
						"statscdf_poisson"
					],
					"id": "function.stats-cdf-poisson",
					"name": "stats_cdf_poisson",
					"description": "Calculates any one parameter of the Poisson distribution given values for the others."
				},
				"function.stats-cdf-t": {
					"tokens": [
						"stats_cdf_t",
						"statscdf_t"
					],
					"id": "function.stats-cdf-t",
					"name": "stats_cdf_t",
					"description": "Calculates any one parameter of the T distribution given values for the others."
				},
				"function.stats-cdf-uniform": {
					"tokens": [
						"stats_cdf_uniform",
						"statscdf_uniform"
					],
					"id": "function.stats-cdf-uniform",
					"name": "stats_cdf_uniform",
					"description": "Not documented"
				},
				"function.stats-cdf-weibull": {
					"tokens": [
						"stats_cdf_weibull",
						"statscdf_weibull"
					],
					"id": "function.stats-cdf-weibull",
					"name": "stats_cdf_weibull",
					"description": "Not documented"
				},
				"function.stats-covariance": {
					"tokens": [
						"stats_covariance",
						"statscovariance"
					],
					"id": "function.stats-covariance",
					"name": "stats_covariance",
					"description": "Computes the covariance of two data sets"
				},
				"function.stats-den-uniform": {
					"tokens": [
						"stats_den_uniform",
						"statsden_uniform"
					],
					"id": "function.stats-den-uniform",
					"name": "stats_den_uniform",
					"description": "Not documented"
				},
				"function.stats-dens-beta": {
					"tokens": [
						"stats_dens_beta",
						"statsdens_beta"
					],
					"id": "function.stats-dens-beta",
					"name": "stats_dens_beta",
					"description": "Not documented"
				},
				"function.stats-dens-cauchy": {
					"tokens": [
						"stats_dens_cauchy",
						"statsdens_cauchy"
					],
					"id": "function.stats-dens-cauchy",
					"name": "stats_dens_cauchy",
					"description": "Not documented"
				},
				"function.stats-dens-chisquare": {
					"tokens": [
						"stats_dens_chisquare",
						"statsdens_chisquare"
					],
					"id": "function.stats-dens-chisquare",
					"name": "stats_dens_chisquare",
					"description": "Not documented"
				},
				"function.stats-dens-exponential": {
					"tokens": [
						"stats_dens_exponential",
						"statsdens_exponential"
					],
					"id": "function.stats-dens-exponential",
					"name": "stats_dens_exponential",
					"description": "Not documented"
				},
				"function.stats-dens-f": {
					"tokens": [
						"stats_dens_f",
						"statsdens_f"
					],
					"id": "function.stats-dens-f",
					"name": "stats_dens_f",
					"description": "Description"
				},
				"function.stats-dens-gamma": {
					"tokens": [
						"stats_dens_gamma",
						"statsdens_gamma"
					],
					"id": "function.stats-dens-gamma",
					"name": "stats_dens_gamma",
					"description": "Not documented"
				},
				"function.stats-dens-laplace": {
					"tokens": [
						"stats_dens_laplace",
						"statsdens_laplace"
					],
					"id": "function.stats-dens-laplace",
					"name": "stats_dens_laplace",
					"description": "Not documented"
				},
				"function.stats-dens-logistic": {
					"tokens": [
						"stats_dens_logistic",
						"statsdens_logistic"
					],
					"id": "function.stats-dens-logistic",
					"name": "stats_dens_logistic",
					"description": "Not documented"
				},
				"function.stats-dens-negative-binomial": {
					"tokens": [
						"stats_dens_negative_binomial",
						"statsdens_negative_binomial"
					],
					"id": "function.stats-dens-negative-binomial",
					"name": "stats_dens_negative_binomial",
					"description": "Not documented"
				},
				"function.stats-dens-normal": {
					"tokens": [
						"stats_dens_normal",
						"statsdens_normal"
					],
					"id": "function.stats-dens-normal",
					"name": "stats_dens_normal",
					"description": "Not documented"
				},
				"function.stats-dens-pmf-binomial": {
					"tokens": [
						"stats_dens_pmf_binomial",
						"statsdens_pmf_binomial"
					],
					"id": "function.stats-dens-pmf-binomial",
					"name": "stats_dens_pmf_binomial",
					"description": "Not documented"
				},
				"function.stats-dens-pmf-hypergeometric": {
					"tokens": [
						"stats_dens_pmf_hypergeometric",
						"statsdens_pmf_hypergeometric"
					],
					"id": "function.stats-dens-pmf-hypergeometric",
					"name": "stats_dens_pmf_hypergeometric",
					"description": "Description"
				},
				"function.stats-dens-pmf-poisson": {
					"tokens": [
						"stats_dens_pmf_poisson",
						"statsdens_pmf_poisson"
					],
					"id": "function.stats-dens-pmf-poisson",
					"name": "stats_dens_pmf_poisson",
					"description": "Not documented"
				},
				"function.stats-dens-t": {
					"tokens": [
						"stats_dens_t",
						"statsdens_t"
					],
					"id": "function.stats-dens-t",
					"name": "stats_dens_t",
					"description": "Not documented"
				},
				"function.stats-dens-weibull": {
					"tokens": [
						"stats_dens_weibull",
						"statsdens_weibull"
					],
					"id": "function.stats-dens-weibull",
					"name": "stats_dens_weibull",
					"description": "Not documented"
				},
				"function.stats-harmonic-mean": {
					"tokens": [
						"stats_harmonic_mean",
						"statsharmonic_mean"
					],
					"id": "function.stats-harmonic-mean",
					"name": "stats_harmonic_mean",
					"description": "Returns the harmonic mean of an array of values"
				},
				"function.stats-kurtosis": {
					"tokens": [
						"stats_kurtosis",
						"statskurtosis"
					],
					"id": "function.stats-kurtosis",
					"name": "stats_kurtosis",
					"description": "Computes the kurtosis of the data in the array"
				},
				"function.stats-rand-gen-beta": {
					"tokens": [
						"stats_rand_gen_beta",
						"statsrand_gen_beta"
					],
					"id": "function.stats-rand-gen-beta",
					"name": "stats_rand_gen_beta",
					"description": "Generates beta random deviate"
				},
				"function.stats-rand-gen-chisquare": {
					"tokens": [
						"stats_rand_gen_chisquare",
						"statsrand_gen_chisquare"
					],
					"id": "function.stats-rand-gen-chisquare",
					"name": "stats_rand_gen_chisquare",
					"description": "Generates random deviate from the distribution of a chisquare with &quot;df&quot; degrees of freedom random variable."
				},
				"function.stats-rand-gen-exponential": {
					"tokens": [
						"stats_rand_gen_exponential",
						"statsrand_gen_exponential"
					],
					"id": "function.stats-rand-gen-exponential",
					"name": "stats_rand_gen_exponential",
					"description": "Generates a single random deviate from an exponential distribution with mean &quot;av&quot;"
				},
				"function.stats-rand-gen-f": {
					"tokens": [
						"stats_rand_gen_f",
						"statsrand_gen_f"
					],
					"id": "function.stats-rand-gen-f",
					"name": "stats_rand_gen_f",
					"description": "Generates a random deviate"
				},
				"function.stats-rand-gen-funiform": {
					"tokens": [
						"stats_rand_gen_funiform",
						"statsrand_gen_funiform"
					],
					"id": "function.stats-rand-gen-funiform",
					"name": "stats_rand_gen_funiform",
					"description": "Generates uniform float between low (exclusive) and high (exclusive)"
				},
				"function.stats-rand-gen-gamma": {
					"tokens": [
						"stats_rand_gen_gamma",
						"statsrand_gen_gamma"
					],
					"id": "function.stats-rand-gen-gamma",
					"name": "stats_rand_gen_gamma",
					"description": "Generates random deviates from a gamma distribution"
				},
				"function.stats-rand-gen-ibinomial-negative": {
					"tokens": [
						"stats_rand_gen_ibinomial_negative",
						"statsrand_gen_ibinomial_negative"
					],
					"id": "function.stats-rand-gen-ibinomial-negative",
					"name": "stats_rand_gen_ibinomial_negative",
					"description": "Generates a single random deviate from a negative binomial distribution. Arguments : n - the number of trials in the negative binomial distribution from which a random deviate is to be generated (n &gt; 0), p - the probability of an event (0 &lt; p &lt; 1))."
				},
				"function.stats-rand-gen-ibinomial": {
					"tokens": [
						"stats_rand_gen_ibinomial",
						"statsrand_gen_ibinomial"
					],
					"id": "function.stats-rand-gen-ibinomial",
					"name": "stats_rand_gen_ibinomial",
					"description": "Generates a single random deviate from a binomial distribution whose number of trials is &quot;n&quot; (n &gt;= 0) and whose probability of an event in each trial is &quot;pp&quot; ([0;1]). Method : algorithm BTPE"
				},
				"function.stats-rand-gen-int": {
					"tokens": [
						"stats_rand_gen_int",
						"statsrand_gen_int"
					],
					"id": "function.stats-rand-gen-int",
					"name": "stats_rand_gen_int",
					"description": "Generates random integer between 1 and 2147483562"
				},
				"function.stats-rand-gen-ipoisson": {
					"tokens": [
						"stats_rand_gen_ipoisson",
						"statsrand_gen_ipoisson"
					],
					"id": "function.stats-rand-gen-ipoisson",
					"name": "stats_rand_gen_ipoisson",
					"description": "Generates a single random deviate from a Poisson distribution with mean &quot;mu&quot; (mu &gt;= 0.0)."
				},
				"function.stats-rand-gen-iuniform": {
					"tokens": [
						"stats_rand_gen_iuniform",
						"statsrand_gen_iuniform"
					],
					"id": "function.stats-rand-gen-iuniform",
					"name": "stats_rand_gen_iuniform",
					"description": "Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)"
				},
				"function.stats-rand-gen-noncenral-chisquare": {
					"tokens": [
						"stats_rand_gen_noncenral_chisquare",
						"statsrand_gen_noncenral_chisquare"
					],
					"id": "function.stats-rand-gen-noncenral-chisquare",
					"name": "stats_rand_gen_noncenral_chisquare",
					"description": "Generates random deviate from the distribution of a noncentral chisquare with &quot;df&quot; degrees of freedom and noncentrality parameter &quot;xnonc&quot;. d must be &gt;= 1.0, xnonc must &gt;= 0.0"
				},
				"function.stats-rand-gen-noncentral-f": {
					"tokens": [
						"stats_rand_gen_noncentral_f",
						"statsrand_gen_noncentral_f"
					],
					"id": "function.stats-rand-gen-noncentral-f",
					"name": "stats_rand_gen_noncentral_f",
					"description": "Generates a random deviate from the noncentral F (variance ratio) distribution with &quot;dfn&quot; degrees of freedom in the numerator, and &quot;dfd&quot; degrees of freedom in the denominator, and noncentrality parameter &quot;xnonc&quot;. Method : directly generates ratio of noncentral numerator chisquare variate to central denominator chisquare variate."
				},
				"function.stats-rand-gen-noncentral-t": {
					"tokens": [
						"stats_rand_gen_noncentral_t",
						"statsrand_gen_noncentral_t"
					],
					"id": "function.stats-rand-gen-noncentral-t",
					"name": "stats_rand_gen_noncentral_t",
					"description": "Generates a single random deviate from a noncentral T distribution"
				},
				"function.stats-rand-gen-normal": {
					"tokens": [
						"stats_rand_gen_normal",
						"statsrand_gen_normal"
					],
					"id": "function.stats-rand-gen-normal",
					"name": "stats_rand_gen_normal",
					"description": "Generates a single random deviate from a normal distribution with mean, av, and standard deviation, sd (sd &gt;= 0). Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF."
				},
				"function.stats-rand-gen-t": {
					"tokens": [
						"stats_rand_gen_t",
						"statsrand_gen_t"
					],
					"id": "function.stats-rand-gen-t",
					"name": "stats_rand_gen_t",
					"description": "Generates a single random deviate from a T distribution"
				},
				"function.stats-rand-get-seeds": {
					"tokens": [
						"stats_rand_get_seeds",
						"statsrand_get_seeds"
					],
					"id": "function.stats-rand-get-seeds",
					"name": "stats_rand_get_seeds",
					"description": "Not documented"
				},
				"function.stats-rand-phrase-to-seeds": {
					"tokens": [
						"stats_rand_phrase_to_seeds",
						"statsrand_phrase_to_seeds"
					],
					"id": "function.stats-rand-phrase-to-seeds",
					"name": "stats_rand_phrase_to_seeds",
					"description": "generate two seeds for the RGN random number generator"
				},
				"function.stats-rand-ranf": {
					"tokens": [
						"stats_rand_ranf",
						"statsrand_ranf"
					],
					"id": "function.stats-rand-ranf",
					"name": "stats_rand_ranf",
					"description": "Returns a random floating point number from a uniform distribution over 0 - 1 (endpoints of this interval are not returned) using the current generator"
				},
				"function.stats-rand-setall": {
					"tokens": [
						"stats_rand_setall",
						"statsrand_setall"
					],
					"id": "function.stats-rand-setall",
					"name": "stats_rand_setall",
					"description": "Not documented"
				},
				"function.stats-skew": {
					"tokens": [
						"stats_skew",
						"statsskew"
					],
					"id": "function.stats-skew",
					"name": "stats_skew",
					"description": "Computes the skewness of the data in the array"
				},
				"function.stats-standard-deviation": {
					"tokens": [
						"stats_standard_deviation",
						"statsstandard_deviation"
					],
					"id": "function.stats-standard-deviation",
					"name": "stats_standard_deviation",
					"description": "Returns the standard deviation"
				},
				"function.stats-stat-binomial-coef": {
					"tokens": [
						"stats_stat_binomial_coef",
						"statsstat_binomial_coef"
					],
					"id": "function.stats-stat-binomial-coef",
					"name": "stats_stat_binomial_coef",
					"description": "Not documented"
				},
				"function.stats-stat-correlation": {
					"tokens": [
						"stats_stat_correlation",
						"statsstat_correlation"
					],
					"id": "function.stats-stat-correlation",
					"name": "stats_stat_correlation",
					"description": "Not documented"
				},
				"function.stats-stat-gennch": {
					"tokens": [
						"stats_stat_gennch",
						"statsstat_gennch"
					],
					"id": "function.stats-stat-gennch",
					"name": "stats_stat_gennch",
					"description": "Not documented"
				},
				"function.stats-stat-independent-t": {
					"tokens": [
						"stats_stat_independent_t",
						"statsstat_independent_t"
					],
					"id": "function.stats-stat-independent-t",
					"name": "stats_stat_independent_t",
					"description": "Not documented"
				},
				"function.stats-stat-innerproduct": {
					"tokens": [
						"stats_stat_innerproduct",
						"statsstat_innerproduct"
					],
					"id": "function.stats-stat-innerproduct",
					"name": "stats_stat_innerproduct",
					"description": "Description"
				},
				"function.stats-stat-noncentral-t": {
					"tokens": [
						"stats_stat_noncentral_t",
						"statsstat_noncentral_t"
					],
					"id": "function.stats-stat-noncentral-t",
					"name": "stats_stat_noncentral_t",
					"description": "Calculates any one parameter of the noncentral t distribution give values for the others."
				},
				"function.stats-stat-paired-t": {
					"tokens": [
						"stats_stat_paired_t",
						"statsstat_paired_t"
					],
					"id": "function.stats-stat-paired-t",
					"name": "stats_stat_paired_t",
					"description": "Not documented"
				},
				"function.stats-stat-percentile": {
					"tokens": [
						"stats_stat_percentile",
						"statsstat_percentile"
					],
					"id": "function.stats-stat-percentile",
					"name": "stats_stat_percentile",
					"description": "Not documented"
				},
				"function.stats-stat-powersum": {
					"tokens": [
						"stats_stat_powersum",
						"statsstat_powersum"
					],
					"id": "function.stats-stat-powersum",
					"name": "stats_stat_powersum",
					"description": "Not documented"
				},
				"function.stats-variance": {
					"tokens": [
						"stats_variance",
						"statsvariance"
					],
					"id": "function.stats-variance",
					"name": "stats_variance",
					"description": "Returns the population variance"
				},
				"function.trader-acos": {
					"tokens": [
						"trader_acos",
						"traderacos"
					],
					"id": "function.trader-acos",
					"name": "trader_acos",
					"description": "Vector Trigonometric ACos"
				},
				"function.trader-ad": {
					"tokens": [
						"trader_ad",
						"traderad"
					],
					"id": "function.trader-ad",
					"name": "trader_ad",
					"description": "Chaikin A/D Line"
				},
				"function.trader-add": {
					"tokens": [
						"trader_add",
						"traderadd"
					],
					"id": "function.trader-add",
					"name": "trader_add",
					"description": "Vector Arithmetic Add"
				},
				"function.trader-adosc": {
					"tokens": [
						"trader_adosc",
						"traderadosc"
					],
					"id": "function.trader-adosc",
					"name": "trader_adosc",
					"description": "Chaikin A/D Oscillator"
				},
				"function.trader-adx": {
					"tokens": [
						"trader_adx",
						"traderadx"
					],
					"id": "function.trader-adx",
					"name": "trader_adx",
					"description": "Average Directional Movement Index"
				},
				"function.trader-adxr": {
					"tokens": [
						"trader_adxr",
						"traderadxr"
					],
					"id": "function.trader-adxr",
					"name": "trader_adxr",
					"description": "Average Directional Movement Index Rating"
				},
				"function.trader-apo": {
					"tokens": [
						"trader_apo",
						"traderapo"
					],
					"id": "function.trader-apo",
					"name": "trader_apo",
					"description": "Absolute Price Oscillator"
				},
				"function.trader-aroon": {
					"tokens": [
						"trader_aroon",
						"traderaroon"
					],
					"id": "function.trader-aroon",
					"name": "trader_aroon",
					"description": "Aroon"
				},
				"function.trader-aroonosc": {
					"tokens": [
						"trader_aroonosc",
						"traderaroonosc"
					],
					"id": "function.trader-aroonosc",
					"name": "trader_aroonosc",
					"description": "Aroon Oscillator"
				},
				"function.trader-asin": {
					"tokens": [
						"trader_asin",
						"traderasin"
					],
					"id": "function.trader-asin",
					"name": "trader_asin",
					"description": "Vector Trigonometric ASin"
				},
				"function.trader-atan": {
					"tokens": [
						"trader_atan",
						"traderatan"
					],
					"id": "function.trader-atan",
					"name": "trader_atan",
					"description": "Vector Trigonometric ATan"
				},
				"function.trader-atr": {
					"tokens": [
						"trader_atr",
						"traderatr"
					],
					"id": "function.trader-atr",
					"name": "trader_atr",
					"description": "Average True Range"
				},
				"function.trader-avgprice": {
					"tokens": [
						"trader_avgprice",
						"traderavgprice"
					],
					"id": "function.trader-avgprice",
					"name": "trader_avgprice",
					"description": "Average Price"
				},
				"function.trader-bbands": {
					"tokens": [
						"trader_bbands",
						"traderbbands"
					],
					"id": "function.trader-bbands",
					"name": "trader_bbands",
					"description": "Bollinger Bands"
				},
				"function.trader-beta": {
					"tokens": [
						"trader_beta",
						"traderbeta"
					],
					"id": "function.trader-beta",
					"name": "trader_beta",
					"description": "Beta"
				},
				"function.trader-bop": {
					"tokens": [
						"trader_bop",
						"traderbop"
					],
					"id": "function.trader-bop",
					"name": "trader_bop",
					"description": "Balance Of Power"
				},
				"function.trader-cci": {
					"tokens": [
						"trader_cci",
						"tradercci"
					],
					"id": "function.trader-cci",
					"name": "trader_cci",
					"description": "Commodity Channel Index"
				},
				"function.trader-cdl2crows": {
					"tokens": [
						"trader_cdl2crows",
						"tradercdl2crows"
					],
					"id": "function.trader-cdl2crows",
					"name": "trader_cdl2crows",
					"description": "Two Crows"
				},
				"function.trader-cdl3blackcrows": {
					"tokens": [
						"trader_cdl3blackcrows",
						"tradercdl3blackcrows"
					],
					"id": "function.trader-cdl3blackcrows",
					"name": "trader_cdl3blackcrows",
					"description": "Three Black Crows"
				},
				"function.trader-cdl3inside": {
					"tokens": [
						"trader_cdl3inside",
						"tradercdl3inside"
					],
					"id": "function.trader-cdl3inside",
					"name": "trader_cdl3inside",
					"description": "Three Inside Up/Down"
				},
				"function.trader-cdl3linestrike": {
					"tokens": [
						"trader_cdl3linestrike",
						"tradercdl3linestrike"
					],
					"id": "function.trader-cdl3linestrike",
					"name": "trader_cdl3linestrike",
					"description": "Three-Line Strike"
				},
				"function.trader-cdl3outside": {
					"tokens": [
						"trader_cdl3outside",
						"tradercdl3outside"
					],
					"id": "function.trader-cdl3outside",
					"name": "trader_cdl3outside",
					"description": "Three Outside Up/Down"
				},
				"function.trader-cdl3starsinsouth": {
					"tokens": [
						"trader_cdl3starsinsouth",
						"tradercdl3starsinsouth"
					],
					"id": "function.trader-cdl3starsinsouth",
					"name": "trader_cdl3starsinsouth",
					"description": "Three Stars In The South"
				},
				"function.trader-cdl3whitesoldiers": {
					"tokens": [
						"trader_cdl3whitesoldiers",
						"tradercdl3whitesoldiers"
					],
					"id": "function.trader-cdl3whitesoldiers",
					"name": "trader_cdl3whitesoldiers",
					"description": "Three Advancing White Soldiers"
				},
				"function.trader-cdlabandonedbaby": {
					"tokens": [
						"trader_cdlabandonedbaby",
						"tradercdlabandonedbaby"
					],
					"id": "function.trader-cdlabandonedbaby",
					"name": "trader_cdlabandonedbaby",
					"description": "Abandoned Baby"
				},
				"function.trader-cdladvanceblock": {
					"tokens": [
						"trader_cdladvanceblock",
						"tradercdladvanceblock"
					],
					"id": "function.trader-cdladvanceblock",
					"name": "trader_cdladvanceblock",
					"description": "Advance Block"
				},
				"function.trader-cdlbelthold": {
					"tokens": [
						"trader_cdlbelthold",
						"tradercdlbelthold"
					],
					"id": "function.trader-cdlbelthold",
					"name": "trader_cdlbelthold",
					"description": "Belt-hold"
				},
				"function.trader-cdlbreakaway": {
					"tokens": [
						"trader_cdlbreakaway",
						"tradercdlbreakaway"
					],
					"id": "function.trader-cdlbreakaway",
					"name": "trader_cdlbreakaway",
					"description": "Breakaway"
				},
				"function.trader-cdlclosingmarubozu": {
					"tokens": [
						"trader_cdlclosingmarubozu",
						"tradercdlclosingmarubozu"
					],
					"id": "function.trader-cdlclosingmarubozu",
					"name": "trader_cdlclosingmarubozu",
					"description": "Closing Marubozu"
				},
				"function.trader-cdlconcealbabyswall": {
					"tokens": [
						"trader_cdlconcealbabyswall",
						"tradercdlconcealbabyswall"
					],
					"id": "function.trader-cdlconcealbabyswall",
					"name": "trader_cdlconcealbabyswall",
					"description": "Concealing Baby Swallow"
				},
				"function.trader-cdlcounterattack": {
					"tokens": [
						"trader_cdlcounterattack",
						"tradercdlcounterattack"
					],
					"id": "function.trader-cdlcounterattack",
					"name": "trader_cdlcounterattack",
					"description": "Counterattack"
				},
				"function.trader-cdldarkcloudcover": {
					"tokens": [
						"trader_cdldarkcloudcover",
						"tradercdldarkcloudcover"
					],
					"id": "function.trader-cdldarkcloudcover",
					"name": "trader_cdldarkcloudcover",
					"description": "Dark Cloud Cover"
				},
				"function.trader-cdldoji": {
					"tokens": [
						"trader_cdldoji",
						"tradercdldoji"
					],
					"id": "function.trader-cdldoji",
					"name": "trader_cdldoji",
					"description": "Doji"
				},
				"function.trader-cdldojistar": {
					"tokens": [
						"trader_cdldojistar",
						"tradercdldojistar"
					],
					"id": "function.trader-cdldojistar",
					"name": "trader_cdldojistar",
					"description": "Doji Star"
				},
				"function.trader-cdldragonflydoji": {
					"tokens": [
						"trader_cdldragonflydoji",
						"tradercdldragonflydoji"
					],
					"id": "function.trader-cdldragonflydoji",
					"name": "trader_cdldragonflydoji",
					"description": "Dragonfly Doji"
				},
				"function.trader-cdlengulfing": {
					"tokens": [
						"trader_cdlengulfing",
						"tradercdlengulfing"
					],
					"id": "function.trader-cdlengulfing",
					"name": "trader_cdlengulfing",
					"description": "Engulfing Pattern"
				},
				"function.trader-cdleveningdojistar": {
					"tokens": [
						"trader_cdleveningdojistar",
						"tradercdleveningdojistar"
					],
					"id": "function.trader-cdleveningdojistar",
					"name": "trader_cdleveningdojistar",
					"description": "Evening Doji Star"
				},
				"function.trader-cdleveningstar": {
					"tokens": [
						"trader_cdleveningstar",
						"tradercdleveningstar"
					],
					"id": "function.trader-cdleveningstar",
					"name": "trader_cdleveningstar",
					"description": "Evening Star"
				},
				"function.trader-cdlgapsidesidewhite": {
					"tokens": [
						"trader_cdlgapsidesidewhite",
						"tradercdlgapsidesidewhite"
					],
					"id": "function.trader-cdlgapsidesidewhite",
					"name": "trader_cdlgapsidesidewhite",
					"description": "Up/Down-gap side-by-side white lines"
				},
				"function.trader-cdlgravestonedoji": {
					"tokens": [
						"trader_cdlgravestonedoji",
						"tradercdlgravestonedoji"
					],
					"id": "function.trader-cdlgravestonedoji",
					"name": "trader_cdlgravestonedoji",
					"description": "Gravestone Doji"
				},
				"function.trader-cdlhammer": {
					"tokens": [
						"trader_cdlhammer",
						"tradercdlhammer"
					],
					"id": "function.trader-cdlhammer",
					"name": "trader_cdlhammer",
					"description": "Hammer"
				},
				"function.trader-cdlhangingman": {
					"tokens": [
						"trader_cdlhangingman",
						"tradercdlhangingman"
					],
					"id": "function.trader-cdlhangingman",
					"name": "trader_cdlhangingman",
					"description": "Hanging Man"
				},
				"function.trader-cdlharami": {
					"tokens": [
						"trader_cdlharami",
						"tradercdlharami"
					],
					"id": "function.trader-cdlharami",
					"name": "trader_cdlharami",
					"description": "Harami Pattern"
				},
				"function.trader-cdlharamicross": {
					"tokens": [
						"trader_cdlharamicross",
						"tradercdlharamicross"
					],
					"id": "function.trader-cdlharamicross",
					"name": "trader_cdlharamicross",
					"description": "Harami Cross Pattern"
				},
				"function.trader-cdlhighwave": {
					"tokens": [
						"trader_cdlhighwave",
						"tradercdlhighwave"
					],
					"id": "function.trader-cdlhighwave",
					"name": "trader_cdlhighwave",
					"description": "High-Wave Candle"
				},
				"function.trader-cdlhikkake": {
					"tokens": [
						"trader_cdlhikkake",
						"tradercdlhikkake"
					],
					"id": "function.trader-cdlhikkake",
					"name": "trader_cdlhikkake",
					"description": "Hikkake Pattern"
				},
				"function.trader-cdlhikkakemod": {
					"tokens": [
						"trader_cdlhikkakemod",
						"tradercdlhikkakemod"
					],
					"id": "function.trader-cdlhikkakemod",
					"name": "trader_cdlhikkakemod",
					"description": "Modified Hikkake Pattern"
				},
				"function.trader-cdlhomingpigeon": {
					"tokens": [
						"trader_cdlhomingpigeon",
						"tradercdlhomingpigeon"
					],
					"id": "function.trader-cdlhomingpigeon",
					"name": "trader_cdlhomingpigeon",
					"description": "Homing Pigeon"
				},
				"function.trader-cdlidentical3crows": {
					"tokens": [
						"trader_cdlidentical3crows",
						"tradercdlidentical3crows"
					],
					"id": "function.trader-cdlidentical3crows",
					"name": "trader_cdlidentical3crows",
					"description": "Identical Three Crows"
				},
				"function.trader-cdlinneck": {
					"tokens": [
						"trader_cdlinneck",
						"tradercdlinneck"
					],
					"id": "function.trader-cdlinneck",
					"name": "trader_cdlinneck",
					"description": "In-Neck Pattern"
				},
				"function.trader-cdlinvertedhammer": {
					"tokens": [
						"trader_cdlinvertedhammer",
						"tradercdlinvertedhammer"
					],
					"id": "function.trader-cdlinvertedhammer",
					"name": "trader_cdlinvertedhammer",
					"description": "Inverted Hammer"
				},
				"function.trader-cdlkicking": {
					"tokens": [
						"trader_cdlkicking",
						"tradercdlkicking"
					],
					"id": "function.trader-cdlkicking",
					"name": "trader_cdlkicking",
					"description": "Kicking"
				},
				"function.trader-cdlkickingbylength": {
					"tokens": [
						"trader_cdlkickingbylength",
						"tradercdlkickingbylength"
					],
					"id": "function.trader-cdlkickingbylength",
					"name": "trader_cdlkickingbylength",
					"description": "Kicking - bull/bear determined by the longer marubozu"
				},
				"function.trader-cdlladderbottom": {
					"tokens": [
						"trader_cdlladderbottom",
						"tradercdlladderbottom"
					],
					"id": "function.trader-cdlladderbottom",
					"name": "trader_cdlladderbottom",
					"description": "Ladder Bottom"
				},
				"function.trader-cdllongleggeddoji": {
					"tokens": [
						"trader_cdllongleggeddoji",
						"tradercdllongleggeddoji"
					],
					"id": "function.trader-cdllongleggeddoji",
					"name": "trader_cdllongleggeddoji",
					"description": "Long Legged Doji"
				},
				"function.trader-cdllongline": {
					"tokens": [
						"trader_cdllongline",
						"tradercdllongline"
					],
					"id": "function.trader-cdllongline",
					"name": "trader_cdllongline",
					"description": "Long Line Candle"
				},
				"function.trader-cdlmarubozu": {
					"tokens": [
						"trader_cdlmarubozu",
						"tradercdlmarubozu"
					],
					"id": "function.trader-cdlmarubozu",
					"name": "trader_cdlmarubozu",
					"description": "Marubozu"
				},
				"function.trader-cdlmatchinglow": {
					"tokens": [
						"trader_cdlmatchinglow",
						"tradercdlmatchinglow"
					],
					"id": "function.trader-cdlmatchinglow",
					"name": "trader_cdlmatchinglow",
					"description": "Matching Low"
				},
				"function.trader-cdlmathold": {
					"tokens": [
						"trader_cdlmathold",
						"tradercdlmathold"
					],
					"id": "function.trader-cdlmathold",
					"name": "trader_cdlmathold",
					"description": "Mat Hold"
				},
				"function.trader-cdlmorningdojistar": {
					"tokens": [
						"trader_cdlmorningdojistar",
						"tradercdlmorningdojistar"
					],
					"id": "function.trader-cdlmorningdojistar",
					"name": "trader_cdlmorningdojistar",
					"description": "Morning Doji Star"
				},
				"function.trader-cdlmorningstar": {
					"tokens": [
						"trader_cdlmorningstar",
						"tradercdlmorningstar"
					],
					"id": "function.trader-cdlmorningstar",
					"name": "trader_cdlmorningstar",
					"description": "Morning Star"
				},
				"function.trader-cdlonneck": {
					"tokens": [
						"trader_cdlonneck",
						"tradercdlonneck"
					],
					"id": "function.trader-cdlonneck",
					"name": "trader_cdlonneck",
					"description": "On-Neck Pattern"
				},
				"function.trader-cdlpiercing": {
					"tokens": [
						"trader_cdlpiercing",
						"tradercdlpiercing"
					],
					"id": "function.trader-cdlpiercing",
					"name": "trader_cdlpiercing",
					"description": "Piercing Pattern"
				},
				"function.trader-cdlrickshawman": {
					"tokens": [
						"trader_cdlrickshawman",
						"tradercdlrickshawman"
					],
					"id": "function.trader-cdlrickshawman",
					"name": "trader_cdlrickshawman",
					"description": "Rickshaw Man"
				},
				"function.trader-cdlrisefall3methods": {
					"tokens": [
						"trader_cdlrisefall3methods",
						"tradercdlrisefall3methods"
					],
					"id": "function.trader-cdlrisefall3methods",
					"name": "trader_cdlrisefall3methods",
					"description": "Rising/Falling Three Methods"
				},
				"function.trader-cdlseparatinglines": {
					"tokens": [
						"trader_cdlseparatinglines",
						"tradercdlseparatinglines"
					],
					"id": "function.trader-cdlseparatinglines",
					"name": "trader_cdlseparatinglines",
					"description": "Separating Lines"
				},
				"function.trader-cdlshootingstar": {
					"tokens": [
						"trader_cdlshootingstar",
						"tradercdlshootingstar"
					],
					"id": "function.trader-cdlshootingstar",
					"name": "trader_cdlshootingstar",
					"description": "Shooting Star"
				},
				"function.trader-cdlshortline": {
					"tokens": [
						"trader_cdlshortline",
						"tradercdlshortline"
					],
					"id": "function.trader-cdlshortline",
					"name": "trader_cdlshortline",
					"description": "Short Line Candle"
				},
				"function.trader-cdlspinningtop": {
					"tokens": [
						"trader_cdlspinningtop",
						"tradercdlspinningtop"
					],
					"id": "function.trader-cdlspinningtop",
					"name": "trader_cdlspinningtop",
					"description": "Spinning Top"
				},
				"function.trader-cdlstalledpattern": {
					"tokens": [
						"trader_cdlstalledpattern",
						"tradercdlstalledpattern"
					],
					"id": "function.trader-cdlstalledpattern",
					"name": "trader_cdlstalledpattern",
					"description": "Stalled Pattern"
				},
				"function.trader-cdlsticksandwich": {
					"tokens": [
						"trader_cdlsticksandwich",
						"tradercdlsticksandwich"
					],
					"id": "function.trader-cdlsticksandwich",
					"name": "trader_cdlsticksandwich",
					"description": "Stick Sandwich"
				},
				"function.trader-cdltakuri": {
					"tokens": [
						"trader_cdltakuri",
						"tradercdltakuri"
					],
					"id": "function.trader-cdltakuri",
					"name": "trader_cdltakuri",
					"description": "Takuri (Dragonfly Doji with very long lower shadow)"
				},
				"function.trader-cdltasukigap": {
					"tokens": [
						"trader_cdltasukigap",
						"tradercdltasukigap"
					],
					"id": "function.trader-cdltasukigap",
					"name": "trader_cdltasukigap",
					"description": "Tasuki Gap"
				},
				"function.trader-cdlthrusting": {
					"tokens": [
						"trader_cdlthrusting",
						"tradercdlthrusting"
					],
					"id": "function.trader-cdlthrusting",
					"name": "trader_cdlthrusting",
					"description": "Thrusting Pattern"
				},
				"function.trader-cdltristar": {
					"tokens": [
						"trader_cdltristar",
						"tradercdltristar"
					],
					"id": "function.trader-cdltristar",
					"name": "trader_cdltristar",
					"description": "Tristar Pattern"
				},
				"function.trader-cdlunique3river": {
					"tokens": [
						"trader_cdlunique3river",
						"tradercdlunique3river"
					],
					"id": "function.trader-cdlunique3river",
					"name": "trader_cdlunique3river",
					"description": "Unique 3 River"
				},
				"function.trader-cdlupsidegap2crows": {
					"tokens": [
						"trader_cdlupsidegap2crows",
						"tradercdlupsidegap2crows"
					],
					"id": "function.trader-cdlupsidegap2crows",
					"name": "trader_cdlupsidegap2crows",
					"description": "Upside Gap Two Crows"
				},
				"function.trader-cdlxsidegap3methods": {
					"tokens": [
						"trader_cdlxsidegap3methods",
						"tradercdlxsidegap3methods"
					],
					"id": "function.trader-cdlxsidegap3methods",
					"name": "trader_cdlxsidegap3methods",
					"description": "Upside/Downside Gap Three Methods"
				},
				"function.trader-ceil": {
					"tokens": [
						"trader_ceil",
						"traderceil"
					],
					"id": "function.trader-ceil",
					"name": "trader_ceil",
					"description": "Vector Ceil"
				},
				"function.trader-cmo": {
					"tokens": [
						"trader_cmo",
						"tradercmo"
					],
					"id": "function.trader-cmo",
					"name": "trader_cmo",
					"description": "Chande Momentum Oscillator"
				},
				"function.trader-correl": {
					"tokens": [
						"trader_correl",
						"tradercorrel"
					],
					"id": "function.trader-correl",
					"name": "trader_correl",
					"description": "Pearson's Correlation Coefficient (r)"
				},
				"function.trader-cos": {
					"tokens": [
						"trader_cos",
						"tradercos"
					],
					"id": "function.trader-cos",
					"name": "trader_cos",
					"description": "Vector Trigonometric Cos"
				},
				"function.trader-cosh": {
					"tokens": [
						"trader_cosh",
						"tradercosh"
					],
					"id": "function.trader-cosh",
					"name": "trader_cosh",
					"description": "Vector Trigonometric Cosh"
				},
				"function.trader-dema": {
					"tokens": [
						"trader_dema",
						"traderdema"
					],
					"id": "function.trader-dema",
					"name": "trader_dema",
					"description": "Double Exponential Moving Average"
				},
				"function.trader-div": {
					"tokens": [
						"trader_div",
						"traderdiv"
					],
					"id": "function.trader-div",
					"name": "trader_div",
					"description": "Vector Arithmetic Div"
				},
				"function.trader-dx": {
					"tokens": [
						"trader_dx",
						"traderdx"
					],
					"id": "function.trader-dx",
					"name": "trader_dx",
					"description": "Directional Movement Index"
				},
				"function.trader-ema": {
					"tokens": [
						"trader_ema",
						"traderema"
					],
					"id": "function.trader-ema",
					"name": "trader_ema",
					"description": "Exponential Moving Average"
				},
				"function.trader-errno": {
					"tokens": [
						"trader_errno",
						"tradererrno"
					],
					"id": "function.trader-errno",
					"name": "trader_errno",
					"description": "Get error code"
				},
				"function.trader-exp": {
					"tokens": [
						"trader_exp",
						"traderexp"
					],
					"id": "function.trader-exp",
					"name": "trader_exp",
					"description": "Vector Arithmetic Exp"
				},
				"function.trader-floor": {
					"tokens": [
						"trader_floor",
						"traderfloor"
					],
					"id": "function.trader-floor",
					"name": "trader_floor",
					"description": "Vector Floor"
				},
				"function.trader-get-compat": {
					"tokens": [
						"trader_get_compat",
						"traderget_compat"
					],
					"id": "function.trader-get-compat",
					"name": "trader_get_compat",
					"description": "Get compatibility mode"
				},
				"function.trader-get-unstable-period": {
					"tokens": [
						"trader_get_unstable_period",
						"traderget_unstable_period"
					],
					"id": "function.trader-get-unstable-period",
					"name": "trader_get_unstable_period",
					"description": "Get unstable period"
				},
				"function.trader-ht-dcperiod": {
					"tokens": [
						"trader_ht_dcperiod",
						"traderht_dcperiod"
					],
					"id": "function.trader-ht-dcperiod",
					"name": "trader_ht_dcperiod",
					"description": "Hilbert Transform - Dominant Cycle Period"
				},
				"function.trader-ht-dcphase": {
					"tokens": [
						"trader_ht_dcphase",
						"traderht_dcphase"
					],
					"id": "function.trader-ht-dcphase",
					"name": "trader_ht_dcphase",
					"description": "Hilbert Transform - Dominant Cycle Phase"
				},
				"function.trader-ht-phasor": {
					"tokens": [
						"trader_ht_phasor",
						"traderht_phasor"
					],
					"id": "function.trader-ht-phasor",
					"name": "trader_ht_phasor",
					"description": "Hilbert Transform - Phasor Components"
				},
				"function.trader-ht-sine": {
					"tokens": [
						"trader_ht_sine",
						"traderht_sine"
					],
					"id": "function.trader-ht-sine",
					"name": "trader_ht_sine",
					"description": "Hilbert Transform - SineWave"
				},
				"function.trader-ht-trendline": {
					"tokens": [
						"trader_ht_trendline",
						"traderht_trendline"
					],
					"id": "function.trader-ht-trendline",
					"name": "trader_ht_trendline",
					"description": "Hilbert Transform - Instantaneous Trendline"
				},
				"function.trader-ht-trendmode": {
					"tokens": [
						"trader_ht_trendmode",
						"traderht_trendmode"
					],
					"id": "function.trader-ht-trendmode",
					"name": "trader_ht_trendmode",
					"description": "Hilbert Transform - Trend vs Cycle Mode"
				},
				"function.trader-kama": {
					"tokens": [
						"trader_kama",
						"traderkama"
					],
					"id": "function.trader-kama",
					"name": "trader_kama",
					"description": "Kaufman Adaptive Moving Average"
				},
				"function.trader-linearreg-angle": {
					"tokens": [
						"trader_linearreg_angle",
						"traderlinearreg_angle"
					],
					"id": "function.trader-linearreg-angle",
					"name": "trader_linearreg_angle",
					"description": "Linear Regression Angle"
				},
				"function.trader-linearreg-intercept": {
					"tokens": [
						"trader_linearreg_intercept",
						"traderlinearreg_intercept"
					],
					"id": "function.trader-linearreg-intercept",
					"name": "trader_linearreg_intercept",
					"description": "Linear Regression Intercept"
				},
				"function.trader-linearreg-slope": {
					"tokens": [
						"trader_linearreg_slope",
						"traderlinearreg_slope"
					],
					"id": "function.trader-linearreg-slope",
					"name": "trader_linearreg_slope",
					"description": "Linear Regression Slope"
				},
				"function.trader-linearreg": {
					"tokens": [
						"trader_linearreg",
						"traderlinearreg"
					],
					"id": "function.trader-linearreg",
					"name": "trader_linearreg",
					"description": "Linear Regression"
				},
				"function.trader-ln": {
					"tokens": [
						"trader_ln",
						"traderln"
					],
					"id": "function.trader-ln",
					"name": "trader_ln",
					"description": "Vector Log Natural"
				},
				"function.trader-log10": {
					"tokens": [
						"trader_log10",
						"traderlog10"
					],
					"id": "function.trader-log10",
					"name": "trader_log10",
					"description": "Vector Log10"
				},
				"function.trader-ma": {
					"tokens": [
						"trader_ma",
						"traderma"
					],
					"id": "function.trader-ma",
					"name": "trader_ma",
					"description": "Moving average"
				},
				"function.trader-macd": {
					"tokens": [
						"trader_macd",
						"tradermacd"
					],
					"id": "function.trader-macd",
					"name": "trader_macd",
					"description": "Moving Average Convergence/Divergence"
				},
				"function.trader-macdext": {
					"tokens": [
						"trader_macdext",
						"tradermacdext"
					],
					"id": "function.trader-macdext",
					"name": "trader_macdext",
					"description": "MACD with controllable MA type"
				},
				"function.trader-macdfix": {
					"tokens": [
						"trader_macdfix",
						"tradermacdfix"
					],
					"id": "function.trader-macdfix",
					"name": "trader_macdfix",
					"description": "Moving Average Convergence/Divergence Fix 12/26"
				},
				"function.trader-mama": {
					"tokens": [
						"trader_mama",
						"tradermama"
					],
					"id": "function.trader-mama",
					"name": "trader_mama",
					"description": "MESA Adaptive Moving Average"
				},
				"function.trader-mavp": {
					"tokens": [
						"trader_mavp",
						"tradermavp"
					],
					"id": "function.trader-mavp",
					"name": "trader_mavp",
					"description": "Moving average with variable period"
				},
				"function.trader-max": {
					"tokens": [
						"trader_max",
						"tradermax"
					],
					"id": "function.trader-max",
					"name": "trader_max",
					"description": "Highest value over a specified period"
				},
				"function.trader-maxindex": {
					"tokens": [
						"trader_maxindex",
						"tradermaxindex"
					],
					"id": "function.trader-maxindex",
					"name": "trader_maxindex",
					"description": "Index of highest value over a specified period"
				},
				"function.trader-medprice": {
					"tokens": [
						"trader_medprice",
						"tradermedprice"
					],
					"id": "function.trader-medprice",
					"name": "trader_medprice",
					"description": "Median Price"
				},
				"function.trader-mfi": {
					"tokens": [
						"trader_mfi",
						"tradermfi"
					],
					"id": "function.trader-mfi",
					"name": "trader_mfi",
					"description": "Money Flow Index"
				},
				"function.trader-midpoint": {
					"tokens": [
						"trader_midpoint",
						"tradermidpoint"
					],
					"id": "function.trader-midpoint",
					"name": "trader_midpoint",
					"description": "MidPoint over period"
				},
				"function.trader-midprice": {
					"tokens": [
						"trader_midprice",
						"tradermidprice"
					],
					"id": "function.trader-midprice",
					"name": "trader_midprice",
					"description": "Midpoint Price over period"
				},
				"function.trader-min": {
					"tokens": [
						"trader_min",
						"tradermin"
					],
					"id": "function.trader-min",
					"name": "trader_min",
					"description": "Lowest value over a specified period"
				},
				"function.trader-minindex": {
					"tokens": [
						"trader_minindex",
						"traderminindex"
					],
					"id": "function.trader-minindex",
					"name": "trader_minindex",
					"description": "Index of lowest value over a specified period"
				},
				"function.trader-minmax": {
					"tokens": [
						"trader_minmax",
						"traderminmax"
					],
					"id": "function.trader-minmax",
					"name": "trader_minmax",
					"description": "Lowest and highest values over a specified period"
				},
				"function.trader-minmaxindex": {
					"tokens": [
						"trader_minmaxindex",
						"traderminmaxindex"
					],
					"id": "function.trader-minmaxindex",
					"name": "trader_minmaxindex",
					"description": "Indexes of lowest and highest values over a specified period"
				},
				"function.trader-minus-di": {
					"tokens": [
						"trader_minus_di",
						"traderminus_di"
					],
					"id": "function.trader-minus-di",
					"name": "trader_minus_di",
					"description": "Minus Directional Indicator"
				},
				"function.trader-minus-dm": {
					"tokens": [
						"trader_minus_dm",
						"traderminus_dm"
					],
					"id": "function.trader-minus-dm",
					"name": "trader_minus_dm",
					"description": "Minus Directional Movement"
				},
				"function.trader-mom": {
					"tokens": [
						"trader_mom",
						"tradermom"
					],
					"id": "function.trader-mom",
					"name": "trader_mom",
					"description": "Momentum"
				},
				"function.trader-mult": {
					"tokens": [
						"trader_mult",
						"tradermult"
					],
					"id": "function.trader-mult",
					"name": "trader_mult",
					"description": "Vector Arithmetic Mult"
				},
				"function.trader-natr": {
					"tokens": [
						"trader_natr",
						"tradernatr"
					],
					"id": "function.trader-natr",
					"name": "trader_natr",
					"description": "Normalized Average True Range"
				},
				"function.trader-obv": {
					"tokens": [
						"trader_obv",
						"traderobv"
					],
					"id": "function.trader-obv",
					"name": "trader_obv",
					"description": "On Balance Volume"
				},
				"function.trader-plus-di": {
					"tokens": [
						"trader_plus_di",
						"traderplus_di"
					],
					"id": "function.trader-plus-di",
					"name": "trader_plus_di",
					"description": "Plus Directional Indicator"
				},
				"function.trader-plus-dm": {
					"tokens": [
						"trader_plus_dm",
						"traderplus_dm"
					],
					"id": "function.trader-plus-dm",
					"name": "trader_plus_dm",
					"description": "Plus Directional Movement"
				},
				"function.trader-ppo": {
					"tokens": [
						"trader_ppo",
						"traderppo"
					],
					"id": "function.trader-ppo",
					"name": "trader_ppo",
					"description": "Percentage Price Oscillator"
				},
				"function.trader-roc": {
					"tokens": [
						"trader_roc",
						"traderroc"
					],
					"id": "function.trader-roc",
					"name": "trader_roc",
					"description": "Rate of change : ((price/prevPrice)-1)*100"
				},
				"function.trader-rocp": {
					"tokens": [
						"trader_rocp",
						"traderrocp"
					],
					"id": "function.trader-rocp",
					"name": "trader_rocp",
					"description": "Rate of change Percentage: (price-prevPrice)/prevPrice"
				},
				"function.trader-rocr100": {
					"tokens": [
						"trader_rocr100",
						"traderrocr100"
					],
					"id": "function.trader-rocr100",
					"name": "trader_rocr100",
					"description": "Rate of change ratio 100 scale: (price/prevPrice)*100"
				},
				"function.trader-rocr": {
					"tokens": [
						"trader_rocr",
						"traderrocr"
					],
					"id": "function.trader-rocr",
					"name": "trader_rocr",
					"description": "Rate of change ratio: (price/prevPrice)"
				},
				"function.trader-rsi": {
					"tokens": [
						"trader_rsi",
						"traderrsi"
					],
					"id": "function.trader-rsi",
					"name": "trader_rsi",
					"description": "Relative Strength Index"
				},
				"function.trader-sar": {
					"tokens": [
						"trader_sar",
						"tradersar"
					],
					"id": "function.trader-sar",
					"name": "trader_sar",
					"description": "Parabolic SAR"
				},
				"function.trader-sarext": {
					"tokens": [
						"trader_sarext",
						"tradersarext"
					],
					"id": "function.trader-sarext",
					"name": "trader_sarext",
					"description": "Parabolic SAR - Extended"
				},
				"function.trader-set-compat": {
					"tokens": [
						"trader_set_compat",
						"traderset_compat"
					],
					"id": "function.trader-set-compat",
					"name": "trader_set_compat",
					"description": "Set compatibility mode"
				},
				"function.trader-set-unstable-period": {
					"tokens": [
						"trader_set_unstable_period",
						"traderset_unstable_period"
					],
					"id": "function.trader-set-unstable-period",
					"name": "trader_set_unstable_period",
					"description": "Set unstable period"
				},
				"function.trader-sin": {
					"tokens": [
						"trader_sin",
						"tradersin"
					],
					"id": "function.trader-sin",
					"name": "trader_sin",
					"description": "Vector Trigonometric Sin"
				},
				"function.trader-sinh": {
					"tokens": [
						"trader_sinh",
						"tradersinh"
					],
					"id": "function.trader-sinh",
					"name": "trader_sinh",
					"description": "Vector Trigonometric Sinh"
				},
				"function.trader-sma": {
					"tokens": [
						"trader_sma",
						"tradersma"
					],
					"id": "function.trader-sma",
					"name": "trader_sma",
					"description": "Simple Moving Average"
				},
				"function.trader-sqrt": {
					"tokens": [
						"trader_sqrt",
						"tradersqrt"
					],
					"id": "function.trader-sqrt",
					"name": "trader_sqrt",
					"description": "Vector Square Root"
				},
				"function.trader-stddev": {
					"tokens": [
						"trader_stddev",
						"traderstddev"
					],
					"id": "function.trader-stddev",
					"name": "trader_stddev",
					"description": "Standard Deviation"
				},
				"function.trader-stoch": {
					"tokens": [
						"trader_stoch",
						"traderstoch"
					],
					"id": "function.trader-stoch",
					"name": "trader_stoch",
					"description": "Stochastic"
				},
				"function.trader-stochf": {
					"tokens": [
						"trader_stochf",
						"traderstochf"
					],
					"id": "function.trader-stochf",
					"name": "trader_stochf",
					"description": "Stochastic Fast"
				},
				"function.trader-stochrsi": {
					"tokens": [
						"trader_stochrsi",
						"traderstochrsi"
					],
					"id": "function.trader-stochrsi",
					"name": "trader_stochrsi",
					"description": "Stochastic Relative Strength Index"
				},
				"function.trader-sub": {
					"tokens": [
						"trader_sub",
						"tradersub"
					],
					"id": "function.trader-sub",
					"name": "trader_sub",
					"description": "Vector Arithmetic Subtraction"
				},
				"function.trader-sum": {
					"tokens": [
						"trader_sum",
						"tradersum"
					],
					"id": "function.trader-sum",
					"name": "trader_sum",
					"description": "Summation"
				},
				"function.trader-t3": {
					"tokens": [
						"trader_t3",
						"tradert3"
					],
					"id": "function.trader-t3",
					"name": "trader_t3",
					"description": "Triple Exponential Moving Average (T3)"
				},
				"function.trader-tan": {
					"tokens": [
						"trader_tan",
						"tradertan"
					],
					"id": "function.trader-tan",
					"name": "trader_tan",
					"description": "Vector Trigonometric Tan"
				},
				"function.trader-tanh": {
					"tokens": [
						"trader_tanh",
						"tradertanh"
					],
					"id": "function.trader-tanh",
					"name": "trader_tanh",
					"description": "Vector Trigonometric Tanh"
				},
				"function.trader-tema": {
					"tokens": [
						"trader_tema",
						"tradertema"
					],
					"id": "function.trader-tema",
					"name": "trader_tema",
					"description": "Triple Exponential Moving Average"
				},
				"function.trader-trange": {
					"tokens": [
						"trader_trange",
						"tradertrange"
					],
					"id": "function.trader-trange",
					"name": "trader_trange",
					"description": "True Range"
				},
				"function.trader-trima": {
					"tokens": [
						"trader_trima",
						"tradertrima"
					],
					"id": "function.trader-trima",
					"name": "trader_trima",
					"description": "Triangular Moving Average"
				},
				"function.trader-trix": {
					"tokens": [
						"trader_trix",
						"tradertrix"
					],
					"id": "function.trader-trix",
					"name": "trader_trix",
					"description": "1-day Rate-Of-Change (ROC) of a Triple Smooth EMA"
				},
				"function.trader-tsf": {
					"tokens": [
						"trader_tsf",
						"tradertsf"
					],
					"id": "function.trader-tsf",
					"name": "trader_tsf",
					"description": "Time Series Forecast"
				},
				"function.trader-typprice": {
					"tokens": [
						"trader_typprice",
						"tradertypprice"
					],
					"id": "function.trader-typprice",
					"name": "trader_typprice",
					"description": "Typical Price"
				},
				"function.trader-ultosc": {
					"tokens": [
						"trader_ultosc",
						"traderultosc"
					],
					"id": "function.trader-ultosc",
					"name": "trader_ultosc",
					"description": "Ultimate Oscillator"
				},
				"function.trader-var": {
					"tokens": [
						"trader_var",
						"tradervar"
					],
					"id": "function.trader-var",
					"name": "trader_var",
					"description": "Variance"
				},
				"function.trader-wclprice": {
					"tokens": [
						"trader_wclprice",
						"traderwclprice"
					],
					"id": "function.trader-wclprice",
					"name": "trader_wclprice",
					"description": "Weighted Close Price"
				},
				"function.trader-willr": {
					"tokens": [
						"trader_willr",
						"traderwillr"
					],
					"id": "function.trader-willr",
					"name": "trader_willr",
					"description": "Williams' %R"
				},
				"function.trader-wma": {
					"tokens": [
						"trader_wma",
						"traderwma"
					],
					"id": "function.trader-wma",
					"name": "trader_wma",
					"description": "Weighted Moving Average"
				},
				"function.fdf-add-doc-javascript": {
					"tokens": [
						"fdf_add_doc_javascript",
						"fdfadd_doc_javascript"
					],
					"id": "function.fdf-add-doc-javascript",
					"name": "fdf_add_doc_javascript",
					"description": "Adds javascript code to the FDF document"
				},
				"function.fdf-add-template": {
					"tokens": [
						"fdf_add_template",
						"fdfadd_template"
					],
					"id": "function.fdf-add-template",
					"name": "fdf_add_template",
					"description": "Adds a template into the FDF document"
				},
				"function.fdf-close": {
					"tokens": [
						"fdf_close",
						"fdfclose"
					],
					"id": "function.fdf-close",
					"name": "fdf_close",
					"description": "Close an FDF document"
				},
				"function.fdf-create": {
					"tokens": [
						"fdf_create",
						"fdfcreate"
					],
					"id": "function.fdf-create",
					"name": "fdf_create",
					"description": "Create a new FDF document"
				},
				"function.fdf-enum-values": {
					"tokens": [
						"fdf_enum_values",
						"fdfenum_values"
					],
					"id": "function.fdf-enum-values",
					"name": "fdf_enum_values",
					"description": "Call a user defined function for each document value"
				},
				"function.fdf-errno": {
					"tokens": [
						"fdf_errno",
						"fdferrno"
					],
					"id": "function.fdf-errno",
					"name": "fdf_errno",
					"description": "Return error code for last fdf operation"
				},
				"function.fdf-error": {
					"tokens": [
						"fdf_error",
						"fdferror"
					],
					"id": "function.fdf-error",
					"name": "fdf_error",
					"description": "Return error description for FDF error code"
				},
				"function.fdf-get-ap": {
					"tokens": [
						"fdf_get_ap",
						"fdfget_ap"
					],
					"id": "function.fdf-get-ap",
					"name": "fdf_get_ap",
					"description": "Get the appearance of a field"
				},
				"function.fdf-get-attachment": {
					"tokens": [
						"fdf_get_attachment",
						"fdfget_attachment"
					],
					"id": "function.fdf-get-attachment",
					"name": "fdf_get_attachment",
					"description": "Extracts uploaded file embedded in the FDF"
				},
				"function.fdf-get-encoding": {
					"tokens": [
						"fdf_get_encoding",
						"fdfget_encoding"
					],
					"id": "function.fdf-get-encoding",
					"name": "fdf_get_encoding",
					"description": "Get the value of the /Encoding key"
				},
				"function.fdf-get-file": {
					"tokens": [
						"fdf_get_file",
						"fdfget_file"
					],
					"id": "function.fdf-get-file",
					"name": "fdf_get_file",
					"description": "Get the value of the /F key"
				},
				"function.fdf-get-flags": {
					"tokens": [
						"fdf_get_flags",
						"fdfget_flags"
					],
					"id": "function.fdf-get-flags",
					"name": "fdf_get_flags",
					"description": "Gets the flags of a field"
				},
				"function.fdf-get-opt": {
					"tokens": [
						"fdf_get_opt",
						"fdfget_opt"
					],
					"id": "function.fdf-get-opt",
					"name": "fdf_get_opt",
					"description": "Gets a value from the opt array of a field"
				},
				"function.fdf-get-status": {
					"tokens": [
						"fdf_get_status",
						"fdfget_status"
					],
					"id": "function.fdf-get-status",
					"name": "fdf_get_status",
					"description": "Get the value of the /STATUS key"
				},
				"function.fdf-get-value": {
					"tokens": [
						"fdf_get_value",
						"fdfget_value"
					],
					"id": "function.fdf-get-value",
					"name": "fdf_get_value",
					"description": "Get the value of a field"
				},
				"function.fdf-get-version": {
					"tokens": [
						"fdf_get_version",
						"fdfget_version"
					],
					"id": "function.fdf-get-version",
					"name": "fdf_get_version",
					"description": "Gets version number for FDF API or file"
				},
				"function.fdf-header": {
					"tokens": [
						"fdf_header",
						"fdfheader"
					],
					"id": "function.fdf-header",
					"name": "fdf_header",
					"description": "Sets FDF-specific output headers"
				},
				"function.fdf-next-field-name": {
					"tokens": [
						"fdf_next_field_name",
						"fdfnext_field_name"
					],
					"id": "function.fdf-next-field-name",
					"name": "fdf_next_field_name",
					"description": "Get the next field name"
				},
				"function.fdf-open-string": {
					"tokens": [
						"fdf_open_string",
						"fdfopen_string"
					],
					"id": "function.fdf-open-string",
					"name": "fdf_open_string",
					"description": "Read a FDF document from a string"
				},
				"function.fdf-open": {
					"tokens": [
						"fdf_open",
						"fdfopen"
					],
					"id": "function.fdf-open",
					"name": "fdf_open",
					"description": "Open a FDF document"
				},
				"function.fdf-remove-item": {
					"tokens": [
						"fdf_remove_item",
						"fdfremove_item"
					],
					"id": "function.fdf-remove-item",
					"name": "fdf_remove_item",
					"description": "Sets target frame for form"
				},
				"function.fdf-save-string": {
					"tokens": [
						"fdf_save_string",
						"fdfsave_string"
					],
					"id": "function.fdf-save-string",
					"name": "fdf_save_string",
					"description": "Returns the FDF document as a string"
				},
				"function.fdf-save": {
					"tokens": [
						"fdf_save",
						"fdfsave"
					],
					"id": "function.fdf-save",
					"name": "fdf_save",
					"description": "Save a FDF document"
				},
				"function.fdf-set-ap": {
					"tokens": [
						"fdf_set_ap",
						"fdfset_ap"
					],
					"id": "function.fdf-set-ap",
					"name": "fdf_set_ap",
					"description": "Set the appearance of a field"
				},
				"function.fdf-set-encoding": {
					"tokens": [
						"fdf_set_encoding",
						"fdfset_encoding"
					],
					"id": "function.fdf-set-encoding",
					"name": "fdf_set_encoding",
					"description": "Sets FDF character encoding"
				},
				"function.fdf-set-file": {
					"tokens": [
						"fdf_set_file",
						"fdfset_file"
					],
					"id": "function.fdf-set-file",
					"name": "fdf_set_file",
					"description": "Set PDF document to display FDF data in"
				},
				"function.fdf-set-flags": {
					"tokens": [
						"fdf_set_flags",
						"fdfset_flags"
					],
					"id": "function.fdf-set-flags",
					"name": "fdf_set_flags",
					"description": "Sets a flag of a field"
				},
				"function.fdf-set-javascript-action": {
					"tokens": [
						"fdf_set_javascript_action",
						"fdfset_javascript_action"
					],
					"id": "function.fdf-set-javascript-action",
					"name": "fdf_set_javascript_action",
					"description": "Sets an javascript action of a field"
				},
				"function.fdf-set-on-import-javascript": {
					"tokens": [
						"fdf_set_on_import_javascript",
						"fdfset_on_import_javascript"
					],
					"id": "function.fdf-set-on-import-javascript",
					"name": "fdf_set_on_import_javascript",
					"description": "Adds javascript code to be executed when Acrobat opens the FDF"
				},
				"function.fdf-set-opt": {
					"tokens": [
						"fdf_set_opt",
						"fdfset_opt"
					],
					"id": "function.fdf-set-opt",
					"name": "fdf_set_opt",
					"description": "Sets an option of a field"
				},
				"function.fdf-set-status": {
					"tokens": [
						"fdf_set_status",
						"fdfset_status"
					],
					"id": "function.fdf-set-status",
					"name": "fdf_set_status",
					"description": "Set the value of the /STATUS key"
				},
				"function.fdf-set-submit-form-action": {
					"tokens": [
						"fdf_set_submit_form_action",
						"fdfset_submit_form_action"
					],
					"id": "function.fdf-set-submit-form-action",
					"name": "fdf_set_submit_form_action",
					"description": "Sets a submit form action of a field"
				},
				"function.fdf-set-target-frame": {
					"tokens": [
						"fdf_set_target_frame",
						"fdfset_target_frame"
					],
					"id": "function.fdf-set-target-frame",
					"name": "fdf_set_target_frame",
					"description": "Set target frame for form display"
				},
				"function.fdf-set-value": {
					"tokens": [
						"fdf_set_value",
						"fdfset_value"
					],
					"id": "function.fdf-set-value",
					"name": "fdf_set_value",
					"description": "Set the value of a field"
				},
				"function.fdf-set-version": {
					"tokens": [
						"fdf_set_version",
						"fdfset_version"
					],
					"id": "function.fdf-set-version",
					"name": "fdf_set_version",
					"description": "Sets version number for a FDF file"
				},
				"function.gnupg-adddecryptkey": {
					"tokens": [
						"gnupg_adddecryptkey",
						"gnupgadddecryptkey"
					],
					"id": "function.gnupg-adddecryptkey",
					"name": "gnupg_adddecryptkey",
					"description": "Add a key for decryption"
				},
				"function.gnupg-addencryptkey": {
					"tokens": [
						"gnupg_addencryptkey",
						"gnupgaddencryptkey"
					],
					"id": "function.gnupg-addencryptkey",
					"name": "gnupg_addencryptkey",
					"description": "Add a key for encryption"
				},
				"function.gnupg-addsignkey": {
					"tokens": [
						"gnupg_addsignkey",
						"gnupgaddsignkey"
					],
					"id": "function.gnupg-addsignkey",
					"name": "gnupg_addsignkey",
					"description": "Add a key for signing"
				},
				"function.gnupg-cleardecryptkeys": {
					"tokens": [
						"gnupg_cleardecryptkeys",
						"gnupgcleardecryptkeys"
					],
					"id": "function.gnupg-cleardecryptkeys",
					"name": "gnupg_cleardecryptkeys",
					"description": "Removes all keys which were set for decryption before"
				},
				"function.gnupg-clearencryptkeys": {
					"tokens": [
						"gnupg_clearencryptkeys",
						"gnupgclearencryptkeys"
					],
					"id": "function.gnupg-clearencryptkeys",
					"name": "gnupg_clearencryptkeys",
					"description": "Removes all keys which were set for encryption before"
				},
				"function.gnupg-clearsignkeys": {
					"tokens": [
						"gnupg_clearsignkeys",
						"gnupgclearsignkeys"
					],
					"id": "function.gnupg-clearsignkeys",
					"name": "gnupg_clearsignkeys",
					"description": "Removes all keys which were set for signing before"
				},
				"function.gnupg-decrypt": {
					"tokens": [
						"gnupg_decrypt",
						"gnupgdecrypt"
					],
					"id": "function.gnupg-decrypt",
					"name": "gnupg_decrypt",
					"description": "Decrypts a given text"
				},
				"function.gnupg-decryptverify": {
					"tokens": [
						"gnupg_decryptverify",
						"gnupgdecryptverify"
					],
					"id": "function.gnupg-decryptverify",
					"name": "gnupg_decryptverify",
					"description": "Decrypts and verifies a given text"
				},
				"function.gnupg-encrypt": {
					"tokens": [
						"gnupg_encrypt",
						"gnupgencrypt"
					],
					"id": "function.gnupg-encrypt",
					"name": "gnupg_encrypt",
					"description": "Encrypts a given text"
				},
				"function.gnupg-encryptsign": {
					"tokens": [
						"gnupg_encryptsign",
						"gnupgencryptsign"
					],
					"id": "function.gnupg-encryptsign",
					"name": "gnupg_encryptsign",
					"description": "Encrypts and signs a given text"
				},
				"function.gnupg-export": {
					"tokens": [
						"gnupg_export",
						"gnupgexport"
					],
					"id": "function.gnupg-export",
					"name": "gnupg_export",
					"description": "Exports a key"
				},
				"function.gnupg-geterror": {
					"tokens": [
						"gnupg_geterror",
						"gnupggeterror"
					],
					"id": "function.gnupg-geterror",
					"name": "gnupg_geterror",
					"description": "Returns the errortext, if a function fails"
				},
				"function.gnupg-getprotocol": {
					"tokens": [
						"gnupg_getprotocol",
						"gnupggetprotocol"
					],
					"id": "function.gnupg-getprotocol",
					"name": "gnupg_getprotocol",
					"description": "Returns the currently active protocol for all operations"
				},
				"function.gnupg-import": {
					"tokens": [
						"gnupg_import",
						"gnupgimport"
					],
					"id": "function.gnupg-import",
					"name": "gnupg_import",
					"description": "Imports a key"
				},
				"function.gnupg-init": {
					"tokens": [
						"gnupg_init",
						"gnupginit"
					],
					"id": "function.gnupg-init",
					"name": "gnupg_init",
					"description": "Initialize a connection"
				},
				"function.gnupg-keyinfo": {
					"tokens": [
						"gnupg_keyinfo",
						"gnupgkeyinfo"
					],
					"id": "function.gnupg-keyinfo",
					"name": "gnupg_keyinfo",
					"description": "Returns an array with information about all keys that matches the given pattern"
				},
				"function.gnupg-setarmor": {
					"tokens": [
						"gnupg_setarmor",
						"gnupgsetarmor"
					],
					"id": "function.gnupg-setarmor",
					"name": "gnupg_setarmor",
					"description": "Toggle armored output"
				},
				"function.gnupg-seterrormode": {
					"tokens": [
						"gnupg_seterrormode",
						"gnupgseterrormode"
					],
					"id": "function.gnupg-seterrormode",
					"name": "gnupg_seterrormode",
					"description": "Sets the mode for error_reporting"
				},
				"function.gnupg-setsignmode": {
					"tokens": [
						"gnupg_setsignmode",
						"gnupgsetsignmode"
					],
					"id": "function.gnupg-setsignmode",
					"name": "gnupg_setsignmode",
					"description": "Sets the mode for signing"
				},
				"function.gnupg-sign": {
					"tokens": [
						"gnupg_sign",
						"gnupgsign"
					],
					"id": "function.gnupg-sign",
					"name": "gnupg_sign",
					"description": "Signs a given text"
				},
				"function.gnupg-verify": {
					"tokens": [
						"gnupg_verify",
						"gnupgverify"
					],
					"id": "function.gnupg-verify",
					"name": "gnupg_verify",
					"description": "Verifies a signed text"
				},
				"harudoc.addpage": {
					"tokens": [
						"HaruDoc::addPage",
						"addPage",
						"::addPage"
					],
					"id": "harudoc.addpage",
					"name": "HaruDoc::addPage",
					"description": "Add new page to the document"
				},
				"harudoc.addpagelabel": {
					"tokens": [
						"HaruDoc::addPageLabel",
						"addPageLabel",
						"::addPageLabel"
					],
					"id": "harudoc.addpagelabel",
					"name": "HaruDoc::addPageLabel",
					"description": "Set the numbering style for the specified range of pages"
				},
				"harudoc.construct": {
					"tokens": [
						"HaruDoc::__construct",
						"HaruDoc::_construct",
						"__construct",
						"::__construct"
					],
					"id": "harudoc.construct",
					"name": "HaruDoc::__construct",
					"description": "Construct new HaruDoc instance"
				},
				"harudoc.createoutline": {
					"tokens": [
						"HaruDoc::createOutline",
						"createOutline",
						"::createOutline"
					],
					"id": "harudoc.createoutline",
					"name": "HaruDoc::createOutline",
					"description": "Create a HaruOutline instance"
				},
				"harudoc.getcurrentencoder": {
					"tokens": [
						"HaruDoc::getCurrentEncoder",
						"getCurrentEncoder",
						"::getCurrentEncoder"
					],
					"id": "harudoc.getcurrentencoder",
					"name": "HaruDoc::getCurrentEncoder",
					"description": "Get HaruEncoder currently used in the document"
				},
				"harudoc.getcurrentpage": {
					"tokens": [
						"HaruDoc::getCurrentPage",
						"getCurrentPage",
						"::getCurrentPage"
					],
					"id": "harudoc.getcurrentpage",
					"name": "HaruDoc::getCurrentPage",
					"description": "Return current page of the document"
				},
				"harudoc.getencoder": {
					"tokens": [
						"HaruDoc::getEncoder",
						"getEncoder",
						"::getEncoder"
					],
					"id": "harudoc.getencoder",
					"name": "HaruDoc::getEncoder",
					"description": "Get HaruEncoder instance for the specified encoding"
				},
				"harudoc.getfont": {
					"tokens": [
						"HaruDoc::getFont",
						"getFont",
						"::getFont"
					],
					"id": "harudoc.getfont",
					"name": "HaruDoc::getFont",
					"description": "Get HaruFont instance"
				},
				"harudoc.getinfoattr": {
					"tokens": [
						"HaruDoc::getInfoAttr",
						"getInfoAttr",
						"::getInfoAttr"
					],
					"id": "harudoc.getinfoattr",
					"name": "HaruDoc::getInfoAttr",
					"description": "Get current value of the specified document attribute"
				},
				"harudoc.getpagelayout": {
					"tokens": [
						"HaruDoc::getPageLayout",
						"getPageLayout",
						"::getPageLayout"
					],
					"id": "harudoc.getpagelayout",
					"name": "HaruDoc::getPageLayout",
					"description": "Get current page layout"
				},
				"harudoc.getpagemode": {
					"tokens": [
						"HaruDoc::getPageMode",
						"getPageMode",
						"::getPageMode"
					],
					"id": "harudoc.getpagemode",
					"name": "HaruDoc::getPageMode",
					"description": "Get current page mode"
				},
				"harudoc.getstreamsize": {
					"tokens": [
						"HaruDoc::getStreamSize",
						"getStreamSize",
						"::getStreamSize"
					],
					"id": "harudoc.getstreamsize",
					"name": "HaruDoc::getStreamSize",
					"description": "Get the size of the temporary stream"
				},
				"harudoc.insertpage": {
					"tokens": [
						"HaruDoc::insertPage",
						"insertPage",
						"::insertPage"
					],
					"id": "harudoc.insertpage",
					"name": "HaruDoc::insertPage",
					"description": "Insert new page just before the specified page"
				},
				"harudoc.loadjpeg": {
					"tokens": [
						"HaruDoc::loadJPEG",
						"loadJPEG",
						"::loadJPEG"
					],
					"id": "harudoc.loadjpeg",
					"name": "HaruDoc::loadJPEG",
					"description": "Load a JPEG image"
				},
				"harudoc.loadpng": {
					"tokens": [
						"HaruDoc::loadPNG",
						"loadPNG",
						"::loadPNG"
					],
					"id": "harudoc.loadpng",
					"name": "HaruDoc::loadPNG",
					"description": "Load PNG image and return HaruImage instance"
				},
				"harudoc.loadraw": {
					"tokens": [
						"HaruDoc::loadRaw",
						"loadRaw",
						"::loadRaw"
					],
					"id": "harudoc.loadraw",
					"name": "HaruDoc::loadRaw",
					"description": "Load a RAW image"
				},
				"harudoc.loadttc": {
					"tokens": [
						"HaruDoc::loadTTC",
						"loadTTC",
						"::loadTTC"
					],
					"id": "harudoc.loadttc",
					"name": "HaruDoc::loadTTC",
					"description": "Load the font with the specified index from TTC file"
				},
				"harudoc.loadttf": {
					"tokens": [
						"HaruDoc::loadTTF",
						"loadTTF",
						"::loadTTF"
					],
					"id": "harudoc.loadttf",
					"name": "HaruDoc::loadTTF",
					"description": "Load TTF font file"
				},
				"harudoc.loadtype1": {
					"tokens": [
						"HaruDoc::loadType1",
						"loadType1",
						"::loadType1"
					],
					"id": "harudoc.loadtype1",
					"name": "HaruDoc::loadType1",
					"description": "Load Type1 font"
				},
				"harudoc.output": {
					"tokens": [
						"HaruDoc::output",
						"output",
						"::output"
					],
					"id": "harudoc.output",
					"name": "HaruDoc::output",
					"description": "Write the document data to the output buffer"
				},
				"harudoc.readfromstream": {
					"tokens": [
						"HaruDoc::readFromStream",
						"readFromStream",
						"::readFromStream"
					],
					"id": "harudoc.readfromstream",
					"name": "HaruDoc::readFromStream",
					"description": "Read data from the temporary stream"
				},
				"harudoc.reseterror": {
					"tokens": [
						"HaruDoc::resetError",
						"resetError",
						"::resetError"
					],
					"id": "harudoc.reseterror",
					"name": "HaruDoc::resetError",
					"description": "Reset error state of the document handle"
				},
				"harudoc.resetstream": {
					"tokens": [
						"HaruDoc::resetStream",
						"resetStream",
						"::resetStream"
					],
					"id": "harudoc.resetstream",
					"name": "HaruDoc::resetStream",
					"description": "Rewind the temporary stream"
				},
				"harudoc.save": {
					"tokens": [
						"HaruDoc::save",
						"save",
						"::save"
					],
					"id": "harudoc.save",
					"name": "HaruDoc::save",
					"description": "Save the document into the specified file"
				},
				"harudoc.savetostream": {
					"tokens": [
						"HaruDoc::saveToStream",
						"saveToStream",
						"::saveToStream"
					],
					"id": "harudoc.savetostream",
					"name": "HaruDoc::saveToStream",
					"description": "Save the document into a temporary stream"
				},
				"harudoc.setcompressionmode": {
					"tokens": [
						"HaruDoc::setCompressionMode",
						"setCompressionMode",
						"::setCompressionMode"
					],
					"id": "harudoc.setcompressionmode",
					"name": "HaruDoc::setCompressionMode",
					"description": "Set compression mode for the document"
				},
				"harudoc.setcurrentencoder": {
					"tokens": [
						"HaruDoc::setCurrentEncoder",
						"setCurrentEncoder",
						"::setCurrentEncoder"
					],
					"id": "harudoc.setcurrentencoder",
					"name": "HaruDoc::setCurrentEncoder",
					"description": "Set the current encoder for the document"
				},
				"harudoc.setencryptionmode": {
					"tokens": [
						"HaruDoc::setEncryptionMode",
						"setEncryptionMode",
						"::setEncryptionMode"
					],
					"id": "harudoc.setencryptionmode",
					"name": "HaruDoc::setEncryptionMode",
					"description": "Set encryption mode for the document"
				},
				"harudoc.setinfoattr": {
					"tokens": [
						"HaruDoc::setInfoAttr",
						"setInfoAttr",
						"::setInfoAttr"
					],
					"id": "harudoc.setinfoattr",
					"name": "HaruDoc::setInfoAttr",
					"description": "Set the info attribute of the document"
				},
				"harudoc.setinfodateattr": {
					"tokens": [
						"HaruDoc::setInfoDateAttr",
						"setInfoDateAttr",
						"::setInfoDateAttr"
					],
					"id": "harudoc.setinfodateattr",
					"name": "HaruDoc::setInfoDateAttr",
					"description": "Set the datetime info attributes of the document"
				},
				"harudoc.setopenaction": {
					"tokens": [
						"HaruDoc::setOpenAction",
						"setOpenAction",
						"::setOpenAction"
					],
					"id": "harudoc.setopenaction",
					"name": "HaruDoc::setOpenAction",
					"description": "Define which page is shown when the document is opened"
				},
				"harudoc.setpagelayout": {
					"tokens": [
						"HaruDoc::setPageLayout",
						"setPageLayout",
						"::setPageLayout"
					],
					"id": "harudoc.setpagelayout",
					"name": "HaruDoc::setPageLayout",
					"description": "Set how pages should be displayed"
				},
				"harudoc.setpagemode": {
					"tokens": [
						"HaruDoc::setPageMode",
						"setPageMode",
						"::setPageMode"
					],
					"id": "harudoc.setpagemode",
					"name": "HaruDoc::setPageMode",
					"description": "Set how the document should be displayed"
				},
				"harudoc.setpagesconfiguration": {
					"tokens": [
						"HaruDoc::setPagesConfiguration",
						"setPagesConfiguration",
						"::setPagesConfiguration"
					],
					"id": "harudoc.setpagesconfiguration",
					"name": "HaruDoc::setPagesConfiguration",
					"description": "Set the number of pages per set of pages"
				},
				"harudoc.setpassword": {
					"tokens": [
						"HaruDoc::setPassword",
						"setPassword",
						"::setPassword"
					],
					"id": "harudoc.setpassword",
					"name": "HaruDoc::setPassword",
					"description": "Set owner and user passwords for the document"
				},
				"harudoc.setpermission": {
					"tokens": [
						"HaruDoc::setPermission",
						"setPermission",
						"::setPermission"
					],
					"id": "harudoc.setpermission",
					"name": "HaruDoc::setPermission",
					"description": "Set permissions for the document"
				},
				"harudoc.usecnsencodings": {
					"tokens": [
						"HaruDoc::useCNSEncodings",
						"useCNSEncodings",
						"::useCNSEncodings"
					],
					"id": "harudoc.usecnsencodings",
					"name": "HaruDoc::useCNSEncodings",
					"description": "Enable Chinese simplified encodings"
				},
				"harudoc.usecnsfonts": {
					"tokens": [
						"HaruDoc::useCNSFonts",
						"useCNSFonts",
						"::useCNSFonts"
					],
					"id": "harudoc.usecnsfonts",
					"name": "HaruDoc::useCNSFonts",
					"description": "Enable builtin Chinese simplified fonts"
				},
				"harudoc.usecntencodings": {
					"tokens": [
						"HaruDoc::useCNTEncodings",
						"useCNTEncodings",
						"::useCNTEncodings"
					],
					"id": "harudoc.usecntencodings",
					"name": "HaruDoc::useCNTEncodings",
					"description": "Enable Chinese traditional encodings"
				},
				"harudoc.usecntfonts": {
					"tokens": [
						"HaruDoc::useCNTFonts",
						"useCNTFonts",
						"::useCNTFonts"
					],
					"id": "harudoc.usecntfonts",
					"name": "HaruDoc::useCNTFonts",
					"description": "Enable builtin Chinese traditional fonts"
				},
				"harudoc.usejpencodings": {
					"tokens": [
						"HaruDoc::useJPEncodings",
						"useJPEncodings",
						"::useJPEncodings"
					],
					"id": "harudoc.usejpencodings",
					"name": "HaruDoc::useJPEncodings",
					"description": "Enable Japanese encodings"
				},
				"harudoc.usejpfonts": {
					"tokens": [
						"HaruDoc::useJPFonts",
						"useJPFonts",
						"::useJPFonts"
					],
					"id": "harudoc.usejpfonts",
					"name": "HaruDoc::useJPFonts",
					"description": "Enable builtin Japanese fonts"
				},
				"harudoc.usekrencodings": {
					"tokens": [
						"HaruDoc::useKREncodings",
						"useKREncodings",
						"::useKREncodings"
					],
					"id": "harudoc.usekrencodings",
					"name": "HaruDoc::useKREncodings",
					"description": "Enable Korean encodings"
				},
				"harudoc.usekrfonts": {
					"tokens": [
						"HaruDoc::useKRFonts",
						"useKRFonts",
						"::useKRFonts"
					],
					"id": "harudoc.usekrfonts",
					"name": "HaruDoc::useKRFonts",
					"description": "Enable builtin Korean fonts"
				},
				"harupage.arc": {
					"tokens": [
						"HaruPage::arc",
						"arc",
						"::arc"
					],
					"id": "harupage.arc",
					"name": "HaruPage::arc",
					"description": "Append an arc to the current path"
				},
				"harupage.begintext": {
					"tokens": [
						"HaruPage::beginText",
						"beginText",
						"::beginText"
					],
					"id": "harupage.begintext",
					"name": "HaruPage::beginText",
					"description": "Begin a text object and set the current text position to (0,0)"
				},
				"harupage.circle": {
					"tokens": [
						"HaruPage::circle",
						"circle",
						"::circle"
					],
					"id": "harupage.circle",
					"name": "HaruPage::circle",
					"description": "Append a circle to the current path"
				},
				"harupage.closepath": {
					"tokens": [
						"HaruPage::closePath",
						"closePath",
						"::closePath"
					],
					"id": "harupage.closepath",
					"name": "HaruPage::closePath",
					"description": "Append a straight line from the current point to the start point of the path"
				},
				"harupage.concat": {
					"tokens": [
						"HaruPage::concat",
						"concat",
						"::concat"
					],
					"id": "harupage.concat",
					"name": "HaruPage::concat",
					"description": "Concatenate current transformation matrix of the page and the specified matrix"
				},
				"harupage.createdestination": {
					"tokens": [
						"HaruPage::createDestination",
						"createDestination",
						"::createDestination"
					],
					"id": "harupage.createdestination",
					"name": "HaruPage::createDestination",
					"description": "Create new HaruDestination instance"
				},
				"harupage.createlinkannotation": {
					"tokens": [
						"HaruPage::createLinkAnnotation",
						"createLinkAnnotation",
						"::createLinkAnnotation"
					],
					"id": "harupage.createlinkannotation",
					"name": "HaruPage::createLinkAnnotation",
					"description": "Create new HaruAnnotation instance"
				},
				"harupage.createtextannotation": {
					"tokens": [
						"HaruPage::createTextAnnotation",
						"createTextAnnotation",
						"::createTextAnnotation"
					],
					"id": "harupage.createtextannotation",
					"name": "HaruPage::createTextAnnotation",
					"description": "Create new HaruAnnotation instance"
				},
				"harupage.createurlannotation": {
					"tokens": [
						"HaruPage::createURLAnnotation",
						"createURLAnnotation",
						"::createURLAnnotation"
					],
					"id": "harupage.createurlannotation",
					"name": "HaruPage::createURLAnnotation",
					"description": "Create and return new HaruAnnotation instance"
				},
				"harupage.curveto2": {
					"tokens": [
						"HaruPage::curveTo2",
						"curveTo2",
						"::curveTo2"
					],
					"id": "harupage.curveto2",
					"name": "HaruPage::curveTo2",
					"description": "Append a Bezier curve to the current path"
				},
				"harupage.curveto3": {
					"tokens": [
						"HaruPage::curveTo3",
						"curveTo3",
						"::curveTo3"
					],
					"id": "harupage.curveto3",
					"name": "HaruPage::curveTo3",
					"description": "Append a Bezier curve to the current path"
				},
				"harupage.curveto": {
					"tokens": [
						"HaruPage::curveTo",
						"curveTo",
						"::curveTo"
					],
					"id": "harupage.curveto",
					"name": "HaruPage::curveTo",
					"description": "Append a Bezier curve to the current path"
				},
				"harupage.drawimage": {
					"tokens": [
						"HaruPage::drawImage",
						"drawImage",
						"::drawImage"
					],
					"id": "harupage.drawimage",
					"name": "HaruPage::drawImage",
					"description": "Show image at the page"
				},
				"harupage.ellipse": {
					"tokens": [
						"HaruPage::ellipse",
						"ellipse",
						"::ellipse"
					],
					"id": "harupage.ellipse",
					"name": "HaruPage::ellipse",
					"description": "Append an ellipse to the current path"
				},
				"harupage.endpath": {
					"tokens": [
						"HaruPage::endPath",
						"endPath",
						"::endPath"
					],
					"id": "harupage.endpath",
					"name": "HaruPage::endPath",
					"description": "End current path object without filling and painting operations"
				},
				"harupage.endtext": {
					"tokens": [
						"HaruPage::endText",
						"endText",
						"::endText"
					],
					"id": "harupage.endtext",
					"name": "HaruPage::endText",
					"description": "End current text object"
				},
				"harupage.eofill": {
					"tokens": [
						"HaruPage::eofill",
						"eofill",
						"::eofill"
					],
					"id": "harupage.eofill",
					"name": "HaruPage::eofill",
					"description": "Fill current path using even-odd rule"
				},
				"harupage.eofillstroke": {
					"tokens": [
						"HaruPage::eoFillStroke",
						"eoFillStroke",
						"::eoFillStroke"
					],
					"id": "harupage.eofillstroke",
					"name": "HaruPage::eoFillStroke",
					"description": "Fill current path using even-odd rule, then paint the path"
				},
				"harupage.fill": {
					"tokens": [
						"HaruPage::fill",
						"fill",
						"::fill"
					],
					"id": "harupage.fill",
					"name": "HaruPage::fill",
					"description": "Fill current path using nonzero winding number rule"
				},
				"harupage.fillstroke": {
					"tokens": [
						"HaruPage::fillStroke",
						"fillStroke",
						"::fillStroke"
					],
					"id": "harupage.fillstroke",
					"name": "HaruPage::fillStroke",
					"description": "Fill current path using nonzero winding number rule, then paint the path"
				},
				"harupage.getcharspace": {
					"tokens": [
						"HaruPage::getCharSpace",
						"getCharSpace",
						"::getCharSpace"
					],
					"id": "harupage.getcharspace",
					"name": "HaruPage::getCharSpace",
					"description": "Get the current value of character spacing"
				},
				"harupage.getcmykfill": {
					"tokens": [
						"HaruPage::getCMYKFill",
						"getCMYKFill",
						"::getCMYKFill"
					],
					"id": "harupage.getcmykfill",
					"name": "HaruPage::getCMYKFill",
					"description": "Get the current filling color"
				},
				"harupage.getcmykstroke": {
					"tokens": [
						"HaruPage::getCMYKStroke",
						"getCMYKStroke",
						"::getCMYKStroke"
					],
					"id": "harupage.getcmykstroke",
					"name": "HaruPage::getCMYKStroke",
					"description": "Get the current stroking color"
				},
				"harupage.getcurrentfont": {
					"tokens": [
						"HaruPage::getCurrentFont",
						"getCurrentFont",
						"::getCurrentFont"
					],
					"id": "harupage.getcurrentfont",
					"name": "HaruPage::getCurrentFont",
					"description": "Get the currently used font"
				},
				"harupage.getcurrentfontsize": {
					"tokens": [
						"HaruPage::getCurrentFontSize",
						"getCurrentFontSize",
						"::getCurrentFontSize"
					],
					"id": "harupage.getcurrentfontsize",
					"name": "HaruPage::getCurrentFontSize",
					"description": "Get the current font size"
				},
				"harupage.getcurrentpos": {
					"tokens": [
						"HaruPage::getCurrentPos",
						"getCurrentPos",
						"::getCurrentPos"
					],
					"id": "harupage.getcurrentpos",
					"name": "HaruPage::getCurrentPos",
					"description": "Get the current position for path painting"
				},
				"harupage.getcurrenttextpos": {
					"tokens": [
						"HaruPage::getCurrentTextPos",
						"getCurrentTextPos",
						"::getCurrentTextPos"
					],
					"id": "harupage.getcurrenttextpos",
					"name": "HaruPage::getCurrentTextPos",
					"description": "Get the current position for text printing"
				},
				"harupage.getdash": {
					"tokens": [
						"HaruPage::getDash",
						"getDash",
						"::getDash"
					],
					"id": "harupage.getdash",
					"name": "HaruPage::getDash",
					"description": "Get the current dash pattern"
				},
				"harupage.getfillingcolorspace": {
					"tokens": [
						"HaruPage::getFillingColorSpace",
						"getFillingColorSpace",
						"::getFillingColorSpace"
					],
					"id": "harupage.getfillingcolorspace",
					"name": "HaruPage::getFillingColorSpace",
					"description": "Get the current filling color space"
				},
				"harupage.getflatness": {
					"tokens": [
						"HaruPage::getFlatness",
						"getFlatness",
						"::getFlatness"
					],
					"id": "harupage.getflatness",
					"name": "HaruPage::getFlatness",
					"description": "Get the flatness of the page"
				},
				"harupage.getgmode": {
					"tokens": [
						"HaruPage::getGMode",
						"getGMode",
						"::getGMode"
					],
					"id": "harupage.getgmode",
					"name": "HaruPage::getGMode",
					"description": "Get the current graphics mode"
				},
				"harupage.getgrayfill": {
					"tokens": [
						"HaruPage::getGrayFill",
						"getGrayFill",
						"::getGrayFill"
					],
					"id": "harupage.getgrayfill",
					"name": "HaruPage::getGrayFill",
					"description": "Get the current filling color"
				},
				"harupage.getgraystroke": {
					"tokens": [
						"HaruPage::getGrayStroke",
						"getGrayStroke",
						"::getGrayStroke"
					],
					"id": "harupage.getgraystroke",
					"name": "HaruPage::getGrayStroke",
					"description": "Get the current stroking color"
				},
				"harupage.getheight": {
					"tokens": [
						"HaruPage::getHeight",
						"getHeight",
						"::getHeight"
					],
					"id": "harupage.getheight",
					"name": "HaruPage::getHeight",
					"description": "Get the height of the page"
				},
				"harupage.gethorizontalscaling": {
					"tokens": [
						"HaruPage::getHorizontalScaling",
						"getHorizontalScaling",
						"::getHorizontalScaling"
					],
					"id": "harupage.gethorizontalscaling",
					"name": "HaruPage::getHorizontalScaling",
					"description": "Get the current value of horizontal scaling"
				},
				"harupage.getlinecap": {
					"tokens": [
						"HaruPage::getLineCap",
						"getLineCap",
						"::getLineCap"
					],
					"id": "harupage.getlinecap",
					"name": "HaruPage::getLineCap",
					"description": "Get the current line cap style"
				},
				"harupage.getlinejoin": {
					"tokens": [
						"HaruPage::getLineJoin",
						"getLineJoin",
						"::getLineJoin"
					],
					"id": "harupage.getlinejoin",
					"name": "HaruPage::getLineJoin",
					"description": "Get the current line join style"
				},
				"harupage.getlinewidth": {
					"tokens": [
						"HaruPage::getLineWidth",
						"getLineWidth",
						"::getLineWidth"
					],
					"id": "harupage.getlinewidth",
					"name": "HaruPage::getLineWidth",
					"description": "Get the current line width"
				},
				"harupage.getmiterlimit": {
					"tokens": [
						"HaruPage::getMiterLimit",
						"getMiterLimit",
						"::getMiterLimit"
					],
					"id": "harupage.getmiterlimit",
					"name": "HaruPage::getMiterLimit",
					"description": "Get the value of miter limit"
				},
				"harupage.getrgbfill": {
					"tokens": [
						"HaruPage::getRGBFill",
						"getRGBFill",
						"::getRGBFill"
					],
					"id": "harupage.getrgbfill",
					"name": "HaruPage::getRGBFill",
					"description": "Get the current filling color"
				},
				"harupage.getrgbstroke": {
					"tokens": [
						"HaruPage::getRGBStroke",
						"getRGBStroke",
						"::getRGBStroke"
					],
					"id": "harupage.getrgbstroke",
					"name": "HaruPage::getRGBStroke",
					"description": "Get the current stroking color"
				},
				"harupage.getstrokingcolorspace": {
					"tokens": [
						"HaruPage::getStrokingColorSpace",
						"getStrokingColorSpace",
						"::getStrokingColorSpace"
					],
					"id": "harupage.getstrokingcolorspace",
					"name": "HaruPage::getStrokingColorSpace",
					"description": "Get the current stroking color space"
				},
				"harupage.gettextleading": {
					"tokens": [
						"HaruPage::getTextLeading",
						"getTextLeading",
						"::getTextLeading"
					],
					"id": "harupage.gettextleading",
					"name": "HaruPage::getTextLeading",
					"description": "Get the current value of line spacing"
				},
				"harupage.gettextmatrix": {
					"tokens": [
						"HaruPage::getTextMatrix",
						"getTextMatrix",
						"::getTextMatrix"
					],
					"id": "harupage.gettextmatrix",
					"name": "HaruPage::getTextMatrix",
					"description": "Get the current text transformation matrix of the page"
				},
				"harupage.gettextrenderingmode": {
					"tokens": [
						"HaruPage::getTextRenderingMode",
						"getTextRenderingMode",
						"::getTextRenderingMode"
					],
					"id": "harupage.gettextrenderingmode",
					"name": "HaruPage::getTextRenderingMode",
					"description": "Get the current text rendering mode"
				},
				"harupage.gettextrise": {
					"tokens": [
						"HaruPage::getTextRise",
						"getTextRise",
						"::getTextRise"
					],
					"id": "harupage.gettextrise",
					"name": "HaruPage::getTextRise",
					"description": "Get the current value of text rising"
				},
				"harupage.gettextwidth": {
					"tokens": [
						"HaruPage::getTextWidth",
						"getTextWidth",
						"::getTextWidth"
					],
					"id": "harupage.gettextwidth",
					"name": "HaruPage::getTextWidth",
					"description": "Get the width of the text using current fontsize, character spacing and word spacing"
				},
				"harupage.gettransmatrix": {
					"tokens": [
						"HaruPage::getTransMatrix",
						"getTransMatrix",
						"::getTransMatrix"
					],
					"id": "harupage.gettransmatrix",
					"name": "HaruPage::getTransMatrix",
					"description": "Get the current transformation matrix of the page"
				},
				"harupage.getwidth": {
					"tokens": [
						"HaruPage::getWidth",
						"getWidth",
						"::getWidth"
					],
					"id": "harupage.getwidth",
					"name": "HaruPage::getWidth",
					"description": "Get the width of the page"
				},
				"harupage.getwordspace": {
					"tokens": [
						"HaruPage::getWordSpace",
						"getWordSpace",
						"::getWordSpace"
					],
					"id": "harupage.getwordspace",
					"name": "HaruPage::getWordSpace",
					"description": "Get the current value of word spacing"
				},
				"harupage.lineto": {
					"tokens": [
						"HaruPage::lineTo",
						"lineTo",
						"::lineTo"
					],
					"id": "harupage.lineto",
					"name": "HaruPage::lineTo",
					"description": "Draw a line from the current point to the specified point"
				},
				"harupage.measuretext": {
					"tokens": [
						"HaruPage::measureText",
						"measureText",
						"::measureText"
					],
					"id": "harupage.measuretext",
					"name": "HaruPage::measureText",
					"description": "Calculate the byte length of characters which can be included on one line of the specified width"
				},
				"harupage.movetextpos": {
					"tokens": [
						"HaruPage::moveTextPos",
						"moveTextPos",
						"::moveTextPos"
					],
					"id": "harupage.movetextpos",
					"name": "HaruPage::moveTextPos",
					"description": "Move text position to the specified offset"
				},
				"harupage.moveto": {
					"tokens": [
						"HaruPage::moveTo",
						"moveTo",
						"::moveTo"
					],
					"id": "harupage.moveto",
					"name": "HaruPage::moveTo",
					"description": "Set starting point for new drawing path"
				},
				"harupage.movetonextline": {
					"tokens": [
						"HaruPage::moveToNextLine",
						"moveToNextLine",
						"::moveToNextLine"
					],
					"id": "harupage.movetonextline",
					"name": "HaruPage::moveToNextLine",
					"description": "Move text position to the start of the next line"
				},
				"harupage.rectangle": {
					"tokens": [
						"HaruPage::rectangle",
						"rectangle",
						"::rectangle"
					],
					"id": "harupage.rectangle",
					"name": "HaruPage::rectangle",
					"description": "Append a rectangle to the current path"
				},
				"harupage.setcharspace": {
					"tokens": [
						"HaruPage::setCharSpace",
						"setCharSpace",
						"::setCharSpace"
					],
					"id": "harupage.setcharspace",
					"name": "HaruPage::setCharSpace",
					"description": "Set character spacing for the page"
				},
				"harupage.setcmykfill": {
					"tokens": [
						"HaruPage::setCMYKFill",
						"setCMYKFill",
						"::setCMYKFill"
					],
					"id": "harupage.setcmykfill",
					"name": "HaruPage::setCMYKFill",
					"description": "Set filling color for the page"
				},
				"harupage.setcmykstroke": {
					"tokens": [
						"HaruPage::setCMYKStroke",
						"setCMYKStroke",
						"::setCMYKStroke"
					],
					"id": "harupage.setcmykstroke",
					"name": "HaruPage::setCMYKStroke",
					"description": "Set stroking color for the page"
				},
				"harupage.setdash": {
					"tokens": [
						"HaruPage::setDash",
						"setDash",
						"::setDash"
					],
					"id": "harupage.setdash",
					"name": "HaruPage::setDash",
					"description": "Set the dash pattern for the page"
				},
				"harupage.setflatness": {
					"tokens": [
						"HaruPage::setFlatness",
						"setFlatness",
						"::setFlatness"
					],
					"id": "harupage.setflatness",
					"name": "HaruPage::setFlatness",
					"description": "Set flatness for the page"
				},
				"harupage.setfontandsize": {
					"tokens": [
						"HaruPage::setFontAndSize",
						"setFontAndSize",
						"::setFontAndSize"
					],
					"id": "harupage.setfontandsize",
					"name": "HaruPage::setFontAndSize",
					"description": "Set font and fontsize for the page"
				},
				"harupage.setgrayfill": {
					"tokens": [
						"HaruPage::setGrayFill",
						"setGrayFill",
						"::setGrayFill"
					],
					"id": "harupage.setgrayfill",
					"name": "HaruPage::setGrayFill",
					"description": "Set filling color for the page"
				},
				"harupage.setgraystroke": {
					"tokens": [
						"HaruPage::setGrayStroke",
						"setGrayStroke",
						"::setGrayStroke"
					],
					"id": "harupage.setgraystroke",
					"name": "HaruPage::setGrayStroke",
					"description": "Sets stroking color for the page"
				},
				"harupage.setheight": {
					"tokens": [
						"HaruPage::setHeight",
						"setHeight",
						"::setHeight"
					],
					"id": "harupage.setheight",
					"name": "HaruPage::setHeight",
					"description": "Set height of the page"
				},
				"harupage.sethorizontalscaling": {
					"tokens": [
						"HaruPage::setHorizontalScaling",
						"setHorizontalScaling",
						"::setHorizontalScaling"
					],
					"id": "harupage.sethorizontalscaling",
					"name": "HaruPage::setHorizontalScaling",
					"description": "Set horizontal scaling for the page"
				},
				"harupage.setlinecap": {
					"tokens": [
						"HaruPage::setLineCap",
						"setLineCap",
						"::setLineCap"
					],
					"id": "harupage.setlinecap",
					"name": "HaruPage::setLineCap",
					"description": "Set the shape to be used at the ends of lines"
				},
				"harupage.setlinejoin": {
					"tokens": [
						"HaruPage::setLineJoin",
						"setLineJoin",
						"::setLineJoin"
					],
					"id": "harupage.setlinejoin",
					"name": "HaruPage::setLineJoin",
					"description": "Set line join style for the page"
				},
				"harupage.setlinewidth": {
					"tokens": [
						"HaruPage::setLineWidth",
						"setLineWidth",
						"::setLineWidth"
					],
					"id": "harupage.setlinewidth",
					"name": "HaruPage::setLineWidth",
					"description": "Set line width for the page"
				},
				"harupage.setmiterlimit": {
					"tokens": [
						"HaruPage::setMiterLimit",
						"setMiterLimit",
						"::setMiterLimit"
					],
					"id": "harupage.setmiterlimit",
					"name": "HaruPage::setMiterLimit",
					"description": "Set the current value of the miter limit of the page"
				},
				"harupage.setrgbfill": {
					"tokens": [
						"HaruPage::setRGBFill",
						"setRGBFill",
						"::setRGBFill"
					],
					"id": "harupage.setrgbfill",
					"name": "HaruPage::setRGBFill",
					"description": "Set filling color for the page"
				},
				"harupage.setrgbstroke": {
					"tokens": [
						"HaruPage::setRGBStroke",
						"setRGBStroke",
						"::setRGBStroke"
					],
					"id": "harupage.setrgbstroke",
					"name": "HaruPage::setRGBStroke",
					"description": "Set stroking color for the page"
				},
				"harupage.setrotate": {
					"tokens": [
						"HaruPage::setRotate",
						"setRotate",
						"::setRotate"
					],
					"id": "harupage.setrotate",
					"name": "HaruPage::setRotate",
					"description": "Set rotation angle of the page"
				},
				"harupage.setsize": {
					"tokens": [
						"HaruPage::setSize",
						"setSize",
						"::setSize"
					],
					"id": "harupage.setsize",
					"name": "HaruPage::setSize",
					"description": "Set size and direction of the page"
				},
				"harupage.setslideshow": {
					"tokens": [
						"HaruPage::setSlideShow",
						"setSlideShow",
						"::setSlideShow"
					],
					"id": "harupage.setslideshow",
					"name": "HaruPage::setSlideShow",
					"description": "Set transition style for the page"
				},
				"harupage.settextleading": {
					"tokens": [
						"HaruPage::setTextLeading",
						"setTextLeading",
						"::setTextLeading"
					],
					"id": "harupage.settextleading",
					"name": "HaruPage::setTextLeading",
					"description": "Set text leading (line spacing) for the page"
				},
				"harupage.settextmatrix": {
					"tokens": [
						"HaruPage::setTextMatrix",
						"setTextMatrix",
						"::setTextMatrix"
					],
					"id": "harupage.settextmatrix",
					"name": "HaruPage::setTextMatrix",
					"description": "Set the current text transformation matrix of the page"
				},
				"harupage.settextrenderingmode": {
					"tokens": [
						"HaruPage::setTextRenderingMode",
						"setTextRenderingMode",
						"::setTextRenderingMode"
					],
					"id": "harupage.settextrenderingmode",
					"name": "HaruPage::setTextRenderingMode",
					"description": "Set text rendering mode for the page"
				},
				"harupage.settextrise": {
					"tokens": [
						"HaruPage::setTextRise",
						"setTextRise",
						"::setTextRise"
					],
					"id": "harupage.settextrise",
					"name": "HaruPage::setTextRise",
					"description": "Set the current value of text rising"
				},
				"harupage.setwidth": {
					"tokens": [
						"HaruPage::setWidth",
						"setWidth",
						"::setWidth"
					],
					"id": "harupage.setwidth",
					"name": "HaruPage::setWidth",
					"description": "Set width of the page"
				},
				"harupage.setwordspace": {
					"tokens": [
						"HaruPage::setWordSpace",
						"setWordSpace",
						"::setWordSpace"
					],
					"id": "harupage.setwordspace",
					"name": "HaruPage::setWordSpace",
					"description": "Set word spacing for the page"
				},
				"harupage.showtext": {
					"tokens": [
						"HaruPage::showText",
						"showText",
						"::showText"
					],
					"id": "harupage.showtext",
					"name": "HaruPage::showText",
					"description": "Print text at the current position of the page"
				},
				"harupage.showtextnextline": {
					"tokens": [
						"HaruPage::showTextNextLine",
						"showTextNextLine",
						"::showTextNextLine"
					],
					"id": "harupage.showtextnextline",
					"name": "HaruPage::showTextNextLine",
					"description": "Move the current position to the start of the next line and print the text"
				},
				"harupage.stroke": {
					"tokens": [
						"HaruPage::stroke",
						"stroke",
						"::stroke"
					],
					"id": "harupage.stroke",
					"name": "HaruPage::stroke",
					"description": "Paint current path"
				},
				"harupage.textout": {
					"tokens": [
						"HaruPage::textOut",
						"textOut",
						"::textOut"
					],
					"id": "harupage.textout",
					"name": "HaruPage::textOut",
					"description": "Print the text on the specified position"
				},
				"harupage.textrect": {
					"tokens": [
						"HaruPage::textRect",
						"textRect",
						"::textRect"
					],
					"id": "harupage.textrect",
					"name": "HaruPage::textRect",
					"description": "Print the text inside the specified region"
				},
				"harufont.getascent": {
					"tokens": [
						"HaruFont::getAscent",
						"getAscent",
						"::getAscent"
					],
					"id": "harufont.getascent",
					"name": "HaruFont::getAscent",
					"description": "Get the vertical ascent of the font"
				},
				"harufont.getcapheight": {
					"tokens": [
						"HaruFont::getCapHeight",
						"getCapHeight",
						"::getCapHeight"
					],
					"id": "harufont.getcapheight",
					"name": "HaruFont::getCapHeight",
					"description": "Get the distance from the baseline of uppercase letters"
				},
				"harufont.getdescent": {
					"tokens": [
						"HaruFont::getDescent",
						"getDescent",
						"::getDescent"
					],
					"id": "harufont.getdescent",
					"name": "HaruFont::getDescent",
					"description": "Get the vertical descent of the font"
				},
				"harufont.getencodingname": {
					"tokens": [
						"HaruFont::getEncodingName",
						"getEncodingName",
						"::getEncodingName"
					],
					"id": "harufont.getencodingname",
					"name": "HaruFont::getEncodingName",
					"description": "Get the name of the encoding"
				},
				"harufont.getfontname": {
					"tokens": [
						"HaruFont::getFontName",
						"getFontName",
						"::getFontName"
					],
					"id": "harufont.getfontname",
					"name": "HaruFont::getFontName",
					"description": "Get the name of the font"
				},
				"harufont.gettextwidth": {
					"tokens": [
						"HaruFont::getTextWidth",
						"getTextWidth",
						"::getTextWidth"
					],
					"id": "harufont.gettextwidth",
					"name": "HaruFont::getTextWidth",
					"description": "Get the total width of the text, number of characters, number of words and number of spaces"
				},
				"harufont.getunicodewidth": {
					"tokens": [
						"HaruFont::getUnicodeWidth",
						"getUnicodeWidth",
						"::getUnicodeWidth"
					],
					"id": "harufont.getunicodewidth",
					"name": "HaruFont::getUnicodeWidth",
					"description": "Get the width of the character in the font"
				},
				"harufont.getxheight": {
					"tokens": [
						"HaruFont::getXHeight",
						"getXHeight",
						"::getXHeight"
					],
					"id": "harufont.getxheight",
					"name": "HaruFont::getXHeight",
					"description": "Get the distance from the baseline of lowercase letters"
				},
				"harufont.measuretext": {
					"tokens": [
						"HaruFont::measureText",
						"measureText",
						"::measureText"
					],
					"id": "harufont.measuretext",
					"name": "HaruFont::measureText",
					"description": "Calculate the number of characters which can be included within the specified width"
				},
				"haruimage.getbitspercomponent": {
					"tokens": [
						"HaruImage::getBitsPerComponent",
						"getBitsPerComponent",
						"::getBitsPerComponent"
					],
					"id": "haruimage.getbitspercomponent",
					"name": "HaruImage::getBitsPerComponent",
					"description": "Get the number of bits used to describe each color component of the image"
				},
				"haruimage.getcolorspace": {
					"tokens": [
						"HaruImage::getColorSpace",
						"getColorSpace",
						"::getColorSpace"
					],
					"id": "haruimage.getcolorspace",
					"name": "HaruImage::getColorSpace",
					"description": "Get the name of the color space"
				},
				"haruimage.getheight": {
					"tokens": [
						"HaruImage::getHeight",
						"getHeight",
						"::getHeight"
					],
					"id": "haruimage.getheight",
					"name": "HaruImage::getHeight",
					"description": "Get the height of the image"
				},
				"haruimage.getsize": {
					"tokens": [
						"HaruImage::getSize",
						"getSize",
						"::getSize"
					],
					"id": "haruimage.getsize",
					"name": "HaruImage::getSize",
					"description": "Get size of the image"
				},
				"haruimage.getwidth": {
					"tokens": [
						"HaruImage::getWidth",
						"getWidth",
						"::getWidth"
					],
					"id": "haruimage.getwidth",
					"name": "HaruImage::getWidth",
					"description": "Get the width of the image"
				},
				"haruimage.setcolormask": {
					"tokens": [
						"HaruImage::setColorMask",
						"setColorMask",
						"::setColorMask"
					],
					"id": "haruimage.setcolormask",
					"name": "HaruImage::setColorMask",
					"description": "Set the color mask of the image"
				},
				"haruimage.setmaskimage": {
					"tokens": [
						"HaruImage::setMaskImage",
						"setMaskImage",
						"::setMaskImage"
					],
					"id": "haruimage.setmaskimage",
					"name": "HaruImage::setMaskImage",
					"description": "Set the image mask"
				},
				"haruencoder.getbytetype": {
					"tokens": [
						"HaruEncoder::getByteType",
						"getByteType",
						"::getByteType"
					],
					"id": "haruencoder.getbytetype",
					"name": "HaruEncoder::getByteType",
					"description": "Get the type of the byte in the text"
				},
				"haruencoder.gettype": {
					"tokens": [
						"HaruEncoder::getType",
						"getType",
						"::getType"
					],
					"id": "haruencoder.gettype",
					"name": "HaruEncoder::getType",
					"description": "Get the type of the encoder"
				},
				"haruencoder.getunicode": {
					"tokens": [
						"HaruEncoder::getUnicode",
						"getUnicode",
						"::getUnicode"
					],
					"id": "haruencoder.getunicode",
					"name": "HaruEncoder::getUnicode",
					"description": "Convert the specified character to unicode"
				},
				"haruencoder.getwritingmode": {
					"tokens": [
						"HaruEncoder::getWritingMode",
						"getWritingMode",
						"::getWritingMode"
					],
					"id": "haruencoder.getwritingmode",
					"name": "HaruEncoder::getWritingMode",
					"description": "Get the writing mode of the encoder"
				},
				"haruoutline.setdestination": {
					"tokens": [
						"HaruOutline::setDestination",
						"setDestination",
						"::setDestination"
					],
					"id": "haruoutline.setdestination",
					"name": "HaruOutline::setDestination",
					"description": "Set the destination for the outline"
				},
				"haruoutline.setopened": {
					"tokens": [
						"HaruOutline::setOpened",
						"setOpened",
						"::setOpened"
					],
					"id": "haruoutline.setopened",
					"name": "HaruOutline::setOpened",
					"description": "Set the initial state of the outline"
				},
				"haruannotation.setborderstyle": {
					"tokens": [
						"HaruAnnotation::setBorderStyle",
						"setBorderStyle",
						"::setBorderStyle"
					],
					"id": "haruannotation.setborderstyle",
					"name": "HaruAnnotation::setBorderStyle",
					"description": "Set the border style of the annotation"
				},
				"haruannotation.sethighlightmode": {
					"tokens": [
						"HaruAnnotation::setHighlightMode",
						"setHighlightMode",
						"::setHighlightMode"
					],
					"id": "haruannotation.sethighlightmode",
					"name": "HaruAnnotation::setHighlightMode",
					"description": "Set the highlighting mode of the annotation"
				},
				"haruannotation.seticon": {
					"tokens": [
						"HaruAnnotation::setIcon",
						"setIcon",
						"::setIcon"
					],
					"id": "haruannotation.seticon",
					"name": "HaruAnnotation::setIcon",
					"description": "Set the icon style of the annotation"
				},
				"haruannotation.setopened": {
					"tokens": [
						"HaruAnnotation::setOpened",
						"setOpened",
						"::setOpened"
					],
					"id": "haruannotation.setopened",
					"name": "HaruAnnotation::setOpened",
					"description": "Set the initial state of the annotation"
				},
				"harudestination.setfit": {
					"tokens": [
						"HaruDestination::setFit",
						"setFit",
						"::setFit"
					],
					"id": "harudestination.setfit",
					"name": "HaruDestination::setFit",
					"description": "Set the appearance of the page to fit the window"
				},
				"harudestination.setfitb": {
					"tokens": [
						"HaruDestination::setFitB",
						"setFitB",
						"::setFitB"
					],
					"id": "harudestination.setfitb",
					"name": "HaruDestination::setFitB",
					"description": "Set the appearance of the page to fit the bounding box of the page within the window"
				},
				"harudestination.setfitbh": {
					"tokens": [
						"HaruDestination::setFitBH",
						"setFitBH",
						"::setFitBH"
					],
					"id": "harudestination.setfitbh",
					"name": "HaruDestination::setFitBH",
					"description": "Set the appearance of the page to fit the width of the bounding box"
				},
				"harudestination.setfitbv": {
					"tokens": [
						"HaruDestination::setFitBV",
						"setFitBV",
						"::setFitBV"
					],
					"id": "harudestination.setfitbv",
					"name": "HaruDestination::setFitBV",
					"description": "Set the appearance of the page to fit the height of the boudning box"
				},
				"harudestination.setfith": {
					"tokens": [
						"HaruDestination::setFitH",
						"setFitH",
						"::setFitH"
					],
					"id": "harudestination.setfith",
					"name": "HaruDestination::setFitH",
					"description": "Set the appearance of the page to fit the window width"
				},
				"harudestination.setfitr": {
					"tokens": [
						"HaruDestination::setFitR",
						"setFitR",
						"::setFitR"
					],
					"id": "harudestination.setfitr",
					"name": "HaruDestination::setFitR",
					"description": "Set the appearance of the page to fit the specified rectangle"
				},
				"harudestination.setfitv": {
					"tokens": [
						"HaruDestination::setFitV",
						"setFitV",
						"::setFitV"
					],
					"id": "harudestination.setfitv",
					"name": "HaruDestination::setFitV",
					"description": "Set the appearance of the page to fit the window height"
				},
				"harudestination.setxyz": {
					"tokens": [
						"HaruDestination::setXYZ",
						"setXYZ",
						"::setXYZ"
					],
					"id": "harudestination.setxyz",
					"name": "HaruDestination::setXYZ",
					"description": "Set the appearance of the page"
				},
				"function.ming-keypress": {
					"tokens": [
						"ming_keypress",
						"mingkeypress"
					],
					"id": "function.ming-keypress",
					"name": "ming_keypress",
					"description": "Returns the action flag for keyPress(char)"
				},
				"function.ming-setcubicthreshold": {
					"tokens": [
						"ming_setcubicthreshold",
						"mingsetcubicthreshold"
					],
					"id": "function.ming-setcubicthreshold",
					"name": "ming_setcubicthreshold",
					"description": "Set cubic threshold"
				},
				"function.ming-setscale": {
					"tokens": [
						"ming_setscale",
						"mingsetscale"
					],
					"id": "function.ming-setscale",
					"name": "ming_setscale",
					"description": "Set the global scaling factor."
				},
				"function.ming-setswfcompression": {
					"tokens": [
						"ming_setswfcompression",
						"mingsetswfcompression"
					],
					"id": "function.ming-setswfcompression",
					"name": "ming_setswfcompression",
					"description": "Sets the SWF output compression"
				},
				"function.ming-useconstants": {
					"tokens": [
						"ming_useconstants",
						"minguseconstants"
					],
					"id": "function.ming-useconstants",
					"name": "ming_useconstants",
					"description": "Use constant pool"
				},
				"function.ming-useswfversion": {
					"tokens": [
						"ming_useswfversion",
						"minguseswfversion"
					],
					"id": "function.ming-useswfversion",
					"name": "ming_useswfversion",
					"description": "Sets the SWF version"
				},
				"swfaction.construct": {
					"tokens": [
						"SWFAction::__construct",
						"SWFAction::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfaction.construct",
					"name": "SWFAction::__construct",
					"description": "Creates a new SWFAction"
				},
				"swfbitmap.construct": {
					"tokens": [
						"SWFBitmap::__construct",
						"SWFBitmap::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfbitmap.construct",
					"name": "SWFBitmap::__construct",
					"description": "Loads Bitmap object"
				},
				"swfbitmap.getheight": {
					"tokens": [
						"SWFBitmap::getHeight",
						"getHeight",
						"::getHeight"
					],
					"id": "swfbitmap.getheight",
					"name": "SWFBitmap::getHeight",
					"description": "Returns the bitmap's height"
				},
				"swfbitmap.getwidth": {
					"tokens": [
						"SWFBitmap::getWidth",
						"getWidth",
						"::getWidth"
					],
					"id": "swfbitmap.getwidth",
					"name": "SWFBitmap::getWidth",
					"description": "Returns the bitmap's width"
				},
				"swfbutton.addaction": {
					"tokens": [
						"SWFButton::addAction",
						"addAction",
						"::addAction"
					],
					"id": "swfbutton.addaction",
					"name": "SWFButton::addAction",
					"description": "Adds an action"
				},
				"swfbutton.addasound": {
					"tokens": [
						"SWFButton::addASound",
						"addASound",
						"::addASound"
					],
					"id": "swfbutton.addasound",
					"name": "SWFButton::addASound",
					"description": "Associates a sound with a button transition"
				},
				"swfbutton.addshape": {
					"tokens": [
						"SWFButton::addShape",
						"addShape",
						"::addShape"
					],
					"id": "swfbutton.addshape",
					"name": "SWFButton::addShape",
					"description": "Adds a shape to a button"
				},
				"swfbutton.construct": {
					"tokens": [
						"SWFButton::__construct",
						"SWFButton::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfbutton.construct",
					"name": "SWFButton::__construct",
					"description": "Creates a new Button"
				},
				"swfbutton.setaction": {
					"tokens": [
						"SWFButton::setAction",
						"setAction",
						"::setAction"
					],
					"id": "swfbutton.setaction",
					"name": "SWFButton::setAction",
					"description": "Sets the action"
				},
				"swfbutton.setdown": {
					"tokens": [
						"SWFButton::setDown",
						"setDown",
						"::setDown"
					],
					"id": "swfbutton.setdown",
					"name": "SWFButton::setDown",
					"description": "Alias for addShape(shape, SWFBUTTON_DOWN)"
				},
				"swfbutton.sethit": {
					"tokens": [
						"SWFButton::setHit",
						"setHit",
						"::setHit"
					],
					"id": "swfbutton.sethit",
					"name": "SWFButton::setHit",
					"description": "Alias for addShape(shape, SWFBUTTON_HIT)"
				},
				"swfbutton.setmenu": {
					"tokens": [
						"SWFButton::setMenu",
						"setMenu",
						"::setMenu"
					],
					"id": "swfbutton.setmenu",
					"name": "SWFButton::setMenu",
					"description": "enable track as menu button behaviour"
				},
				"swfbutton.setover": {
					"tokens": [
						"SWFButton::setOver",
						"setOver",
						"::setOver"
					],
					"id": "swfbutton.setover",
					"name": "SWFButton::setOver",
					"description": "Alias for addShape(shape, SWFBUTTON_OVER)"
				},
				"swfbutton.setup": {
					"tokens": [
						"SWFButton::setUp",
						"setUp",
						"::setUp"
					],
					"id": "swfbutton.setup",
					"name": "SWFButton::setUp",
					"description": "Alias for addShape(shape, SWFBUTTON_UP)"
				},
				"swfdisplayitem.addaction": {
					"tokens": [
						"SWFDisplayItem::addAction",
						"addAction",
						"::addAction"
					],
					"id": "swfdisplayitem.addaction",
					"name": "SWFDisplayItem::addAction",
					"description": "Adds this SWFAction to the given SWFSprite instance"
				},
				"swfdisplayitem.addcolor": {
					"tokens": [
						"SWFDisplayItem::addColor",
						"addColor",
						"::addColor"
					],
					"id": "swfdisplayitem.addcolor",
					"name": "SWFDisplayItem::addColor",
					"description": "Adds the given color to this item's color transform"
				},
				"swfdisplayitem.endmask": {
					"tokens": [
						"SWFDisplayItem::endMask",
						"endMask",
						"::endMask"
					],
					"id": "swfdisplayitem.endmask",
					"name": "SWFDisplayItem::endMask",
					"description": "Another way of defining a MASK layer"
				},
				"swfdisplayitem.getrot": {
					"tokens": [
						"SWFDisplayItem::getRot",
						"getRot",
						"::getRot"
					],
					"id": "swfdisplayitem.getrot",
					"name": "SWFDisplayItem::getRot",
					"description": "Description"
				},
				"swfdisplayitem.getx": {
					"tokens": [
						"SWFDisplayItem::getX",
						"getX",
						"::getX"
					],
					"id": "swfdisplayitem.getx",
					"name": "SWFDisplayItem::getX",
					"description": "Description"
				},
				"swfdisplayitem.getxscale": {
					"tokens": [
						"SWFDisplayItem::getXScale",
						"getXScale",
						"::getXScale"
					],
					"id": "swfdisplayitem.getxscale",
					"name": "SWFDisplayItem::getXScale",
					"description": "Description"
				},
				"swfdisplayitem.getxskew": {
					"tokens": [
						"SWFDisplayItem::getXSkew",
						"getXSkew",
						"::getXSkew"
					],
					"id": "swfdisplayitem.getxskew",
					"name": "SWFDisplayItem::getXSkew",
					"description": "Description"
				},
				"swfdisplayitem.gety": {
					"tokens": [
						"SWFDisplayItem::getY",
						"getY",
						"::getY"
					],
					"id": "swfdisplayitem.gety",
					"name": "SWFDisplayItem::getY",
					"description": "Description"
				},
				"swfdisplayitem.getyscale": {
					"tokens": [
						"SWFDisplayItem::getYScale",
						"getYScale",
						"::getYScale"
					],
					"id": "swfdisplayitem.getyscale",
					"name": "SWFDisplayItem::getYScale",
					"description": "Description"
				},
				"swfdisplayitem.getyskew": {
					"tokens": [
						"SWFDisplayItem::getYSkew",
						"getYSkew",
						"::getYSkew"
					],
					"id": "swfdisplayitem.getyskew",
					"name": "SWFDisplayItem::getYSkew",
					"description": "Description"
				},
				"swfdisplayitem.move": {
					"tokens": [
						"SWFDisplayItem::move",
						"move",
						"::move"
					],
					"id": "swfdisplayitem.move",
					"name": "SWFDisplayItem::move",
					"description": "Moves object in relative coordinates"
				},
				"swfdisplayitem.moveto": {
					"tokens": [
						"SWFDisplayItem::moveTo",
						"moveTo",
						"::moveTo"
					],
					"id": "swfdisplayitem.moveto",
					"name": "SWFDisplayItem::moveTo",
					"description": "Moves object in global coordinates"
				},
				"swfdisplayitem.multcolor": {
					"tokens": [
						"SWFDisplayItem::multColor",
						"multColor",
						"::multColor"
					],
					"id": "swfdisplayitem.multcolor",
					"name": "SWFDisplayItem::multColor",
					"description": "Multiplies the item's color transform"
				},
				"swfdisplayitem.remove": {
					"tokens": [
						"SWFDisplayItem::remove",
						"remove",
						"::remove"
					],
					"id": "swfdisplayitem.remove",
					"name": "SWFDisplayItem::remove",
					"description": "Removes the object from the movie"
				},
				"swfdisplayitem.rotate": {
					"tokens": [
						"SWFDisplayItem::rotate",
						"rotate",
						"::rotate"
					],
					"id": "swfdisplayitem.rotate",
					"name": "SWFDisplayItem::rotate",
					"description": "Rotates in relative coordinates"
				},
				"swfdisplayitem.rotateto": {
					"tokens": [
						"SWFDisplayItem::rotateTo",
						"rotateTo",
						"::rotateTo"
					],
					"id": "swfdisplayitem.rotateto",
					"name": "SWFDisplayItem::rotateTo",
					"description": "Rotates the object in global coordinates"
				},
				"swfdisplayitem.scale": {
					"tokens": [
						"SWFDisplayItem::scale",
						"scale",
						"::scale"
					],
					"id": "swfdisplayitem.scale",
					"name": "SWFDisplayItem::scale",
					"description": "Scales the object in relative coordinates"
				},
				"swfdisplayitem.scaleto": {
					"tokens": [
						"SWFDisplayItem::scaleTo",
						"scaleTo",
						"::scaleTo"
					],
					"id": "swfdisplayitem.scaleto",
					"name": "SWFDisplayItem::scaleTo",
					"description": "Scales the object in global coordinates"
				},
				"swfdisplayitem.setdepth": {
					"tokens": [
						"SWFDisplayItem::setDepth",
						"setDepth",
						"::setDepth"
					],
					"id": "swfdisplayitem.setdepth",
					"name": "SWFDisplayItem::setDepth",
					"description": "Sets z-order"
				},
				"swfdisplayitem.setmasklevel": {
					"tokens": [
						"SWFDisplayItem::setMaskLevel",
						"setMaskLevel",
						"::setMaskLevel"
					],
					"id": "swfdisplayitem.setmasklevel",
					"name": "SWFDisplayItem::setMaskLevel",
					"description": "Defines a MASK layer at level"
				},
				"swfdisplayitem.setmatrix": {
					"tokens": [
						"SWFDisplayItem::setMatrix",
						"setMatrix",
						"::setMatrix"
					],
					"id": "swfdisplayitem.setmatrix",
					"name": "SWFDisplayItem::setMatrix",
					"description": "Sets the item's transform matrix"
				},
				"swfdisplayitem.setname": {
					"tokens": [
						"SWFDisplayItem::setName",
						"setName",
						"::setName"
					],
					"id": "swfdisplayitem.setname",
					"name": "SWFDisplayItem::setName",
					"description": "Sets the object's name"
				},
				"swfdisplayitem.setratio": {
					"tokens": [
						"SWFDisplayItem::setRatio",
						"setRatio",
						"::setRatio"
					],
					"id": "swfdisplayitem.setratio",
					"name": "SWFDisplayItem::setRatio",
					"description": "Sets the object's ratio"
				},
				"swfdisplayitem.skewx": {
					"tokens": [
						"SWFDisplayItem::skewX",
						"skewX",
						"::skewX"
					],
					"id": "swfdisplayitem.skewx",
					"name": "SWFDisplayItem::skewX",
					"description": "Sets the X-skew"
				},
				"swfdisplayitem.skewxto": {
					"tokens": [
						"SWFDisplayItem::skewXTo",
						"skewXTo",
						"::skewXTo"
					],
					"id": "swfdisplayitem.skewxto",
					"name": "SWFDisplayItem::skewXTo",
					"description": "Sets the X-skew"
				},
				"swfdisplayitem.skewy": {
					"tokens": [
						"SWFDisplayItem::skewY",
						"skewY",
						"::skewY"
					],
					"id": "swfdisplayitem.skewy",
					"name": "SWFDisplayItem::skewY",
					"description": "Sets the Y-skew"
				},
				"swfdisplayitem.skewyto": {
					"tokens": [
						"SWFDisplayItem::skewYTo",
						"skewYTo",
						"::skewYTo"
					],
					"id": "swfdisplayitem.skewyto",
					"name": "SWFDisplayItem::skewYTo",
					"description": "Sets the Y-skew"
				},
				"swffill.moveto": {
					"tokens": [
						"SWFFill::moveTo",
						"moveTo",
						"::moveTo"
					],
					"id": "swffill.moveto",
					"name": "SWFFill::moveTo",
					"description": "Moves fill origin"
				},
				"swffill.rotateto": {
					"tokens": [
						"SWFFill::rotateTo",
						"rotateTo",
						"::rotateTo"
					],
					"id": "swffill.rotateto",
					"name": "SWFFill::rotateTo",
					"description": "Sets fill's rotation"
				},
				"swffill.scaleto": {
					"tokens": [
						"SWFFill::scaleTo",
						"scaleTo",
						"::scaleTo"
					],
					"id": "swffill.scaleto",
					"name": "SWFFill::scaleTo",
					"description": "Sets fill's scale"
				},
				"swffill.skewxto": {
					"tokens": [
						"SWFFill::skewXTo",
						"skewXTo",
						"::skewXTo"
					],
					"id": "swffill.skewxto",
					"name": "SWFFill::skewXTo",
					"description": "Sets fill x-skew"
				},
				"swffill.skewyto": {
					"tokens": [
						"SWFFill::skewYTo",
						"skewYTo",
						"::skewYTo"
					],
					"id": "swffill.skewyto",
					"name": "SWFFill::skewYTo",
					"description": "Sets fill y-skew"
				},
				"swffont.construct": {
					"tokens": [
						"SWFFont::__construct",
						"SWFFont::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swffont.construct",
					"name": "SWFFont::__construct",
					"description": "Loads a font definition"
				},
				"swffont.getascent": {
					"tokens": [
						"SWFFont::getAscent",
						"getAscent",
						"::getAscent"
					],
					"id": "swffont.getascent",
					"name": "SWFFont::getAscent",
					"description": "Returns the ascent of the font, or 0 if not available"
				},
				"swffont.getdescent": {
					"tokens": [
						"SWFFont::getDescent",
						"getDescent",
						"::getDescent"
					],
					"id": "swffont.getdescent",
					"name": "SWFFont::getDescent",
					"description": "Returns the descent of the font, or 0 if not available"
				},
				"swffont.getleading": {
					"tokens": [
						"SWFFont::getLeading",
						"getLeading",
						"::getLeading"
					],
					"id": "swffont.getleading",
					"name": "SWFFont::getLeading",
					"description": "Returns the leading of the font, or 0 if not available"
				},
				"swffont.getshape": {
					"tokens": [
						"SWFFont::getShape",
						"getShape",
						"::getShape"
					],
					"id": "swffont.getshape",
					"name": "SWFFont::getShape",
					"description": "Returns the glyph shape of a char as a text string"
				},
				"swffont.getutf8width": {
					"tokens": [
						"SWFFont::getUTF8Width",
						"getUTF8Width",
						"::getUTF8Width"
					],
					"id": "swffont.getutf8width",
					"name": "SWFFont::getUTF8Width",
					"description": "Calculates the width of the given string in this font at full height"
				},
				"swffont.getwidth": {
					"tokens": [
						"SWFFont::getWidth",
						"getWidth",
						"::getWidth"
					],
					"id": "swffont.getwidth",
					"name": "SWFFont::getWidth",
					"description": "Returns the string's width"
				},
				"swffontchar.addchars": {
					"tokens": [
						"SWFFontChar::addChars",
						"addChars",
						"::addChars"
					],
					"id": "swffontchar.addchars",
					"name": "SWFFontChar::addChars",
					"description": "Adds characters to a font for exporting font"
				},
				"swffontchar.addutf8chars": {
					"tokens": [
						"SWFFontChar::addUTF8Chars",
						"addUTF8Chars",
						"::addUTF8Chars"
					],
					"id": "swffontchar.addutf8chars",
					"name": "SWFFontChar::addUTF8Chars",
					"description": "Adds characters to a font for exporting font"
				},
				"swfgradient.addentry": {
					"tokens": [
						"SWFGradient::addEntry",
						"addEntry",
						"::addEntry"
					],
					"id": "swfgradient.addentry",
					"name": "SWFGradient::addEntry",
					"description": "Adds an entry to the gradient list"
				},
				"swfgradient.construct": {
					"tokens": [
						"SWFGradient::__construct",
						"SWFGradient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfgradient.construct",
					"name": "SWFGradient::__construct",
					"description": "Creates a gradient object"
				},
				"swfmorph.construct": {
					"tokens": [
						"SWFMorph::__construct",
						"SWFMorph::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfmorph.construct",
					"name": "SWFMorph::__construct",
					"description": "Creates a new SWFMorph object"
				},
				"swfmorph.getshape1": {
					"tokens": [
						"SWFMorph::getShape1",
						"getShape1",
						"::getShape1"
					],
					"id": "swfmorph.getshape1",
					"name": "SWFMorph::getShape1",
					"description": "Gets a handle to the starting shape"
				},
				"swfmorph.getshape2": {
					"tokens": [
						"SWFMorph::getShape2",
						"getShape2",
						"::getShape2"
					],
					"id": "swfmorph.getshape2",
					"name": "SWFMorph::getShape2",
					"description": "Gets a handle to the ending shape"
				},
				"swfmovie.add": {
					"tokens": [
						"SWFMovie::add",
						"add",
						"::add"
					],
					"id": "swfmovie.add",
					"name": "SWFMovie::add",
					"description": "Adds any type of data to a movie"
				},
				"swfmovie.addexport": {
					"tokens": [
						"SWFMovie::addExport",
						"addExport",
						"::addExport"
					],
					"id": "swfmovie.addexport",
					"name": "SWFMovie::addExport",
					"description": "Description"
				},
				"swfmovie.addfont": {
					"tokens": [
						"SWFMovie::addFont",
						"addFont",
						"::addFont"
					],
					"id": "swfmovie.addfont",
					"name": "SWFMovie::addFont",
					"description": "Description"
				},
				"swfmovie.construct": {
					"tokens": [
						"SWFMovie::__construct",
						"SWFMovie::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfmovie.construct",
					"name": "SWFMovie::__construct",
					"description": "Creates a new movie object, representing an SWF version 4 movie"
				},
				"swfmovie.importchar": {
					"tokens": [
						"SWFMovie::importChar",
						"importChar",
						"::importChar"
					],
					"id": "swfmovie.importchar",
					"name": "SWFMovie::importChar",
					"description": "Description"
				},
				"swfmovie.importfont": {
					"tokens": [
						"SWFMovie::importFont",
						"importFont",
						"::importFont"
					],
					"id": "swfmovie.importfont",
					"name": "SWFMovie::importFont",
					"description": "Description"
				},
				"swfmovie.labelframe": {
					"tokens": [
						"SWFMovie::labelFrame",
						"labelFrame",
						"::labelFrame"
					],
					"id": "swfmovie.labelframe",
					"name": "SWFMovie::labelFrame",
					"description": "Labels a frame"
				},
				"swfmovie.nextframe": {
					"tokens": [
						"SWFMovie::nextFrame",
						"nextFrame",
						"::nextFrame"
					],
					"id": "swfmovie.nextframe",
					"name": "SWFMovie::nextFrame",
					"description": "Moves to the next frame of the animation"
				},
				"swfmovie.output": {
					"tokens": [
						"SWFMovie::output",
						"output",
						"::output"
					],
					"id": "swfmovie.output",
					"name": "SWFMovie::output",
					"description": "Dumps your lovingly prepared movie out"
				},
				"swfmovie.remove": {
					"tokens": [
						"SWFMovie::remove",
						"remove",
						"::remove"
					],
					"id": "swfmovie.remove",
					"name": "SWFMovie::remove",
					"description": "Removes the object instance from the display list"
				},
				"swfmovie.save": {
					"tokens": [
						"SWFMovie::save",
						"save",
						"::save"
					],
					"id": "swfmovie.save",
					"name": "SWFMovie::save",
					"description": "Saves the SWF movie in a file"
				},
				"swfmovie.savetofile": {
					"tokens": [
						"SWFMovie::saveToFile",
						"saveToFile",
						"::saveToFile"
					],
					"id": "swfmovie.savetofile",
					"name": "SWFMovie::saveToFile",
					"description": "Description"
				},
				"swfmovie.setbackground": {
					"tokens": [
						"SWFMovie::setbackground",
						"setbackground",
						"::setbackground"
					],
					"id": "swfmovie.setbackground",
					"name": "SWFMovie::setbackground",
					"description": "Sets the background color"
				},
				"swfmovie.setdimension": {
					"tokens": [
						"SWFMovie::setDimension",
						"setDimension",
						"::setDimension"
					],
					"id": "swfmovie.setdimension",
					"name": "SWFMovie::setDimension",
					"description": "Sets the movie's width and height"
				},
				"swfmovie.setframes": {
					"tokens": [
						"SWFMovie::setFrames",
						"setFrames",
						"::setFrames"
					],
					"id": "swfmovie.setframes",
					"name": "SWFMovie::setFrames",
					"description": "Sets the total number of frames in the animation"
				},
				"swfmovie.setrate": {
					"tokens": [
						"SWFMovie::setRate",
						"setRate",
						"::setRate"
					],
					"id": "swfmovie.setrate",
					"name": "SWFMovie::setRate",
					"description": "Sets the animation's frame rate"
				},
				"swfmovie.startsound": {
					"tokens": [
						"SWFMovie::startSound",
						"startSound",
						"::startSound"
					],
					"id": "swfmovie.startsound",
					"name": "SWFMovie::startSound",
					"description": "Description"
				},
				"swfmovie.stopsound": {
					"tokens": [
						"SWFMovie::stopSound",
						"stopSound",
						"::stopSound"
					],
					"id": "swfmovie.stopsound",
					"name": "SWFMovie::stopSound",
					"description": "Description"
				},
				"swfmovie.streammp3": {
					"tokens": [
						"SWFMovie::streamMP3",
						"streamMP3",
						"::streamMP3"
					],
					"id": "swfmovie.streammp3",
					"name": "SWFMovie::streamMP3",
					"description": "Streams a MP3 file"
				},
				"swfmovie.writeexports": {
					"tokens": [
						"SWFMovie::writeExports",
						"writeExports",
						"::writeExports"
					],
					"id": "swfmovie.writeexports",
					"name": "SWFMovie::writeExports",
					"description": "Description"
				},
				"swfprebuiltclip.construct": {
					"tokens": [
						"SWFPrebuiltClip::__construct",
						"SWFPrebuiltClip::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfprebuiltclip.construct",
					"name": "SWFPrebuiltClip::__construct",
					"description": "Returns a SWFPrebuiltClip object"
				},
				"swfshape.addfill": {
					"tokens": [
						"SWFShape::addFill",
						"addFill",
						"::addFill"
					],
					"id": "swfshape.addfill",
					"name": "SWFShape::addFill",
					"description": "Adds a solid fill to the shape"
				},
				"swfshape.construct": {
					"tokens": [
						"SWFShape::__construct",
						"SWFShape::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfshape.construct",
					"name": "SWFShape::__construct",
					"description": "Creates a new shape object"
				},
				"swfshape.drawarc": {
					"tokens": [
						"SWFShape::drawArc",
						"drawArc",
						"::drawArc"
					],
					"id": "swfshape.drawarc",
					"name": "SWFShape::drawArc",
					"description": "Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured clockwise from 12 o'clock"
				},
				"swfshape.drawcircle": {
					"tokens": [
						"SWFShape::drawCircle",
						"drawCircle",
						"::drawCircle"
					],
					"id": "swfshape.drawcircle",
					"name": "SWFShape::drawCircle",
					"description": "Draws a circle of radius r centered at the current location, in a counter-clockwise fashion"
				},
				"swfshape.drawcubic": {
					"tokens": [
						"SWFShape::drawCubic",
						"drawCubic",
						"::drawCubic"
					],
					"id": "swfshape.drawcubic",
					"name": "SWFShape::drawCubic",
					"description": "Draws a cubic bezier curve using the current position and the three given points as control points"
				},
				"swfshape.drawcubicto": {
					"tokens": [
						"SWFShape::drawCubicTo",
						"drawCubicTo",
						"::drawCubicTo"
					],
					"id": "swfshape.drawcubicto",
					"name": "SWFShape::drawCubicTo",
					"description": "Draws a cubic bezier curve using the current position and the three given points as control points"
				},
				"swfshape.drawcurve": {
					"tokens": [
						"SWFShape::drawCurve",
						"drawCurve",
						"::drawCurve"
					],
					"id": "swfshape.drawcurve",
					"name": "SWFShape::drawCurve",
					"description": "Draws a curve (relative)"
				},
				"swfshape.drawcurveto": {
					"tokens": [
						"SWFShape::drawCurveTo",
						"drawCurveTo",
						"::drawCurveTo"
					],
					"id": "swfshape.drawcurveto",
					"name": "SWFShape::drawCurveTo",
					"description": "Draws a curve"
				},
				"swfshape.drawglyph": {
					"tokens": [
						"SWFShape::drawGlyph",
						"drawGlyph",
						"::drawGlyph"
					],
					"id": "swfshape.drawglyph",
					"name": "SWFShape::drawGlyph",
					"description": "Draws the first character in the given string into the shape using the glyph definition from the given font"
				},
				"swfshape.drawline": {
					"tokens": [
						"SWFShape::drawLine",
						"drawLine",
						"::drawLine"
					],
					"id": "swfshape.drawline",
					"name": "SWFShape::drawLine",
					"description": "Draws a line (relative)"
				},
				"swfshape.drawlineto": {
					"tokens": [
						"SWFShape::drawLineTo",
						"drawLineTo",
						"::drawLineTo"
					],
					"id": "swfshape.drawlineto",
					"name": "SWFShape::drawLineTo",
					"description": "Draws a line"
				},
				"swfshape.movepen": {
					"tokens": [
						"SWFShape::movePen",
						"movePen",
						"::movePen"
					],
					"id": "swfshape.movepen",
					"name": "SWFShape::movePen",
					"description": "Moves the shape's pen (relative)"
				},
				"swfshape.movepento": {
					"tokens": [
						"SWFShape::movePenTo",
						"movePenTo",
						"::movePenTo"
					],
					"id": "swfshape.movepento",
					"name": "SWFShape::movePenTo",
					"description": "Moves the shape's pen"
				},
				"swfshape.setleftfill": {
					"tokens": [
						"SWFShape::setLeftFill",
						"setLeftFill",
						"::setLeftFill"
					],
					"id": "swfshape.setleftfill",
					"name": "SWFShape::setLeftFill",
					"description": "Sets left rasterizing color"
				},
				"swfshape.setline": {
					"tokens": [
						"SWFShape::setLine",
						"setLine",
						"::setLine"
					],
					"id": "swfshape.setline",
					"name": "SWFShape::setLine",
					"description": "Sets the shape's line style"
				},
				"swfshape.setrightfill": {
					"tokens": [
						"SWFShape::setRightFill",
						"setRightFill",
						"::setRightFill"
					],
					"id": "swfshape.setrightfill",
					"name": "SWFShape::setRightFill",
					"description": "Sets right rasterizing color"
				},
				"swfsound.construct": {
					"tokens": [
						"SWFSound::__construct",
						"SWFSound::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfsound.construct",
					"name": "SWFSound::__construct",
					"description": "Returns a new SWFSound object from given file"
				},
				"swfsoundinstance.loopcount": {
					"tokens": [
						"SWFSoundInstance::loopCount",
						"loopCount",
						"::loopCount"
					],
					"id": "swfsoundinstance.loopcount",
					"name": "SWFSoundInstance::loopCount",
					"description": "Description"
				},
				"swfsoundinstance.loopinpoint": {
					"tokens": [
						"SWFSoundInstance::loopInPoint",
						"loopInPoint",
						"::loopInPoint"
					],
					"id": "swfsoundinstance.loopinpoint",
					"name": "SWFSoundInstance::loopInPoint",
					"description": "Description"
				},
				"swfsoundinstance.loopoutpoint": {
					"tokens": [
						"SWFSoundInstance::loopOutPoint",
						"loopOutPoint",
						"::loopOutPoint"
					],
					"id": "swfsoundinstance.loopoutpoint",
					"name": "SWFSoundInstance::loopOutPoint",
					"description": "Description"
				},
				"swfsoundinstance.nomultiple": {
					"tokens": [
						"SWFSoundInstance::noMultiple",
						"noMultiple",
						"::noMultiple"
					],
					"id": "swfsoundinstance.nomultiple",
					"name": "SWFSoundInstance::noMultiple",
					"description": "Description"
				},
				"swfsprite.add": {
					"tokens": [
						"SWFSprite::add",
						"add",
						"::add"
					],
					"id": "swfsprite.add",
					"name": "SWFSprite::add",
					"description": "Adds an object to a sprite"
				},
				"swfsprite.construct": {
					"tokens": [
						"SWFSprite::__construct",
						"SWFSprite::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfsprite.construct",
					"name": "SWFSprite::__construct",
					"description": "Creates a movie clip (a sprite)"
				},
				"swfsprite.labelframe": {
					"tokens": [
						"SWFSprite::labelFrame",
						"labelFrame",
						"::labelFrame"
					],
					"id": "swfsprite.labelframe",
					"name": "SWFSprite::labelFrame",
					"description": "Labels frame"
				},
				"swfsprite.nextframe": {
					"tokens": [
						"SWFSprite::nextFrame",
						"nextFrame",
						"::nextFrame"
					],
					"id": "swfsprite.nextframe",
					"name": "SWFSprite::nextFrame",
					"description": "Moves to the next frame of the animation"
				},
				"swfsprite.remove": {
					"tokens": [
						"SWFSprite::remove",
						"remove",
						"::remove"
					],
					"id": "swfsprite.remove",
					"name": "SWFSprite::remove",
					"description": "Removes an object to a sprite"
				},
				"swfsprite.setframes": {
					"tokens": [
						"SWFSprite::setFrames",
						"setFrames",
						"::setFrames"
					],
					"id": "swfsprite.setframes",
					"name": "SWFSprite::setFrames",
					"description": "Sets the total number of frames in the animation"
				},
				"swfsprite.startsound": {
					"tokens": [
						"SWFSprite::startSound",
						"startSound",
						"::startSound"
					],
					"id": "swfsprite.startsound",
					"name": "SWFSprite::startSound",
					"description": "Description"
				},
				"swfsprite.stopsound": {
					"tokens": [
						"SWFSprite::stopSound",
						"stopSound",
						"::stopSound"
					],
					"id": "swfsprite.stopsound",
					"name": "SWFSprite::stopSound",
					"description": "Description"
				},
				"swftext.addstring": {
					"tokens": [
						"SWFText::addString",
						"addString",
						"::addString"
					],
					"id": "swftext.addstring",
					"name": "SWFText::addString",
					"description": "Draws a string"
				},
				"swftext.addutf8string": {
					"tokens": [
						"SWFText::addUTF8String",
						"addUTF8String",
						"::addUTF8String"
					],
					"id": "swftext.addutf8string",
					"name": "SWFText::addUTF8String",
					"description": "Writes the given text into this SWFText object at the current pen position,\n using the current font, height, spacing, and color"
				},
				"swftext.construct": {
					"tokens": [
						"SWFText::__construct",
						"SWFText::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swftext.construct",
					"name": "SWFText::__construct",
					"description": "Creates a new SWFText object"
				},
				"swftext.getascent": {
					"tokens": [
						"SWFText::getAscent",
						"getAscent",
						"::getAscent"
					],
					"id": "swftext.getascent",
					"name": "SWFText::getAscent",
					"description": "Returns the ascent of the current font at its current size, or 0 if not available"
				},
				"swftext.getdescent": {
					"tokens": [
						"SWFText::getDescent",
						"getDescent",
						"::getDescent"
					],
					"id": "swftext.getdescent",
					"name": "SWFText::getDescent",
					"description": "Returns the descent of the current font at its current size, or 0 if not available"
				},
				"swftext.getleading": {
					"tokens": [
						"SWFText::getLeading",
						"getLeading",
						"::getLeading"
					],
					"id": "swftext.getleading",
					"name": "SWFText::getLeading",
					"description": "Returns the leading of the current font at its current size, or 0 if not available"
				},
				"swftext.getutf8width": {
					"tokens": [
						"SWFText::getUTF8Width",
						"getUTF8Width",
						"::getUTF8Width"
					],
					"id": "swftext.getutf8width",
					"name": "SWFText::getUTF8Width",
					"description": "calculates the width of the given string in this text objects current font and size"
				},
				"swftext.getwidth": {
					"tokens": [
						"SWFText::getWidth",
						"getWidth",
						"::getWidth"
					],
					"id": "swftext.getwidth",
					"name": "SWFText::getWidth",
					"description": "Computes string's width"
				},
				"swftext.moveto": {
					"tokens": [
						"SWFText::moveTo",
						"moveTo",
						"::moveTo"
					],
					"id": "swftext.moveto",
					"name": "SWFText::moveTo",
					"description": "Moves the pen"
				},
				"swftext.setcolor": {
					"tokens": [
						"SWFText::setColor",
						"setColor",
						"::setColor"
					],
					"id": "swftext.setcolor",
					"name": "SWFText::setColor",
					"description": "Sets the current text color"
				},
				"swftext.setfont": {
					"tokens": [
						"SWFText::setFont",
						"setFont",
						"::setFont"
					],
					"id": "swftext.setfont",
					"name": "SWFText::setFont",
					"description": "Sets the current font"
				},
				"swftext.setheight": {
					"tokens": [
						"SWFText::setHeight",
						"setHeight",
						"::setHeight"
					],
					"id": "swftext.setheight",
					"name": "SWFText::setHeight",
					"description": "Sets the current font height"
				},
				"swftext.setspacing": {
					"tokens": [
						"SWFText::setSpacing",
						"setSpacing",
						"::setSpacing"
					],
					"id": "swftext.setspacing",
					"name": "SWFText::setSpacing",
					"description": "Sets the current font spacing"
				},
				"swftextfield.addchars": {
					"tokens": [
						"SWFTextField::addChars",
						"addChars",
						"::addChars"
					],
					"id": "swftextfield.addchars",
					"name": "SWFTextField::addChars",
					"description": "adds characters to a font that will be available within a textfield"
				},
				"swftextfield.addstring": {
					"tokens": [
						"SWFTextField::addString",
						"addString",
						"::addString"
					],
					"id": "swftextfield.addstring",
					"name": "SWFTextField::addString",
					"description": "Concatenates the given string to the text field"
				},
				"swftextfield.align": {
					"tokens": [
						"SWFTextField::align",
						"align",
						"::align"
					],
					"id": "swftextfield.align",
					"name": "SWFTextField::align",
					"description": "Sets the text field alignment"
				},
				"swftextfield.construct": {
					"tokens": [
						"SWFTextField::__construct",
						"SWFTextField::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swftextfield.construct",
					"name": "SWFTextField::__construct",
					"description": "Creates a text field object"
				},
				"swftextfield.setbounds": {
					"tokens": [
						"SWFTextField::setBounds",
						"setBounds",
						"::setBounds"
					],
					"id": "swftextfield.setbounds",
					"name": "SWFTextField::setBounds",
					"description": "Sets the text field width and height"
				},
				"swftextfield.setcolor": {
					"tokens": [
						"SWFTextField::setColor",
						"setColor",
						"::setColor"
					],
					"id": "swftextfield.setcolor",
					"name": "SWFTextField::setColor",
					"description": "Sets the color of the text field"
				},
				"swftextfield.setfont": {
					"tokens": [
						"SWFTextField::setFont",
						"setFont",
						"::setFont"
					],
					"id": "swftextfield.setfont",
					"name": "SWFTextField::setFont",
					"description": "Sets the text field font"
				},
				"swftextfield.setheight": {
					"tokens": [
						"SWFTextField::setHeight",
						"setHeight",
						"::setHeight"
					],
					"id": "swftextfield.setheight",
					"name": "SWFTextField::setHeight",
					"description": "Sets the font height of this text field font"
				},
				"swftextfield.setindentation": {
					"tokens": [
						"SWFTextField::setIndentation",
						"setIndentation",
						"::setIndentation"
					],
					"id": "swftextfield.setindentation",
					"name": "SWFTextField::setIndentation",
					"description": "Sets the indentation of the first line"
				},
				"swftextfield.setleftmargin": {
					"tokens": [
						"SWFTextField::setLeftMargin",
						"setLeftMargin",
						"::setLeftMargin"
					],
					"id": "swftextfield.setleftmargin",
					"name": "SWFTextField::setLeftMargin",
					"description": "Sets the left margin width of the text field"
				},
				"swftextfield.setlinespacing": {
					"tokens": [
						"SWFTextField::setLineSpacing",
						"setLineSpacing",
						"::setLineSpacing"
					],
					"id": "swftextfield.setlinespacing",
					"name": "SWFTextField::setLineSpacing",
					"description": "Sets the line spacing of the text field"
				},
				"swftextfield.setmargins": {
					"tokens": [
						"SWFTextField::setMargins",
						"setMargins",
						"::setMargins"
					],
					"id": "swftextfield.setmargins",
					"name": "SWFTextField::setMargins",
					"description": "Sets the margins width of the text field"
				},
				"swftextfield.setname": {
					"tokens": [
						"SWFTextField::setName",
						"setName",
						"::setName"
					],
					"id": "swftextfield.setname",
					"name": "SWFTextField::setName",
					"description": "Sets the variable name"
				},
				"swftextfield.setpadding": {
					"tokens": [
						"SWFTextField::setPadding",
						"setPadding",
						"::setPadding"
					],
					"id": "swftextfield.setpadding",
					"name": "SWFTextField::setPadding",
					"description": "Sets the padding of this textfield"
				},
				"swftextfield.setrightmargin": {
					"tokens": [
						"SWFTextField::setRightMargin",
						"setRightMargin",
						"::setRightMargin"
					],
					"id": "swftextfield.setrightmargin",
					"name": "SWFTextField::setRightMargin",
					"description": "Sets the right margin width of the text field"
				},
				"swfvideostream.construct": {
					"tokens": [
						"SWFVideoStream::__construct",
						"SWFVideoStream::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swfvideostream.construct",
					"name": "SWFVideoStream::__construct",
					"description": "Returns a SWFVideoStream object"
				},
				"swfvideostream.getnumframes": {
					"tokens": [
						"SWFVideoStream::getNumFrames",
						"getNumFrames",
						"::getNumFrames"
					],
					"id": "swfvideostream.getnumframes",
					"name": "SWFVideoStream::getNumFrames",
					"description": "Returns the number of frames in the video"
				},
				"swfvideostream.setdimension": {
					"tokens": [
						"SWFVideoStream::setDimension",
						"setDimension",
						"::setDimension"
					],
					"id": "swfvideostream.setdimension",
					"name": "SWFVideoStream::setDimension",
					"description": "Sets video dimension"
				},
				"function.pdf-activate-item": {
					"tokens": [
						"PDF_activate_item",
						"PDFactivate_item"
					],
					"id": "function.pdf-activate-item",
					"name": "PDF_activate_item",
					"description": "Activate structure element or other content item"
				},
				"function.pdf-add-annotation": {
					"tokens": [
						"PDF_add_annotation",
						"PDFadd_annotation"
					],
					"id": "function.pdf-add-annotation",
					"name": "PDF_add_annotation",
					"description": "Add annotation [deprecated]"
				},
				"function.pdf-add-bookmark": {
					"tokens": [
						"PDF_add_bookmark",
						"PDFadd_bookmark"
					],
					"id": "function.pdf-add-bookmark",
					"name": "PDF_add_bookmark",
					"description": "Add bookmark for current page [deprecated]"
				},
				"function.pdf-add-launchlink": {
					"tokens": [
						"PDF_add_launchlink",
						"PDFadd_launchlink"
					],
					"id": "function.pdf-add-launchlink",
					"name": "PDF_add_launchlink",
					"description": "Add launch annotation for current page [deprecated]"
				},
				"function.pdf-add-locallink": {
					"tokens": [
						"PDF_add_locallink",
						"PDFadd_locallink"
					],
					"id": "function.pdf-add-locallink",
					"name": "PDF_add_locallink",
					"description": "Add link annotation for current page [deprecated]"
				},
				"function.pdf-add-nameddest": {
					"tokens": [
						"PDF_add_nameddest",
						"PDFadd_nameddest"
					],
					"id": "function.pdf-add-nameddest",
					"name": "PDF_add_nameddest",
					"description": "Create named destination"
				},
				"function.pdf-add-note": {
					"tokens": [
						"PDF_add_note",
						"PDFadd_note"
					],
					"id": "function.pdf-add-note",
					"name": "PDF_add_note",
					"description": "Set annotation for current page [deprecated]"
				},
				"function.pdf-add-outline": {
					"tokens": [
						"PDF_add_outline",
						"PDFadd_outline"
					],
					"id": "function.pdf-add-outline",
					"name": "PDF_add_outline",
					"description": "Add bookmark for current page [deprecated]"
				},
				"function.pdf-add-pdflink": {
					"tokens": [
						"PDF_add_pdflink",
						"PDFadd_pdflink"
					],
					"id": "function.pdf-add-pdflink",
					"name": "PDF_add_pdflink",
					"description": "Add file link annotation for current page [deprecated]"
				},
				"function.pdf-add-table-cell": {
					"tokens": [
						"PDF_add_table_cell",
						"PDFadd_table_cell"
					],
					"id": "function.pdf-add-table-cell",
					"name": "PDF_add_table_cell",
					"description": "Add a cell to a new or existing table"
				},
				"function.pdf-add-textflow": {
					"tokens": [
						"PDF_add_textflow",
						"PDFadd_textflow"
					],
					"id": "function.pdf-add-textflow",
					"name": "PDF_add_textflow",
					"description": "Create Textflow or add text to existing Textflow"
				},
				"function.pdf-add-thumbnail": {
					"tokens": [
						"PDF_add_thumbnail",
						"PDFadd_thumbnail"
					],
					"id": "function.pdf-add-thumbnail",
					"name": "PDF_add_thumbnail",
					"description": "Add thumbnail for current page"
				},
				"function.pdf-add-weblink": {
					"tokens": [
						"PDF_add_weblink",
						"PDFadd_weblink"
					],
					"id": "function.pdf-add-weblink",
					"name": "PDF_add_weblink",
					"description": "Add weblink for current page [deprecated]"
				},
				"function.pdf-arc": {
					"tokens": [
						"PDF_arc",
						"PDFarc"
					],
					"id": "function.pdf-arc",
					"name": "PDF_arc",
					"description": "Draw a counterclockwise circular arc segment"
				},
				"function.pdf-arcn": {
					"tokens": [
						"PDF_arcn",
						"PDFarcn"
					],
					"id": "function.pdf-arcn",
					"name": "PDF_arcn",
					"description": "Draw a clockwise circular arc segment"
				},
				"function.pdf-attach-file": {
					"tokens": [
						"PDF_attach_file",
						"PDFattach_file"
					],
					"id": "function.pdf-attach-file",
					"name": "PDF_attach_file",
					"description": "Add file attachment for current page [deprecated]"
				},
				"function.pdf-begin-document": {
					"tokens": [
						"PDF_begin_document",
						"PDFbegin_document"
					],
					"id": "function.pdf-begin-document",
					"name": "PDF_begin_document",
					"description": "Create new PDF file"
				},
				"function.pdf-begin-font": {
					"tokens": [
						"PDF_begin_font",
						"PDFbegin_font"
					],
					"id": "function.pdf-begin-font",
					"name": "PDF_begin_font",
					"description": "Start a Type 3 font definition"
				},
				"function.pdf-begin-glyph": {
					"tokens": [
						"PDF_begin_glyph",
						"PDFbegin_glyph"
					],
					"id": "function.pdf-begin-glyph",
					"name": "PDF_begin_glyph",
					"description": "Start glyph definition for Type 3 font"
				},
				"function.pdf-begin-item": {
					"tokens": [
						"PDF_begin_item",
						"PDFbegin_item"
					],
					"id": "function.pdf-begin-item",
					"name": "PDF_begin_item",
					"description": "Open structure element or other content item"
				},
				"function.pdf-begin-layer": {
					"tokens": [
						"PDF_begin_layer",
						"PDFbegin_layer"
					],
					"id": "function.pdf-begin-layer",
					"name": "PDF_begin_layer",
					"description": "Start layer"
				},
				"function.pdf-begin-page-ext": {
					"tokens": [
						"PDF_begin_page_ext",
						"PDFbegin_page_ext"
					],
					"id": "function.pdf-begin-page-ext",
					"name": "PDF_begin_page_ext",
					"description": "Start new page"
				},
				"function.pdf-begin-page": {
					"tokens": [
						"PDF_begin_page",
						"PDFbegin_page"
					],
					"id": "function.pdf-begin-page",
					"name": "PDF_begin_page",
					"description": "Start new page [deprecated]"
				},
				"function.pdf-begin-pattern": {
					"tokens": [
						"PDF_begin_pattern",
						"PDFbegin_pattern"
					],
					"id": "function.pdf-begin-pattern",
					"name": "PDF_begin_pattern",
					"description": "Start pattern definition"
				},
				"function.pdf-begin-template-ext": {
					"tokens": [
						"PDF_begin_template_ext",
						"PDFbegin_template_ext"
					],
					"id": "function.pdf-begin-template-ext",
					"name": "PDF_begin_template_ext",
					"description": "Start template definition"
				},
				"function.pdf-begin-template": {
					"tokens": [
						"PDF_begin_template",
						"PDFbegin_template"
					],
					"id": "function.pdf-begin-template",
					"name": "PDF_begin_template",
					"description": "Start template definition [deprecated]"
				},
				"function.pdf-circle": {
					"tokens": [
						"PDF_circle",
						"PDFcircle"
					],
					"id": "function.pdf-circle",
					"name": "PDF_circle",
					"description": "Draw a circle"
				},
				"function.pdf-clip": {
					"tokens": [
						"PDF_clip",
						"PDFclip"
					],
					"id": "function.pdf-clip",
					"name": "PDF_clip",
					"description": "Clip to current path"
				},
				"function.pdf-close-image": {
					"tokens": [
						"PDF_close_image",
						"PDFclose_image"
					],
					"id": "function.pdf-close-image",
					"name": "PDF_close_image",
					"description": "Close image"
				},
				"function.pdf-close-pdi-page": {
					"tokens": [
						"PDF_close_pdi_page",
						"PDFclose_pdi_page"
					],
					"id": "function.pdf-close-pdi-page",
					"name": "PDF_close_pdi_page",
					"description": "Close the page handle"
				},
				"function.pdf-close-pdi": {
					"tokens": [
						"PDF_close_pdi",
						"PDFclose_pdi"
					],
					"id": "function.pdf-close-pdi",
					"name": "PDF_close_pdi",
					"description": "Close the input PDF document [deprecated]"
				},
				"function.pdf-close": {
					"tokens": [
						"PDF_close",
						"PDFclose"
					],
					"id": "function.pdf-close",
					"name": "PDF_close",
					"description": "Close pdf resource [deprecated]"
				},
				"function.pdf-closepath-fill-stroke": {
					"tokens": [
						"PDF_closepath_fill_stroke",
						"PDFclosepath_fill_stroke"
					],
					"id": "function.pdf-closepath-fill-stroke",
					"name": "PDF_closepath_fill_stroke",
					"description": "Close, fill and stroke current path"
				},
				"function.pdf-closepath-stroke": {
					"tokens": [
						"PDF_closepath_stroke",
						"PDFclosepath_stroke"
					],
					"id": "function.pdf-closepath-stroke",
					"name": "PDF_closepath_stroke",
					"description": "Close and stroke path"
				},
				"function.pdf-closepath": {
					"tokens": [
						"PDF_closepath",
						"PDFclosepath"
					],
					"id": "function.pdf-closepath",
					"name": "PDF_closepath",
					"description": "Close current path"
				},
				"function.pdf-concat": {
					"tokens": [
						"PDF_concat",
						"PDFconcat"
					],
					"id": "function.pdf-concat",
					"name": "PDF_concat",
					"description": "Concatenate a matrix to the CTM"
				},
				"function.pdf-continue-text": {
					"tokens": [
						"PDF_continue_text",
						"PDFcontinue_text"
					],
					"id": "function.pdf-continue-text",
					"name": "PDF_continue_text",
					"description": "Output text in next line"
				},
				"function.pdf-create-3dview": {
					"tokens": [
						"PDF_create_3dview",
						"PDFcreate_3dview"
					],
					"id": "function.pdf-create-3dview",
					"name": "PDF_create_3dview",
					"description": "Create 3D view"
				},
				"function.pdf-create-action": {
					"tokens": [
						"PDF_create_action",
						"PDFcreate_action"
					],
					"id": "function.pdf-create-action",
					"name": "PDF_create_action",
					"description": "Create action for objects or events"
				},
				"function.pdf-create-annotation": {
					"tokens": [
						"PDF_create_annotation",
						"PDFcreate_annotation"
					],
					"id": "function.pdf-create-annotation",
					"name": "PDF_create_annotation",
					"description": "Create rectangular annotation"
				},
				"function.pdf-create-bookmark": {
					"tokens": [
						"PDF_create_bookmark",
						"PDFcreate_bookmark"
					],
					"id": "function.pdf-create-bookmark",
					"name": "PDF_create_bookmark",
					"description": "Create bookmark"
				},
				"function.pdf-create-field": {
					"tokens": [
						"PDF_create_field",
						"PDFcreate_field"
					],
					"id": "function.pdf-create-field",
					"name": "PDF_create_field",
					"description": "Create form field"
				},
				"function.pdf-create-fieldgroup": {
					"tokens": [
						"PDF_create_fieldgroup",
						"PDFcreate_fieldgroup"
					],
					"id": "function.pdf-create-fieldgroup",
					"name": "PDF_create_fieldgroup",
					"description": "Create form field group"
				},
				"function.pdf-create-gstate": {
					"tokens": [
						"PDF_create_gstate",
						"PDFcreate_gstate"
					],
					"id": "function.pdf-create-gstate",
					"name": "PDF_create_gstate",
					"description": "Create graphics state object"
				},
				"function.pdf-create-pvf": {
					"tokens": [
						"PDF_create_pvf",
						"PDFcreate_pvf"
					],
					"id": "function.pdf-create-pvf",
					"name": "PDF_create_pvf",
					"description": "Create PDFlib virtual file"
				},
				"function.pdf-create-textflow": {
					"tokens": [
						"PDF_create_textflow",
						"PDFcreate_textflow"
					],
					"id": "function.pdf-create-textflow",
					"name": "PDF_create_textflow",
					"description": "Create textflow object"
				},
				"function.pdf-curveto": {
					"tokens": [
						"PDF_curveto",
						"PDFcurveto"
					],
					"id": "function.pdf-curveto",
					"name": "PDF_curveto",
					"description": "Draw Bezier curve"
				},
				"function.pdf-define-layer": {
					"tokens": [
						"PDF_define_layer",
						"PDFdefine_layer"
					],
					"id": "function.pdf-define-layer",
					"name": "PDF_define_layer",
					"description": "Create layer definition"
				},
				"function.pdf-delete-pvf": {
					"tokens": [
						"PDF_delete_pvf",
						"PDFdelete_pvf"
					],
					"id": "function.pdf-delete-pvf",
					"name": "PDF_delete_pvf",
					"description": "Delete PDFlib virtual file"
				},
				"function.pdf-delete-table": {
					"tokens": [
						"PDF_delete_table",
						"PDFdelete_table"
					],
					"id": "function.pdf-delete-table",
					"name": "PDF_delete_table",
					"description": "Delete table object"
				},
				"function.pdf-delete-textflow": {
					"tokens": [
						"PDF_delete_textflow",
						"PDFdelete_textflow"
					],
					"id": "function.pdf-delete-textflow",
					"name": "PDF_delete_textflow",
					"description": "Delete textflow object"
				},
				"function.pdf-delete": {
					"tokens": [
						"PDF_delete",
						"PDFdelete"
					],
					"id": "function.pdf-delete",
					"name": "PDF_delete",
					"description": "Delete PDFlib object"
				},
				"function.pdf-encoding-set-char": {
					"tokens": [
						"PDF_encoding_set_char",
						"PDFencoding_set_char"
					],
					"id": "function.pdf-encoding-set-char",
					"name": "PDF_encoding_set_char",
					"description": "Add glyph name and/or Unicode value"
				},
				"function.pdf-end-document": {
					"tokens": [
						"PDF_end_document",
						"PDFend_document"
					],
					"id": "function.pdf-end-document",
					"name": "PDF_end_document",
					"description": "Close PDF file"
				},
				"function.pdf-end-font": {
					"tokens": [
						"PDF_end_font",
						"PDFend_font"
					],
					"id": "function.pdf-end-font",
					"name": "PDF_end_font",
					"description": "Terminate Type 3 font definition"
				},
				"function.pdf-end-glyph": {
					"tokens": [
						"PDF_end_glyph",
						"PDFend_glyph"
					],
					"id": "function.pdf-end-glyph",
					"name": "PDF_end_glyph",
					"description": "Terminate glyph definition for Type 3 font"
				},
				"function.pdf-end-item": {
					"tokens": [
						"PDF_end_item",
						"PDFend_item"
					],
					"id": "function.pdf-end-item",
					"name": "PDF_end_item",
					"description": "Close structure element or other content item"
				},
				"function.pdf-end-layer": {
					"tokens": [
						"PDF_end_layer",
						"PDFend_layer"
					],
					"id": "function.pdf-end-layer",
					"name": "PDF_end_layer",
					"description": "Deactivate all active layers"
				},
				"function.pdf-end-page-ext": {
					"tokens": [
						"PDF_end_page_ext",
						"PDFend_page_ext"
					],
					"id": "function.pdf-end-page-ext",
					"name": "PDF_end_page_ext",
					"description": "Finish page"
				},
				"function.pdf-end-page": {
					"tokens": [
						"PDF_end_page",
						"PDFend_page"
					],
					"id": "function.pdf-end-page",
					"name": "PDF_end_page",
					"description": "Finish page"
				},
				"function.pdf-end-pattern": {
					"tokens": [
						"PDF_end_pattern",
						"PDFend_pattern"
					],
					"id": "function.pdf-end-pattern",
					"name": "PDF_end_pattern",
					"description": "Finish pattern"
				},
				"function.pdf-end-template": {
					"tokens": [
						"PDF_end_template",
						"PDFend_template"
					],
					"id": "function.pdf-end-template",
					"name": "PDF_end_template",
					"description": "Finish template"
				},
				"function.pdf-endpath": {
					"tokens": [
						"PDF_endpath",
						"PDFendpath"
					],
					"id": "function.pdf-endpath",
					"name": "PDF_endpath",
					"description": "End current path"
				},
				"function.pdf-fill-imageblock": {
					"tokens": [
						"PDF_fill_imageblock",
						"PDFfill_imageblock"
					],
					"id": "function.pdf-fill-imageblock",
					"name": "PDF_fill_imageblock",
					"description": "Fill image block with variable data"
				},
				"function.pdf-fill-pdfblock": {
					"tokens": [
						"PDF_fill_pdfblock",
						"PDFfill_pdfblock"
					],
					"id": "function.pdf-fill-pdfblock",
					"name": "PDF_fill_pdfblock",
					"description": "Fill PDF block with variable data"
				},
				"function.pdf-fill-stroke": {
					"tokens": [
						"PDF_fill_stroke",
						"PDFfill_stroke"
					],
					"id": "function.pdf-fill-stroke",
					"name": "PDF_fill_stroke",
					"description": "Fill and stroke path"
				},
				"function.pdf-fill-textblock": {
					"tokens": [
						"PDF_fill_textblock",
						"PDFfill_textblock"
					],
					"id": "function.pdf-fill-textblock",
					"name": "PDF_fill_textblock",
					"description": "Fill text block with variable data"
				},
				"function.pdf-fill": {
					"tokens": [
						"PDF_fill",
						"PDFfill"
					],
					"id": "function.pdf-fill",
					"name": "PDF_fill",
					"description": "Fill current path"
				},
				"function.pdf-findfont": {
					"tokens": [
						"PDF_findfont",
						"PDFfindfont"
					],
					"id": "function.pdf-findfont",
					"name": "PDF_findfont",
					"description": "Prepare font for later use [deprecated]"
				},
				"function.pdf-fit-image": {
					"tokens": [
						"PDF_fit_image",
						"PDFfit_image"
					],
					"id": "function.pdf-fit-image",
					"name": "PDF_fit_image",
					"description": "Place image or template"
				},
				"function.pdf-fit-pdi-page": {
					"tokens": [
						"PDF_fit_pdi_page",
						"PDFfit_pdi_page"
					],
					"id": "function.pdf-fit-pdi-page",
					"name": "PDF_fit_pdi_page",
					"description": "Place imported PDF page"
				},
				"function.pdf-fit-table": {
					"tokens": [
						"PDF_fit_table",
						"PDFfit_table"
					],
					"id": "function.pdf-fit-table",
					"name": "PDF_fit_table",
					"description": "Place table on page"
				},
				"function.pdf-fit-textflow": {
					"tokens": [
						"PDF_fit_textflow",
						"PDFfit_textflow"
					],
					"id": "function.pdf-fit-textflow",
					"name": "PDF_fit_textflow",
					"description": "Format textflow in rectangular area"
				},
				"function.pdf-fit-textline": {
					"tokens": [
						"PDF_fit_textline",
						"PDFfit_textline"
					],
					"id": "function.pdf-fit-textline",
					"name": "PDF_fit_textline",
					"description": "Place single line of text"
				},
				"function.pdf-get-apiname": {
					"tokens": [
						"PDF_get_apiname",
						"PDFget_apiname"
					],
					"id": "function.pdf-get-apiname",
					"name": "PDF_get_apiname",
					"description": "Get name of unsuccessfull API function"
				},
				"function.pdf-get-buffer": {
					"tokens": [
						"PDF_get_buffer",
						"PDFget_buffer"
					],
					"id": "function.pdf-get-buffer",
					"name": "PDF_get_buffer",
					"description": "Get PDF output buffer"
				},
				"function.pdf-get-errmsg": {
					"tokens": [
						"PDF_get_errmsg",
						"PDFget_errmsg"
					],
					"id": "function.pdf-get-errmsg",
					"name": "PDF_get_errmsg",
					"description": "Get error text"
				},
				"function.pdf-get-errnum": {
					"tokens": [
						"PDF_get_errnum",
						"PDFget_errnum"
					],
					"id": "function.pdf-get-errnum",
					"name": "PDF_get_errnum",
					"description": "Get error number"
				},
				"function.pdf-get-font": {
					"tokens": [
						"PDF_get_font",
						"PDFget_font"
					],
					"id": "function.pdf-get-font",
					"name": "PDF_get_font",
					"description": "Get font [deprecated]"
				},
				"function.pdf-get-fontname": {
					"tokens": [
						"PDF_get_fontname",
						"PDFget_fontname"
					],
					"id": "function.pdf-get-fontname",
					"name": "PDF_get_fontname",
					"description": "Get font name [deprecated]"
				},
				"function.pdf-get-fontsize": {
					"tokens": [
						"PDF_get_fontsize",
						"PDFget_fontsize"
					],
					"id": "function.pdf-get-fontsize",
					"name": "PDF_get_fontsize",
					"description": "Font handling [deprecated]"
				},
				"function.pdf-get-image-height": {
					"tokens": [
						"PDF_get_image_height",
						"PDFget_image_height"
					],
					"id": "function.pdf-get-image-height",
					"name": "PDF_get_image_height",
					"description": "Get image height [deprecated]"
				},
				"function.pdf-get-image-width": {
					"tokens": [
						"PDF_get_image_width",
						"PDFget_image_width"
					],
					"id": "function.pdf-get-image-width",
					"name": "PDF_get_image_width",
					"description": "Get image width [deprecated]"
				},
				"function.pdf-get-majorversion": {
					"tokens": [
						"PDF_get_majorversion",
						"PDFget_majorversion"
					],
					"id": "function.pdf-get-majorversion",
					"name": "PDF_get_majorversion",
					"description": "Get major version number [deprecated]"
				},
				"function.pdf-get-minorversion": {
					"tokens": [
						"PDF_get_minorversion",
						"PDFget_minorversion"
					],
					"id": "function.pdf-get-minorversion",
					"name": "PDF_get_minorversion",
					"description": "Get minor version number [deprecated]"
				},
				"function.pdf-get-parameter": {
					"tokens": [
						"PDF_get_parameter",
						"PDFget_parameter"
					],
					"id": "function.pdf-get-parameter",
					"name": "PDF_get_parameter",
					"description": "Get string parameter"
				},
				"function.pdf-get-pdi-parameter": {
					"tokens": [
						"PDF_get_pdi_parameter",
						"PDFget_pdi_parameter"
					],
					"id": "function.pdf-get-pdi-parameter",
					"name": "PDF_get_pdi_parameter",
					"description": "Get PDI string parameter [deprecated]"
				},
				"function.pdf-get-pdi-value": {
					"tokens": [
						"PDF_get_pdi_value",
						"PDFget_pdi_value"
					],
					"id": "function.pdf-get-pdi-value",
					"name": "PDF_get_pdi_value",
					"description": "Get PDI numerical parameter [deprecated]"
				},
				"function.pdf-get-value": {
					"tokens": [
						"PDF_get_value",
						"PDFget_value"
					],
					"id": "function.pdf-get-value",
					"name": "PDF_get_value",
					"description": "Get numerical parameter"
				},
				"function.pdf-info-font": {
					"tokens": [
						"PDF_info_font",
						"PDFinfo_font"
					],
					"id": "function.pdf-info-font",
					"name": "PDF_info_font",
					"description": "Query detailed information about a loaded font"
				},
				"function.pdf-info-matchbox": {
					"tokens": [
						"PDF_info_matchbox",
						"PDFinfo_matchbox"
					],
					"id": "function.pdf-info-matchbox",
					"name": "PDF_info_matchbox",
					"description": "Query matchbox information"
				},
				"function.pdf-info-table": {
					"tokens": [
						"PDF_info_table",
						"PDFinfo_table"
					],
					"id": "function.pdf-info-table",
					"name": "PDF_info_table",
					"description": "Retrieve table information"
				},
				"function.pdf-info-textflow": {
					"tokens": [
						"PDF_info_textflow",
						"PDFinfo_textflow"
					],
					"id": "function.pdf-info-textflow",
					"name": "PDF_info_textflow",
					"description": "Query textflow state"
				},
				"function.pdf-info-textline": {
					"tokens": [
						"PDF_info_textline",
						"PDFinfo_textline"
					],
					"id": "function.pdf-info-textline",
					"name": "PDF_info_textline",
					"description": "Perform textline formatting and query metrics"
				},
				"function.pdf-initgraphics": {
					"tokens": [
						"PDF_initgraphics",
						"PDFinitgraphics"
					],
					"id": "function.pdf-initgraphics",
					"name": "PDF_initgraphics",
					"description": "Reset graphic state"
				},
				"function.pdf-lineto": {
					"tokens": [
						"PDF_lineto",
						"PDFlineto"
					],
					"id": "function.pdf-lineto",
					"name": "PDF_lineto",
					"description": "Draw a line"
				},
				"function.pdf-load-3ddata": {
					"tokens": [
						"PDF_load_3ddata",
						"PDFload_3ddata"
					],
					"id": "function.pdf-load-3ddata",
					"name": "PDF_load_3ddata",
					"description": "Load 3D model"
				},
				"function.pdf-load-font": {
					"tokens": [
						"PDF_load_font",
						"PDFload_font"
					],
					"id": "function.pdf-load-font",
					"name": "PDF_load_font",
					"description": "Search and prepare font"
				},
				"function.pdf-load-iccprofile": {
					"tokens": [
						"PDF_load_iccprofile",
						"PDFload_iccprofile"
					],
					"id": "function.pdf-load-iccprofile",
					"name": "PDF_load_iccprofile",
					"description": "Search and prepare ICC profile"
				},
				"function.pdf-load-image": {
					"tokens": [
						"PDF_load_image",
						"PDFload_image"
					],
					"id": "function.pdf-load-image",
					"name": "PDF_load_image",
					"description": "Open image file"
				},
				"function.pdf-makespotcolor": {
					"tokens": [
						"PDF_makespotcolor",
						"PDFmakespotcolor"
					],
					"id": "function.pdf-makespotcolor",
					"name": "PDF_makespotcolor",
					"description": "Make spot color"
				},
				"function.pdf-moveto": {
					"tokens": [
						"PDF_moveto",
						"PDFmoveto"
					],
					"id": "function.pdf-moveto",
					"name": "PDF_moveto",
					"description": "Set current point"
				},
				"function.pdf-new": {
					"tokens": [
						"PDF_new",
						"PDFnew"
					],
					"id": "function.pdf-new",
					"name": "PDF_new",
					"description": "Create PDFlib object"
				},
				"function.pdf-open-ccitt": {
					"tokens": [
						"PDF_open_ccitt",
						"PDFopen_ccitt"
					],
					"id": "function.pdf-open-ccitt",
					"name": "PDF_open_ccitt",
					"description": "Open raw CCITT image [deprecated]"
				},
				"function.pdf-open-file": {
					"tokens": [
						"PDF_open_file",
						"PDFopen_file"
					],
					"id": "function.pdf-open-file",
					"name": "PDF_open_file",
					"description": "Create PDF file [deprecated]"
				},
				"function.pdf-open-gif": {
					"tokens": [
						"PDF_open_gif",
						"PDFopen_gif"
					],
					"id": "function.pdf-open-gif",
					"name": "PDF_open_gif",
					"description": "Open GIF image [deprecated]"
				},
				"function.pdf-open-image-file": {
					"tokens": [
						"PDF_open_image_file",
						"PDFopen_image_file"
					],
					"id": "function.pdf-open-image-file",
					"name": "PDF_open_image_file",
					"description": "Read image from file [deprecated]"
				},
				"function.pdf-open-image": {
					"tokens": [
						"PDF_open_image",
						"PDFopen_image"
					],
					"id": "function.pdf-open-image",
					"name": "PDF_open_image",
					"description": "Use image data [deprecated]"
				},
				"function.pdf-open-jpeg": {
					"tokens": [
						"PDF_open_jpeg",
						"PDFopen_jpeg"
					],
					"id": "function.pdf-open-jpeg",
					"name": "PDF_open_jpeg",
					"description": "Open JPEG image [deprecated]"
				},
				"function.pdf-open-memory-image": {
					"tokens": [
						"PDF_open_memory_image",
						"PDFopen_memory_image"
					],
					"id": "function.pdf-open-memory-image",
					"name": "PDF_open_memory_image",
					"description": "Open image created with PHP's image functions [not supported]"
				},
				"function.pdf-open-pdi-document": {
					"tokens": [
						"PDF_open_pdi_document",
						"PDFopen_pdi_document"
					],
					"id": "function.pdf-open-pdi-document",
					"name": "PDF_open_pdi_document",
					"description": "Prepare a pdi document"
				},
				"function.pdf-open-pdi-page": {
					"tokens": [
						"PDF_open_pdi_page",
						"PDFopen_pdi_page"
					],
					"id": "function.pdf-open-pdi-page",
					"name": "PDF_open_pdi_page",
					"description": "Prepare a page"
				},
				"function.pdf-open-pdi": {
					"tokens": [
						"PDF_open_pdi",
						"PDFopen_pdi"
					],
					"id": "function.pdf-open-pdi",
					"name": "PDF_open_pdi",
					"description": "Open PDF file [deprecated]"
				},
				"function.pdf-open-tiff": {
					"tokens": [
						"PDF_open_tiff",
						"PDFopen_tiff"
					],
					"id": "function.pdf-open-tiff",
					"name": "PDF_open_tiff",
					"description": "Open TIFF image [deprecated]"
				},
				"function.pdf-pcos-get-number": {
					"tokens": [
						"PDF_pcos_get_number",
						"PDFpcos_get_number"
					],
					"id": "function.pdf-pcos-get-number",
					"name": "PDF_pcos_get_number",
					"description": "Get value of pCOS path with type number or boolean"
				},
				"function.pdf-pcos-get-stream": {
					"tokens": [
						"PDF_pcos_get_stream",
						"PDFpcos_get_stream"
					],
					"id": "function.pdf-pcos-get-stream",
					"name": "PDF_pcos_get_stream",
					"description": "Get contents of pCOS path with type stream, fstream, or string"
				},
				"function.pdf-pcos-get-string": {
					"tokens": [
						"PDF_pcos_get_string",
						"PDFpcos_get_string"
					],
					"id": "function.pdf-pcos-get-string",
					"name": "PDF_pcos_get_string",
					"description": "Get value of pCOS path with type name, string, or boolean"
				},
				"function.pdf-place-image": {
					"tokens": [
						"PDF_place_image",
						"PDFplace_image"
					],
					"id": "function.pdf-place-image",
					"name": "PDF_place_image",
					"description": "Place image on the page [deprecated]"
				},
				"function.pdf-place-pdi-page": {
					"tokens": [
						"PDF_place_pdi_page",
						"PDFplace_pdi_page"
					],
					"id": "function.pdf-place-pdi-page",
					"name": "PDF_place_pdi_page",
					"description": "Place PDF page [deprecated]"
				},
				"function.pdf-process-pdi": {
					"tokens": [
						"PDF_process_pdi",
						"PDFprocess_pdi"
					],
					"id": "function.pdf-process-pdi",
					"name": "PDF_process_pdi",
					"description": "Process imported PDF document"
				},
				"function.pdf-rect": {
					"tokens": [
						"PDF_rect",
						"PDFrect"
					],
					"id": "function.pdf-rect",
					"name": "PDF_rect",
					"description": "Draw rectangle"
				},
				"function.pdf-restore": {
					"tokens": [
						"PDF_restore",
						"PDFrestore"
					],
					"id": "function.pdf-restore",
					"name": "PDF_restore",
					"description": "Restore graphics state"
				},
				"function.pdf-resume-page": {
					"tokens": [
						"PDF_resume_page",
						"PDFresume_page"
					],
					"id": "function.pdf-resume-page",
					"name": "PDF_resume_page",
					"description": "Resume page"
				},
				"function.pdf-rotate": {
					"tokens": [
						"PDF_rotate",
						"PDFrotate"
					],
					"id": "function.pdf-rotate",
					"name": "PDF_rotate",
					"description": "Rotate coordinate system"
				},
				"function.pdf-save": {
					"tokens": [
						"PDF_save",
						"PDFsave"
					],
					"id": "function.pdf-save",
					"name": "PDF_save",
					"description": "Save graphics state"
				},
				"function.pdf-scale": {
					"tokens": [
						"PDF_scale",
						"PDFscale"
					],
					"id": "function.pdf-scale",
					"name": "PDF_scale",
					"description": "Scale coordinate system"
				},
				"function.pdf-set-border-color": {
					"tokens": [
						"PDF_set_border_color",
						"PDFset_border_color"
					],
					"id": "function.pdf-set-border-color",
					"name": "PDF_set_border_color",
					"description": "Set border color of annotations [deprecated]"
				},
				"function.pdf-set-border-dash": {
					"tokens": [
						"PDF_set_border_dash",
						"PDFset_border_dash"
					],
					"id": "function.pdf-set-border-dash",
					"name": "PDF_set_border_dash",
					"description": "Set border dash style of annotations [deprecated]"
				},
				"function.pdf-set-border-style": {
					"tokens": [
						"PDF_set_border_style",
						"PDFset_border_style"
					],
					"id": "function.pdf-set-border-style",
					"name": "PDF_set_border_style",
					"description": "Set border style of annotations [deprecated]"
				},
				"function.pdf-set-char-spacing": {
					"tokens": [
						"PDF_set_char_spacing",
						"PDFset_char_spacing"
					],
					"id": "function.pdf-set-char-spacing",
					"name": "PDF_set_char_spacing",
					"description": "Set character spacing [deprecated]"
				},
				"function.pdf-set-duration": {
					"tokens": [
						"PDF_set_duration",
						"PDFset_duration"
					],
					"id": "function.pdf-set-duration",
					"name": "PDF_set_duration",
					"description": "Set duration between pages [deprecated]"
				},
				"function.pdf-set-gstate": {
					"tokens": [
						"PDF_set_gstate",
						"PDFset_gstate"
					],
					"id": "function.pdf-set-gstate",
					"name": "PDF_set_gstate",
					"description": "Activate graphics state object"
				},
				"function.pdf-set-horiz-scaling": {
					"tokens": [
						"PDF_set_horiz_scaling",
						"PDFset_horiz_scaling"
					],
					"id": "function.pdf-set-horiz-scaling",
					"name": "PDF_set_horiz_scaling",
					"description": "Set horizontal text scaling [deprecated]"
				},
				"function.pdf-set-info-author": {
					"tokens": [
						"PDF_set_info_author",
						"PDFset_info_author"
					],
					"id": "function.pdf-set-info-author",
					"name": "PDF_set_info_author",
					"description": "Fill the author document info field [deprecated]"
				},
				"function.pdf-set-info-creator": {
					"tokens": [
						"PDF_set_info_creator",
						"PDFset_info_creator"
					],
					"id": "function.pdf-set-info-creator",
					"name": "PDF_set_info_creator",
					"description": "Fill the creator document info field [deprecated]"
				},
				"function.pdf-set-info-keywords": {
					"tokens": [
						"PDF_set_info_keywords",
						"PDFset_info_keywords"
					],
					"id": "function.pdf-set-info-keywords",
					"name": "PDF_set_info_keywords",
					"description": "Fill the keywords document info field [deprecated]"
				},
				"function.pdf-set-info-subject": {
					"tokens": [
						"PDF_set_info_subject",
						"PDFset_info_subject"
					],
					"id": "function.pdf-set-info-subject",
					"name": "PDF_set_info_subject",
					"description": "Fill the subject document info field [deprecated]"
				},
				"function.pdf-set-info-title": {
					"tokens": [
						"PDF_set_info_title",
						"PDFset_info_title"
					],
					"id": "function.pdf-set-info-title",
					"name": "PDF_set_info_title",
					"description": "Fill the title document info field [deprecated]"
				},
				"function.pdf-set-info": {
					"tokens": [
						"PDF_set_info",
						"PDFset_info"
					],
					"id": "function.pdf-set-info",
					"name": "PDF_set_info",
					"description": "Fill document info field"
				},
				"function.pdf-set-layer-dependency": {
					"tokens": [
						"PDF_set_layer_dependency",
						"PDFset_layer_dependency"
					],
					"id": "function.pdf-set-layer-dependency",
					"name": "PDF_set_layer_dependency",
					"description": "Define relationships among layers"
				},
				"function.pdf-set-leading": {
					"tokens": [
						"PDF_set_leading",
						"PDFset_leading"
					],
					"id": "function.pdf-set-leading",
					"name": "PDF_set_leading",
					"description": "Set distance between text lines [deprecated]"
				},
				"function.pdf-set-parameter": {
					"tokens": [
						"PDF_set_parameter",
						"PDFset_parameter"
					],
					"id": "function.pdf-set-parameter",
					"name": "PDF_set_parameter",
					"description": "Set string parameter"
				},
				"function.pdf-set-text-matrix": {
					"tokens": [
						"PDF_set_text_matrix",
						"PDFset_text_matrix"
					],
					"id": "function.pdf-set-text-matrix",
					"name": "PDF_set_text_matrix",
					"description": "Set text matrix [deprecated]"
				},
				"function.pdf-set-text-pos": {
					"tokens": [
						"PDF_set_text_pos",
						"PDFset_text_pos"
					],
					"id": "function.pdf-set-text-pos",
					"name": "PDF_set_text_pos",
					"description": "Set text position"
				},
				"function.pdf-set-text-rendering": {
					"tokens": [
						"PDF_set_text_rendering",
						"PDFset_text_rendering"
					],
					"id": "function.pdf-set-text-rendering",
					"name": "PDF_set_text_rendering",
					"description": "Determine text rendering [deprecated]"
				},
				"function.pdf-set-text-rise": {
					"tokens": [
						"PDF_set_text_rise",
						"PDFset_text_rise"
					],
					"id": "function.pdf-set-text-rise",
					"name": "PDF_set_text_rise",
					"description": "Set text rise [deprecated]"
				},
				"function.pdf-set-value": {
					"tokens": [
						"PDF_set_value",
						"PDFset_value"
					],
					"id": "function.pdf-set-value",
					"name": "PDF_set_value",
					"description": "Set numerical parameter"
				},
				"function.pdf-set-word-spacing": {
					"tokens": [
						"PDF_set_word_spacing",
						"PDFset_word_spacing"
					],
					"id": "function.pdf-set-word-spacing",
					"name": "PDF_set_word_spacing",
					"description": "Set spacing between words [deprecated]"
				},
				"function.pdf-setcolor": {
					"tokens": [
						"PDF_setcolor",
						"PDFsetcolor"
					],
					"id": "function.pdf-setcolor",
					"name": "PDF_setcolor",
					"description": "Set fill and stroke color"
				},
				"function.pdf-setdash": {
					"tokens": [
						"PDF_setdash",
						"PDFsetdash"
					],
					"id": "function.pdf-setdash",
					"name": "PDF_setdash",
					"description": "Set simple dash pattern"
				},
				"function.pdf-setdashpattern": {
					"tokens": [
						"PDF_setdashpattern",
						"PDFsetdashpattern"
					],
					"id": "function.pdf-setdashpattern",
					"name": "PDF_setdashpattern",
					"description": "Set dash pattern"
				},
				"function.pdf-setflat": {
					"tokens": [
						"PDF_setflat",
						"PDFsetflat"
					],
					"id": "function.pdf-setflat",
					"name": "PDF_setflat",
					"description": "Set flatness"
				},
				"function.pdf-setfont": {
					"tokens": [
						"PDF_setfont",
						"PDFsetfont"
					],
					"id": "function.pdf-setfont",
					"name": "PDF_setfont",
					"description": "Set font"
				},
				"function.pdf-setgray-fill": {
					"tokens": [
						"PDF_setgray_fill",
						"PDFsetgray_fill"
					],
					"id": "function.pdf-setgray-fill",
					"name": "PDF_setgray_fill",
					"description": "Set fill color to gray [deprecated]"
				},
				"function.pdf-setgray-stroke": {
					"tokens": [
						"PDF_setgray_stroke",
						"PDFsetgray_stroke"
					],
					"id": "function.pdf-setgray-stroke",
					"name": "PDF_setgray_stroke",
					"description": "Set stroke color to gray [deprecated]"
				},
				"function.pdf-setgray": {
					"tokens": [
						"PDF_setgray",
						"PDFsetgray"
					],
					"id": "function.pdf-setgray",
					"name": "PDF_setgray",
					"description": "Set color to gray [deprecated]"
				},
				"function.pdf-setlinecap": {
					"tokens": [
						"PDF_setlinecap",
						"PDFsetlinecap"
					],
					"id": "function.pdf-setlinecap",
					"name": "PDF_setlinecap",
					"description": "Set linecap parameter"
				},
				"function.pdf-setlinejoin": {
					"tokens": [
						"PDF_setlinejoin",
						"PDFsetlinejoin"
					],
					"id": "function.pdf-setlinejoin",
					"name": "PDF_setlinejoin",
					"description": "Set linejoin parameter"
				},
				"function.pdf-setlinewidth": {
					"tokens": [
						"PDF_setlinewidth",
						"PDFsetlinewidth"
					],
					"id": "function.pdf-setlinewidth",
					"name": "PDF_setlinewidth",
					"description": "Set line width"
				},
				"function.pdf-setmatrix": {
					"tokens": [
						"PDF_setmatrix",
						"PDFsetmatrix"
					],
					"id": "function.pdf-setmatrix",
					"name": "PDF_setmatrix",
					"description": "Set current transformation matrix"
				},
				"function.pdf-setmiterlimit": {
					"tokens": [
						"PDF_setmiterlimit",
						"PDFsetmiterlimit"
					],
					"id": "function.pdf-setmiterlimit",
					"name": "PDF_setmiterlimit",
					"description": "Set miter limit"
				},
				"function.pdf-setpolydash": {
					"tokens": [
						"PDF_setpolydash",
						"PDFsetpolydash"
					],
					"id": "function.pdf-setpolydash",
					"name": "PDF_setpolydash",
					"description": "Set complicated dash pattern [deprecated]"
				},
				"function.pdf-setrgbcolor-fill": {
					"tokens": [
						"PDF_setrgbcolor_fill",
						"PDFsetrgbcolor_fill"
					],
					"id": "function.pdf-setrgbcolor-fill",
					"name": "PDF_setrgbcolor_fill",
					"description": "Set fill rgb color values [deprecated]"
				},
				"function.pdf-setrgbcolor-stroke": {
					"tokens": [
						"PDF_setrgbcolor_stroke",
						"PDFsetrgbcolor_stroke"
					],
					"id": "function.pdf-setrgbcolor-stroke",
					"name": "PDF_setrgbcolor_stroke",
					"description": "Set stroke rgb color values [deprecated]"
				},
				"function.pdf-setrgbcolor": {
					"tokens": [
						"PDF_setrgbcolor",
						"PDFsetrgbcolor"
					],
					"id": "function.pdf-setrgbcolor",
					"name": "PDF_setrgbcolor",
					"description": "Set fill and stroke rgb color values [deprecated]"
				},
				"function.pdf-shading-pattern": {
					"tokens": [
						"PDF_shading_pattern",
						"PDFshading_pattern"
					],
					"id": "function.pdf-shading-pattern",
					"name": "PDF_shading_pattern",
					"description": "Define shading pattern"
				},
				"function.pdf-shading": {
					"tokens": [
						"PDF_shading",
						"PDFshading"
					],
					"id": "function.pdf-shading",
					"name": "PDF_shading",
					"description": "Define blend"
				},
				"function.pdf-shfill": {
					"tokens": [
						"PDF_shfill",
						"PDFshfill"
					],
					"id": "function.pdf-shfill",
					"name": "PDF_shfill",
					"description": "Fill area with shading"
				},
				"function.pdf-show-boxed": {
					"tokens": [
						"PDF_show_boxed",
						"PDFshow_boxed"
					],
					"id": "function.pdf-show-boxed",
					"name": "PDF_show_boxed",
					"description": "Output text in a box [deprecated]"
				},
				"function.pdf-show-xy": {
					"tokens": [
						"PDF_show_xy",
						"PDFshow_xy"
					],
					"id": "function.pdf-show-xy",
					"name": "PDF_show_xy",
					"description": "Output text at given position"
				},
				"function.pdf-show": {
					"tokens": [
						"PDF_show",
						"PDFshow"
					],
					"id": "function.pdf-show",
					"name": "PDF_show",
					"description": "Output text at current position"
				},
				"function.pdf-skew": {
					"tokens": [
						"PDF_skew",
						"PDFskew"
					],
					"id": "function.pdf-skew",
					"name": "PDF_skew",
					"description": "Skew the coordinate system"
				},
				"function.pdf-stringwidth": {
					"tokens": [
						"PDF_stringwidth",
						"PDFstringwidth"
					],
					"id": "function.pdf-stringwidth",
					"name": "PDF_stringwidth",
					"description": "Return width of text"
				},
				"function.pdf-stroke": {
					"tokens": [
						"PDF_stroke",
						"PDFstroke"
					],
					"id": "function.pdf-stroke",
					"name": "PDF_stroke",
					"description": "Stroke path"
				},
				"function.pdf-suspend-page": {
					"tokens": [
						"PDF_suspend_page",
						"PDFsuspend_page"
					],
					"id": "function.pdf-suspend-page",
					"name": "PDF_suspend_page",
					"description": "Suspend page"
				},
				"function.pdf-translate": {
					"tokens": [
						"PDF_translate",
						"PDFtranslate"
					],
					"id": "function.pdf-translate",
					"name": "PDF_translate",
					"description": "Set origin of coordinate system"
				},
				"function.pdf-utf16-to-utf8": {
					"tokens": [
						"PDF_utf16_to_utf8",
						"PDFutf16_to_utf8"
					],
					"id": "function.pdf-utf16-to-utf8",
					"name": "PDF_utf16_to_utf8",
					"description": "Convert string from UTF-16 to UTF-8"
				},
				"function.pdf-utf32-to-utf16": {
					"tokens": [
						"PDF_utf32_to_utf16",
						"PDFutf32_to_utf16"
					],
					"id": "function.pdf-utf32-to-utf16",
					"name": "PDF_utf32_to_utf16",
					"description": "Convert string from UTF-32 to UTF-16"
				},
				"function.pdf-utf8-to-utf16": {
					"tokens": [
						"PDF_utf8_to_utf16",
						"PDFutf8_to_utf16"
					],
					"id": "function.pdf-utf8-to-utf16",
					"name": "PDF_utf8_to_utf16",
					"description": "Convert string from UTF-8 to UTF-16"
				},
				"function.ps-add-bookmark": {
					"tokens": [
						"ps_add_bookmark",
						"psadd_bookmark"
					],
					"id": "function.ps-add-bookmark",
					"name": "ps_add_bookmark",
					"description": "Add bookmark to current page"
				},
				"function.ps-add-launchlink": {
					"tokens": [
						"ps_add_launchlink",
						"psadd_launchlink"
					],
					"id": "function.ps-add-launchlink",
					"name": "ps_add_launchlink",
					"description": "Adds link which launches file"
				},
				"function.ps-add-locallink": {
					"tokens": [
						"ps_add_locallink",
						"psadd_locallink"
					],
					"id": "function.ps-add-locallink",
					"name": "ps_add_locallink",
					"description": "Adds link to a page in the same document"
				},
				"function.ps-add-note": {
					"tokens": [
						"ps_add_note",
						"psadd_note"
					],
					"id": "function.ps-add-note",
					"name": "ps_add_note",
					"description": "Adds note to current page"
				},
				"function.ps-add-pdflink": {
					"tokens": [
						"ps_add_pdflink",
						"psadd_pdflink"
					],
					"id": "function.ps-add-pdflink",
					"name": "ps_add_pdflink",
					"description": "Adds link to a page in a second pdf document"
				},
				"function.ps-add-weblink": {
					"tokens": [
						"ps_add_weblink",
						"psadd_weblink"
					],
					"id": "function.ps-add-weblink",
					"name": "ps_add_weblink",
					"description": "Adds link to a web location"
				},
				"function.ps-arc": {
					"tokens": [
						"ps_arc",
						"psarc"
					],
					"id": "function.ps-arc",
					"name": "ps_arc",
					"description": "Draws an arc counterclockwise"
				},
				"function.ps-arcn": {
					"tokens": [
						"ps_arcn",
						"psarcn"
					],
					"id": "function.ps-arcn",
					"name": "ps_arcn",
					"description": "Draws an arc clockwise"
				},
				"function.ps-begin-page": {
					"tokens": [
						"ps_begin_page",
						"psbegin_page"
					],
					"id": "function.ps-begin-page",
					"name": "ps_begin_page",
					"description": "Start a new page"
				},
				"function.ps-begin-pattern": {
					"tokens": [
						"ps_begin_pattern",
						"psbegin_pattern"
					],
					"id": "function.ps-begin-pattern",
					"name": "ps_begin_pattern",
					"description": "Start a new pattern"
				},
				"function.ps-begin-template": {
					"tokens": [
						"ps_begin_template",
						"psbegin_template"
					],
					"id": "function.ps-begin-template",
					"name": "ps_begin_template",
					"description": "Start a new template"
				},
				"function.ps-circle": {
					"tokens": [
						"ps_circle",
						"pscircle"
					],
					"id": "function.ps-circle",
					"name": "ps_circle",
					"description": "Draws a circle"
				},
				"function.ps-clip": {
					"tokens": [
						"ps_clip",
						"psclip"
					],
					"id": "function.ps-clip",
					"name": "ps_clip",
					"description": "Clips drawing to current path"
				},
				"function.ps-close-image": {
					"tokens": [
						"ps_close_image",
						"psclose_image"
					],
					"id": "function.ps-close-image",
					"name": "ps_close_image",
					"description": "Closes image and frees memory"
				},
				"function.ps-close": {
					"tokens": [
						"ps_close",
						"psclose"
					],
					"id": "function.ps-close",
					"name": "ps_close",
					"description": "Closes a PostScript document"
				},
				"function.ps-closepath-stroke": {
					"tokens": [
						"ps_closepath_stroke",
						"psclosepath_stroke"
					],
					"id": "function.ps-closepath-stroke",
					"name": "ps_closepath_stroke",
					"description": "Closes and strokes path"
				},
				"function.ps-closepath": {
					"tokens": [
						"ps_closepath",
						"psclosepath"
					],
					"id": "function.ps-closepath",
					"name": "ps_closepath",
					"description": "Closes path"
				},
				"function.ps-continue-text": {
					"tokens": [
						"ps_continue_text",
						"pscontinue_text"
					],
					"id": "function.ps-continue-text",
					"name": "ps_continue_text",
					"description": "Continue text in next line"
				},
				"function.ps-curveto": {
					"tokens": [
						"ps_curveto",
						"pscurveto"
					],
					"id": "function.ps-curveto",
					"name": "ps_curveto",
					"description": "Draws a curve"
				},
				"function.ps-delete": {
					"tokens": [
						"ps_delete",
						"psdelete"
					],
					"id": "function.ps-delete",
					"name": "ps_delete",
					"description": "Deletes all resources of a PostScript document"
				},
				"function.ps-end-page": {
					"tokens": [
						"ps_end_page",
						"psend_page"
					],
					"id": "function.ps-end-page",
					"name": "ps_end_page",
					"description": "End a page"
				},
				"function.ps-end-pattern": {
					"tokens": [
						"ps_end_pattern",
						"psend_pattern"
					],
					"id": "function.ps-end-pattern",
					"name": "ps_end_pattern",
					"description": "End a pattern"
				},
				"function.ps-end-template": {
					"tokens": [
						"ps_end_template",
						"psend_template"
					],
					"id": "function.ps-end-template",
					"name": "ps_end_template",
					"description": "End a template"
				},
				"function.ps-fill-stroke": {
					"tokens": [
						"ps_fill_stroke",
						"psfill_stroke"
					],
					"id": "function.ps-fill-stroke",
					"name": "ps_fill_stroke",
					"description": "Fills and strokes the current path"
				},
				"function.ps-fill": {
					"tokens": [
						"ps_fill",
						"psfill"
					],
					"id": "function.ps-fill",
					"name": "ps_fill",
					"description": "Fills the current path"
				},
				"function.ps-findfont": {
					"tokens": [
						"ps_findfont",
						"psfindfont"
					],
					"id": "function.ps-findfont",
					"name": "ps_findfont",
					"description": "Loads a font"
				},
				"function.ps-get-buffer": {
					"tokens": [
						"ps_get_buffer",
						"psget_buffer"
					],
					"id": "function.ps-get-buffer",
					"name": "ps_get_buffer",
					"description": "Fetches the full buffer containig the generated PS data"
				},
				"function.ps-get-parameter": {
					"tokens": [
						"ps_get_parameter",
						"psget_parameter"
					],
					"id": "function.ps-get-parameter",
					"name": "ps_get_parameter",
					"description": "Gets certain parameters"
				},
				"function.ps-get-value": {
					"tokens": [
						"ps_get_value",
						"psget_value"
					],
					"id": "function.ps-get-value",
					"name": "ps_get_value",
					"description": "Gets certain values"
				},
				"function.ps-hyphenate": {
					"tokens": [
						"ps_hyphenate",
						"pshyphenate"
					],
					"id": "function.ps-hyphenate",
					"name": "ps_hyphenate",
					"description": "Hyphenates a word"
				},
				"function.ps-include-file": {
					"tokens": [
						"ps_include_file",
						"psinclude_file"
					],
					"id": "function.ps-include-file",
					"name": "ps_include_file",
					"description": "Reads an external file with raw PostScript code"
				},
				"function.ps-lineto": {
					"tokens": [
						"ps_lineto",
						"pslineto"
					],
					"id": "function.ps-lineto",
					"name": "ps_lineto",
					"description": "Draws a line"
				},
				"function.ps-makespotcolor": {
					"tokens": [
						"ps_makespotcolor",
						"psmakespotcolor"
					],
					"id": "function.ps-makespotcolor",
					"name": "ps_makespotcolor",
					"description": "Create spot color"
				},
				"function.ps-moveto": {
					"tokens": [
						"ps_moveto",
						"psmoveto"
					],
					"id": "function.ps-moveto",
					"name": "ps_moveto",
					"description": "Sets current point"
				},
				"function.ps-new": {
					"tokens": [
						"ps_new",
						"psnew"
					],
					"id": "function.ps-new",
					"name": "ps_new",
					"description": "Creates a new PostScript document object"
				},
				"function.ps-open-file": {
					"tokens": [
						"ps_open_file",
						"psopen_file"
					],
					"id": "function.ps-open-file",
					"name": "ps_open_file",
					"description": "Opens a file for output"
				},
				"function.ps-open-image-file": {
					"tokens": [
						"ps_open_image_file",
						"psopen_image_file"
					],
					"id": "function.ps-open-image-file",
					"name": "ps_open_image_file",
					"description": "Opens image from file"
				},
				"function.ps-open-image": {
					"tokens": [
						"ps_open_image",
						"psopen_image"
					],
					"id": "function.ps-open-image",
					"name": "ps_open_image",
					"description": "Reads an image for later placement"
				},
				"function.ps-open-memory-image": {
					"tokens": [
						"ps_open_memory_image",
						"psopen_memory_image"
					],
					"id": "function.ps-open-memory-image",
					"name": "ps_open_memory_image",
					"description": "Takes an GD image and returns an image for placement in a PS document"
				},
				"function.ps-place-image": {
					"tokens": [
						"ps_place_image",
						"psplace_image"
					],
					"id": "function.ps-place-image",
					"name": "ps_place_image",
					"description": "Places image on the page"
				},
				"function.ps-rect": {
					"tokens": [
						"ps_rect",
						"psrect"
					],
					"id": "function.ps-rect",
					"name": "ps_rect",
					"description": "Draws a rectangle"
				},
				"function.ps-restore": {
					"tokens": [
						"ps_restore",
						"psrestore"
					],
					"id": "function.ps-restore",
					"name": "ps_restore",
					"description": "Restore previously save context"
				},
				"function.ps-rotate": {
					"tokens": [
						"ps_rotate",
						"psrotate"
					],
					"id": "function.ps-rotate",
					"name": "ps_rotate",
					"description": "Sets rotation factor"
				},
				"function.ps-save": {
					"tokens": [
						"ps_save",
						"pssave"
					],
					"id": "function.ps-save",
					"name": "ps_save",
					"description": "Save current context"
				},
				"function.ps-scale": {
					"tokens": [
						"ps_scale",
						"psscale"
					],
					"id": "function.ps-scale",
					"name": "ps_scale",
					"description": "Sets scaling factor"
				},
				"function.ps-set-border-color": {
					"tokens": [
						"ps_set_border_color",
						"psset_border_color"
					],
					"id": "function.ps-set-border-color",
					"name": "ps_set_border_color",
					"description": "Sets color of border for annotations"
				},
				"function.ps-set-border-dash": {
					"tokens": [
						"ps_set_border_dash",
						"psset_border_dash"
					],
					"id": "function.ps-set-border-dash",
					"name": "ps_set_border_dash",
					"description": "Sets length of dashes for border of annotations"
				},
				"function.ps-set-border-style": {
					"tokens": [
						"ps_set_border_style",
						"psset_border_style"
					],
					"id": "function.ps-set-border-style",
					"name": "ps_set_border_style",
					"description": "Sets border style of annotations"
				},
				"function.ps-set-info": {
					"tokens": [
						"ps_set_info",
						"psset_info"
					],
					"id": "function.ps-set-info",
					"name": "ps_set_info",
					"description": "Sets information fields of document"
				},
				"function.ps-set-parameter": {
					"tokens": [
						"ps_set_parameter",
						"psset_parameter"
					],
					"id": "function.ps-set-parameter",
					"name": "ps_set_parameter",
					"description": "Sets certain parameters"
				},
				"function.ps-set-text-pos": {
					"tokens": [
						"ps_set_text_pos",
						"psset_text_pos"
					],
					"id": "function.ps-set-text-pos",
					"name": "ps_set_text_pos",
					"description": "Sets position for text output"
				},
				"function.ps-set-value": {
					"tokens": [
						"ps_set_value",
						"psset_value"
					],
					"id": "function.ps-set-value",
					"name": "ps_set_value",
					"description": "Sets certain values"
				},
				"function.ps-setcolor": {
					"tokens": [
						"ps_setcolor",
						"pssetcolor"
					],
					"id": "function.ps-setcolor",
					"name": "ps_setcolor",
					"description": "Sets current color"
				},
				"function.ps-setdash": {
					"tokens": [
						"ps_setdash",
						"pssetdash"
					],
					"id": "function.ps-setdash",
					"name": "ps_setdash",
					"description": "Sets appearance of a dashed line"
				},
				"function.ps-setflat": {
					"tokens": [
						"ps_setflat",
						"pssetflat"
					],
					"id": "function.ps-setflat",
					"name": "ps_setflat",
					"description": "Sets flatness"
				},
				"function.ps-setfont": {
					"tokens": [
						"ps_setfont",
						"pssetfont"
					],
					"id": "function.ps-setfont",
					"name": "ps_setfont",
					"description": "Sets font to use for following output"
				},
				"function.ps-setgray": {
					"tokens": [
						"ps_setgray",
						"pssetgray"
					],
					"id": "function.ps-setgray",
					"name": "ps_setgray",
					"description": "Sets gray value"
				},
				"function.ps-setlinecap": {
					"tokens": [
						"ps_setlinecap",
						"pssetlinecap"
					],
					"id": "function.ps-setlinecap",
					"name": "ps_setlinecap",
					"description": "Sets appearance of line ends"
				},
				"function.ps-setlinejoin": {
					"tokens": [
						"ps_setlinejoin",
						"pssetlinejoin"
					],
					"id": "function.ps-setlinejoin",
					"name": "ps_setlinejoin",
					"description": "Sets how contected lines are joined"
				},
				"function.ps-setlinewidth": {
					"tokens": [
						"ps_setlinewidth",
						"pssetlinewidth"
					],
					"id": "function.ps-setlinewidth",
					"name": "ps_setlinewidth",
					"description": "Sets width of a line"
				},
				"function.ps-setmiterlimit": {
					"tokens": [
						"ps_setmiterlimit",
						"pssetmiterlimit"
					],
					"id": "function.ps-setmiterlimit",
					"name": "ps_setmiterlimit",
					"description": "Sets the miter limit"
				},
				"function.ps-setoverprintmode": {
					"tokens": [
						"ps_setoverprintmode",
						"pssetoverprintmode"
					],
					"id": "function.ps-setoverprintmode",
					"name": "ps_setoverprintmode",
					"description": "Sets overprint mode"
				},
				"function.ps-setpolydash": {
					"tokens": [
						"ps_setpolydash",
						"pssetpolydash"
					],
					"id": "function.ps-setpolydash",
					"name": "ps_setpolydash",
					"description": "Sets appearance of a dashed line"
				},
				"function.ps-shading-pattern": {
					"tokens": [
						"ps_shading_pattern",
						"psshading_pattern"
					],
					"id": "function.ps-shading-pattern",
					"name": "ps_shading_pattern",
					"description": "Creates a pattern based on a shading"
				},
				"function.ps-shading": {
					"tokens": [
						"ps_shading",
						"psshading"
					],
					"id": "function.ps-shading",
					"name": "ps_shading",
					"description": "Creates a shading for later use"
				},
				"function.ps-shfill": {
					"tokens": [
						"ps_shfill",
						"psshfill"
					],
					"id": "function.ps-shfill",
					"name": "ps_shfill",
					"description": "Fills an area with a shading"
				},
				"function.ps-show-boxed": {
					"tokens": [
						"ps_show_boxed",
						"psshow_boxed"
					],
					"id": "function.ps-show-boxed",
					"name": "ps_show_boxed",
					"description": "Output text in a box"
				},
				"function.ps-show-xy2": {
					"tokens": [
						"ps_show_xy2",
						"psshow_xy2"
					],
					"id": "function.ps-show-xy2",
					"name": "ps_show_xy2",
					"description": "Output text at position"
				},
				"function.ps-show-xy": {
					"tokens": [
						"ps_show_xy",
						"psshow_xy"
					],
					"id": "function.ps-show-xy",
					"name": "ps_show_xy",
					"description": "Output text at given position"
				},
				"function.ps-show2": {
					"tokens": [
						"ps_show2",
						"psshow2"
					],
					"id": "function.ps-show2",
					"name": "ps_show2",
					"description": "Output a text at current position"
				},
				"function.ps-show": {
					"tokens": [
						"ps_show",
						"psshow"
					],
					"id": "function.ps-show",
					"name": "ps_show",
					"description": "Output text"
				},
				"function.ps-string-geometry": {
					"tokens": [
						"ps_string_geometry",
						"psstring_geometry"
					],
					"id": "function.ps-string-geometry",
					"name": "ps_string_geometry",
					"description": "Gets geometry of a string"
				},
				"function.ps-stringwidth": {
					"tokens": [
						"ps_stringwidth",
						"psstringwidth"
					],
					"id": "function.ps-stringwidth",
					"name": "ps_stringwidth",
					"description": "Gets width of a string"
				},
				"function.ps-stroke": {
					"tokens": [
						"ps_stroke",
						"psstroke"
					],
					"id": "function.ps-stroke",
					"name": "ps_stroke",
					"description": "Draws the current path"
				},
				"function.ps-symbol-name": {
					"tokens": [
						"ps_symbol_name",
						"pssymbol_name"
					],
					"id": "function.ps-symbol-name",
					"name": "ps_symbol_name",
					"description": "Gets name of a glyph"
				},
				"function.ps-symbol-width": {
					"tokens": [
						"ps_symbol_width",
						"pssymbol_width"
					],
					"id": "function.ps-symbol-width",
					"name": "ps_symbol_width",
					"description": "Gets width of a glyph"
				},
				"function.ps-symbol": {
					"tokens": [
						"ps_symbol",
						"pssymbol"
					],
					"id": "function.ps-symbol",
					"name": "ps_symbol",
					"description": "Output a glyph"
				},
				"function.ps-translate": {
					"tokens": [
						"ps_translate",
						"pstranslate"
					],
					"id": "function.ps-translate",
					"name": "ps_translate",
					"description": "Sets translation"
				},
				"function.rpm-close": {
					"tokens": [
						"rpm_close",
						"rpmclose"
					],
					"id": "function.rpm-close",
					"name": "rpm_close",
					"description": "Closes an RPM file"
				},
				"function.rpm-get-tag": {
					"tokens": [
						"rpm_get_tag",
						"rpmget_tag"
					],
					"id": "function.rpm-get-tag",
					"name": "rpm_get_tag",
					"description": "Retrieves a header tag from an RPM file"
				},
				"function.rpm-is-valid": {
					"tokens": [
						"rpm_is_valid",
						"rpmis_valid"
					],
					"id": "function.rpm-is-valid",
					"name": "rpm_is_valid",
					"description": "Tests a filename for validity as an RPM file"
				},
				"function.rpm-open": {
					"tokens": [
						"rpm_open",
						"rpmopen"
					],
					"id": "function.rpm-open",
					"name": "rpm_open",
					"description": "Opens an RPM file"
				},
				"function.rpm-version": {
					"tokens": [
						"rpm_version",
						"rpmversion"
					],
					"id": "function.rpm-version",
					"name": "rpm_version",
					"description": "Returns a string representing the current version of the\n   rpmreader extension"
				},
				"function.eio-busy": {
					"tokens": [
						"eio_busy",
						"eiobusy"
					],
					"id": "function.eio-busy",
					"name": "eio_busy",
					"description": "Artificially increase load. Could be useful in tests,\n  benchmarking."
				},
				"function.eio-cancel": {
					"tokens": [
						"eio_cancel",
						"eiocancel"
					],
					"id": "function.eio-cancel",
					"name": "eio_cancel",
					"description": "Cancels a request"
				},
				"function.eio-chmod": {
					"tokens": [
						"eio_chmod",
						"eiochmod"
					],
					"id": "function.eio-chmod",
					"name": "eio_chmod",
					"description": "Change file/direcrory permissions."
				},
				"function.eio-chown": {
					"tokens": [
						"eio_chown",
						"eiochown"
					],
					"id": "function.eio-chown",
					"name": "eio_chown",
					"description": "Change file/direcrory permissions."
				},
				"function.eio-close": {
					"tokens": [
						"eio_close",
						"eioclose"
					],
					"id": "function.eio-close",
					"name": "eio_close",
					"description": "Close file"
				},
				"function.eio-custom": {
					"tokens": [
						"eio_custom",
						"eiocustom"
					],
					"id": "function.eio-custom",
					"name": "eio_custom",
					"description": "Execute custom request like any other eio_* call."
				},
				"function.eio-dup2": {
					"tokens": [
						"eio_dup2",
						"eiodup2"
					],
					"id": "function.eio-dup2",
					"name": "eio_dup2",
					"description": "Duplicate a file descriptor"
				},
				"function.eio-event-loop": {
					"tokens": [
						"eio_event_loop",
						"eioevent_loop"
					],
					"id": "function.eio-event-loop",
					"name": "eio_event_loop",
					"description": "Polls libeio until all requests proceeded"
				},
				"function.eio-fallocate": {
					"tokens": [
						"eio_fallocate",
						"eiofallocate"
					],
					"id": "function.eio-fallocate",
					"name": "eio_fallocate",
					"description": "Allows the caller to directly manipulate the allocated disk\n  space for a file"
				},
				"function.eio-fchmod": {
					"tokens": [
						"eio_fchmod",
						"eiofchmod"
					],
					"id": "function.eio-fchmod",
					"name": "eio_fchmod",
					"description": "Change file permissions."
				},
				"function.eio-fchown": {
					"tokens": [
						"eio_fchown",
						"eiofchown"
					],
					"id": "function.eio-fchown",
					"name": "eio_fchown",
					"description": "Change file ownership"
				},
				"function.eio-fdatasync": {
					"tokens": [
						"eio_fdatasync",
						"eiofdatasync"
					],
					"id": "function.eio-fdatasync",
					"name": "eio_fdatasync",
					"description": "Synchronize a file's in-core state with storage device."
				},
				"function.eio-fstat": {
					"tokens": [
						"eio_fstat",
						"eiofstat"
					],
					"id": "function.eio-fstat",
					"name": "eio_fstat",
					"description": "Get file status"
				},
				"function.eio-fstatvfs": {
					"tokens": [
						"eio_fstatvfs",
						"eiofstatvfs"
					],
					"id": "function.eio-fstatvfs",
					"name": "eio_fstatvfs",
					"description": "Get file system statistics"
				},
				"function.eio-fsync": {
					"tokens": [
						"eio_fsync",
						"eiofsync"
					],
					"id": "function.eio-fsync",
					"name": "eio_fsync",
					"description": "Synchronize a file's in-core state with storage device"
				},
				"function.eio-ftruncate": {
					"tokens": [
						"eio_ftruncate",
						"eioftruncate"
					],
					"id": "function.eio-ftruncate",
					"name": "eio_ftruncate",
					"description": "Truncate a file"
				},
				"function.eio-futime": {
					"tokens": [
						"eio_futime",
						"eiofutime"
					],
					"id": "function.eio-futime",
					"name": "eio_futime",
					"description": "Change file last access and modification times"
				},
				"function.eio-get-event-stream": {
					"tokens": [
						"eio_get_event_stream",
						"eioget_event_stream"
					],
					"id": "function.eio-get-event-stream",
					"name": "eio_get_event_stream",
					"description": "Get stream representing a variable used in internal communications with libeio."
				},
				"function.eio-get-last-error": {
					"tokens": [
						"eio_get_last_error",
						"eioget_last_error"
					],
					"id": "function.eio-get-last-error",
					"name": "eio_get_last_error",
					"description": "Returns string describing the last error associated with a request resource"
				},
				"function.eio-grp-add": {
					"tokens": [
						"eio_grp_add",
						"eiogrp_add"
					],
					"id": "function.eio-grp-add",
					"name": "eio_grp_add",
					"description": "Adds a request to the request group."
				},
				"function.eio-grp-cancel": {
					"tokens": [
						"eio_grp_cancel",
						"eiogrp_cancel"
					],
					"id": "function.eio-grp-cancel",
					"name": "eio_grp_cancel",
					"description": "Cancels a request group"
				},
				"function.eio-grp-limit": {
					"tokens": [
						"eio_grp_limit",
						"eiogrp_limit"
					],
					"id": "function.eio-grp-limit",
					"name": "eio_grp_limit",
					"description": "Set group limit"
				},
				"function.eio-grp": {
					"tokens": [
						"eio_grp",
						"eiogrp"
					],
					"id": "function.eio-grp",
					"name": "eio_grp",
					"description": "Creates a request group."
				},
				"function.eio-init": {
					"tokens": [
						"eio_init",
						"eioinit"
					],
					"id": "function.eio-init",
					"name": "eio_init",
					"description": "(Re-)initialize Eio"
				},
				"function.eio-link": {
					"tokens": [
						"eio_link",
						"eiolink"
					],
					"id": "function.eio-link",
					"name": "eio_link",
					"description": "Create a hardlink for file"
				},
				"function.eio-lstat": {
					"tokens": [
						"eio_lstat",
						"eiolstat"
					],
					"id": "function.eio-lstat",
					"name": "eio_lstat",
					"description": "Get file status"
				},
				"function.eio-mkdir": {
					"tokens": [
						"eio_mkdir",
						"eiomkdir"
					],
					"id": "function.eio-mkdir",
					"name": "eio_mkdir",
					"description": "Create directory"
				},
				"function.eio-mknod": {
					"tokens": [
						"eio_mknod",
						"eiomknod"
					],
					"id": "function.eio-mknod",
					"name": "eio_mknod",
					"description": "Create a special or ordinary file."
				},
				"function.eio-nop": {
					"tokens": [
						"eio_nop",
						"eionop"
					],
					"id": "function.eio-nop",
					"name": "eio_nop",
					"description": "Does nothing, except go through the whole request cycle."
				},
				"function.eio-npending": {
					"tokens": [
						"eio_npending",
						"eionpending"
					],
					"id": "function.eio-npending",
					"name": "eio_npending",
					"description": "Returns number of finished, but unhandled requests"
				},
				"function.eio-nready": {
					"tokens": [
						"eio_nready",
						"eionready"
					],
					"id": "function.eio-nready",
					"name": "eio_nready",
					"description": "Returns number of not-yet handled requests"
				},
				"function.eio-nreqs": {
					"tokens": [
						"eio_nreqs",
						"eionreqs"
					],
					"id": "function.eio-nreqs",
					"name": "eio_nreqs",
					"description": "Returns number of requests to be processed"
				},
				"function.eio-nthreads": {
					"tokens": [
						"eio_nthreads",
						"eionthreads"
					],
					"id": "function.eio-nthreads",
					"name": "eio_nthreads",
					"description": "Returns number of threads currently in use"
				},
				"function.eio-open": {
					"tokens": [
						"eio_open",
						"eioopen"
					],
					"id": "function.eio-open",
					"name": "eio_open",
					"description": "Opens a file"
				},
				"function.eio-poll": {
					"tokens": [
						"eio_poll",
						"eiopoll"
					],
					"id": "function.eio-poll",
					"name": "eio_poll",
					"description": "Can be to be called whenever there are pending requests that need finishing."
				},
				"function.eio-read": {
					"tokens": [
						"eio_read",
						"eioread"
					],
					"id": "function.eio-read",
					"name": "eio_read",
					"description": "Read from a file descriptor at given offset."
				},
				"function.eio-readahead": {
					"tokens": [
						"eio_readahead",
						"eioreadahead"
					],
					"id": "function.eio-readahead",
					"name": "eio_readahead",
					"description": "Perform file readahead into page cache"
				},
				"function.eio-readdir": {
					"tokens": [
						"eio_readdir",
						"eioreaddir"
					],
					"id": "function.eio-readdir",
					"name": "eio_readdir",
					"description": "Reads through a whole directory"
				},
				"function.eio-readlink": {
					"tokens": [
						"eio_readlink",
						"eioreadlink"
					],
					"id": "function.eio-readlink",
					"name": "eio_readlink",
					"description": "Read value of a symbolic link."
				},
				"function.eio-realpath": {
					"tokens": [
						"eio_realpath",
						"eiorealpath"
					],
					"id": "function.eio-realpath",
					"name": "eio_realpath",
					"description": "Get the canonicalized absolute pathname."
				},
				"function.eio-rename": {
					"tokens": [
						"eio_rename",
						"eiorename"
					],
					"id": "function.eio-rename",
					"name": "eio_rename",
					"description": "Change the name or location of a file."
				},
				"function.eio-rmdir": {
					"tokens": [
						"eio_rmdir",
						"eiormdir"
					],
					"id": "function.eio-rmdir",
					"name": "eio_rmdir",
					"description": "Remove a directory"
				},
				"function.eio-seek": {
					"tokens": [
						"eio_seek",
						"eioseek"
					],
					"id": "function.eio-seek",
					"name": "eio_seek",
					"description": "Repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence"
				},
				"function.eio-sendfile": {
					"tokens": [
						"eio_sendfile",
						"eiosendfile"
					],
					"id": "function.eio-sendfile",
					"name": "eio_sendfile",
					"description": "Transfer data between file descriptors"
				},
				"function.eio-set-max-idle": {
					"tokens": [
						"eio_set_max_idle",
						"eioset_max_idle"
					],
					"id": "function.eio-set-max-idle",
					"name": "eio_set_max_idle",
					"description": "Set maximum number of idle threads."
				},
				"function.eio-set-max-parallel": {
					"tokens": [
						"eio_set_max_parallel",
						"eioset_max_parallel"
					],
					"id": "function.eio-set-max-parallel",
					"name": "eio_set_max_parallel",
					"description": "Set maximum parallel threads"
				},
				"function.eio-set-max-poll-reqs": {
					"tokens": [
						"eio_set_max_poll_reqs",
						"eioset_max_poll_reqs"
					],
					"id": "function.eio-set-max-poll-reqs",
					"name": "eio_set_max_poll_reqs",
					"description": "Set maximum number of requests processed in a poll."
				},
				"function.eio-set-max-poll-time": {
					"tokens": [
						"eio_set_max_poll_time",
						"eioset_max_poll_time"
					],
					"id": "function.eio-set-max-poll-time",
					"name": "eio_set_max_poll_time",
					"description": "Set maximum poll time"
				},
				"function.eio-set-min-parallel": {
					"tokens": [
						"eio_set_min_parallel",
						"eioset_min_parallel"
					],
					"id": "function.eio-set-min-parallel",
					"name": "eio_set_min_parallel",
					"description": "Set minimum parallel thread number"
				},
				"function.eio-stat": {
					"tokens": [
						"eio_stat",
						"eiostat"
					],
					"id": "function.eio-stat",
					"name": "eio_stat",
					"description": "Get file status"
				},
				"function.eio-statvfs": {
					"tokens": [
						"eio_statvfs",
						"eiostatvfs"
					],
					"id": "function.eio-statvfs",
					"name": "eio_statvfs",
					"description": "Get file system statistics"
				},
				"function.eio-symlink": {
					"tokens": [
						"eio_symlink",
						"eiosymlink"
					],
					"id": "function.eio-symlink",
					"name": "eio_symlink",
					"description": "Create a symbolic link"
				},
				"function.eio-sync-file-range": {
					"tokens": [
						"eio_sync_file_range",
						"eiosync_file_range"
					],
					"id": "function.eio-sync-file-range",
					"name": "eio_sync_file_range",
					"description": "Sync a file segment with disk"
				},
				"function.eio-sync": {
					"tokens": [
						"eio_sync",
						"eiosync"
					],
					"id": "function.eio-sync",
					"name": "eio_sync",
					"description": "Commit buffer cache to disk"
				},
				"function.eio-syncfs": {
					"tokens": [
						"eio_syncfs",
						"eiosyncfs"
					],
					"id": "function.eio-syncfs",
					"name": "eio_syncfs",
					"description": "Calls Linux' syncfs syscall, if available"
				},
				"function.eio-truncate": {
					"tokens": [
						"eio_truncate",
						"eiotruncate"
					],
					"id": "function.eio-truncate",
					"name": "eio_truncate",
					"description": "Truncate a file"
				},
				"function.eio-unlink": {
					"tokens": [
						"eio_unlink",
						"eiounlink"
					],
					"id": "function.eio-unlink",
					"name": "eio_unlink",
					"description": "Delete a name and possibly the file it refers to"
				},
				"function.eio-utime": {
					"tokens": [
						"eio_utime",
						"eioutime"
					],
					"id": "function.eio-utime",
					"name": "eio_utime",
					"description": "Change file last access and modification times."
				},
				"function.eio-write": {
					"tokens": [
						"eio_write",
						"eiowrite"
					],
					"id": "function.eio-write",
					"name": "eio_write",
					"description": "Write to file"
				},
				"ev.backend": {
					"tokens": [
						"Ev::backend",
						"backend",
						"::backend"
					],
					"id": "ev.backend",
					"name": "Ev::backend",
					"description": "Returns an integer describing the backend used by libev."
				},
				"ev.depth": {
					"tokens": [
						"Ev::depth",
						"depth",
						"::depth"
					],
					"id": "ev.depth",
					"name": "Ev::depth",
					"description": "Returns recursion depth"
				},
				"ev.embeddablebackends": {
					"tokens": [
						"Ev::embeddableBackends",
						"embeddableBackends",
						"::embeddableBackends"
					],
					"id": "ev.embeddablebackends",
					"name": "Ev::embeddableBackends",
					"description": "Returns the set of backends that are embeddable in other event loops."
				},
				"ev.feedsignal": {
					"tokens": [
						"Ev::feedSignal",
						"feedSignal",
						"::feedSignal"
					],
					"id": "ev.feedsignal",
					"name": "Ev::feedSignal",
					"description": "Feed a signal event info Ev"
				},
				"ev.feedsignalevent": {
					"tokens": [
						"Ev::feedSignalEvent",
						"feedSignalEvent",
						"::feedSignalEvent"
					],
					"id": "ev.feedsignalevent",
					"name": "Ev::feedSignalEvent",
					"description": "Feed signal event into the default loop"
				},
				"ev.iteration": {
					"tokens": [
						"Ev::iteration",
						"iteration",
						"::iteration"
					],
					"id": "ev.iteration",
					"name": "Ev::iteration",
					"description": "Return the number of times the default event loop has polled for new\n  events."
				},
				"ev.now": {
					"tokens": [
						"Ev::now",
						"now",
						"::now"
					],
					"id": "ev.now",
					"name": "Ev::now",
					"description": "Returns the time when the last iteration of the default event\n  loop has started."
				},
				"ev.nowupdate": {
					"tokens": [
						"Ev::nowUpdate",
						"nowUpdate",
						"::nowUpdate"
					],
					"id": "ev.nowupdate",
					"name": "Ev::nowUpdate",
					"description": "Establishes the current time by querying the kernel, updating the time\n    returned by Ev::now in the progress."
				},
				"ev.recommendedbackends": {
					"tokens": [
						"Ev::recommendedBackends",
						"recommendedBackends",
						"::recommendedBackends"
					],
					"id": "ev.recommendedbackends",
					"name": "Ev::recommendedBackends",
					"description": "Returns a bit mask of recommended backends for current\n  platform."
				},
				"ev.resume": {
					"tokens": [
						"Ev::resume",
						"resume",
						"::resume"
					],
					"id": "ev.resume",
					"name": "Ev::resume",
					"description": "Resume previously suspended default event loop"
				},
				"ev.run": {
					"tokens": [
						"Ev::run",
						"run",
						"::run"
					],
					"id": "ev.run",
					"name": "Ev::run",
					"description": "Begin checking for events and calling callbacks for the default\n  loop"
				},
				"ev.sleep": {
					"tokens": [
						"Ev::sleep",
						"sleep",
						"::sleep"
					],
					"id": "ev.sleep",
					"name": "Ev::sleep",
					"description": "Block the process for the given number of seconds."
				},
				"ev.stop": {
					"tokens": [
						"Ev::stop",
						"stop",
						"::stop"
					],
					"id": "ev.stop",
					"name": "Ev::stop",
					"description": "Stops the default event loop"
				},
				"ev.supportedbackends": {
					"tokens": [
						"Ev::supportedBackends",
						"supportedBackends",
						"::supportedBackends"
					],
					"id": "ev.supportedbackends",
					"name": "Ev::supportedBackends",
					"description": "Returns the set of backends supported by current libev\n  configuration."
				},
				"ev.suspend": {
					"tokens": [
						"Ev::suspend",
						"suspend",
						"::suspend"
					],
					"id": "ev.suspend",
					"name": "Ev::suspend",
					"description": "Suspend the default event loop"
				},
				"ev.time": {
					"tokens": [
						"Ev::time",
						"time",
						"::time"
					],
					"id": "ev.time",
					"name": "Ev::time",
					"description": "Returns the current time in fractional seconds since the epoch."
				},
				"ev.verify": {
					"tokens": [
						"Ev::verify",
						"verify",
						"::verify"
					],
					"id": "ev.verify",
					"name": "Ev::verify",
					"description": "Performs internal consistency checks(for debugging)"
				},
				"evcheck.construct": {
					"tokens": [
						"EvCheck::__construct",
						"EvCheck::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evcheck.construct",
					"name": "EvCheck::__construct",
					"description": "Constructs the EvCheck watcher object"
				},
				"evcheck.createstopped": {
					"tokens": [
						"EvCheck::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evcheck.createstopped",
					"name": "EvCheck::createStopped",
					"description": "Create instance of a stopped EvCheck watcher"
				},
				"evchild.construct": {
					"tokens": [
						"EvChild::__construct",
						"EvChild::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evchild.construct",
					"name": "EvChild::__construct",
					"description": "Constructs the EvChild watcher object"
				},
				"evchild.createstopped": {
					"tokens": [
						"EvChild::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evchild.createstopped",
					"name": "EvChild::createStopped",
					"description": "Create instance of a stopped EvCheck watcher"
				},
				"evchild.set": {
					"tokens": [
						"EvChild::set",
						"set",
						"::set"
					],
					"id": "evchild.set",
					"name": "EvChild::set",
					"description": "Configures the watcher"
				},
				"evembed.construct": {
					"tokens": [
						"EvEmbed::__construct",
						"EvEmbed::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evembed.construct",
					"name": "EvEmbed::__construct",
					"description": "Constructs the EvEmbed object"
				},
				"evembed.createstopped": {
					"tokens": [
						"EvEmbed::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evembed.createstopped",
					"name": "EvEmbed::createStopped",
					"description": "Create stopped EvEmbed watcher object"
				},
				"evembed.set": {
					"tokens": [
						"EvEmbed::set",
						"set",
						"::set"
					],
					"id": "evembed.set",
					"name": "EvEmbed::set",
					"description": "Configures the watcher"
				},
				"evembed.sweep": {
					"tokens": [
						"EvEmbed::sweep",
						"sweep",
						"::sweep"
					],
					"id": "evembed.sweep",
					"name": "EvEmbed::sweep",
					"description": "Make a single, non-blocking sweep over the embedded loop."
				},
				"evfork.construct": {
					"tokens": [
						"EvFork::__construct",
						"EvFork::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evfork.construct",
					"name": "EvFork::__construct",
					"description": "Constructs the EvFork watcher object"
				},
				"evfork.createstopped": {
					"tokens": [
						"EvFork::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evfork.createstopped",
					"name": "EvFork::createStopped",
					"description": "Creates a stopped instance of EvFork watcher class"
				},
				"evidle.construct": {
					"tokens": [
						"EvIdle::__construct",
						"EvIdle::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evidle.construct",
					"name": "EvIdle::__construct",
					"description": "Constructs the EvIdle watcher object"
				},
				"evidle.createstopped": {
					"tokens": [
						"EvIdle::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evidle.createstopped",
					"name": "EvIdle::createStopped",
					"description": "Creates instance of a stopped EvIdle watcher object"
				},
				"evio.construct": {
					"tokens": [
						"EvIo::__construct",
						"EvIo::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evio.construct",
					"name": "EvIo::__construct",
					"description": "Constructs EvIo watcher object"
				},
				"evio.createstopped": {
					"tokens": [
						"EvIo::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evio.createstopped",
					"name": "EvIo::createStopped",
					"description": "Create stopped EvIo watcher object"
				},
				"evio.set": {
					"tokens": [
						"EvIo::set",
						"set",
						"::set"
					],
					"id": "evio.set",
					"name": "EvIo::set",
					"description": "Configures the watcher"
				},
				"evloop.backend": {
					"tokens": [
						"EvLoop::backend",
						"backend",
						"::backend"
					],
					"id": "evloop.backend",
					"name": "EvLoop::backend",
					"description": "Returns an integer describing the backend used by libev."
				},
				"evloop.check": {
					"tokens": [
						"EvLoop::check",
						"check",
						"::check"
					],
					"id": "evloop.check",
					"name": "EvLoop::check",
					"description": "Creates EvCheck object associated with the current event loop\n  instance"
				},
				"evloop.child": {
					"tokens": [
						"EvLoop::child",
						"child",
						"::child"
					],
					"id": "evloop.child",
					"name": "EvLoop::child",
					"description": "Creates EvChild object associated with the current event loop"
				},
				"evloop.construct": {
					"tokens": [
						"EvLoop::__construct",
						"EvLoop::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evloop.construct",
					"name": "EvLoop::__construct",
					"description": "Constructs the event loop object"
				},
				"evloop.defaultloop": {
					"tokens": [
						"EvLoop::defaultLoop",
						"defaultLoop",
						"::defaultLoop"
					],
					"id": "evloop.defaultloop",
					"name": "EvLoop::defaultLoop",
					"description": "Returns or creates the default event loop."
				},
				"evloop.embed": {
					"tokens": [
						"EvLoop::embed",
						"embed",
						"::embed"
					],
					"id": "evloop.embed",
					"name": "EvLoop::embed",
					"description": "Creates an instance of EvEmbed watcher associated\n  with the current EvLoop object."
				},
				"evloop.fork": {
					"tokens": [
						"EvLoop::fork",
						"fork",
						"::fork"
					],
					"id": "evloop.fork",
					"name": "EvLoop::fork",
					"description": "Creates EvFork watcher object associated with the current event\n  loop instance"
				},
				"evloop.idle": {
					"tokens": [
						"EvLoop::idle",
						"idle",
						"::idle"
					],
					"id": "evloop.idle",
					"name": "EvLoop::idle",
					"description": "Creates EvIdle watcher object associated with the current event\n  loop instance"
				},
				"evloop.invokepending": {
					"tokens": [
						"EvLoop::invokePending",
						"invokePending",
						"::invokePending"
					],
					"id": "evloop.invokepending",
					"name": "EvLoop::invokePending",
					"description": "Invoke all pending watchers while resetting their pending state"
				},
				"evloop.io": {
					"tokens": [
						"EvLoop::io",
						"io",
						"::io"
					],
					"id": "evloop.io",
					"name": "EvLoop::io",
					"description": "Create EvIo watcher object associated with the current event\n  loop instance"
				},
				"evloop.loopfork": {
					"tokens": [
						"EvLoop::loopFork",
						"loopFork",
						"::loopFork"
					],
					"id": "evloop.loopfork",
					"name": "EvLoop::loopFork",
					"description": "Must be called after a fork"
				},
				"evloop.now": {
					"tokens": [
						"EvLoop::now",
						"now",
						"::now"
					],
					"id": "evloop.now",
					"name": "EvLoop::now",
					"description": "Returns the current &quot;event loop time&quot;"
				},
				"evloop.nowupdate": {
					"tokens": [
						"EvLoop::nowUpdate",
						"nowUpdate",
						"::nowUpdate"
					],
					"id": "evloop.nowupdate",
					"name": "EvLoop::nowUpdate",
					"description": "Establishes the current time by querying the kernel, updating the time\n    returned by EvLoop::now in the progress."
				},
				"evloop.periodic": {
					"tokens": [
						"EvLoop::periodic",
						"periodic",
						"::periodic"
					],
					"id": "evloop.periodic",
					"name": "EvLoop::periodic",
					"description": "Creates EvPeriodic watcher object associated with the current\n  event loop instance"
				},
				"evloop.prepare": {
					"tokens": [
						"EvLoop::prepare",
						"prepare",
						"::prepare"
					],
					"id": "evloop.prepare",
					"name": "EvLoop::prepare",
					"description": "Creates EvPrepare watcher object associated with the current\n  event loop instance"
				},
				"evloop.resume": {
					"tokens": [
						"EvLoop::resume",
						"resume",
						"::resume"
					],
					"id": "evloop.resume",
					"name": "EvLoop::resume",
					"description": "Resume previously suspended default event loop"
				},
				"evloop.run": {
					"tokens": [
						"EvLoop::run",
						"run",
						"::run"
					],
					"id": "evloop.run",
					"name": "EvLoop::run",
					"description": "Begin checking for events and calling callbacks for the loop"
				},
				"evloop.signal": {
					"tokens": [
						"EvLoop::signal",
						"signal",
						"::signal"
					],
					"id": "evloop.signal",
					"name": "EvLoop::signal",
					"description": "Creates EvSignal watcher object associated with the current\n  event loop instance"
				},
				"evloop.stat": {
					"tokens": [
						"EvLoop::stat",
						"stat",
						"::stat"
					],
					"id": "evloop.stat",
					"name": "EvLoop::stat",
					"description": "Creates EvStat watcher object associated with the current event\n  loop instance"
				},
				"evloop.stop": {
					"tokens": [
						"EvLoop::stop",
						"stop",
						"::stop"
					],
					"id": "evloop.stop",
					"name": "EvLoop::stop",
					"description": "Stops the event loop"
				},
				"evloop.suspend": {
					"tokens": [
						"EvLoop::suspend",
						"suspend",
						"::suspend"
					],
					"id": "evloop.suspend",
					"name": "EvLoop::suspend",
					"description": "Suspend the loop"
				},
				"evloop.timer": {
					"tokens": [
						"EvLoop::timer",
						"timer",
						"::timer"
					],
					"id": "evloop.timer",
					"name": "EvLoop::timer",
					"description": "Creates EvTimer watcher object associated with the current event\n  loop instance"
				},
				"evloop.verify": {
					"tokens": [
						"EvLoop::verify",
						"verify",
						"::verify"
					],
					"id": "evloop.verify",
					"name": "EvLoop::verify",
					"description": "Performs internal consistency checks(for debugging)"
				},
				"evperiodic.again": {
					"tokens": [
						"EvPeriodic::again",
						"again",
						"::again"
					],
					"id": "evperiodic.again",
					"name": "EvPeriodic::again",
					"description": "Simply stops and restarts the periodic watcher again."
				},
				"evperiodic.at": {
					"tokens": [
						"EvPeriodic::at",
						"at",
						"::at"
					],
					"id": "evperiodic.at",
					"name": "EvPeriodic::at",
					"description": "Returns the absolute time that this\n  watcher is supposed to trigger next"
				},
				"evperiodic.construct": {
					"tokens": [
						"EvPeriodic::__construct",
						"EvPeriodic::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evperiodic.construct",
					"name": "EvPeriodic::__construct",
					"description": "Constructs EvPeriodic watcher object"
				},
				"evperiodic.createstopped": {
					"tokens": [
						"EvPeriodic::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evperiodic.createstopped",
					"name": "EvPeriodic::createStopped",
					"description": "Create a stopped EvPeriodic watcher"
				},
				"evperiodic.set": {
					"tokens": [
						"EvPeriodic::set",
						"set",
						"::set"
					],
					"id": "evperiodic.set",
					"name": "EvPeriodic::set",
					"description": "Configures the watcher"
				},
				"evprepare.construct": {
					"tokens": [
						"EvPrepare::__construct",
						"EvPrepare::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evprepare.construct",
					"name": "EvPrepare::__construct",
					"description": "Constructs EvPrepare watcher object"
				},
				"evprepare.createstopped": {
					"tokens": [
						"EvPrepare::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evprepare.createstopped",
					"name": "EvPrepare::createStopped",
					"description": "Creates a stopped instance of EvPrepare watcher"
				},
				"evsignal.construct": {
					"tokens": [
						"EvSignal::__construct",
						"EvSignal::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evsignal.construct",
					"name": "EvSignal::__construct",
					"description": "Constructs EvPeriodic watcher object"
				},
				"evsignal.createstopped": {
					"tokens": [
						"EvSignal::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evsignal.createstopped",
					"name": "EvSignal::createStopped",
					"description": "Create stopped EvSignal watcher object"
				},
				"evsignal.set": {
					"tokens": [
						"EvSignal::set",
						"set",
						"::set"
					],
					"id": "evsignal.set",
					"name": "EvSignal::set",
					"description": "Configures the watcher"
				},
				"evstat.attr": {
					"tokens": [
						"EvStat::attr",
						"attr",
						"::attr"
					],
					"id": "evstat.attr",
					"name": "EvStat::attr",
					"description": "Returns the values most recently detected by Ev"
				},
				"evstat.construct": {
					"tokens": [
						"EvStat::__construct",
						"EvStat::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evstat.construct",
					"name": "EvStat::__construct",
					"description": "Constructs EvStat watcher object"
				},
				"evstat.createstopped": {
					"tokens": [
						"EvStat::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evstat.createstopped",
					"name": "EvStat::createStopped",
					"description": "Create a stopped EvStat watcher object"
				},
				"evstat.prev": {
					"tokens": [
						"EvStat::prev",
						"prev",
						"::prev"
					],
					"id": "evstat.prev",
					"name": "EvStat::prev",
					"description": "Returns the previous set of values returned by EvStat::attr"
				},
				"evstat.set": {
					"tokens": [
						"EvStat::set",
						"set",
						"::set"
					],
					"id": "evstat.set",
					"name": "EvStat::set",
					"description": "Configures the watcher"
				},
				"evstat.stat": {
					"tokens": [
						"EvStat::stat",
						"stat",
						"::stat"
					],
					"id": "evstat.stat",
					"name": "EvStat::stat",
					"description": "Initiates the stat call"
				},
				"evtimer.again": {
					"tokens": [
						"EvTimer::again",
						"again",
						"::again"
					],
					"id": "evtimer.again",
					"name": "EvTimer::again",
					"description": "Restarts the timer watcher"
				},
				"evtimer.construct": {
					"tokens": [
						"EvTimer::__construct",
						"EvTimer::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evtimer.construct",
					"name": "EvTimer::__construct",
					"description": "Constructs an EvTimer watcher object"
				},
				"evtimer.createstopped": {
					"tokens": [
						"EvTimer::createStopped",
						"createStopped",
						"::createStopped"
					],
					"id": "evtimer.createstopped",
					"name": "EvTimer::createStopped",
					"description": "Creates EvTimer stopped watcher object"
				},
				"evtimer.set": {
					"tokens": [
						"EvTimer::set",
						"set",
						"::set"
					],
					"id": "evtimer.set",
					"name": "EvTimer::set",
					"description": "Configures the watcher"
				},
				"evwatcher.clear": {
					"tokens": [
						"EvWatcher::clear",
						"clear",
						"::clear"
					],
					"id": "evwatcher.clear",
					"name": "EvWatcher::clear",
					"description": "Clear watcher pending status"
				},
				"evwatcher.construct": {
					"tokens": [
						"EvWatcher::__construct",
						"EvWatcher::_construct",
						"__construct",
						"::__construct"
					],
					"id": "evwatcher.construct",
					"name": "EvWatcher::__construct",
					"description": "Abstract constructor of a watcher object"
				},
				"evwatcher.feed": {
					"tokens": [
						"EvWatcher::feed",
						"feed",
						"::feed"
					],
					"id": "evwatcher.feed",
					"name": "EvWatcher::feed",
					"description": "Feeds the given revents set into the event loop"
				},
				"evwatcher.getloop": {
					"tokens": [
						"EvWatcher::getLoop",
						"getLoop",
						"::getLoop"
					],
					"id": "evwatcher.getloop",
					"name": "EvWatcher::getLoop",
					"description": "Returns the loop responsible for the watcher"
				},
				"evwatcher.invoke": {
					"tokens": [
						"EvWatcher::invoke",
						"invoke",
						"::invoke"
					],
					"id": "evwatcher.invoke",
					"name": "EvWatcher::invoke",
					"description": "Invokes the watcher callback with the given received events bit\n  mask"
				},
				"evwatcher.keepalive": {
					"tokens": [
						"EvWatcher::keepalive",
						"keepalive",
						"::keepalive"
					],
					"id": "evwatcher.keepalive",
					"name": "EvWatcher::keepalive",
					"description": "Configures whether to keep the loop from returning"
				},
				"evwatcher.setcallback": {
					"tokens": [
						"EvWatcher::setCallback",
						"setCallback",
						"::setCallback"
					],
					"id": "evwatcher.setcallback",
					"name": "EvWatcher::setCallback",
					"description": "Sets new callback for the watcher"
				},
				"evwatcher.start": {
					"tokens": [
						"EvWatcher::start",
						"start",
						"::start"
					],
					"id": "evwatcher.start",
					"name": "EvWatcher::start",
					"description": "Starts the watcher"
				},
				"evwatcher.stop": {
					"tokens": [
						"EvWatcher::stop",
						"stop",
						"::stop"
					],
					"id": "evwatcher.stop",
					"name": "EvWatcher::stop",
					"description": "Stops the watcher"
				},
				"function.expect-expectl": {
					"tokens": [
						"expect_expectl",
						"expectexpectl"
					],
					"id": "function.expect-expectl",
					"name": "expect_expectl",
					"description": "Waits until the output from a process matches one\n  of the patterns, a specified time period has passed, or an EOF is seen"
				},
				"function.expect-popen": {
					"tokens": [
						"expect_popen",
						"expectpopen"
					],
					"id": "function.expect-popen",
					"name": "expect_popen",
					"description": "Execute command via Bourne shell, and open the PTY stream to\n  the process"
				},
				"function.event-add": {
					"tokens": [
						"event_add",
						"eventadd"
					],
					"id": "function.event-add",
					"name": "event_add",
					"description": "Add an event to the set of monitored events"
				},
				"function.event-base-free": {
					"tokens": [
						"event_base_free",
						"eventbase_free"
					],
					"id": "function.event-base-free",
					"name": "event_base_free",
					"description": "Destroy event base"
				},
				"function.event-base-loop": {
					"tokens": [
						"event_base_loop",
						"eventbase_loop"
					],
					"id": "function.event-base-loop",
					"name": "event_base_loop",
					"description": "Handle events"
				},
				"function.event-base-loopbreak": {
					"tokens": [
						"event_base_loopbreak",
						"eventbase_loopbreak"
					],
					"id": "function.event-base-loopbreak",
					"name": "event_base_loopbreak",
					"description": "Abort event loop"
				},
				"function.event-base-loopexit": {
					"tokens": [
						"event_base_loopexit",
						"eventbase_loopexit"
					],
					"id": "function.event-base-loopexit",
					"name": "event_base_loopexit",
					"description": "Exit loop after a time"
				},
				"function.event-base-new": {
					"tokens": [
						"event_base_new",
						"eventbase_new"
					],
					"id": "function.event-base-new",
					"name": "event_base_new",
					"description": "Create and initialize new event base"
				},
				"function.event-base-priority-init": {
					"tokens": [
						"event_base_priority_init",
						"eventbase_priority_init"
					],
					"id": "function.event-base-priority-init",
					"name": "event_base_priority_init",
					"description": "Set the number of event priority levels"
				},
				"function.event-base-reinit": {
					"tokens": [
						"event_base_reinit",
						"eventbase_reinit"
					],
					"id": "function.event-base-reinit",
					"name": "event_base_reinit",
					"description": "Reinitialize the event base after a fork"
				},
				"function.event-base-set": {
					"tokens": [
						"event_base_set",
						"eventbase_set"
					],
					"id": "function.event-base-set",
					"name": "event_base_set",
					"description": "Associate event base with an event"
				},
				"function.event-buffer-base-set": {
					"tokens": [
						"event_buffer_base_set",
						"eventbuffer_base_set"
					],
					"id": "function.event-buffer-base-set",
					"name": "event_buffer_base_set",
					"description": "Associate buffered event with an event base"
				},
				"function.event-buffer-disable": {
					"tokens": [
						"event_buffer_disable",
						"eventbuffer_disable"
					],
					"id": "function.event-buffer-disable",
					"name": "event_buffer_disable",
					"description": "Disable a buffered event"
				},
				"function.event-buffer-enable": {
					"tokens": [
						"event_buffer_enable",
						"eventbuffer_enable"
					],
					"id": "function.event-buffer-enable",
					"name": "event_buffer_enable",
					"description": "Enable a buffered event"
				},
				"function.event-buffer-fd-set": {
					"tokens": [
						"event_buffer_fd_set",
						"eventbuffer_fd_set"
					],
					"id": "function.event-buffer-fd-set",
					"name": "event_buffer_fd_set",
					"description": "Change a buffered event file descriptor"
				},
				"function.event-buffer-free": {
					"tokens": [
						"event_buffer_free",
						"eventbuffer_free"
					],
					"id": "function.event-buffer-free",
					"name": "event_buffer_free",
					"description": "Destroy buffered event"
				},
				"function.event-buffer-new": {
					"tokens": [
						"event_buffer_new",
						"eventbuffer_new"
					],
					"id": "function.event-buffer-new",
					"name": "event_buffer_new",
					"description": "Create new buffered event"
				},
				"function.event-buffer-priority-set": {
					"tokens": [
						"event_buffer_priority_set",
						"eventbuffer_priority_set"
					],
					"id": "function.event-buffer-priority-set",
					"name": "event_buffer_priority_set",
					"description": "Assign a priority to a buffered event"
				},
				"function.event-buffer-read": {
					"tokens": [
						"event_buffer_read",
						"eventbuffer_read"
					],
					"id": "function.event-buffer-read",
					"name": "event_buffer_read",
					"description": "Read data from a buffered event"
				},
				"function.event-buffer-set-callback": {
					"tokens": [
						"event_buffer_set_callback",
						"eventbuffer_set_callback"
					],
					"id": "function.event-buffer-set-callback",
					"name": "event_buffer_set_callback",
					"description": "Set or reset callbacks for a buffered event"
				},
				"function.event-buffer-timeout-set": {
					"tokens": [
						"event_buffer_timeout_set",
						"eventbuffer_timeout_set"
					],
					"id": "function.event-buffer-timeout-set",
					"name": "event_buffer_timeout_set",
					"description": "Set read and write timeouts for a buffered event"
				},
				"function.event-buffer-watermark-set": {
					"tokens": [
						"event_buffer_watermark_set",
						"eventbuffer_watermark_set"
					],
					"id": "function.event-buffer-watermark-set",
					"name": "event_buffer_watermark_set",
					"description": "Set the watermarks for read and write events"
				},
				"function.event-buffer-write": {
					"tokens": [
						"event_buffer_write",
						"eventbuffer_write"
					],
					"id": "function.event-buffer-write",
					"name": "event_buffer_write",
					"description": "Write data to a buffered event"
				},
				"function.event-del": {
					"tokens": [
						"event_del",
						"eventdel"
					],
					"id": "function.event-del",
					"name": "event_del",
					"description": "Remove an event from the set of monitored events"
				},
				"function.event-free": {
					"tokens": [
						"event_free",
						"eventfree"
					],
					"id": "function.event-free",
					"name": "event_free",
					"description": "Free event resource"
				},
				"function.event-new": {
					"tokens": [
						"event_new",
						"eventnew"
					],
					"id": "function.event-new",
					"name": "event_new",
					"description": "Create new event"
				},
				"function.event-priority-set": {
					"tokens": [
						"event_priority_set",
						"eventpriority_set"
					],
					"id": "function.event-priority-set",
					"name": "event_priority_set",
					"description": "Assign a priority to an event."
				},
				"function.event-set": {
					"tokens": [
						"event_set",
						"eventset"
					],
					"id": "function.event-set",
					"name": "event_set",
					"description": "Prepare an event"
				},
				"function.event-timer-add": {
					"tokens": [
						"event_timer_add",
						"eventtimer_add"
					],
					"id": "function.event-timer-add",
					"name": "event_timer_add",
					"description": "Alias of event_add"
				},
				"function.event-timer-del": {
					"tokens": [
						"event_timer_del",
						"eventtimer_del"
					],
					"id": "function.event-timer-del",
					"name": "event_timer_del",
					"description": "Alias of event_del"
				},
				"function.event-timer-new": {
					"tokens": [
						"event_timer_new",
						"eventtimer_new"
					],
					"id": "function.event-timer-new",
					"name": "event_timer_new",
					"description": "Alias of event_new"
				},
				"function.event-timer-set": {
					"tokens": [
						"event_timer_set",
						"eventtimer_set"
					],
					"id": "function.event-timer-set",
					"name": "event_timer_set",
					"description": "Prepare a timer event"
				},
				"function.pcntl-alarm": {
					"tokens": [
						"pcntl_alarm",
						"pcntlalarm"
					],
					"id": "function.pcntl-alarm",
					"name": "pcntl_alarm",
					"description": "Set an alarm clock for delivery of a signal"
				},
				"function.pcntl-errno": {
					"tokens": [
						"pcntl_errno",
						"pcntlerrno"
					],
					"id": "function.pcntl-errno",
					"name": "pcntl_errno",
					"description": "Alias of pcntl_strerror"
				},
				"function.pcntl-exec": {
					"tokens": [
						"pcntl_exec",
						"pcntlexec"
					],
					"id": "function.pcntl-exec",
					"name": "pcntl_exec",
					"description": "Executes specified program in current process space"
				},
				"function.pcntl-fork": {
					"tokens": [
						"pcntl_fork",
						"pcntlfork"
					],
					"id": "function.pcntl-fork",
					"name": "pcntl_fork",
					"description": "Forks the currently running process"
				},
				"function.pcntl-get-last-error": {
					"tokens": [
						"pcntl_get_last_error",
						"pcntlget_last_error"
					],
					"id": "function.pcntl-get-last-error",
					"name": "pcntl_get_last_error",
					"description": "Retrieve the error number set by the last pcntl function which failed"
				},
				"function.pcntl-getpriority": {
					"tokens": [
						"pcntl_getpriority",
						"pcntlgetpriority"
					],
					"id": "function.pcntl-getpriority",
					"name": "pcntl_getpriority",
					"description": "Get the priority of any process"
				},
				"function.pcntl-setpriority": {
					"tokens": [
						"pcntl_setpriority",
						"pcntlsetpriority"
					],
					"id": "function.pcntl-setpriority",
					"name": "pcntl_setpriority",
					"description": "Change the priority of any process"
				},
				"function.pcntl-signal-dispatch": {
					"tokens": [
						"pcntl_signal_dispatch",
						"pcntlsignal_dispatch"
					],
					"id": "function.pcntl-signal-dispatch",
					"name": "pcntl_signal_dispatch",
					"description": "Calls signal handlers for pending signals"
				},
				"function.pcntl-signal": {
					"tokens": [
						"pcntl_signal",
						"pcntlsignal"
					],
					"id": "function.pcntl-signal",
					"name": "pcntl_signal",
					"description": "Installs a signal handler"
				},
				"function.pcntl-sigprocmask": {
					"tokens": [
						"pcntl_sigprocmask",
						"pcntlsigprocmask"
					],
					"id": "function.pcntl-sigprocmask",
					"name": "pcntl_sigprocmask",
					"description": "Sets and retrieves blocked signals"
				},
				"function.pcntl-sigtimedwait": {
					"tokens": [
						"pcntl_sigtimedwait",
						"pcntlsigtimedwait"
					],
					"id": "function.pcntl-sigtimedwait",
					"name": "pcntl_sigtimedwait",
					"description": "Waits for signals, with a timeout"
				},
				"function.pcntl-sigwaitinfo": {
					"tokens": [
						"pcntl_sigwaitinfo",
						"pcntlsigwaitinfo"
					],
					"id": "function.pcntl-sigwaitinfo",
					"name": "pcntl_sigwaitinfo",
					"description": "Waits for signals"
				},
				"function.pcntl-strerror": {
					"tokens": [
						"pcntl_strerror",
						"pcntlstrerror"
					],
					"id": "function.pcntl-strerror",
					"name": "pcntl_strerror",
					"description": "Retrieve the system error message associated with the given errno"
				},
				"function.pcntl-wait": {
					"tokens": [
						"pcntl_wait",
						"pcntlwait"
					],
					"id": "function.pcntl-wait",
					"name": "pcntl_wait",
					"description": "Waits on or returns the status of a forked child"
				},
				"function.pcntl-waitpid": {
					"tokens": [
						"pcntl_waitpid",
						"pcntlwaitpid"
					],
					"id": "function.pcntl-waitpid",
					"name": "pcntl_waitpid",
					"description": "Waits on or returns the status of a forked child"
				},
				"function.pcntl-wexitstatus": {
					"tokens": [
						"pcntl_wexitstatus",
						"pcntlwexitstatus"
					],
					"id": "function.pcntl-wexitstatus",
					"name": "pcntl_wexitstatus",
					"description": "Returns the return code of a terminated child"
				},
				"function.pcntl-wifexited": {
					"tokens": [
						"pcntl_wifexited",
						"pcntlwifexited"
					],
					"id": "function.pcntl-wifexited",
					"name": "pcntl_wifexited",
					"description": "Checks if status code represents a normal exit"
				},
				"function.pcntl-wifsignaled": {
					"tokens": [
						"pcntl_wifsignaled",
						"pcntlwifsignaled"
					],
					"id": "function.pcntl-wifsignaled",
					"name": "pcntl_wifsignaled",
					"description": "Checks whether the status code represents a termination due to a signal"
				},
				"function.pcntl-wifstopped": {
					"tokens": [
						"pcntl_wifstopped",
						"pcntlwifstopped"
					],
					"id": "function.pcntl-wifstopped",
					"name": "pcntl_wifstopped",
					"description": "Checks whether the child process is currently stopped"
				},
				"function.pcntl-wstopsig": {
					"tokens": [
						"pcntl_wstopsig",
						"pcntlwstopsig"
					],
					"id": "function.pcntl-wstopsig",
					"name": "pcntl_wstopsig",
					"description": "Returns the signal which caused the child to stop"
				},
				"function.pcntl-wtermsig": {
					"tokens": [
						"pcntl_wtermsig",
						"pcntlwtermsig"
					],
					"id": "function.pcntl-wtermsig",
					"name": "pcntl_wtermsig",
					"description": "Returns the signal which caused the child to terminate"
				},
				"function.posix-access": {
					"tokens": [
						"posix_access",
						"posixaccess"
					],
					"id": "function.posix-access",
					"name": "posix_access",
					"description": "Determine accessibility of a file"
				},
				"function.posix-ctermid": {
					"tokens": [
						"posix_ctermid",
						"posixctermid"
					],
					"id": "function.posix-ctermid",
					"name": "posix_ctermid",
					"description": "Get path name of controlling terminal"
				},
				"function.posix-errno": {
					"tokens": [
						"posix_errno",
						"posixerrno"
					],
					"id": "function.posix-errno",
					"name": "posix_errno",
					"description": "Alias of posix_get_last_error"
				},
				"function.posix-get-last-error": {
					"tokens": [
						"posix_get_last_error",
						"posixget_last_error"
					],
					"id": "function.posix-get-last-error",
					"name": "posix_get_last_error",
					"description": "Retrieve the error number set by the last posix function that failed"
				},
				"function.posix-getcwd": {
					"tokens": [
						"posix_getcwd",
						"posixgetcwd"
					],
					"id": "function.posix-getcwd",
					"name": "posix_getcwd",
					"description": "Pathname of current directory"
				},
				"function.posix-getegid": {
					"tokens": [
						"posix_getegid",
						"posixgetegid"
					],
					"id": "function.posix-getegid",
					"name": "posix_getegid",
					"description": "Return the effective group ID of the current process"
				},
				"function.posix-geteuid": {
					"tokens": [
						"posix_geteuid",
						"posixgeteuid"
					],
					"id": "function.posix-geteuid",
					"name": "posix_geteuid",
					"description": "Return the effective user ID of the current process"
				},
				"function.posix-getgid": {
					"tokens": [
						"posix_getgid",
						"posixgetgid"
					],
					"id": "function.posix-getgid",
					"name": "posix_getgid",
					"description": "Return the real group ID of the current process"
				},
				"function.posix-getgrgid": {
					"tokens": [
						"posix_getgrgid",
						"posixgetgrgid"
					],
					"id": "function.posix-getgrgid",
					"name": "posix_getgrgid",
					"description": "Return info about a group by group id"
				},
				"function.posix-getgrnam": {
					"tokens": [
						"posix_getgrnam",
						"posixgetgrnam"
					],
					"id": "function.posix-getgrnam",
					"name": "posix_getgrnam",
					"description": "Return info about a group by name"
				},
				"function.posix-getgroups": {
					"tokens": [
						"posix_getgroups",
						"posixgetgroups"
					],
					"id": "function.posix-getgroups",
					"name": "posix_getgroups",
					"description": "Return the group set of the current process"
				},
				"function.posix-getlogin": {
					"tokens": [
						"posix_getlogin",
						"posixgetlogin"
					],
					"id": "function.posix-getlogin",
					"name": "posix_getlogin",
					"description": "Return login name"
				},
				"function.posix-getpgid": {
					"tokens": [
						"posix_getpgid",
						"posixgetpgid"
					],
					"id": "function.posix-getpgid",
					"name": "posix_getpgid",
					"description": "Get process group id for job control"
				},
				"function.posix-getpgrp": {
					"tokens": [
						"posix_getpgrp",
						"posixgetpgrp"
					],
					"id": "function.posix-getpgrp",
					"name": "posix_getpgrp",
					"description": "Return the current process group identifier"
				},
				"function.posix-getpid": {
					"tokens": [
						"posix_getpid",
						"posixgetpid"
					],
					"id": "function.posix-getpid",
					"name": "posix_getpid",
					"description": "Return the current process identifier"
				},
				"function.posix-getppid": {
					"tokens": [
						"posix_getppid",
						"posixgetppid"
					],
					"id": "function.posix-getppid",
					"name": "posix_getppid",
					"description": "Return the parent process identifier"
				},
				"function.posix-getpwnam": {
					"tokens": [
						"posix_getpwnam",
						"posixgetpwnam"
					],
					"id": "function.posix-getpwnam",
					"name": "posix_getpwnam",
					"description": "Return info about a user by username"
				},
				"function.posix-getpwuid": {
					"tokens": [
						"posix_getpwuid",
						"posixgetpwuid"
					],
					"id": "function.posix-getpwuid",
					"name": "posix_getpwuid",
					"description": "Return info about a user by user id"
				},
				"function.posix-getrlimit": {
					"tokens": [
						"posix_getrlimit",
						"posixgetrlimit"
					],
					"id": "function.posix-getrlimit",
					"name": "posix_getrlimit",
					"description": "Return info about system resource limits"
				},
				"function.posix-getsid": {
					"tokens": [
						"posix_getsid",
						"posixgetsid"
					],
					"id": "function.posix-getsid",
					"name": "posix_getsid",
					"description": "Get the current sid of the process"
				},
				"function.posix-getuid": {
					"tokens": [
						"posix_getuid",
						"posixgetuid"
					],
					"id": "function.posix-getuid",
					"name": "posix_getuid",
					"description": "Return the real user ID of the current process"
				},
				"function.posix-initgroups": {
					"tokens": [
						"posix_initgroups",
						"posixinitgroups"
					],
					"id": "function.posix-initgroups",
					"name": "posix_initgroups",
					"description": "Calculate the group access list"
				},
				"function.posix-isatty": {
					"tokens": [
						"posix_isatty",
						"posixisatty"
					],
					"id": "function.posix-isatty",
					"name": "posix_isatty",
					"description": "Determine if a file descriptor is an interactive terminal"
				},
				"function.posix-kill": {
					"tokens": [
						"posix_kill",
						"posixkill"
					],
					"id": "function.posix-kill",
					"name": "posix_kill",
					"description": "Send a signal to a process"
				},
				"function.posix-mkfifo": {
					"tokens": [
						"posix_mkfifo",
						"posixmkfifo"
					],
					"id": "function.posix-mkfifo",
					"name": "posix_mkfifo",
					"description": "Create a fifo special file (a named pipe)"
				},
				"function.posix-mknod": {
					"tokens": [
						"posix_mknod",
						"posixmknod"
					],
					"id": "function.posix-mknod",
					"name": "posix_mknod",
					"description": "Create a special or ordinary file (POSIX.1)"
				},
				"function.posix-setegid": {
					"tokens": [
						"posix_setegid",
						"posixsetegid"
					],
					"id": "function.posix-setegid",
					"name": "posix_setegid",
					"description": "Set the effective GID of the current process"
				},
				"function.posix-seteuid": {
					"tokens": [
						"posix_seteuid",
						"posixseteuid"
					],
					"id": "function.posix-seteuid",
					"name": "posix_seteuid",
					"description": "Set the effective UID of the current process"
				},
				"function.posix-setgid": {
					"tokens": [
						"posix_setgid",
						"posixsetgid"
					],
					"id": "function.posix-setgid",
					"name": "posix_setgid",
					"description": "Set the GID of the current process"
				},
				"function.posix-setpgid": {
					"tokens": [
						"posix_setpgid",
						"posixsetpgid"
					],
					"id": "function.posix-setpgid",
					"name": "posix_setpgid",
					"description": "Set process group id for job control"
				},
				"function.posix-setrlimit": {
					"tokens": [
						"posix_setrlimit",
						"posixsetrlimit"
					],
					"id": "function.posix-setrlimit",
					"name": "posix_setrlimit",
					"description": "Set system resource limits"
				},
				"function.posix-setsid": {
					"tokens": [
						"posix_setsid",
						"posixsetsid"
					],
					"id": "function.posix-setsid",
					"name": "posix_setsid",
					"description": "Make the current process a session leader"
				},
				"function.posix-setuid": {
					"tokens": [
						"posix_setuid",
						"posixsetuid"
					],
					"id": "function.posix-setuid",
					"name": "posix_setuid",
					"description": "Set the UID of the current process"
				},
				"function.posix-strerror": {
					"tokens": [
						"posix_strerror",
						"posixstrerror"
					],
					"id": "function.posix-strerror",
					"name": "posix_strerror",
					"description": "Retrieve the system error message associated with the given errno"
				},
				"function.posix-times": {
					"tokens": [
						"posix_times",
						"posixtimes"
					],
					"id": "function.posix-times",
					"name": "posix_times",
					"description": "Get process times"
				},
				"function.posix-ttyname": {
					"tokens": [
						"posix_ttyname",
						"posixttyname"
					],
					"id": "function.posix-ttyname",
					"name": "posix_ttyname",
					"description": "Determine terminal device name"
				},
				"function.posix-uname": {
					"tokens": [
						"posix_uname",
						"posixuname"
					],
					"id": "function.posix-uname",
					"name": "posix_uname",
					"description": "Get system name"
				},
				"function.escapeshellarg": {
					"tokens": [
						"escapeshellarg"
					],
					"id": "function.escapeshellarg",
					"name": "escapeshellarg",
					"description": "Escape a string to be used as a shell argument"
				},
				"function.escapeshellcmd": {
					"tokens": [
						"escapeshellcmd"
					],
					"id": "function.escapeshellcmd",
					"name": "escapeshellcmd",
					"description": "Escape shell metacharacters"
				},
				"function.exec": {
					"tokens": [
						"exec"
					],
					"id": "function.exec",
					"name": "exec",
					"description": "Execute an external program"
				},
				"function.passthru": {
					"tokens": [
						"passthru"
					],
					"id": "function.passthru",
					"name": "passthru",
					"description": "Execute an external program and display raw output"
				},
				"function.proc-close": {
					"tokens": [
						"proc_close",
						"procclose"
					],
					"id": "function.proc-close",
					"name": "proc_close",
					"description": "Close a process opened by proc_open and return the exit code of that process"
				},
				"function.proc-get-status": {
					"tokens": [
						"proc_get_status",
						"procget_status"
					],
					"id": "function.proc-get-status",
					"name": "proc_get_status",
					"description": "Get information about a process opened by proc_open"
				},
				"function.proc-nice": {
					"tokens": [
						"proc_nice",
						"procnice"
					],
					"id": "function.proc-nice",
					"name": "proc_nice",
					"description": "Change the priority of the current process"
				},
				"function.proc-open": {
					"tokens": [
						"proc_open",
						"procopen"
					],
					"id": "function.proc-open",
					"name": "proc_open",
					"description": "Execute a command and open file pointers for input/output"
				},
				"function.proc-terminate": {
					"tokens": [
						"proc_terminate",
						"procterminate"
					],
					"id": "function.proc-terminate",
					"name": "proc_terminate",
					"description": "Kills a process opened by proc_open"
				},
				"function.shell-exec": {
					"tokens": [
						"shell_exec",
						"shellexec"
					],
					"id": "function.shell-exec",
					"name": "shell_exec",
					"description": "Execute command via shell and return the complete output as a string"
				},
				"function.system": {
					"tokens": [
						"system"
					],
					"id": "function.system",
					"name": "system",
					"description": "Execute an external program and display the output"
				},
				"threaded.chunk": {
					"tokens": [
						"Threaded::chunk",
						"chunk",
						"::chunk"
					],
					"id": "threaded.chunk",
					"name": "Threaded::chunk",
					"description": "Manipulation"
				},
				"threaded.count": {
					"tokens": [
						"Threaded::count",
						"count",
						"::count"
					],
					"id": "threaded.count",
					"name": "Threaded::count",
					"description": "Manipulation"
				},
				"threaded.extend": {
					"tokens": [
						"Threaded::extend",
						"extend",
						"::extend"
					],
					"id": "threaded.extend",
					"name": "Threaded::extend",
					"description": "Runtime Manipulation"
				},
				"threaded.from": {
					"tokens": [
						"Threaded::from",
						"from",
						"::from"
					],
					"id": "threaded.from",
					"name": "Threaded::from",
					"description": "Creation"
				},
				"threaded.getterminationinfo": {
					"tokens": [
						"Threaded::getTerminationInfo",
						"getTerminationInfo",
						"::getTerminationInfo"
					],
					"id": "threaded.getterminationinfo",
					"name": "Threaded::getTerminationInfo",
					"description": "Error Detection"
				},
				"thread.isrunning": {
					"tokens": [
						"Threaded::isRunning",
						"isRunning",
						"::isRunning"
					],
					"id": "thread.isrunning",
					"name": "Threaded::isRunning",
					"description": "State Detection"
				},
				"threaded.isterminated": {
					"tokens": [
						"Threaded::isTerminated",
						"isTerminated",
						"::isTerminated"
					],
					"id": "threaded.isterminated",
					"name": "Threaded::isTerminated",
					"description": "State Detection"
				},
				"threaded.iswaiting": {
					"tokens": [
						"Threaded::isWaiting",
						"isWaiting",
						"::isWaiting"
					],
					"id": "threaded.iswaiting",
					"name": "Threaded::isWaiting",
					"description": "State Detection"
				},
				"threaded.lock": {
					"tokens": [
						"Threaded::lock",
						"lock",
						"::lock"
					],
					"id": "threaded.lock",
					"name": "Threaded::lock",
					"description": "Synchronization"
				},
				"threaded.merge": {
					"tokens": [
						"Threaded::merge",
						"merge",
						"::merge"
					],
					"id": "threaded.merge",
					"name": "Threaded::merge",
					"description": "Manipulation"
				},
				"threaded.notify": {
					"tokens": [
						"Threaded::notify",
						"notify",
						"::notify"
					],
					"id": "threaded.notify",
					"name": "Threaded::notify",
					"description": "Synchronization"
				},
				"threaded.pop": {
					"tokens": [
						"Threaded::pop",
						"pop",
						"::pop"
					],
					"id": "threaded.pop",
					"name": "Threaded::pop",
					"description": "Manipulation"
				},
				"threaded.run": {
					"tokens": [
						"Threaded::run",
						"run",
						"::run"
					],
					"id": "threaded.run",
					"name": "Threaded::run",
					"description": "Execution"
				},
				"threaded.shift": {
					"tokens": [
						"Threaded::shift",
						"shift",
						"::shift"
					],
					"id": "threaded.shift",
					"name": "Threaded::shift",
					"description": "Manipulation"
				},
				"threaded.synchronized": {
					"tokens": [
						"Threaded::synchronized",
						"synchronized",
						"::synchronized"
					],
					"id": "threaded.synchronized",
					"name": "Threaded::synchronized",
					"description": "Synchronization"
				},
				"threaded.unlock": {
					"tokens": [
						"Threaded::unlock",
						"unlock",
						"::unlock"
					],
					"id": "threaded.unlock",
					"name": "Threaded::unlock",
					"description": "Synchronization"
				},
				"threaded.wait": {
					"tokens": [
						"Threaded::wait",
						"wait",
						"::wait"
					],
					"id": "threaded.wait",
					"name": "Threaded::wait",
					"description": "Synchronization"
				},
				"thread.detach": {
					"tokens": [
						"Thread::detach",
						"detach",
						"::detach"
					],
					"id": "thread.detach",
					"name": "Thread::detach",
					"description": "Execution"
				},
				"thread.getcreatorid": {
					"tokens": [
						"Thread::getCreatorId",
						"getCreatorId",
						"::getCreatorId"
					],
					"id": "thread.getcreatorid",
					"name": "Thread::getCreatorId",
					"description": "Identification"
				},
				"thread.getcurrentthread": {
					"tokens": [
						"Thread::getCurrentThread",
						"getCurrentThread",
						"::getCurrentThread"
					],
					"id": "thread.getcurrentthread",
					"name": "Thread::getCurrentThread",
					"description": "Identification"
				},
				"thread.getcurrentthreadid": {
					"tokens": [
						"Thread::getCurrentThreadId",
						"getCurrentThreadId",
						"::getCurrentThreadId"
					],
					"id": "thread.getcurrentthreadid",
					"name": "Thread::getCurrentThreadId",
					"description": "Identification"
				},
				"thread.getthreadid": {
					"tokens": [
						"Thread::getThreadId",
						"getThreadId",
						"::getThreadId"
					],
					"id": "thread.getthreadid",
					"name": "Thread::getThreadId",
					"description": "Identification"
				},
				"thread.globally": {
					"tokens": [
						"Thread::globally",
						"globally",
						"::globally"
					],
					"id": "thread.globally",
					"name": "Thread::globally",
					"description": "Execution"
				},
				"thread.isjoined": {
					"tokens": [
						"Thread::isJoined",
						"isJoined",
						"::isJoined"
					],
					"id": "thread.isjoined",
					"name": "Thread::isJoined",
					"description": "State Detection"
				},
				"thread.isstarted": {
					"tokens": [
						"Thread::isStarted",
						"isStarted",
						"::isStarted"
					],
					"id": "thread.isstarted",
					"name": "Thread::isStarted",
					"description": "State Detection"
				},
				"thread.join": {
					"tokens": [
						"Thread::join",
						"join",
						"::join"
					],
					"id": "thread.join",
					"name": "Thread::join",
					"description": "Synchronization"
				},
				"thread.kill": {
					"tokens": [
						"Thread::kill",
						"kill",
						"::kill"
					],
					"id": "thread.kill",
					"name": "Thread::kill",
					"description": "Execution"
				},
				"thread.start": {
					"tokens": [
						"Thread::start",
						"start",
						"::start"
					],
					"id": "thread.start",
					"name": "Thread::start",
					"description": "Execution"
				},
				"worker.getstacked": {
					"tokens": [
						"Worker::getStacked",
						"getStacked",
						"::getStacked"
					],
					"id": "worker.getstacked",
					"name": "Worker::getStacked",
					"description": "Stack Analysis"
				},
				"worker.isshutdown": {
					"tokens": [
						"Worker::isShutdown",
						"isShutdown",
						"::isShutdown"
					],
					"id": "worker.isshutdown",
					"name": "Worker::isShutdown",
					"description": "State Detection"
				},
				"worker.isworking": {
					"tokens": [
						"Worker::isWorking",
						"isWorking",
						"::isWorking"
					],
					"id": "worker.isworking",
					"name": "Worker::isWorking",
					"description": "State Detection"
				},
				"worker.shutdown": {
					"tokens": [
						"Worker::shutdown",
						"shutdown",
						"::shutdown"
					],
					"id": "worker.shutdown",
					"name": "Worker::shutdown",
					"description": "Synchronization"
				},
				"worker.stack": {
					"tokens": [
						"Worker::stack",
						"stack",
						"::stack"
					],
					"id": "worker.stack",
					"name": "Worker::stack",
					"description": "Stacking"
				},
				"worker.unstack": {
					"tokens": [
						"Worker::unstack",
						"unstack",
						"::unstack"
					],
					"id": "worker.unstack",
					"name": "Worker::unstack",
					"description": "Stacking"
				},
				"collectable.isgarbage": {
					"tokens": [
						"Collectable::isGarbage",
						"isGarbage",
						"::isGarbage"
					],
					"id": "collectable.isgarbage",
					"name": "Collectable::isGarbage",
					"description": "Determine whether an object has been marked as garbage"
				},
				"collectable.setgarbage": {
					"tokens": [
						"Collectable::setGarbage",
						"setGarbage",
						"::setGarbage"
					],
					"id": "collectable.setgarbage",
					"name": "Collectable::setGarbage",
					"description": "Mark an object as garbage"
				},
				"pool.collect": {
					"tokens": [
						"Pool::collect",
						"collect",
						"::collect"
					],
					"id": "pool.collect",
					"name": "Pool::collect",
					"description": "Collect references to completed tasks"
				},
				"pool.construct": {
					"tokens": [
						"Pool::__construct",
						"Pool::_construct",
						"__construct",
						"::__construct"
					],
					"id": "pool.construct",
					"name": "Pool::__construct",
					"description": "Creates a new Pool of Workers"
				},
				"pool.resize": {
					"tokens": [
						"Pool::resize",
						"resize",
						"::resize"
					],
					"id": "pool.resize",
					"name": "Pool::resize",
					"description": "Resize the Pool"
				},
				"pool.shutdown": {
					"tokens": [
						"Pool::shutdown",
						"shutdown",
						"::shutdown"
					],
					"id": "pool.shutdown",
					"name": "Pool::shutdown",
					"description": "Shutdown all Workers"
				},
				"pool.submit": {
					"tokens": [
						"Pool::submit",
						"submit",
						"::submit"
					],
					"id": "pool.submit",
					"name": "Pool::submit",
					"description": "Submits an object for execution"
				},
				"pool.submitTo": {
					"tokens": [
						"Pool::submitTo",
						"submitTo",
						"::submitTo"
					],
					"id": "pool.submitTo",
					"name": "Pool::submitTo",
					"description": "Submits an object for execution"
				},
				"mutex.create": {
					"tokens": [
						"Mutex::create",
						"create",
						"::create"
					],
					"id": "mutex.create",
					"name": "Mutex::create",
					"description": "Create a Mutex"
				},
				"mutex.destroy": {
					"tokens": [
						"Mutex::destroy",
						"destroy",
						"::destroy"
					],
					"id": "mutex.destroy",
					"name": "Mutex::destroy",
					"description": "Destroy Mutex"
				},
				"mutex.lock": {
					"tokens": [
						"Mutex::lock",
						"lock",
						"::lock"
					],
					"id": "mutex.lock",
					"name": "Mutex::lock",
					"description": "Acquire Mutex"
				},
				"mutex.trylock": {
					"tokens": [
						"Mutex::trylock",
						"trylock",
						"::trylock"
					],
					"id": "mutex.trylock",
					"name": "Mutex::trylock",
					"description": "Attempt to Acquire Mutex"
				},
				"mutex.unlock": {
					"tokens": [
						"Mutex::unlock",
						"unlock",
						"::unlock"
					],
					"id": "mutex.unlock",
					"name": "Mutex::unlock",
					"description": "Release Mutex"
				},
				"cond.broadcast": {
					"tokens": [
						"Cond::broadcast",
						"broadcast",
						"::broadcast"
					],
					"id": "cond.broadcast",
					"name": "Cond::broadcast",
					"description": "Broadcast a Condition"
				},
				"cond.create": {
					"tokens": [
						"Cond::create",
						"create",
						"::create"
					],
					"id": "cond.create",
					"name": "Cond::create",
					"description": "Create a Condition"
				},
				"cond.destroy": {
					"tokens": [
						"Cond::destroy",
						"destroy",
						"::destroy"
					],
					"id": "cond.destroy",
					"name": "Cond::destroy",
					"description": "Destroy a Condition"
				},
				"cond.signal": {
					"tokens": [
						"Cond::signal",
						"signal",
						"::signal"
					],
					"id": "cond.signal",
					"name": "Cond::signal",
					"description": "Signal a Condition"
				},
				"cond.wait": {
					"tokens": [
						"Cond::wait",
						"wait",
						"::wait"
					],
					"id": "cond.wait",
					"name": "Cond::wait",
					"description": "Wait for Condition"
				},
				"function.ftok": {
					"tokens": [
						"ftok"
					],
					"id": "function.ftok",
					"name": "ftok",
					"description": "Convert a pathname and a project identifier to a System V IPC key"
				},
				"function.msg-get-queue": {
					"tokens": [
						"msg_get_queue",
						"msgget_queue"
					],
					"id": "function.msg-get-queue",
					"name": "msg_get_queue",
					"description": "Create or attach to a message queue"
				},
				"function.msg-queue-exists": {
					"tokens": [
						"msg_queue_exists",
						"msgqueue_exists"
					],
					"id": "function.msg-queue-exists",
					"name": "msg_queue_exists",
					"description": "Check whether a message queue exists"
				},
				"function.msg-receive": {
					"tokens": [
						"msg_receive",
						"msgreceive"
					],
					"id": "function.msg-receive",
					"name": "msg_receive",
					"description": "Receive a message from a message queue"
				},
				"function.msg-remove-queue": {
					"tokens": [
						"msg_remove_queue",
						"msgremove_queue"
					],
					"id": "function.msg-remove-queue",
					"name": "msg_remove_queue",
					"description": "Destroy a message queue"
				},
				"function.msg-send": {
					"tokens": [
						"msg_send",
						"msgsend"
					],
					"id": "function.msg-send",
					"name": "msg_send",
					"description": "Send a message to a message queue"
				},
				"function.msg-set-queue": {
					"tokens": [
						"msg_set_queue",
						"msgset_queue"
					],
					"id": "function.msg-set-queue",
					"name": "msg_set_queue",
					"description": "Set information in the message queue data structure"
				},
				"function.msg-stat-queue": {
					"tokens": [
						"msg_stat_queue",
						"msgstat_queue"
					],
					"id": "function.msg-stat-queue",
					"name": "msg_stat_queue",
					"description": "Returns information from the message queue data structure"
				},
				"function.sem-acquire": {
					"tokens": [
						"sem_acquire",
						"semacquire"
					],
					"id": "function.sem-acquire",
					"name": "sem_acquire",
					"description": "Acquire a semaphore"
				},
				"function.sem-get": {
					"tokens": [
						"sem_get",
						"semget"
					],
					"id": "function.sem-get",
					"name": "sem_get",
					"description": "Get a semaphore id"
				},
				"function.sem-release": {
					"tokens": [
						"sem_release",
						"semrelease"
					],
					"id": "function.sem-release",
					"name": "sem_release",
					"description": "Release a semaphore"
				},
				"function.sem-remove": {
					"tokens": [
						"sem_remove",
						"semremove"
					],
					"id": "function.sem-remove",
					"name": "sem_remove",
					"description": "Remove a semaphore"
				},
				"function.shm-attach": {
					"tokens": [
						"shm_attach",
						"shmattach"
					],
					"id": "function.shm-attach",
					"name": "shm_attach",
					"description": "Creates or open a shared memory segment"
				},
				"function.shm-detach": {
					"tokens": [
						"shm_detach",
						"shmdetach"
					],
					"id": "function.shm-detach",
					"name": "shm_detach",
					"description": "Disconnects from shared memory segment"
				},
				"function.shm-get-var": {
					"tokens": [
						"shm_get_var",
						"shmget_var"
					],
					"id": "function.shm-get-var",
					"name": "shm_get_var",
					"description": "Returns a variable from shared memory"
				},
				"function.shm-has-var": {
					"tokens": [
						"shm_has_var",
						"shmhas_var"
					],
					"id": "function.shm-has-var",
					"name": "shm_has_var",
					"description": "Check whether a specific entry exists"
				},
				"function.shm-put-var": {
					"tokens": [
						"shm_put_var",
						"shmput_var"
					],
					"id": "function.shm-put-var",
					"name": "shm_put_var",
					"description": "Inserts or updates a variable in shared memory"
				},
				"function.shm-remove-var": {
					"tokens": [
						"shm_remove_var",
						"shmremove_var"
					],
					"id": "function.shm-remove-var",
					"name": "shm_remove_var",
					"description": "Removes a variable from shared memory"
				},
				"function.shm-remove": {
					"tokens": [
						"shm_remove",
						"shmremove"
					],
					"id": "function.shm-remove",
					"name": "shm_remove",
					"description": "Removes shared memory from Unix systems"
				},
				"function.shmop-close": {
					"tokens": [
						"shmop_close",
						"shmopclose"
					],
					"id": "function.shmop-close",
					"name": "shmop_close",
					"description": "Close shared memory block"
				},
				"function.shmop-delete": {
					"tokens": [
						"shmop_delete",
						"shmopdelete"
					],
					"id": "function.shmop-delete",
					"name": "shmop_delete",
					"description": "Delete shared memory block"
				},
				"function.shmop-open": {
					"tokens": [
						"shmop_open",
						"shmopopen"
					],
					"id": "function.shmop-open",
					"name": "shmop_open",
					"description": "Create or open shared memory block"
				},
				"function.shmop-read": {
					"tokens": [
						"shmop_read",
						"shmopread"
					],
					"id": "function.shmop-read",
					"name": "shmop_read",
					"description": "Read data from shared memory block"
				},
				"function.shmop-size": {
					"tokens": [
						"shmop_size",
						"shmopsize"
					],
					"id": "function.shmop-size",
					"name": "shmop_size",
					"description": "Get size of shared memory block"
				},
				"function.shmop-write": {
					"tokens": [
						"shmop_write",
						"shmopwrite"
					],
					"id": "function.shmop-write",
					"name": "shmop_write",
					"description": "Write data into shared memory block"
				},
				"syncmutex.construct": {
					"tokens": [
						"SyncMutex::__construct",
						"SyncMutex::_construct",
						"__construct",
						"::__construct"
					],
					"id": "syncmutex.construct",
					"name": "SyncMutex::__construct",
					"description": "Constructs a new SyncMutex object"
				},
				"syncmutex.lock": {
					"tokens": [
						"SyncMutex::lock",
						"lock",
						"::lock"
					],
					"id": "syncmutex.lock",
					"name": "SyncMutex::lock",
					"description": "Waits for an exclusive lock"
				},
				"syncmutex.unlock": {
					"tokens": [
						"SyncMutex::unlock",
						"unlock",
						"::unlock"
					],
					"id": "syncmutex.unlock",
					"name": "SyncMutex::unlock",
					"description": "Unlocks the mutex"
				},
				"syncsemaphore.construct": {
					"tokens": [
						"SyncSemaphore::__construct",
						"SyncSemaphore::_construct",
						"__construct",
						"::__construct"
					],
					"id": "syncsemaphore.construct",
					"name": "SyncSemaphore::__construct",
					"description": "Constructs a new SyncSemaphore object"
				},
				"syncsemaphore.lock": {
					"tokens": [
						"SyncSemaphore::lock",
						"lock",
						"::lock"
					],
					"id": "syncsemaphore.lock",
					"name": "SyncSemaphore::lock",
					"description": "Decreases the count of the semaphore or waits"
				},
				"syncsemaphore.unlock": {
					"tokens": [
						"SyncSemaphore::unlock",
						"unlock",
						"::unlock"
					],
					"id": "syncsemaphore.unlock",
					"name": "SyncSemaphore::unlock",
					"description": "Increases the count of the semaphore"
				},
				"syncevent.construct": {
					"tokens": [
						"SyncEvent::__construct",
						"SyncEvent::_construct",
						"__construct",
						"::__construct"
					],
					"id": "syncevent.construct",
					"name": "SyncEvent::__construct",
					"description": "Constructs a new SyncEvent object"
				},
				"syncevent.fire": {
					"tokens": [
						"SyncEvent::fire",
						"fire",
						"::fire"
					],
					"id": "syncevent.fire",
					"name": "SyncEvent::fire",
					"description": "Fires/sets the event"
				},
				"syncevent.reset": {
					"tokens": [
						"SyncEvent::reset",
						"reset",
						"::reset"
					],
					"id": "syncevent.reset",
					"name": "SyncEvent::reset",
					"description": "Resets a manual event"
				},
				"syncevent.wait": {
					"tokens": [
						"SyncEvent::wait",
						"wait",
						"::wait"
					],
					"id": "syncevent.wait",
					"name": "SyncEvent::wait",
					"description": "Waits for the event to be fired/set"
				},
				"syncreaderwriter.construct": {
					"tokens": [
						"SyncReaderWriter::__construct",
						"SyncReaderWriter::_construct",
						"__construct",
						"::__construct"
					],
					"id": "syncreaderwriter.construct",
					"name": "SyncReaderWriter::__construct",
					"description": "Constructs a new SyncReaderWriter object"
				},
				"syncreaderwriter.readlock": {
					"tokens": [
						"SyncReaderWriter::readlock",
						"readlock",
						"::readlock"
					],
					"id": "syncreaderwriter.readlock",
					"name": "SyncReaderWriter::readlock",
					"description": "Waits for a read lock"
				},
				"syncreaderwriter.readunlock": {
					"tokens": [
						"SyncReaderWriter::readunlock",
						"readunlock",
						"::readunlock"
					],
					"id": "syncreaderwriter.readunlock",
					"name": "SyncReaderWriter::readunlock",
					"description": "Releases a read lock"
				},
				"syncreaderwriter.writelock": {
					"tokens": [
						"SyncReaderWriter::writelock",
						"writelock",
						"::writelock"
					],
					"id": "syncreaderwriter.writelock",
					"name": "SyncReaderWriter::writelock",
					"description": "Waits for an exclusive write lock"
				},
				"syncreaderwriter.writeunlock": {
					"tokens": [
						"SyncReaderWriter::writeunlock",
						"writeunlock",
						"::writeunlock"
					],
					"id": "syncreaderwriter.writeunlock",
					"name": "SyncReaderWriter::writeunlock",
					"description": "Releases a write lock"
				},
				"function.geoip-asnum-by-name": {
					"tokens": [
						"geoip_asnum_by_name",
						"geoipasnum_by_name"
					],
					"id": "function.geoip-asnum-by-name",
					"name": "geoip_asnum_by_name",
					"description": "Get the Autonomous System Numbers (ASN)"
				},
				"function.geoip-continent-code-by-name": {
					"tokens": [
						"geoip_continent_code_by_name",
						"geoipcontinent_code_by_name"
					],
					"id": "function.geoip-continent-code-by-name",
					"name": "geoip_continent_code_by_name",
					"description": "Get the two letter continent code"
				},
				"function.geoip-country-code-by-name": {
					"tokens": [
						"geoip_country_code_by_name",
						"geoipcountry_code_by_name"
					],
					"id": "function.geoip-country-code-by-name",
					"name": "geoip_country_code_by_name",
					"description": "Get the two letter country code"
				},
				"function.geoip-country-code3-by-name": {
					"tokens": [
						"geoip_country_code3_by_name",
						"geoipcountry_code3_by_name"
					],
					"id": "function.geoip-country-code3-by-name",
					"name": "geoip_country_code3_by_name",
					"description": "Get the three letter country code"
				},
				"function.geoip-country-name-by-name": {
					"tokens": [
						"geoip_country_name_by_name",
						"geoipcountry_name_by_name"
					],
					"id": "function.geoip-country-name-by-name",
					"name": "geoip_country_name_by_name",
					"description": "Get the full country name"
				},
				"function.geoip-database-info": {
					"tokens": [
						"geoip_database_info",
						"geoipdatabase_info"
					],
					"id": "function.geoip-database-info",
					"name": "geoip_database_info",
					"description": "Get GeoIP Database information"
				},
				"function.geoip-db-avail": {
					"tokens": [
						"geoip_db_avail",
						"geoipdb_avail"
					],
					"id": "function.geoip-db-avail",
					"name": "geoip_db_avail",
					"description": "Determine if GeoIP Database is available"
				},
				"function.geoip-db-filename": {
					"tokens": [
						"geoip_db_filename",
						"geoipdb_filename"
					],
					"id": "function.geoip-db-filename",
					"name": "geoip_db_filename",
					"description": "Returns the filename of the corresponding GeoIP Database"
				},
				"function.geoip-db-get-all-info": {
					"tokens": [
						"geoip_db_get_all_info",
						"geoipdb_get_all_info"
					],
					"id": "function.geoip-db-get-all-info",
					"name": "geoip_db_get_all_info",
					"description": "Returns detailed information about all GeoIP database types"
				},
				"function.geoip-domain-by-name": {
					"tokens": [
						"geoip_domain_by_name",
						"geoipdomain_by_name"
					],
					"id": "function.geoip-domain-by-name",
					"name": "geoip_domain_by_name",
					"description": "Get the second level domain name"
				},
				"function.geoip-id-by-name": {
					"tokens": [
						"geoip_id_by_name",
						"geoipid_by_name"
					],
					"id": "function.geoip-id-by-name",
					"name": "geoip_id_by_name",
					"description": "Get the Internet connection type"
				},
				"function.geoip-isp-by-name": {
					"tokens": [
						"geoip_isp_by_name",
						"geoipisp_by_name"
					],
					"id": "function.geoip-isp-by-name",
					"name": "geoip_isp_by_name",
					"description": "Get the Internet Service Provider (ISP) name"
				},
				"function.geoip-netspeedcell-by-name": {
					"tokens": [
						"geoip_netspeedcell_by_name",
						"geoipnetspeedcell_by_name"
					],
					"id": "function.geoip-netspeedcell-by-name",
					"name": "geoip_netspeedcell_by_name",
					"description": "Get the Internet connection speed"
				},
				"function.geoip-org-by-name": {
					"tokens": [
						"geoip_org_by_name",
						"geoiporg_by_name"
					],
					"id": "function.geoip-org-by-name",
					"name": "geoip_org_by_name",
					"description": "Get the organization name"
				},
				"function.geoip-record-by-name": {
					"tokens": [
						"geoip_record_by_name",
						"geoiprecord_by_name"
					],
					"id": "function.geoip-record-by-name",
					"name": "geoip_record_by_name",
					"description": "Returns the detailed City information found in the GeoIP Database"
				},
				"function.geoip-region-by-name": {
					"tokens": [
						"geoip_region_by_name",
						"geoipregion_by_name"
					],
					"id": "function.geoip-region-by-name",
					"name": "geoip_region_by_name",
					"description": "Get the country code and region"
				},
				"function.geoip-region-name-by-code": {
					"tokens": [
						"geoip_region_name_by_code",
						"geoipregion_name_by_code"
					],
					"id": "function.geoip-region-name-by-code",
					"name": "geoip_region_name_by_code",
					"description": "Returns the region name for some country and region code combo"
				},
				"function.geoip-setup-custom-directory": {
					"tokens": [
						"geoip_setup_custom_directory",
						"geoipsetup_custom_directory"
					],
					"id": "function.geoip-setup-custom-directory",
					"name": "geoip_setup_custom_directory",
					"description": "Set a custom directory for the GeoIP database."
				},
				"function.geoip-time-zone-by-country-and-region": {
					"tokens": [
						"geoip_time_zone_by_country_and_region",
						"geoiptime_zone_by_country_and_region"
					],
					"id": "function.geoip-time-zone-by-country-and-region",
					"name": "geoip_time_zone_by_country_and_region",
					"description": "Returns the time zone for some country and region code combo"
				},
				"function.fann-cascadetrain-on-data": {
					"tokens": [
						"fann_cascadetrain_on_data",
						"fanncascadetrain_on_data"
					],
					"id": "function.fann-cascadetrain-on-data",
					"name": "fann_cascadetrain_on_data",
					"description": "Trains on an entire dataset, for a period of time using the Cascade2 training algorithm"
				},
				"function.fann-cascadetrain-on-file": {
					"tokens": [
						"fann_cascadetrain_on_file",
						"fanncascadetrain_on_file"
					],
					"id": "function.fann-cascadetrain-on-file",
					"name": "fann_cascadetrain_on_file",
					"description": "Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm."
				},
				"function.fann-clear-scaling-params": {
					"tokens": [
						"fann_clear_scaling_params",
						"fannclear_scaling_params"
					],
					"id": "function.fann-clear-scaling-params",
					"name": "fann_clear_scaling_params",
					"description": "Clears scaling parameters"
				},
				"function.fann-copy": {
					"tokens": [
						"fann_copy",
						"fanncopy"
					],
					"id": "function.fann-copy",
					"name": "fann_copy",
					"description": "Creates a copy of a fann structure"
				},
				"function.fann-create-from-file": {
					"tokens": [
						"fann_create_from_file",
						"fanncreate_from_file"
					],
					"id": "function.fann-create-from-file",
					"name": "fann_create_from_file",
					"description": "Constructs a backpropagation neural network from a configuration file"
				},
				"function.fann-create-shortcut-array": {
					"tokens": [
						"fann_create_shortcut_array",
						"fanncreate_shortcut_array"
					],
					"id": "function.fann-create-shortcut-array",
					"name": "fann_create_shortcut_array",
					"description": "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections"
				},
				"function.fann-create-shortcut": {
					"tokens": [
						"fann_create_shortcut",
						"fanncreate_shortcut"
					],
					"id": "function.fann-create-shortcut",
					"name": "fann_create_shortcut",
					"description": "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections"
				},
				"function.fann-create-sparse-array": {
					"tokens": [
						"fann_create_sparse_array",
						"fanncreate_sparse_array"
					],
					"id": "function.fann-create-sparse-array",
					"name": "fann_create_sparse_array",
					"description": "Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes"
				},
				"function.fann-create-sparse": {
					"tokens": [
						"fann_create_sparse",
						"fanncreate_sparse"
					],
					"id": "function.fann-create-sparse",
					"name": "fann_create_sparse",
					"description": "Creates a standard backpropagation neural network, which is not fully connected"
				},
				"function.fann-create-standard-array": {
					"tokens": [
						"fann_create_standard_array",
						"fanncreate_standard_array"
					],
					"id": "function.fann-create-standard-array",
					"name": "fann_create_standard_array",
					"description": "Creates a standard fully connected backpropagation neural network using an array of layer sizes"
				},
				"function.fann-create-standard": {
					"tokens": [
						"fann_create_standard",
						"fanncreate_standard"
					],
					"id": "function.fann-create-standard",
					"name": "fann_create_standard",
					"description": "Creates a standard fully connected backpropagation neural network"
				},
				"function.fann-create-train-from-callback": {
					"tokens": [
						"fann_create_train_from_callback",
						"fanncreate_train_from_callback"
					],
					"id": "function.fann-create-train-from-callback",
					"name": "fann_create_train_from_callback",
					"description": "Creates the training data struct from a user supplied function"
				},
				"function.fann-create-train": {
					"tokens": [
						"fann_create_train",
						"fanncreate_train"
					],
					"id": "function.fann-create-train",
					"name": "fann_create_train",
					"description": "Creates an empty training data struct"
				},
				"function.fann-descale-input": {
					"tokens": [
						"fann_descale_input",
						"fanndescale_input"
					],
					"id": "function.fann-descale-input",
					"name": "fann_descale_input",
					"description": "Scale data in input vector after get it from ann based on previously calculated parameters"
				},
				"function.fann-descale-output": {
					"tokens": [
						"fann_descale_output",
						"fanndescale_output"
					],
					"id": "function.fann-descale-output",
					"name": "fann_descale_output",
					"description": "Scale data in output vector after get it from ann based on previously calculated parameters"
				},
				"function.fann-descale-train": {
					"tokens": [
						"fann_descale_train",
						"fanndescale_train"
					],
					"id": "function.fann-descale-train",
					"name": "fann_descale_train",
					"description": "Descale input and output data based on previously calculated parameters"
				},
				"function.fann-destroy-train": {
					"tokens": [
						"fann_destroy_train",
						"fanndestroy_train"
					],
					"id": "function.fann-destroy-train",
					"name": "fann_destroy_train",
					"description": "Destructs the training data"
				},
				"function.fann-destroy": {
					"tokens": [
						"fann_destroy",
						"fanndestroy"
					],
					"id": "function.fann-destroy",
					"name": "fann_destroy",
					"description": "Destroys the entire network and properly freeing all the associated memory"
				},
				"function.fann-duplicate-train-data": {
					"tokens": [
						"fann_duplicate_train_data",
						"fannduplicate_train_data"
					],
					"id": "function.fann-duplicate-train-data",
					"name": "fann_duplicate_train_data",
					"description": "Returns an exact copy of a fann train data"
				},
				"function.fann-get-activation-function": {
					"tokens": [
						"fann_get_activation_function",
						"fannget_activation_function"
					],
					"id": "function.fann-get-activation-function",
					"name": "fann_get_activation_function",
					"description": "Returns the activation function"
				},
				"function.fann-get-activation-steepness": {
					"tokens": [
						"fann_get_activation_steepness",
						"fannget_activation_steepness"
					],
					"id": "function.fann-get-activation-steepness",
					"name": "fann_get_activation_steepness",
					"description": "Returns the activation steepness for supplied neuron and layer number"
				},
				"function.fann-get-bias-array": {
					"tokens": [
						"fann_get_bias_array",
						"fannget_bias_array"
					],
					"id": "function.fann-get-bias-array",
					"name": "fann_get_bias_array",
					"description": "Get the number of bias in each layer in the network"
				},
				"function.fann-get-bit-fail-limit": {
					"tokens": [
						"fann_get_bit_fail_limit",
						"fannget_bit_fail_limit"
					],
					"id": "function.fann-get-bit-fail-limit",
					"name": "fann_get_bit_fail_limit",
					"description": "Returns the bit fail limit used during training"
				},
				"function.fann-get-bit-fail": {
					"tokens": [
						"fann_get_bit_fail",
						"fannget_bit_fail"
					],
					"id": "function.fann-get-bit-fail",
					"name": "fann_get_bit_fail",
					"description": "The number of fail bits"
				},
				"function.fann-get-cascade-activation-functions-count": {
					"tokens": [
						"fann_get_cascade_activation_functions_count",
						"fannget_cascade_activation_functions_count"
					],
					"id": "function.fann-get-cascade-activation-functions-count",
					"name": "fann_get_cascade_activation_functions_count",
					"description": "Returns the number of cascade activation functions"
				},
				"function.fann-get-cascade-activation-functions": {
					"tokens": [
						"fann_get_cascade_activation_functions",
						"fannget_cascade_activation_functions"
					],
					"id": "function.fann-get-cascade-activation-functions",
					"name": "fann_get_cascade_activation_functions",
					"description": "Returns the cascade activation functions"
				},
				"function.fann-get-cascade-activation-steepnesses-count": {
					"tokens": [
						"fann_get_cascade_activation_steepnesses_count",
						"fannget_cascade_activation_steepnesses_count"
					],
					"id": "function.fann-get-cascade-activation-steepnesses-count",
					"name": "fann_get_cascade_activation_steepnesses_count",
					"description": "The number of activation steepnesses"
				},
				"function.fann-get-cascade-activation-steepnesses": {
					"tokens": [
						"fann_get_cascade_activation_steepnesses",
						"fannget_cascade_activation_steepnesses"
					],
					"id": "function.fann-get-cascade-activation-steepnesses",
					"name": "fann_get_cascade_activation_steepnesses",
					"description": "Returns the cascade activation steepnesses"
				},
				"function.fann-get-cascade-candidate-change-fraction": {
					"tokens": [
						"fann_get_cascade_candidate_change_fraction",
						"fannget_cascade_candidate_change_fraction"
					],
					"id": "function.fann-get-cascade-candidate-change-fraction",
					"name": "fann_get_cascade_candidate_change_fraction",
					"description": "Returns the cascade candidate change fraction"
				},
				"function.fann-get-cascade-candidate-limit": {
					"tokens": [
						"fann_get_cascade_candidate_limit",
						"fannget_cascade_candidate_limit"
					],
					"id": "function.fann-get-cascade-candidate-limit",
					"name": "fann_get_cascade_candidate_limit",
					"description": "Return the candidate limit"
				},
				"function.fann-get-cascade-candidate-stagnation-epochs": {
					"tokens": [
						"fann_get_cascade_candidate_stagnation_epochs",
						"fannget_cascade_candidate_stagnation_epochs"
					],
					"id": "function.fann-get-cascade-candidate-stagnation-epochs",
					"name": "fann_get_cascade_candidate_stagnation_epochs",
					"description": "Returns the number of cascade candidate stagnation epochs"
				},
				"function.fann-get-cascade-max-cand-epochs": {
					"tokens": [
						"fann_get_cascade_max_cand_epochs",
						"fannget_cascade_max_cand_epochs"
					],
					"id": "function.fann-get-cascade-max-cand-epochs",
					"name": "fann_get_cascade_max_cand_epochs",
					"description": "Returns the maximum candidate epochs"
				},
				"function.fann-get-cascade-max-out-epochs": {
					"tokens": [
						"fann_get_cascade_max_out_epochs",
						"fannget_cascade_max_out_epochs"
					],
					"id": "function.fann-get-cascade-max-out-epochs",
					"name": "fann_get_cascade_max_out_epochs",
					"description": "Returns the maximum out epochs"
				},
				"function.fann-get-cascade-min-cand-epochs": {
					"tokens": [
						"fann_get_cascade_min_cand_epochs",
						"fannget_cascade_min_cand_epochs"
					],
					"id": "function.fann-get-cascade-min-cand-epochs",
					"name": "fann_get_cascade_min_cand_epochs",
					"description": "Returns the minimum candidate epochs"
				},
				"function.fann-get-cascade-min-out-epochs": {
					"tokens": [
						"fann_get_cascade_min_out_epochs",
						"fannget_cascade_min_out_epochs"
					],
					"id": "function.fann-get-cascade-min-out-epochs",
					"name": "fann_get_cascade_min_out_epochs",
					"description": "Returns the minimum out epochs"
				},
				"function.fann-get-cascade-num-candidate-groups": {
					"tokens": [
						"fann_get_cascade_num_candidate_groups",
						"fannget_cascade_num_candidate_groups"
					],
					"id": "function.fann-get-cascade-num-candidate-groups",
					"name": "fann_get_cascade_num_candidate_groups",
					"description": "Returns the number of candidate groups"
				},
				"function.fann-get-cascade-num-candidates": {
					"tokens": [
						"fann_get_cascade_num_candidates",
						"fannget_cascade_num_candidates"
					],
					"id": "function.fann-get-cascade-num-candidates",
					"name": "fann_get_cascade_num_candidates",
					"description": "Returns the number of candidates used during training"
				},
				"function.fann-get-cascade-output-change-fraction": {
					"tokens": [
						"fann_get_cascade_output_change_fraction",
						"fannget_cascade_output_change_fraction"
					],
					"id": "function.fann-get-cascade-output-change-fraction",
					"name": "fann_get_cascade_output_change_fraction",
					"description": "Returns the cascade output change fraction"
				},
				"function.fann-get-cascade-output-stagnation-epochs": {
					"tokens": [
						"fann_get_cascade_output_stagnation_epochs",
						"fannget_cascade_output_stagnation_epochs"
					],
					"id": "function.fann-get-cascade-output-stagnation-epochs",
					"name": "fann_get_cascade_output_stagnation_epochs",
					"description": "Returns the number of cascade output stagnation epochs"
				},
				"function.fann-get-cascade-weight-multiplier": {
					"tokens": [
						"fann_get_cascade_weight_multiplier",
						"fannget_cascade_weight_multiplier"
					],
					"id": "function.fann-get-cascade-weight-multiplier",
					"name": "fann_get_cascade_weight_multiplier",
					"description": "Returns the weight multiplier"
				},
				"function.fann-get-connection-array": {
					"tokens": [
						"fann_get_connection_array",
						"fannget_connection_array"
					],
					"id": "function.fann-get-connection-array",
					"name": "fann_get_connection_array",
					"description": "Get connections in the network"
				},
				"function.fann-get-connection-rate": {
					"tokens": [
						"fann_get_connection_rate",
						"fannget_connection_rate"
					],
					"id": "function.fann-get-connection-rate",
					"name": "fann_get_connection_rate",
					"description": "Get the connection rate used when the network was created"
				},
				"function.fann-get-errno": {
					"tokens": [
						"fann_get_errno",
						"fannget_errno"
					],
					"id": "function.fann-get-errno",
					"name": "fann_get_errno",
					"description": "Returns the last error number"
				},
				"function.fann-get-errstr": {
					"tokens": [
						"fann_get_errstr",
						"fannget_errstr"
					],
					"id": "function.fann-get-errstr",
					"name": "fann_get_errstr",
					"description": "Returns the last errstr"
				},
				"function.fann-get-layer-array": {
					"tokens": [
						"fann_get_layer_array",
						"fannget_layer_array"
					],
					"id": "function.fann-get-layer-array",
					"name": "fann_get_layer_array",
					"description": "Get the number of neurons in each layer in the network"
				},
				"function.fann-get-learning-momentum": {
					"tokens": [
						"fann_get_learning_momentum",
						"fannget_learning_momentum"
					],
					"id": "function.fann-get-learning-momentum",
					"name": "fann_get_learning_momentum",
					"description": "Returns the learning momentum"
				},
				"function.fann-get-learning-rate": {
					"tokens": [
						"fann_get_learning_rate",
						"fannget_learning_rate"
					],
					"id": "function.fann-get-learning-rate",
					"name": "fann_get_learning_rate",
					"description": "Returns the learning rate"
				},
				"function.fann-get-mse": {
					"tokens": [
						"fann_get_MSE",
						"fannget_MSE"
					],
					"id": "function.fann-get-mse",
					"name": "fann_get_MSE",
					"description": "Reads the mean square error from the network"
				},
				"function.fann-get-network-type": {
					"tokens": [
						"fann_get_network_type",
						"fannget_network_type"
					],
					"id": "function.fann-get-network-type",
					"name": "fann_get_network_type",
					"description": "Get the type of neural network it was created as"
				},
				"function.fann-get-num-input": {
					"tokens": [
						"fann_get_num_input",
						"fannget_num_input"
					],
					"id": "function.fann-get-num-input",
					"name": "fann_get_num_input",
					"description": "Get the number of input neurons"
				},
				"function.fann-get-num-layers": {
					"tokens": [
						"fann_get_num_layers",
						"fannget_num_layers"
					],
					"id": "function.fann-get-num-layers",
					"name": "fann_get_num_layers",
					"description": "Get the number of layers in the neural network"
				},
				"function.fann-get-num-output": {
					"tokens": [
						"fann_get_num_output",
						"fannget_num_output"
					],
					"id": "function.fann-get-num-output",
					"name": "fann_get_num_output",
					"description": "Get the number of output neurons"
				},
				"function.fann-get-quickprop-decay": {
					"tokens": [
						"fann_get_quickprop_decay",
						"fannget_quickprop_decay"
					],
					"id": "function.fann-get-quickprop-decay",
					"name": "fann_get_quickprop_decay",
					"description": "Returns the decay which is a factor that weights should decrease in each iteration during quickprop training"
				},
				"function.fann-get-quickprop-mu": {
					"tokens": [
						"fann_get_quickprop_mu",
						"fannget_quickprop_mu"
					],
					"id": "function.fann-get-quickprop-mu",
					"name": "fann_get_quickprop_mu",
					"description": "Returns the mu factor"
				},
				"function.fann-get-rprop-decrease-factor": {
					"tokens": [
						"fann_get_rprop_decrease_factor",
						"fannget_rprop_decrease_factor"
					],
					"id": "function.fann-get-rprop-decrease-factor",
					"name": "fann_get_rprop_decrease_factor",
					"description": "Returns the increase factor used during RPROP training"
				},
				"function.fann-get-rprop-delta-max": {
					"tokens": [
						"fann_get_rprop_delta_max",
						"fannget_rprop_delta_max"
					],
					"id": "function.fann-get-rprop-delta-max",
					"name": "fann_get_rprop_delta_max",
					"description": "Returns the maximum step-size"
				},
				"function.fann-get-rprop-delta-min": {
					"tokens": [
						"fann_get_rprop_delta_min",
						"fannget_rprop_delta_min"
					],
					"id": "function.fann-get-rprop-delta-min",
					"name": "fann_get_rprop_delta_min",
					"description": "Returns the minimum step-size"
				},
				"function.fann-get-rprop-delta-zero": {
					"tokens": [
						"fann_get_rprop_delta_zero",
						"fannget_rprop_delta_zero"
					],
					"id": "function.fann-get-rprop-delta-zero",
					"name": "fann_get_rprop_delta_zero",
					"description": "Returns the initial step-size"
				},
				"function.fann-get-rprop-increase-factor": {
					"tokens": [
						"fann_get_rprop_increase_factor",
						"fannget_rprop_increase_factor"
					],
					"id": "function.fann-get-rprop-increase-factor",
					"name": "fann_get_rprop_increase_factor",
					"description": "Returns the increase factor used during RPROP training"
				},
				"function.fann-get-sarprop-step-error-shift": {
					"tokens": [
						"fann_get_sarprop_step_error_shift",
						"fannget_sarprop_step_error_shift"
					],
					"id": "function.fann-get-sarprop-step-error-shift",
					"name": "fann_get_sarprop_step_error_shift",
					"description": "Returns the sarprop step error shift"
				},
				"function.fann-get-sarprop-step-error-threshold-factor": {
					"tokens": [
						"fann_get_sarprop_step_error_threshold_factor",
						"fannget_sarprop_step_error_threshold_factor"
					],
					"id": "function.fann-get-sarprop-step-error-threshold-factor",
					"name": "fann_get_sarprop_step_error_threshold_factor",
					"description": "Returns the sarprop step error threshold factor"
				},
				"function.fann-get-sarprop-temperature": {
					"tokens": [
						"fann_get_sarprop_temperature",
						"fannget_sarprop_temperature"
					],
					"id": "function.fann-get-sarprop-temperature",
					"name": "fann_get_sarprop_temperature",
					"description": "Returns the sarprop temperature"
				},
				"function.fann-get-sarprop-weight-decay-shift": {
					"tokens": [
						"fann_get_sarprop_weight_decay_shift",
						"fannget_sarprop_weight_decay_shift"
					],
					"id": "function.fann-get-sarprop-weight-decay-shift",
					"name": "fann_get_sarprop_weight_decay_shift",
					"description": "Returns the sarprop weight decay shift"
				},
				"function.fann-get-total-connections": {
					"tokens": [
						"fann_get_total_connections",
						"fannget_total_connections"
					],
					"id": "function.fann-get-total-connections",
					"name": "fann_get_total_connections",
					"description": "Get the total number of connections in the entire network"
				},
				"function.fann-get-total-neurons": {
					"tokens": [
						"fann_get_total_neurons",
						"fannget_total_neurons"
					],
					"id": "function.fann-get-total-neurons",
					"name": "fann_get_total_neurons",
					"description": "Get the total number of neurons in the entire network"
				},
				"function.fann-get-train-error-function": {
					"tokens": [
						"fann_get_train_error_function",
						"fannget_train_error_function"
					],
					"id": "function.fann-get-train-error-function",
					"name": "fann_get_train_error_function",
					"description": "Returns the error function used during training"
				},
				"function.fann-get-train-stop-function": {
					"tokens": [
						"fann_get_train_stop_function",
						"fannget_train_stop_function"
					],
					"id": "function.fann-get-train-stop-function",
					"name": "fann_get_train_stop_function",
					"description": "Returns the stop function used during training"
				},
				"function.fann-get-training-algorithm": {
					"tokens": [
						"fann_get_training_algorithm",
						"fannget_training_algorithm"
					],
					"id": "function.fann-get-training-algorithm",
					"name": "fann_get_training_algorithm",
					"description": "Returns the training algorithm"
				},
				"function.fann-init-weights": {
					"tokens": [
						"fann_init_weights",
						"fanninit_weights"
					],
					"id": "function.fann-init-weights",
					"name": "fann_init_weights",
					"description": "Initialize the weights using Widrow + Nguyen&rsquo;s algorithm"
				},
				"function.fann-length-train-data": {
					"tokens": [
						"fann_length_train_data",
						"fannlength_train_data"
					],
					"id": "function.fann-length-train-data",
					"name": "fann_length_train_data",
					"description": "Returns the number of training patterns in the train data"
				},
				"function.fann-merge-train-data": {
					"tokens": [
						"fann_merge_train_data",
						"fannmerge_train_data"
					],
					"id": "function.fann-merge-train-data",
					"name": "fann_merge_train_data",
					"description": "Merges the train data"
				},
				"function.fann-num-input-train-data": {
					"tokens": [
						"fann_num_input_train_data",
						"fannnum_input_train_data"
					],
					"id": "function.fann-num-input-train-data",
					"name": "fann_num_input_train_data",
					"description": "Returns the number of inputs in each of the training patterns in the train data"
				},
				"function.fann-num-output-train-data": {
					"tokens": [
						"fann_num_output_train_data",
						"fannnum_output_train_data"
					],
					"id": "function.fann-num-output-train-data",
					"name": "fann_num_output_train_data",
					"description": "Returns the number of outputs in each of the training patterns in the train data"
				},
				"function.fann-print-error": {
					"tokens": [
						"fann_print_error",
						"fannprint_error"
					],
					"id": "function.fann-print-error",
					"name": "fann_print_error",
					"description": "Prints the error string"
				},
				"function.fann-randomize-weights": {
					"tokens": [
						"fann_randomize_weights",
						"fannrandomize_weights"
					],
					"id": "function.fann-randomize-weights",
					"name": "fann_randomize_weights",
					"description": "Give each connection a random weight between min_weight and max_weight"
				},
				"function.fann-read-train-from-file": {
					"tokens": [
						"fann_read_train_from_file",
						"fannread_train_from_file"
					],
					"id": "function.fann-read-train-from-file",
					"name": "fann_read_train_from_file",
					"description": "Reads a file that stores training data"
				},
				"function.fann-reset-errno": {
					"tokens": [
						"fann_reset_errno",
						"fannreset_errno"
					],
					"id": "function.fann-reset-errno",
					"name": "fann_reset_errno",
					"description": "Resets the last error number"
				},
				"function.fann-reset-errstr": {
					"tokens": [
						"fann_reset_errstr",
						"fannreset_errstr"
					],
					"id": "function.fann-reset-errstr",
					"name": "fann_reset_errstr",
					"description": "Resets the last error string"
				},
				"function.fann-reset-mse": {
					"tokens": [
						"fann_reset_MSE",
						"fannreset_MSE"
					],
					"id": "function.fann-reset-mse",
					"name": "fann_reset_MSE",
					"description": "Resets the mean square error from the network"
				},
				"function.fann-run": {
					"tokens": [
						"fann_run",
						"fannrun"
					],
					"id": "function.fann-run",
					"name": "fann_run",
					"description": "Will run input through the neural network"
				},
				"function.fann-save-train": {
					"tokens": [
						"fann_save_train",
						"fannsave_train"
					],
					"id": "function.fann-save-train",
					"name": "fann_save_train",
					"description": "Save the training structure to a file"
				},
				"function.fann-save": {
					"tokens": [
						"fann_save",
						"fannsave"
					],
					"id": "function.fann-save",
					"name": "fann_save",
					"description": "Saves the entire network to a configuration file"
				},
				"function.fann-scale-input-train-data": {
					"tokens": [
						"fann_scale_input_train_data",
						"fannscale_input_train_data"
					],
					"id": "function.fann-scale-input-train-data",
					"name": "fann_scale_input_train_data",
					"description": "Scales the inputs in the training data to the specified range"
				},
				"function.fann-scale-input": {
					"tokens": [
						"fann_scale_input",
						"fannscale_input"
					],
					"id": "function.fann-scale-input",
					"name": "fann_scale_input",
					"description": "Scale data in input vector before feed it to ann based on previously calculated parameters"
				},
				"function.fann-scale-output-train-data": {
					"tokens": [
						"fann_scale_output_train_data",
						"fannscale_output_train_data"
					],
					"id": "function.fann-scale-output-train-data",
					"name": "fann_scale_output_train_data",
					"description": "Scales the outputs in the training data to the specified range"
				},
				"function.fann-scale-output": {
					"tokens": [
						"fann_scale_output",
						"fannscale_output"
					],
					"id": "function.fann-scale-output",
					"name": "fann_scale_output",
					"description": "Scale data in output vector before feed it to ann based on previously calculated parameters"
				},
				"function.fann-scale-train-data": {
					"tokens": [
						"fann_scale_train_data",
						"fannscale_train_data"
					],
					"id": "function.fann-scale-train-data",
					"name": "fann_scale_train_data",
					"description": "Scales the inputs and outputs in the training data to the specified range"
				},
				"function.fann-scale-train": {
					"tokens": [
						"fann_scale_train",
						"fannscale_train"
					],
					"id": "function.fann-scale-train",
					"name": "fann_scale_train",
					"description": "Scale input and output data based on previously calculated parameters"
				},
				"function.fann-set-activation-function-hidden": {
					"tokens": [
						"fann_set_activation_function_hidden",
						"fannset_activation_function_hidden"
					],
					"id": "function.fann-set-activation-function-hidden",
					"name": "fann_set_activation_function_hidden",
					"description": "Sets the activation function for all of the hidden layers"
				},
				"function.fann-set-activation-function-layer": {
					"tokens": [
						"fann_set_activation_function_layer",
						"fannset_activation_function_layer"
					],
					"id": "function.fann-set-activation-function-layer",
					"name": "fann_set_activation_function_layer",
					"description": "Sets the activation function for all the neurons in the supplied layer."
				},
				"function.fann-set-activation-function-output": {
					"tokens": [
						"fann_set_activation_function_output",
						"fannset_activation_function_output"
					],
					"id": "function.fann-set-activation-function-output",
					"name": "fann_set_activation_function_output",
					"description": "Sets the activation function for the output layer"
				},
				"function.fann-set-activation-function": {
					"tokens": [
						"fann_set_activation_function",
						"fannset_activation_function"
					],
					"id": "function.fann-set-activation-function",
					"name": "fann_set_activation_function",
					"description": "Sets the activation function for supplied neuron and layer"
				},
				"function.fann-set-activation-steepness-hidden": {
					"tokens": [
						"fann_set_activation_steepness_hidden",
						"fannset_activation_steepness_hidden"
					],
					"id": "function.fann-set-activation-steepness-hidden",
					"name": "fann_set_activation_steepness_hidden",
					"description": "Sets the steepness of the activation steepness for all neurons in the all hidden layers"
				},
				"function.fann-set-activation-steepness-layer": {
					"tokens": [
						"fann_set_activation_steepness_layer",
						"fannset_activation_steepness_layer"
					],
					"id": "function.fann-set-activation-steepness-layer",
					"name": "fann_set_activation_steepness_layer",
					"description": "Sets the activation steepness for all of the neurons in the supplied layer number"
				},
				"function.fann-set-activation-steepness-output": {
					"tokens": [
						"fann_set_activation_steepness_output",
						"fannset_activation_steepness_output"
					],
					"id": "function.fann-set-activation-steepness-output",
					"name": "fann_set_activation_steepness_output",
					"description": "Sets the steepness of the activation steepness in the output layer"
				},
				"function.fann-set-activation-steepness": {
					"tokens": [
						"fann_set_activation_steepness",
						"fannset_activation_steepness"
					],
					"id": "function.fann-set-activation-steepness",
					"name": "fann_set_activation_steepness",
					"description": "Sets the activation steepness for supplied neuron and layer number"
				},
				"function.fann-set-bit-fail-limit": {
					"tokens": [
						"fann_set_bit_fail_limit",
						"fannset_bit_fail_limit"
					],
					"id": "function.fann-set-bit-fail-limit",
					"name": "fann_set_bit_fail_limit",
					"description": "Set the bit fail limit used during training"
				},
				"function.fann-set-callback": {
					"tokens": [
						"fann_set_callback",
						"fannset_callback"
					],
					"id": "function.fann-set-callback",
					"name": "fann_set_callback",
					"description": "Sets the callback function for use during training"
				},
				"function.fann-set-cascade-activation-functions": {
					"tokens": [
						"fann_set_cascade_activation_functions",
						"fannset_cascade_activation_functions"
					],
					"id": "function.fann-set-cascade-activation-functions",
					"name": "fann_set_cascade_activation_functions",
					"description": "Sets the array of cascade candidate activation functions"
				},
				"function.fann-set-cascade-activation-steepnesses": {
					"tokens": [
						"fann_set_cascade_activation_steepnesses",
						"fannset_cascade_activation_steepnesses"
					],
					"id": "function.fann-set-cascade-activation-steepnesses",
					"name": "fann_set_cascade_activation_steepnesses",
					"description": "Sets the array of cascade candidate activation steepnesses"
				},
				"function.fann-set-cascade-candidate-change-fraction": {
					"tokens": [
						"fann_set_cascade_candidate_change_fraction",
						"fannset_cascade_candidate_change_fraction"
					],
					"id": "function.fann-set-cascade-candidate-change-fraction",
					"name": "fann_set_cascade_candidate_change_fraction",
					"description": "Sets the cascade candidate change fraction"
				},
				"function.fann-set-cascade-candidate-limit": {
					"tokens": [
						"fann_set_cascade_candidate_limit",
						"fannset_cascade_candidate_limit"
					],
					"id": "function.fann-set-cascade-candidate-limit",
					"name": "fann_set_cascade_candidate_limit",
					"description": "Sets the candidate limit"
				},
				"function.fann-set-cascade-candidate-stagnation-epochs": {
					"tokens": [
						"fann_set_cascade_candidate_stagnation_epochs",
						"fannset_cascade_candidate_stagnation_epochs"
					],
					"id": "function.fann-set-cascade-candidate-stagnation-epochs",
					"name": "fann_set_cascade_candidate_stagnation_epochs",
					"description": "Sets the number of cascade candidate stagnation epochs"
				},
				"function.fann-set-cascade-max-cand-epochs": {
					"tokens": [
						"fann_set_cascade_max_cand_epochs",
						"fannset_cascade_max_cand_epochs"
					],
					"id": "function.fann-set-cascade-max-cand-epochs",
					"name": "fann_set_cascade_max_cand_epochs",
					"description": "Sets the max candidate epochs"
				},
				"function.fann-set-cascade-max-out-epochs": {
					"tokens": [
						"fann_set_cascade_max_out_epochs",
						"fannset_cascade_max_out_epochs"
					],
					"id": "function.fann-set-cascade-max-out-epochs",
					"name": "fann_set_cascade_max_out_epochs",
					"description": "Sets the maximum out epochs"
				},
				"function.fann-set-cascade-min-cand-epochs": {
					"tokens": [
						"fann_set_cascade_min_cand_epochs",
						"fannset_cascade_min_cand_epochs"
					],
					"id": "function.fann-set-cascade-min-cand-epochs",
					"name": "fann_set_cascade_min_cand_epochs",
					"description": "Sets the min candidate epochs"
				},
				"function.fann-set-cascade-min-out-epochs": {
					"tokens": [
						"fann_set_cascade_min_out_epochs",
						"fannset_cascade_min_out_epochs"
					],
					"id": "function.fann-set-cascade-min-out-epochs",
					"name": "fann_set_cascade_min_out_epochs",
					"description": "Sets the minimum out epochs"
				},
				"function.fann-set-cascade-num-candidate-groups": {
					"tokens": [
						"fann_set_cascade_num_candidate_groups",
						"fannset_cascade_num_candidate_groups"
					],
					"id": "function.fann-set-cascade-num-candidate-groups",
					"name": "fann_set_cascade_num_candidate_groups",
					"description": "Sets the number of candidate groups"
				},
				"function.fann-set-cascade-output-change-fraction": {
					"tokens": [
						"fann_set_cascade_output_change_fraction",
						"fannset_cascade_output_change_fraction"
					],
					"id": "function.fann-set-cascade-output-change-fraction",
					"name": "fann_set_cascade_output_change_fraction",
					"description": "Sets the cascade output change fraction"
				},
				"function.fann-set-cascade-output-stagnation-epochs": {
					"tokens": [
						"fann_set_cascade_output_stagnation_epochs",
						"fannset_cascade_output_stagnation_epochs"
					],
					"id": "function.fann-set-cascade-output-stagnation-epochs",
					"name": "fann_set_cascade_output_stagnation_epochs",
					"description": "Sets the number of cascade output stagnation epochs"
				},
				"function.fann-set-cascade-weight-multiplier": {
					"tokens": [
						"fann_set_cascade_weight_multiplier",
						"fannset_cascade_weight_multiplier"
					],
					"id": "function.fann-set-cascade-weight-multiplier",
					"name": "fann_set_cascade_weight_multiplier",
					"description": "Sets the weight multiplier"
				},
				"function.fann-set-error-log": {
					"tokens": [
						"fann_set_error_log",
						"fannset_error_log"
					],
					"id": "function.fann-set-error-log",
					"name": "fann_set_error_log",
					"description": "Sets where the errors are logged to"
				},
				"function.fann-set-input-scaling-params": {
					"tokens": [
						"fann_set_input_scaling_params",
						"fannset_input_scaling_params"
					],
					"id": "function.fann-set-input-scaling-params",
					"name": "fann_set_input_scaling_params",
					"description": "Calculate input scaling parameters for future use based on training data"
				},
				"function.fann-set-learning-momentum": {
					"tokens": [
						"fann_set_learning_momentum",
						"fannset_learning_momentum"
					],
					"id": "function.fann-set-learning-momentum",
					"name": "fann_set_learning_momentum",
					"description": "Sets the learning momentum"
				},
				"function.fann-set-learning-rate": {
					"tokens": [
						"fann_set_learning_rate",
						"fannset_learning_rate"
					],
					"id": "function.fann-set-learning-rate",
					"name": "fann_set_learning_rate",
					"description": "Sets the learning rate"
				},
				"function.fann-set-output-scaling-params": {
					"tokens": [
						"fann_set_output_scaling_params",
						"fannset_output_scaling_params"
					],
					"id": "function.fann-set-output-scaling-params",
					"name": "fann_set_output_scaling_params",
					"description": "Calculate output scaling parameters for future use based on training data"
				},
				"function.fann-set-quickprop-decay": {
					"tokens": [
						"fann_set_quickprop_decay",
						"fannset_quickprop_decay"
					],
					"id": "function.fann-set-quickprop-decay",
					"name": "fann_set_quickprop_decay",
					"description": "Sets the quickprop decay factor"
				},
				"function.fann-set-quickprop-mu": {
					"tokens": [
						"fann_set_quickprop_mu",
						"fannset_quickprop_mu"
					],
					"id": "function.fann-set-quickprop-mu",
					"name": "fann_set_quickprop_mu",
					"description": "Sets the quickprop mu factor"
				},
				"function.fann-set-rprop-decrease-factor": {
					"tokens": [
						"fann_set_rprop_decrease_factor",
						"fannset_rprop_decrease_factor"
					],
					"id": "function.fann-set-rprop-decrease-factor",
					"name": "fann_set_rprop_decrease_factor",
					"description": "Sets the decrease factor used during RPROP training"
				},
				"function.fann-set-rprop-delta-max": {
					"tokens": [
						"fann_set_rprop_delta_max",
						"fannset_rprop_delta_max"
					],
					"id": "function.fann-set-rprop-delta-max",
					"name": "fann_set_rprop_delta_max",
					"description": "Sets the maximum step-size"
				},
				"function.fann-set-rprop-delta-min": {
					"tokens": [
						"fann_set_rprop_delta_min",
						"fannset_rprop_delta_min"
					],
					"id": "function.fann-set-rprop-delta-min",
					"name": "fann_set_rprop_delta_min",
					"description": "Sets the minimum step-size"
				},
				"function.fann-set-rprop-delta-zero": {
					"tokens": [
						"fann_set_rprop_delta_zero",
						"fannset_rprop_delta_zero"
					],
					"id": "function.fann-set-rprop-delta-zero",
					"name": "fann_set_rprop_delta_zero",
					"description": "Sets the initial step-size"
				},
				"function.fann-set-rprop-increase-factor": {
					"tokens": [
						"fann_set_rprop_increase_factor",
						"fannset_rprop_increase_factor"
					],
					"id": "function.fann-set-rprop-increase-factor",
					"name": "fann_set_rprop_increase_factor",
					"description": "Sets the increase factor used during RPROP training"
				},
				"function.fann-set-sarprop-step-error-shift": {
					"tokens": [
						"fann_set_sarprop_step_error_shift",
						"fannset_sarprop_step_error_shift"
					],
					"id": "function.fann-set-sarprop-step-error-shift",
					"name": "fann_set_sarprop_step_error_shift",
					"description": "Sets the sarprop step error shift"
				},
				"function.fann-set-sarprop-step-error-threshold-factor": {
					"tokens": [
						"fann_set_sarprop_step_error_threshold_factor",
						"fannset_sarprop_step_error_threshold_factor"
					],
					"id": "function.fann-set-sarprop-step-error-threshold-factor",
					"name": "fann_set_sarprop_step_error_threshold_factor",
					"description": "Sets the sarprop step error threshold factor"
				},
				"function.fann-set-sarprop-temperature": {
					"tokens": [
						"fann_set_sarprop_temperature",
						"fannset_sarprop_temperature"
					],
					"id": "function.fann-set-sarprop-temperature",
					"name": "fann_set_sarprop_temperature",
					"description": "Sets the sarprop temperature"
				},
				"function.fann-set-sarprop-weight-decay-shift": {
					"tokens": [
						"fann_set_sarprop_weight_decay_shift",
						"fannset_sarprop_weight_decay_shift"
					],
					"id": "function.fann-set-sarprop-weight-decay-shift",
					"name": "fann_set_sarprop_weight_decay_shift",
					"description": "Sets the sarprop weight decay shift"
				},
				"function.fann-set-scaling-params": {
					"tokens": [
						"fann_set_scaling_params",
						"fannset_scaling_params"
					],
					"id": "function.fann-set-scaling-params",
					"name": "fann_set_scaling_params",
					"description": "Calculate input and output scaling parameters for future use based on training data"
				},
				"function.fann-set-train-error-function": {
					"tokens": [
						"fann_set_train_error_function",
						"fannset_train_error_function"
					],
					"id": "function.fann-set-train-error-function",
					"name": "fann_set_train_error_function",
					"description": "Sets the error function used during training"
				},
				"function.fann-set-train-stop-function": {
					"tokens": [
						"fann_set_train_stop_function",
						"fannset_train_stop_function"
					],
					"id": "function.fann-set-train-stop-function",
					"name": "fann_set_train_stop_function",
					"description": "Sets the stop function used during training"
				},
				"function.fann-set-training-algorithm": {
					"tokens": [
						"fann_set_training_algorithm",
						"fannset_training_algorithm"
					],
					"id": "function.fann-set-training-algorithm",
					"name": "fann_set_training_algorithm",
					"description": "Sets the training algorithm"
				},
				"function.fann-set-weight-array": {
					"tokens": [
						"fann_set_weight_array",
						"fannset_weight_array"
					],
					"id": "function.fann-set-weight-array",
					"name": "fann_set_weight_array",
					"description": "Set connections in the network"
				},
				"function.fann-set-weight": {
					"tokens": [
						"fann_set_weight",
						"fannset_weight"
					],
					"id": "function.fann-set-weight",
					"name": "fann_set_weight",
					"description": "Set a connection in the network"
				},
				"function.fann-shuffle-train-data": {
					"tokens": [
						"fann_shuffle_train_data",
						"fannshuffle_train_data"
					],
					"id": "function.fann-shuffle-train-data",
					"name": "fann_shuffle_train_data",
					"description": "Shuffles training data, randomizing the order"
				},
				"function.fann-subset-train-data": {
					"tokens": [
						"fann_subset_train_data",
						"fannsubset_train_data"
					],
					"id": "function.fann-subset-train-data",
					"name": "fann_subset_train_data",
					"description": "Returns an copy of a subset of the train data"
				},
				"function.fann-test-data": {
					"tokens": [
						"fann_test_data",
						"fanntest_data"
					],
					"id": "function.fann-test-data",
					"name": "fann_test_data",
					"description": "Test a set of training data and calculates the MSE for the training data"
				},
				"function.fann-test": {
					"tokens": [
						"fann_test",
						"fanntest"
					],
					"id": "function.fann-test",
					"name": "fann_test",
					"description": "Test with a set of inputs, and a set of desired outputs"
				},
				"function.fann-train-epoch": {
					"tokens": [
						"fann_train_epoch",
						"fanntrain_epoch"
					],
					"id": "function.fann-train-epoch",
					"name": "fann_train_epoch",
					"description": "Train one epoch with a set of training data"
				},
				"function.fann-train-on-data": {
					"tokens": [
						"fann_train_on_data",
						"fanntrain_on_data"
					],
					"id": "function.fann-train-on-data",
					"name": "fann_train_on_data",
					"description": "Trains on an entire dataset for a period of time"
				},
				"function.fann-train-on-file": {
					"tokens": [
						"fann_train_on_file",
						"fanntrain_on_file"
					],
					"id": "function.fann-train-on-file",
					"name": "fann_train_on_file",
					"description": "Trains on an entire dataset, which is read from file, for a period of time"
				},
				"function.fann-train": {
					"tokens": [
						"fann_train",
						"fanntrain"
					],
					"id": "function.fann-train",
					"name": "fann_train",
					"description": "Train one iteration with a set of inputs, and a set of desired outputs"
				},
				"fannconnection.construct": {
					"tokens": [
						"FANNConnection::__construct",
						"FANNConnection::_construct",
						"__construct",
						"::__construct"
					],
					"id": "fannconnection.construct",
					"name": "FANNConnection::__construct",
					"description": "The connection constructor"
				},
				"fannconnection.getfromneuron": {
					"tokens": [
						"FANNConnection::getFromNeuron",
						"getFromNeuron",
						"::getFromNeuron"
					],
					"id": "fannconnection.getfromneuron",
					"name": "FANNConnection::getFromNeuron",
					"description": "Returns the postions of starting neuron."
				},
				"fannconnection.gettoneuron": {
					"tokens": [
						"FANNConnection::getToNeuron",
						"getToNeuron",
						"::getToNeuron"
					],
					"id": "fannconnection.gettoneuron",
					"name": "FANNConnection::getToNeuron",
					"description": "Returns the postions of terminating neuron"
				},
				"fannconnection.getweight": {
					"tokens": [
						"FANNConnection::getWeight",
						"getWeight",
						"::getWeight"
					],
					"id": "fannconnection.getweight",
					"name": "FANNConnection::getWeight",
					"description": "Returns the connection weight"
				},
				"fannconnection.setweight": {
					"tokens": [
						"FANNConnection::setWeight",
						"setWeight",
						"::setWeight"
					],
					"id": "fannconnection.setweight",
					"name": "FANNConnection::setWeight",
					"description": "Sets the connections weight"
				},
				"jsonserializable.jsonserialize": {
					"tokens": [
						"JsonSerializable::jsonSerialize",
						"jsonSerialize",
						"::jsonSerialize"
					],
					"id": "jsonserializable.jsonserialize",
					"name": "JsonSerializable::jsonSerialize",
					"description": "Specify data which should be serialized to JSON"
				},
				"function.json-decode": {
					"tokens": [
						"json_decode",
						"jsondecode"
					],
					"id": "function.json-decode",
					"name": "json_decode",
					"description": "Decodes a JSON string"
				},
				"function.json-encode": {
					"tokens": [
						"json_encode",
						"jsonencode"
					],
					"id": "function.json-encode",
					"name": "json_encode",
					"description": "Returns the JSON representation of a value"
				},
				"function.json-last-error-msg": {
					"tokens": [
						"json_last_error_msg",
						"jsonlast_error_msg"
					],
					"id": "function.json-last-error-msg",
					"name": "json_last_error_msg",
					"description": "Returns the error string of the last json_encode() or json_decode() call"
				},
				"function.json-last-error": {
					"tokens": [
						"json_last_error",
						"jsonlast_error"
					],
					"id": "function.json-last-error",
					"name": "json_last_error",
					"description": "Returns the last error occurred"
				},
				"judy.bycount": {
					"tokens": [
						"Judy::byCount",
						"byCount",
						"::byCount"
					],
					"id": "judy.bycount",
					"name": "Judy::byCount",
					"description": "Locate the Nth index present in the Judy array"
				},
				"judy.construct": {
					"tokens": [
						"Judy::__construct",
						"Judy::_construct",
						"__construct",
						"::__construct"
					],
					"id": "judy.construct",
					"name": "Judy::__construct",
					"description": "Construct a new Judy object"
				},
				"judy.count": {
					"tokens": [
						"Judy::count",
						"count",
						"::count"
					],
					"id": "judy.count",
					"name": "Judy::count",
					"description": "Count the number of elements in the Judy array"
				},
				"judy.destruct": {
					"tokens": [
						"Judy::__destruct",
						"Judy::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "judy.destruct",
					"name": "Judy::__destruct",
					"description": "Destruct a Judy object"
				},
				"judy.first": {
					"tokens": [
						"Judy::first",
						"first",
						"::first"
					],
					"id": "judy.first",
					"name": "Judy::first",
					"description": "Search for the first index in the Judy array"
				},
				"judy.firstempty": {
					"tokens": [
						"Judy::firstEmpty",
						"firstEmpty",
						"::firstEmpty"
					],
					"id": "judy.firstempty",
					"name": "Judy::firstEmpty",
					"description": "Search for the first absent index in the Judy array"
				},
				"judy.free": {
					"tokens": [
						"Judy::free",
						"free",
						"::free"
					],
					"id": "judy.free",
					"name": "Judy::free",
					"description": "Free the entire Judy array"
				},
				"judy.gettype": {
					"tokens": [
						"Judy::getType",
						"getType",
						"::getType"
					],
					"id": "judy.gettype",
					"name": "Judy::getType",
					"description": "Return the type of the current Judy array"
				},
				"judy.last": {
					"tokens": [
						"Judy::last",
						"last",
						"::last"
					],
					"id": "judy.last",
					"name": "Judy::last",
					"description": "Search for the last index in the Judy array"
				},
				"judy.lastempty": {
					"tokens": [
						"Judy::lastEmpty",
						"lastEmpty",
						"::lastEmpty"
					],
					"id": "judy.lastempty",
					"name": "Judy::lastEmpty",
					"description": "Search for the last absent index in the Judy array"
				},
				"judy.memoryusage": {
					"tokens": [
						"Judy::memoryUsage",
						"memoryUsage",
						"::memoryUsage"
					],
					"id": "judy.memoryusage",
					"name": "Judy::memoryUsage",
					"description": "Return the memory used by the Judy array"
				},
				"judy.next": {
					"tokens": [
						"Judy::next",
						"next",
						"::next"
					],
					"id": "judy.next",
					"name": "Judy::next",
					"description": "Search for the next index in the Judy array"
				},
				"judy.nextempty": {
					"tokens": [
						"Judy::nextEmpty",
						"nextEmpty",
						"::nextEmpty"
					],
					"id": "judy.nextempty",
					"name": "Judy::nextEmpty",
					"description": "Search for the next absent index in the Judy array"
				},
				"judy.offsetexists": {
					"tokens": [
						"Judy::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "judy.offsetexists",
					"name": "Judy::offsetExists",
					"description": "Whether a offset exists"
				},
				"judy.offsetget": {
					"tokens": [
						"Judy::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "judy.offsetget",
					"name": "Judy::offsetGet",
					"description": "Offset to retrieve"
				},
				"judy.offsetset": {
					"tokens": [
						"Judy::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "judy.offsetset",
					"name": "Judy::offsetSet",
					"description": "Offset to set"
				},
				"judy.offsetunset": {
					"tokens": [
						"Judy::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "judy.offsetunset",
					"name": "Judy::offsetUnset",
					"description": "Offset to unset"
				},
				"judy.prev": {
					"tokens": [
						"Judy::prev",
						"prev",
						"::prev"
					],
					"id": "judy.prev",
					"name": "Judy::prev",
					"description": "Search for the previous index in the Judy array"
				},
				"judy.prevempty": {
					"tokens": [
						"Judy::prevEmpty",
						"prevEmpty",
						"::prevEmpty"
					],
					"id": "judy.prevempty",
					"name": "Judy::prevEmpty",
					"description": "Search for the previous absent index in the Judy array"
				},
				"judy.size": {
					"tokens": [
						"Judy::size",
						"size",
						"::size"
					],
					"id": "judy.size",
					"name": "Judy::size",
					"description": "Return the size of the current Judy array"
				},
				"function.judy-type": {
					"tokens": [
						"judy_type",
						"judytype"
					],
					"id": "function.judy-type",
					"name": "judy_type",
					"description": "Return the type of a Judy array"
				},
				"function.judy-version": {
					"tokens": [
						"judy_version",
						"judyversion"
					],
					"id": "function.judy-version",
					"name": "judy_version",
					"description": "Return or print the current PHP Judy version"
				},
				"lua.assign": {
					"tokens": [
						"Lua::assign",
						"assign",
						"::assign"
					],
					"id": "lua.assign",
					"name": "Lua::assign",
					"description": "Assign a PHP variable to Lua"
				},
				"lua.call": {
					"tokens": [
						"Lua::call",
						"call",
						"::call"
					],
					"id": "lua.call",
					"name": "Lua::call",
					"description": "Call Lua functions"
				},
				"lua.construct": {
					"tokens": [
						"Lua::__construct",
						"Lua::_construct",
						"__construct",
						"::__construct"
					],
					"id": "lua.construct",
					"name": "Lua::__construct",
					"description": "Lua constructor"
				},
				"lua.eval": {
					"tokens": [
						"Lua::eval",
						"eval",
						"::eval"
					],
					"id": "lua.eval",
					"name": "Lua::eval",
					"description": "Evaluate a string as Lua code"
				},
				"lua.getversion": {
					"tokens": [
						"Lua::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "lua.getversion",
					"name": "Lua::getVersion",
					"description": "The getversion purpose"
				},
				"lua.include": {
					"tokens": [
						"Lua::include",
						"include",
						"::include"
					],
					"id": "lua.include",
					"name": "Lua::include",
					"description": "Parse a Lua script file"
				},
				"lua.registercallback": {
					"tokens": [
						"Lua::registerCallback",
						"registerCallback",
						"::registerCallback"
					],
					"id": "lua.registercallback",
					"name": "Lua::registerCallback",
					"description": "Register a PHP function to Lua"
				},
				"luaclosure.invoke": {
					"tokens": [
						"LuaClosure::__invoke",
						"LuaClosure::_invoke",
						"__invoke",
						"::__invoke"
					],
					"id": "luaclosure.invoke",
					"name": "LuaClosure::__invoke",
					"description": "invoke luaclosure"
				},
				"function.connection-aborted": {
					"tokens": [
						"connection_aborted",
						"connectionaborted"
					],
					"id": "function.connection-aborted",
					"name": "connection_aborted",
					"description": "Check whether client disconnected"
				},
				"function.connection-status": {
					"tokens": [
						"connection_status",
						"connectionstatus"
					],
					"id": "function.connection-status",
					"name": "connection_status",
					"description": "Returns connection status bitfield"
				},
				"function.constant": {
					"tokens": [
						"constant"
					],
					"id": "function.constant",
					"name": "constant",
					"description": "Returns the value of a constant"
				},
				"function.define": {
					"tokens": [
						"define"
					],
					"id": "function.define",
					"name": "define",
					"description": "Defines a named constant"
				},
				"function.defined": {
					"tokens": [
						"defined"
					],
					"id": "function.defined",
					"name": "defined",
					"description": "Checks whether a given named constant exists"
				},
				"function.die": {
					"tokens": [
						"die"
					],
					"id": "function.die",
					"name": "die",
					"description": "Equivalent to exit"
				},
				"function.eval": {
					"tokens": [
						"eval"
					],
					"id": "function.eval",
					"name": "eval",
					"description": "Evaluate a string as PHP code"
				},
				"function.exit": {
					"tokens": [
						"exit"
					],
					"id": "function.exit",
					"name": "exit",
					"description": "Output a message and terminate the current script"
				},
				"function.get-browser": {
					"tokens": [
						"get_browser",
						"getbrowser"
					],
					"id": "function.get-browser",
					"name": "get_browser",
					"description": "Tells what the user's browser is capable of"
				},
				"function.halt-compiler": {
					"tokens": [
						"__halt_compiler",
						"_halt_compiler"
					],
					"id": "function.halt-compiler",
					"name": "__halt_compiler",
					"description": "Halts the compiler execution"
				},
				"function.highlight-file": {
					"tokens": [
						"highlight_file",
						"highlightfile"
					],
					"id": "function.highlight-file",
					"name": "highlight_file",
					"description": "Syntax highlighting of a file"
				},
				"function.highlight-string": {
					"tokens": [
						"highlight_string",
						"highlightstring"
					],
					"id": "function.highlight-string",
					"name": "highlight_string",
					"description": "Syntax highlighting of a string"
				},
				"function.ignore-user-abort": {
					"tokens": [
						"ignore_user_abort",
						"ignoreuser_abort"
					],
					"id": "function.ignore-user-abort",
					"name": "ignore_user_abort",
					"description": "Set whether a client disconnect should abort script execution"
				},
				"function.pack": {
					"tokens": [
						"pack"
					],
					"id": "function.pack",
					"name": "pack",
					"description": "Pack data into binary string"
				},
				"function.php-check-syntax": {
					"tokens": [
						"php_check_syntax",
						"phpcheck_syntax"
					],
					"id": "function.php-check-syntax",
					"name": "php_check_syntax",
					"description": "Check the PHP syntax of (and execute) the specified file"
				},
				"function.php-strip-whitespace": {
					"tokens": [
						"php_strip_whitespace",
						"phpstrip_whitespace"
					],
					"id": "function.php-strip-whitespace",
					"name": "php_strip_whitespace",
					"description": "Return source with stripped comments and whitespace"
				},
				"function.show-source": {
					"tokens": [
						"show_source",
						"showsource"
					],
					"id": "function.show-source",
					"name": "show_source",
					"description": "Alias of highlight_file"
				},
				"function.sleep": {
					"tokens": [
						"sleep"
					],
					"id": "function.sleep",
					"name": "sleep",
					"description": "Delay execution"
				},
				"function.sys-getloadavg": {
					"tokens": [
						"sys_getloadavg",
						"sysgetloadavg"
					],
					"id": "function.sys-getloadavg",
					"name": "sys_getloadavg",
					"description": "Gets system load average"
				},
				"function.time-nanosleep": {
					"tokens": [
						"time_nanosleep",
						"timenanosleep"
					],
					"id": "function.time-nanosleep",
					"name": "time_nanosleep",
					"description": "Delay for a number of seconds and nanoseconds"
				},
				"function.time-sleep-until": {
					"tokens": [
						"time_sleep_until",
						"timesleep_until"
					],
					"id": "function.time-sleep-until",
					"name": "time_sleep_until",
					"description": "Make the script sleep until the specified time"
				},
				"function.uniqid": {
					"tokens": [
						"uniqid"
					],
					"id": "function.uniqid",
					"name": "uniqid",
					"description": "Generate a unique ID"
				},
				"function.unpack": {
					"tokens": [
						"unpack"
					],
					"id": "function.unpack",
					"name": "unpack",
					"description": "Unpack data from binary string"
				},
				"function.usleep": {
					"tokens": [
						"usleep"
					],
					"id": "function.usleep",
					"name": "usleep",
					"description": "Delay execution in microseconds"
				},
				"function.parsekit-compile-file": {
					"tokens": [
						"parsekit_compile_file",
						"parsekitcompile_file"
					],
					"id": "function.parsekit-compile-file",
					"name": "parsekit_compile_file",
					"description": "Compile a PHP file and return the resulting op array"
				},
				"function.parsekit-compile-string": {
					"tokens": [
						"parsekit_compile_string",
						"parsekitcompile_string"
					],
					"id": "function.parsekit-compile-string",
					"name": "parsekit_compile_string",
					"description": "Compile a string of PHP code and return the resulting op array"
				},
				"function.parsekit-func-arginfo": {
					"tokens": [
						"parsekit_func_arginfo",
						"parsekitfunc_arginfo"
					],
					"id": "function.parsekit-func-arginfo",
					"name": "parsekit_func_arginfo",
					"description": "Return information regarding function argument(s)"
				},
				"spldoublylinkedlist.add": {
					"tokens": [
						"SplDoublyLinkedList::add",
						"add",
						"::add"
					],
					"id": "spldoublylinkedlist.add",
					"name": "SplDoublyLinkedList::add",
					"description": "Add/insert a new value at the specified index"
				},
				"spldoublylinkedlist.bottom": {
					"tokens": [
						"SplDoublyLinkedList::bottom",
						"bottom",
						"::bottom"
					],
					"id": "spldoublylinkedlist.bottom",
					"name": "SplDoublyLinkedList::bottom",
					"description": "Peeks at the node from the beginning of the doubly linked list"
				},
				"spldoublylinkedlist.construct": {
					"tokens": [
						"SplDoublyLinkedList::__construct",
						"SplDoublyLinkedList::_construct",
						"__construct",
						"::__construct"
					],
					"id": "spldoublylinkedlist.construct",
					"name": "SplDoublyLinkedList::__construct",
					"description": "Constructs a new doubly linked list"
				},
				"spldoublylinkedlist.count": {
					"tokens": [
						"SplDoublyLinkedList::count",
						"count",
						"::count"
					],
					"id": "spldoublylinkedlist.count",
					"name": "SplDoublyLinkedList::count",
					"description": "Counts the number of elements in the doubly linked list."
				},
				"spldoublylinkedlist.current": {
					"tokens": [
						"SplDoublyLinkedList::current",
						"current",
						"::current"
					],
					"id": "spldoublylinkedlist.current",
					"name": "SplDoublyLinkedList::current",
					"description": "Return current array entry"
				},
				"spldoublylinkedlist.getiteratormode": {
					"tokens": [
						"SplDoublyLinkedList::getIteratorMode",
						"getIteratorMode",
						"::getIteratorMode"
					],
					"id": "spldoublylinkedlist.getiteratormode",
					"name": "SplDoublyLinkedList::getIteratorMode",
					"description": "Returns the mode of iteration"
				},
				"spldoublylinkedlist.isempty": {
					"tokens": [
						"SplDoublyLinkedList::isEmpty",
						"isEmpty",
						"::isEmpty"
					],
					"id": "spldoublylinkedlist.isempty",
					"name": "SplDoublyLinkedList::isEmpty",
					"description": "Checks whether the doubly linked list is empty."
				},
				"spldoublylinkedlist.key": {
					"tokens": [
						"SplDoublyLinkedList::key",
						"key",
						"::key"
					],
					"id": "spldoublylinkedlist.key",
					"name": "SplDoublyLinkedList::key",
					"description": "Return current node index"
				},
				"spldoublylinkedlist.next": {
					"tokens": [
						"SplDoublyLinkedList::next",
						"next",
						"::next"
					],
					"id": "spldoublylinkedlist.next",
					"name": "SplDoublyLinkedList::next",
					"description": "Move to next entry"
				},
				"spldoublylinkedlist.offsetexists": {
					"tokens": [
						"SplDoublyLinkedList::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "spldoublylinkedlist.offsetexists",
					"name": "SplDoublyLinkedList::offsetExists",
					"description": "Returns whether the requested $index exists"
				},
				"spldoublylinkedlist.offsetget": {
					"tokens": [
						"SplDoublyLinkedList::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "spldoublylinkedlist.offsetget",
					"name": "SplDoublyLinkedList::offsetGet",
					"description": "Returns the value at the specified $index"
				},
				"spldoublylinkedlist.offsetset": {
					"tokens": [
						"SplDoublyLinkedList::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "spldoublylinkedlist.offsetset",
					"name": "SplDoublyLinkedList::offsetSet",
					"description": "Sets the value at the specified $index to $newval"
				},
				"spldoublylinkedlist.offsetunset": {
					"tokens": [
						"SplDoublyLinkedList::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "spldoublylinkedlist.offsetunset",
					"name": "SplDoublyLinkedList::offsetUnset",
					"description": "Unsets the value at the specified $index"
				},
				"spldoublylinkedlist.pop": {
					"tokens": [
						"SplDoublyLinkedList::pop",
						"pop",
						"::pop"
					],
					"id": "spldoublylinkedlist.pop",
					"name": "SplDoublyLinkedList::pop",
					"description": "Pops a node from the end of the doubly linked list"
				},
				"spldoublylinkedlist.prev": {
					"tokens": [
						"SplDoublyLinkedList::prev",
						"prev",
						"::prev"
					],
					"id": "spldoublylinkedlist.prev",
					"name": "SplDoublyLinkedList::prev",
					"description": "Move to previous entry"
				},
				"spldoublylinkedlist.push": {
					"tokens": [
						"SplDoublyLinkedList::push",
						"push",
						"::push"
					],
					"id": "spldoublylinkedlist.push",
					"name": "SplDoublyLinkedList::push",
					"description": "Pushes an element at the end of the doubly linked list"
				},
				"spldoublylinkedlist.rewind": {
					"tokens": [
						"SplDoublyLinkedList::rewind",
						"rewind",
						"::rewind"
					],
					"id": "spldoublylinkedlist.rewind",
					"name": "SplDoublyLinkedList::rewind",
					"description": "Rewind iterator back to the start"
				},
				"spldoublylinkedlist.serialize": {
					"tokens": [
						"SplDoublyLinkedList::serialize",
						"serialize",
						"::serialize"
					],
					"id": "spldoublylinkedlist.serialize",
					"name": "SplDoublyLinkedList::serialize",
					"description": "Serializes the storage"
				},
				"spldoublylinkedlist.setiteratormode": {
					"tokens": [
						"SplDoublyLinkedList::setIteratorMode",
						"setIteratorMode",
						"::setIteratorMode"
					],
					"id": "spldoublylinkedlist.setiteratormode",
					"name": "SplDoublyLinkedList::setIteratorMode",
					"description": "Sets the mode of iteration"
				},
				"spldoublylinkedlist.shift": {
					"tokens": [
						"SplDoublyLinkedList::shift",
						"shift",
						"::shift"
					],
					"id": "spldoublylinkedlist.shift",
					"name": "SplDoublyLinkedList::shift",
					"description": "Shifts a node from the beginning of the doubly linked list"
				},
				"spldoublylinkedlist.top": {
					"tokens": [
						"SplDoublyLinkedList::top",
						"top",
						"::top"
					],
					"id": "spldoublylinkedlist.top",
					"name": "SplDoublyLinkedList::top",
					"description": "Peeks at the node from the end of the doubly linked list"
				},
				"spldoublylinkedlist.unserialize": {
					"tokens": [
						"SplDoublyLinkedList::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "spldoublylinkedlist.unserialize",
					"name": "SplDoublyLinkedList::unserialize",
					"description": "Unserializes the storage"
				},
				"spldoublylinkedlist.unshift": {
					"tokens": [
						"SplDoublyLinkedList::unshift",
						"unshift",
						"::unshift"
					],
					"id": "spldoublylinkedlist.unshift",
					"name": "SplDoublyLinkedList::unshift",
					"description": "Prepends the doubly linked list with an element"
				},
				"spldoublylinkedlist.valid": {
					"tokens": [
						"SplDoublyLinkedList::valid",
						"valid",
						"::valid"
					],
					"id": "spldoublylinkedlist.valid",
					"name": "SplDoublyLinkedList::valid",
					"description": "Check whether the doubly linked list contains more nodes"
				},
				"splstack.construct": {
					"tokens": [
						"SplStack::__construct",
						"SplStack::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splstack.construct",
					"name": "SplStack::__construct",
					"description": "Constructs a new stack implemented using a doubly linked list"
				},
				"splstack.setiteratormode": {
					"tokens": [
						"SplStack::setIteratorMode",
						"setIteratorMode",
						"::setIteratorMode"
					],
					"id": "splstack.setiteratormode",
					"name": "SplStack::setIteratorMode",
					"description": "Sets the mode of iteration"
				},
				"splqueue.construct": {
					"tokens": [
						"SplQueue::__construct",
						"SplQueue::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splqueue.construct",
					"name": "SplQueue::__construct",
					"description": "Constructs a new queue implemented using a doubly linked list"
				},
				"splqueue.dequeue": {
					"tokens": [
						"SplQueue::dequeue",
						"dequeue",
						"::dequeue"
					],
					"id": "splqueue.dequeue",
					"name": "SplQueue::dequeue",
					"description": "Dequeues a node from the queue"
				},
				"splqueue.enqueue": {
					"tokens": [
						"SplQueue::enqueue",
						"enqueue",
						"::enqueue"
					],
					"id": "splqueue.enqueue",
					"name": "SplQueue::enqueue",
					"description": "Adds an element to the queue."
				},
				"splqueue.setiteratormode": {
					"tokens": [
						"SplQueue::setIteratorMode",
						"setIteratorMode",
						"::setIteratorMode"
					],
					"id": "splqueue.setiteratormode",
					"name": "SplQueue::setIteratorMode",
					"description": "Sets the mode of iteration"
				},
				"splheap.compare": {
					"tokens": [
						"SplHeap::compare",
						"compare",
						"::compare"
					],
					"id": "splheap.compare",
					"name": "SplHeap::compare",
					"description": "Compare elements in order to place them correctly in the heap while sifting up."
				},
				"splheap.construct": {
					"tokens": [
						"SplHeap::__construct",
						"SplHeap::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splheap.construct",
					"name": "SplHeap::__construct",
					"description": "Constructs a new empty heap"
				},
				"splheap.count": {
					"tokens": [
						"SplHeap::count",
						"count",
						"::count"
					],
					"id": "splheap.count",
					"name": "SplHeap::count",
					"description": "Counts the number of elements in the heap."
				},
				"splheap.current": {
					"tokens": [
						"SplHeap::current",
						"current",
						"::current"
					],
					"id": "splheap.current",
					"name": "SplHeap::current",
					"description": "Return current node pointed by the iterator"
				},
				"splheap.extract": {
					"tokens": [
						"SplHeap::extract",
						"extract",
						"::extract"
					],
					"id": "splheap.extract",
					"name": "SplHeap::extract",
					"description": "Extracts a node from top of the heap and sift up."
				},
				"splheap.insert": {
					"tokens": [
						"SplHeap::insert",
						"insert",
						"::insert"
					],
					"id": "splheap.insert",
					"name": "SplHeap::insert",
					"description": "Inserts an element in the heap by sifting it up."
				},
				"splheap.isempty": {
					"tokens": [
						"SplHeap::isEmpty",
						"isEmpty",
						"::isEmpty"
					],
					"id": "splheap.isempty",
					"name": "SplHeap::isEmpty",
					"description": "Checks whether the heap is empty."
				},
				"splheap.key": {
					"tokens": [
						"SplHeap::key",
						"key",
						"::key"
					],
					"id": "splheap.key",
					"name": "SplHeap::key",
					"description": "Return current node index"
				},
				"splheap.next": {
					"tokens": [
						"SplHeap::next",
						"next",
						"::next"
					],
					"id": "splheap.next",
					"name": "SplHeap::next",
					"description": "Move to the next node"
				},
				"splheap.recoverfromcorruption": {
					"tokens": [
						"SplHeap::recoverFromCorruption",
						"recoverFromCorruption",
						"::recoverFromCorruption"
					],
					"id": "splheap.recoverfromcorruption",
					"name": "SplHeap::recoverFromCorruption",
					"description": "Recover from the corrupted state and allow further actions on the heap."
				},
				"splheap.rewind": {
					"tokens": [
						"SplHeap::rewind",
						"rewind",
						"::rewind"
					],
					"id": "splheap.rewind",
					"name": "SplHeap::rewind",
					"description": "Rewind iterator back to the start (no-op)"
				},
				"splheap.top": {
					"tokens": [
						"SplHeap::top",
						"top",
						"::top"
					],
					"id": "splheap.top",
					"name": "SplHeap::top",
					"description": "Peeks at the node from the top of the heap"
				},
				"splheap.valid": {
					"tokens": [
						"SplHeap::valid",
						"valid",
						"::valid"
					],
					"id": "splheap.valid",
					"name": "SplHeap::valid",
					"description": "Check whether the heap contains more nodes"
				},
				"splmaxheap.compare": {
					"tokens": [
						"SplMaxHeap::compare",
						"compare",
						"::compare"
					],
					"id": "splmaxheap.compare",
					"name": "SplMaxHeap::compare",
					"description": "Compare elements in order to place them correctly in the heap while sifting up."
				},
				"splminheap.compare": {
					"tokens": [
						"SplMinHeap::compare",
						"compare",
						"::compare"
					],
					"id": "splminheap.compare",
					"name": "SplMinHeap::compare",
					"description": "Compare elements in order to place them correctly in the heap while sifting up."
				},
				"splpriorityqueue.compare": {
					"tokens": [
						"SplPriorityQueue::compare",
						"compare",
						"::compare"
					],
					"id": "splpriorityqueue.compare",
					"name": "SplPriorityQueue::compare",
					"description": "Compare priorities in order to place elements correctly in the heap while sifting up."
				},
				"splpriorityqueue.construct": {
					"tokens": [
						"SplPriorityQueue::__construct",
						"SplPriorityQueue::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splpriorityqueue.construct",
					"name": "SplPriorityQueue::__construct",
					"description": "Constructs a new empty queue"
				},
				"splpriorityqueue.count": {
					"tokens": [
						"SplPriorityQueue::count",
						"count",
						"::count"
					],
					"id": "splpriorityqueue.count",
					"name": "SplPriorityQueue::count",
					"description": "Counts the number of elements in the queue."
				},
				"splpriorityqueue.current": {
					"tokens": [
						"SplPriorityQueue::current",
						"current",
						"::current"
					],
					"id": "splpriorityqueue.current",
					"name": "SplPriorityQueue::current",
					"description": "Return current node pointed by the iterator"
				},
				"splpriorityqueue.extract": {
					"tokens": [
						"SplPriorityQueue::extract",
						"extract",
						"::extract"
					],
					"id": "splpriorityqueue.extract",
					"name": "SplPriorityQueue::extract",
					"description": "Extracts a node from top of the heap and sift up."
				},
				"splpriorityqueue.insert": {
					"tokens": [
						"SplPriorityQueue::insert",
						"insert",
						"::insert"
					],
					"id": "splpriorityqueue.insert",
					"name": "SplPriorityQueue::insert",
					"description": "Inserts an element in the queue by sifting it up."
				},
				"splpriorityqueue.isempty": {
					"tokens": [
						"SplPriorityQueue::isEmpty",
						"isEmpty",
						"::isEmpty"
					],
					"id": "splpriorityqueue.isempty",
					"name": "SplPriorityQueue::isEmpty",
					"description": "Checks whether the queue is empty."
				},
				"splpriorityqueue.key": {
					"tokens": [
						"SplPriorityQueue::key",
						"key",
						"::key"
					],
					"id": "splpriorityqueue.key",
					"name": "SplPriorityQueue::key",
					"description": "Return current node index"
				},
				"splpriorityqueue.next": {
					"tokens": [
						"SplPriorityQueue::next",
						"next",
						"::next"
					],
					"id": "splpriorityqueue.next",
					"name": "SplPriorityQueue::next",
					"description": "Move to the next node"
				},
				"splpriorityqueue.recoverfromcorruption": {
					"tokens": [
						"SplPriorityQueue::recoverFromCorruption",
						"recoverFromCorruption",
						"::recoverFromCorruption"
					],
					"id": "splpriorityqueue.recoverfromcorruption",
					"name": "SplPriorityQueue::recoverFromCorruption",
					"description": "Recover from the corrupted state and allow further actions on the queue."
				},
				"splpriorityqueue.rewind": {
					"tokens": [
						"SplPriorityQueue::rewind",
						"rewind",
						"::rewind"
					],
					"id": "splpriorityqueue.rewind",
					"name": "SplPriorityQueue::rewind",
					"description": "Rewind iterator back to the start (no-op)"
				},
				"splpriorityqueue.setextractflags": {
					"tokens": [
						"SplPriorityQueue::setExtractFlags",
						"setExtractFlags",
						"::setExtractFlags"
					],
					"id": "splpriorityqueue.setextractflags",
					"name": "SplPriorityQueue::setExtractFlags",
					"description": "Sets the mode of extraction"
				},
				"splpriorityqueue.top": {
					"tokens": [
						"SplPriorityQueue::top",
						"top",
						"::top"
					],
					"id": "splpriorityqueue.top",
					"name": "SplPriorityQueue::top",
					"description": "Peeks at the node from the top of the queue"
				},
				"splpriorityqueue.valid": {
					"tokens": [
						"SplPriorityQueue::valid",
						"valid",
						"::valid"
					],
					"id": "splpriorityqueue.valid",
					"name": "SplPriorityQueue::valid",
					"description": "Check whether the queue contains more nodes"
				},
				"splfixedarray.construct": {
					"tokens": [
						"SplFixedArray::__construct",
						"SplFixedArray::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splfixedarray.construct",
					"name": "SplFixedArray::__construct",
					"description": "Constructs a new fixed array"
				},
				"splfixedarray.count": {
					"tokens": [
						"SplFixedArray::count",
						"count",
						"::count"
					],
					"id": "splfixedarray.count",
					"name": "SplFixedArray::count",
					"description": "Returns the size of the array"
				},
				"splfixedarray.current": {
					"tokens": [
						"SplFixedArray::current",
						"current",
						"::current"
					],
					"id": "splfixedarray.current",
					"name": "SplFixedArray::current",
					"description": "Return current array entry"
				},
				"splfixedarray.fromarray": {
					"tokens": [
						"SplFixedArray::fromArray",
						"fromArray",
						"::fromArray"
					],
					"id": "splfixedarray.fromarray",
					"name": "SplFixedArray::fromArray",
					"description": "Import a PHP array in a SplFixedArray instance"
				},
				"splfixedarray.getsize": {
					"tokens": [
						"SplFixedArray::getSize",
						"getSize",
						"::getSize"
					],
					"id": "splfixedarray.getsize",
					"name": "SplFixedArray::getSize",
					"description": "Gets the size of the array"
				},
				"splfixedarray.key": {
					"tokens": [
						"SplFixedArray::key",
						"key",
						"::key"
					],
					"id": "splfixedarray.key",
					"name": "SplFixedArray::key",
					"description": "Return current array index"
				},
				"splfixedarray.next": {
					"tokens": [
						"SplFixedArray::next",
						"next",
						"::next"
					],
					"id": "splfixedarray.next",
					"name": "SplFixedArray::next",
					"description": "Move to next entry"
				},
				"splfixedarray.offsetexists": {
					"tokens": [
						"SplFixedArray::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "splfixedarray.offsetexists",
					"name": "SplFixedArray::offsetExists",
					"description": "Returns whether the requested index exists"
				},
				"splfixedarray.offsetget": {
					"tokens": [
						"SplFixedArray::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "splfixedarray.offsetget",
					"name": "SplFixedArray::offsetGet",
					"description": "Returns the value at the specified index"
				},
				"splfixedarray.offsetset": {
					"tokens": [
						"SplFixedArray::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "splfixedarray.offsetset",
					"name": "SplFixedArray::offsetSet",
					"description": "Sets a new value at a specified index"
				},
				"splfixedarray.offsetunset": {
					"tokens": [
						"SplFixedArray::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "splfixedarray.offsetunset",
					"name": "SplFixedArray::offsetUnset",
					"description": "Unsets the value at the specified $index"
				},
				"splfixedarray.rewind": {
					"tokens": [
						"SplFixedArray::rewind",
						"rewind",
						"::rewind"
					],
					"id": "splfixedarray.rewind",
					"name": "SplFixedArray::rewind",
					"description": "Rewind iterator back to the start"
				},
				"splfixedarray.setsize": {
					"tokens": [
						"SplFixedArray::setSize",
						"setSize",
						"::setSize"
					],
					"id": "splfixedarray.setsize",
					"name": "SplFixedArray::setSize",
					"description": "Change the size of an array"
				},
				"splfixedarray.toarray": {
					"tokens": [
						"SplFixedArray::toArray",
						"toArray",
						"::toArray"
					],
					"id": "splfixedarray.toarray",
					"name": "SplFixedArray::toArray",
					"description": "Returns a PHP array from the fixed array"
				},
				"splfixedarray.valid": {
					"tokens": [
						"SplFixedArray::valid",
						"valid",
						"::valid"
					],
					"id": "splfixedarray.valid",
					"name": "SplFixedArray::valid",
					"description": "Check whether the array contains more elements"
				},
				"splfixedarray.wakeup": {
					"tokens": [
						"SplFixedArray::__wakeup",
						"SplFixedArray::_wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "splfixedarray.wakeup",
					"name": "SplFixedArray::__wakeup",
					"description": "Reinitialises the array after being unserialised"
				},
				"splobjectstorage.addall": {
					"tokens": [
						"SplObjectStorage::addAll",
						"addAll",
						"::addAll"
					],
					"id": "splobjectstorage.addall",
					"name": "SplObjectStorage::addAll",
					"description": "Adds all objects from another storage"
				},
				"splobjectstorage.attach": {
					"tokens": [
						"SplObjectStorage::attach",
						"attach",
						"::attach"
					],
					"id": "splobjectstorage.attach",
					"name": "SplObjectStorage::attach",
					"description": "Adds an object in the storage"
				},
				"splobjectstorage.contains": {
					"tokens": [
						"SplObjectStorage::contains",
						"contains",
						"::contains"
					],
					"id": "splobjectstorage.contains",
					"name": "SplObjectStorage::contains",
					"description": "Checks if the storage contains a specific object"
				},
				"splobjectstorage.count": {
					"tokens": [
						"SplObjectStorage::count",
						"count",
						"::count"
					],
					"id": "splobjectstorage.count",
					"name": "SplObjectStorage::count",
					"description": "Returns the number of objects in the storage"
				},
				"splobjectstorage.current": {
					"tokens": [
						"SplObjectStorage::current",
						"current",
						"::current"
					],
					"id": "splobjectstorage.current",
					"name": "SplObjectStorage::current",
					"description": "Returns the current storage entry"
				},
				"splobjectstorage.detach": {
					"tokens": [
						"SplObjectStorage::detach",
						"detach",
						"::detach"
					],
					"id": "splobjectstorage.detach",
					"name": "SplObjectStorage::detach",
					"description": "Removes an object from the storage"
				},
				"splobjectstorage.gethash": {
					"tokens": [
						"SplObjectStorage::getHash",
						"getHash",
						"::getHash"
					],
					"id": "splobjectstorage.gethash",
					"name": "SplObjectStorage::getHash",
					"description": "Calculate a unique identifier for the contained objects"
				},
				"splobjectstorage.getinfo": {
					"tokens": [
						"SplObjectStorage::getInfo",
						"getInfo",
						"::getInfo"
					],
					"id": "splobjectstorage.getinfo",
					"name": "SplObjectStorage::getInfo",
					"description": "Returns the data associated with the current iterator entry"
				},
				"splobjectstorage.key": {
					"tokens": [
						"SplObjectStorage::key",
						"key",
						"::key"
					],
					"id": "splobjectstorage.key",
					"name": "SplObjectStorage::key",
					"description": "Returns the index at which the iterator currently is"
				},
				"splobjectstorage.next": {
					"tokens": [
						"SplObjectStorage::next",
						"next",
						"::next"
					],
					"id": "splobjectstorage.next",
					"name": "SplObjectStorage::next",
					"description": "Move to the next entry"
				},
				"splobjectstorage.offsetexists": {
					"tokens": [
						"SplObjectStorage::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "splobjectstorage.offsetexists",
					"name": "SplObjectStorage::offsetExists",
					"description": "Checks whether an object exists in the storage"
				},
				"splobjectstorage.offsetget": {
					"tokens": [
						"SplObjectStorage::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "splobjectstorage.offsetget",
					"name": "SplObjectStorage::offsetGet",
					"description": "Returns the data associated with an object"
				},
				"splobjectstorage.offsetset": {
					"tokens": [
						"SplObjectStorage::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "splobjectstorage.offsetset",
					"name": "SplObjectStorage::offsetSet",
					"description": "Associates data to an object in the storage"
				},
				"splobjectstorage.offsetunset": {
					"tokens": [
						"SplObjectStorage::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "splobjectstorage.offsetunset",
					"name": "SplObjectStorage::offsetUnset",
					"description": "Removes an object from the storage"
				},
				"splobjectstorage.removeall": {
					"tokens": [
						"SplObjectStorage::removeAll",
						"removeAll",
						"::removeAll"
					],
					"id": "splobjectstorage.removeall",
					"name": "SplObjectStorage::removeAll",
					"description": "Removes objects contained in another storage from the current storage"
				},
				"splobjectstorage.removeallexcept": {
					"tokens": [
						"SplObjectStorage::removeAllExcept",
						"removeAllExcept",
						"::removeAllExcept"
					],
					"id": "splobjectstorage.removeallexcept",
					"name": "SplObjectStorage::removeAllExcept",
					"description": "Removes all objects except for those contained in another storage from the current storage"
				},
				"splobjectstorage.rewind": {
					"tokens": [
						"SplObjectStorage::rewind",
						"rewind",
						"::rewind"
					],
					"id": "splobjectstorage.rewind",
					"name": "SplObjectStorage::rewind",
					"description": "Rewind the iterator to the first storage element"
				},
				"splobjectstorage.serialize": {
					"tokens": [
						"SplObjectStorage::serialize",
						"serialize",
						"::serialize"
					],
					"id": "splobjectstorage.serialize",
					"name": "SplObjectStorage::serialize",
					"description": "Serializes the storage"
				},
				"splobjectstorage.setinfo": {
					"tokens": [
						"SplObjectStorage::setInfo",
						"setInfo",
						"::setInfo"
					],
					"id": "splobjectstorage.setinfo",
					"name": "SplObjectStorage::setInfo",
					"description": "Sets the data associated with the current iterator entry"
				},
				"splobjectstorage.unserialize": {
					"tokens": [
						"SplObjectStorage::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "splobjectstorage.unserialize",
					"name": "SplObjectStorage::unserialize",
					"description": "Unserializes a storage from its string representation"
				},
				"splobjectstorage.valid": {
					"tokens": [
						"SplObjectStorage::valid",
						"valid",
						"::valid"
					],
					"id": "splobjectstorage.valid",
					"name": "SplObjectStorage::valid",
					"description": "Returns if the current iterator entry is valid"
				},
				"appenditerator.append": {
					"tokens": [
						"AppendIterator::append",
						"append",
						"::append"
					],
					"id": "appenditerator.append",
					"name": "AppendIterator::append",
					"description": "Appends an iterator"
				},
				"appenditerator.construct": {
					"tokens": [
						"AppendIterator::__construct",
						"AppendIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "appenditerator.construct",
					"name": "AppendIterator::__construct",
					"description": "Constructs an AppendIterator"
				},
				"appenditerator.current": {
					"tokens": [
						"AppendIterator::current",
						"current",
						"::current"
					],
					"id": "appenditerator.current",
					"name": "AppendIterator::current",
					"description": "Gets the current value"
				},
				"appenditerator.getarrayiterator": {
					"tokens": [
						"AppendIterator::getArrayIterator",
						"getArrayIterator",
						"::getArrayIterator"
					],
					"id": "appenditerator.getarrayiterator",
					"name": "AppendIterator::getArrayIterator",
					"description": "Gets the ArrayIterator"
				},
				"appenditerator.getinneriterator": {
					"tokens": [
						"AppendIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "appenditerator.getinneriterator",
					"name": "AppendIterator::getInnerIterator",
					"description": "Gets the inner iterator"
				},
				"appenditerator.getiteratorindex": {
					"tokens": [
						"AppendIterator::getIteratorIndex",
						"getIteratorIndex",
						"::getIteratorIndex"
					],
					"id": "appenditerator.getiteratorindex",
					"name": "AppendIterator::getIteratorIndex",
					"description": "Gets an index of iterators"
				},
				"appenditerator.key": {
					"tokens": [
						"AppendIterator::key",
						"key",
						"::key"
					],
					"id": "appenditerator.key",
					"name": "AppendIterator::key",
					"description": "Gets the current key"
				},
				"appenditerator.next": {
					"tokens": [
						"AppendIterator::next",
						"next",
						"::next"
					],
					"id": "appenditerator.next",
					"name": "AppendIterator::next",
					"description": "Moves to the next element"
				},
				"appenditerator.rewind": {
					"tokens": [
						"AppendIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "appenditerator.rewind",
					"name": "AppendIterator::rewind",
					"description": "Rewinds the Iterator"
				},
				"appenditerator.valid": {
					"tokens": [
						"AppendIterator::valid",
						"valid",
						"::valid"
					],
					"id": "appenditerator.valid",
					"name": "AppendIterator::valid",
					"description": "Checks validity of the current element"
				},
				"arrayiterator.append": {
					"tokens": [
						"ArrayIterator::append",
						"append",
						"::append"
					],
					"id": "arrayiterator.append",
					"name": "ArrayIterator::append",
					"description": "Append an element"
				},
				"arrayiterator.asort": {
					"tokens": [
						"ArrayIterator::asort",
						"asort",
						"::asort"
					],
					"id": "arrayiterator.asort",
					"name": "ArrayIterator::asort",
					"description": "Sort array by values"
				},
				"arrayiterator.construct": {
					"tokens": [
						"ArrayIterator::__construct",
						"ArrayIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "arrayiterator.construct",
					"name": "ArrayIterator::__construct",
					"description": "Construct an ArrayIterator"
				},
				"arrayiterator.count": {
					"tokens": [
						"ArrayIterator::count",
						"count",
						"::count"
					],
					"id": "arrayiterator.count",
					"name": "ArrayIterator::count",
					"description": "Count elements"
				},
				"arrayiterator.current": {
					"tokens": [
						"ArrayIterator::current",
						"current",
						"::current"
					],
					"id": "arrayiterator.current",
					"name": "ArrayIterator::current",
					"description": "Return current array entry"
				},
				"arrayiterator.getarraycopy": {
					"tokens": [
						"ArrayIterator::getArrayCopy",
						"getArrayCopy",
						"::getArrayCopy"
					],
					"id": "arrayiterator.getarraycopy",
					"name": "ArrayIterator::getArrayCopy",
					"description": "Get array copy"
				},
				"arrayiterator.getflags": {
					"tokens": [
						"ArrayIterator::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "arrayiterator.getflags",
					"name": "ArrayIterator::getFlags",
					"description": "Get flags"
				},
				"arrayiterator.key": {
					"tokens": [
						"ArrayIterator::key",
						"key",
						"::key"
					],
					"id": "arrayiterator.key",
					"name": "ArrayIterator::key",
					"description": "Return current array key"
				},
				"arrayiterator.ksort": {
					"tokens": [
						"ArrayIterator::ksort",
						"ksort",
						"::ksort"
					],
					"id": "arrayiterator.ksort",
					"name": "ArrayIterator::ksort",
					"description": "Sort array by keys"
				},
				"arrayiterator.natcasesort": {
					"tokens": [
						"ArrayIterator::natcasesort",
						"natcasesort",
						"::natcasesort"
					],
					"id": "arrayiterator.natcasesort",
					"name": "ArrayIterator::natcasesort",
					"description": "Sort an array naturally, case insensitive"
				},
				"arrayiterator.natsort": {
					"tokens": [
						"ArrayIterator::natsort",
						"natsort",
						"::natsort"
					],
					"id": "arrayiterator.natsort",
					"name": "ArrayIterator::natsort",
					"description": "Sort an array naturally"
				},
				"arrayiterator.next": {
					"tokens": [
						"ArrayIterator::next",
						"next",
						"::next"
					],
					"id": "arrayiterator.next",
					"name": "ArrayIterator::next",
					"description": "Move to next entry"
				},
				"arrayiterator.offsetexists": {
					"tokens": [
						"ArrayIterator::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "arrayiterator.offsetexists",
					"name": "ArrayIterator::offsetExists",
					"description": "Check if offset exists"
				},
				"arrayiterator.offsetget": {
					"tokens": [
						"ArrayIterator::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "arrayiterator.offsetget",
					"name": "ArrayIterator::offsetGet",
					"description": "Get value for an offset"
				},
				"arrayiterator.offsetset": {
					"tokens": [
						"ArrayIterator::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "arrayiterator.offsetset",
					"name": "ArrayIterator::offsetSet",
					"description": "Set value for an offset"
				},
				"arrayiterator.offsetunset": {
					"tokens": [
						"ArrayIterator::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "arrayiterator.offsetunset",
					"name": "ArrayIterator::offsetUnset",
					"description": "Unset value for an offset"
				},
				"arrayiterator.rewind": {
					"tokens": [
						"ArrayIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "arrayiterator.rewind",
					"name": "ArrayIterator::rewind",
					"description": "Rewind array back to the start"
				},
				"arrayiterator.seek": {
					"tokens": [
						"ArrayIterator::seek",
						"seek",
						"::seek"
					],
					"id": "arrayiterator.seek",
					"name": "ArrayIterator::seek",
					"description": "Seek to position"
				},
				"arrayiterator.serialize": {
					"tokens": [
						"ArrayIterator::serialize",
						"serialize",
						"::serialize"
					],
					"id": "arrayiterator.serialize",
					"name": "ArrayIterator::serialize",
					"description": "Serialize"
				},
				"arrayiterator.setflags": {
					"tokens": [
						"ArrayIterator::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "arrayiterator.setflags",
					"name": "ArrayIterator::setFlags",
					"description": "Set behaviour flags"
				},
				"arrayiterator.uasort": {
					"tokens": [
						"ArrayIterator::uasort",
						"uasort",
						"::uasort"
					],
					"id": "arrayiterator.uasort",
					"name": "ArrayIterator::uasort",
					"description": "User defined sort"
				},
				"arrayiterator.uksort": {
					"tokens": [
						"ArrayIterator::uksort",
						"uksort",
						"::uksort"
					],
					"id": "arrayiterator.uksort",
					"name": "ArrayIterator::uksort",
					"description": "User defined sort"
				},
				"arrayiterator.unserialize": {
					"tokens": [
						"ArrayIterator::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "arrayiterator.unserialize",
					"name": "ArrayIterator::unserialize",
					"description": "Unserialize"
				},
				"arrayiterator.valid": {
					"tokens": [
						"ArrayIterator::valid",
						"valid",
						"::valid"
					],
					"id": "arrayiterator.valid",
					"name": "ArrayIterator::valid",
					"description": "Check whether array contains more entries"
				},
				"cachingiterator.construct": {
					"tokens": [
						"CachingIterator::__construct",
						"CachingIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "cachingiterator.construct",
					"name": "CachingIterator::__construct",
					"description": "Construct a new CachingIterator object for the iterator."
				},
				"cachingiterator.count": {
					"tokens": [
						"CachingIterator::count",
						"count",
						"::count"
					],
					"id": "cachingiterator.count",
					"name": "CachingIterator::count",
					"description": "The number of elements in the iterator"
				},
				"cachingiterator.current": {
					"tokens": [
						"CachingIterator::current",
						"current",
						"::current"
					],
					"id": "cachingiterator.current",
					"name": "CachingIterator::current",
					"description": "Return the current element"
				},
				"cachingiterator.getcache": {
					"tokens": [
						"CachingIterator::getCache",
						"getCache",
						"::getCache"
					],
					"id": "cachingiterator.getcache",
					"name": "CachingIterator::getCache",
					"description": "Retrieve the contents of the cache"
				},
				"cachingiterator.getflags": {
					"tokens": [
						"CachingIterator::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "cachingiterator.getflags",
					"name": "CachingIterator::getFlags",
					"description": "Get flags used"
				},
				"cachingiterator.getinneriterator": {
					"tokens": [
						"CachingIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "cachingiterator.getinneriterator",
					"name": "CachingIterator::getInnerIterator",
					"description": "Returns the inner iterator"
				},
				"cachingiterator.hasnext": {
					"tokens": [
						"CachingIterator::hasNext",
						"hasNext",
						"::hasNext"
					],
					"id": "cachingiterator.hasnext",
					"name": "CachingIterator::hasNext",
					"description": "Check whether the inner iterator has a valid next element"
				},
				"cachingiterator.key": {
					"tokens": [
						"CachingIterator::key",
						"key",
						"::key"
					],
					"id": "cachingiterator.key",
					"name": "CachingIterator::key",
					"description": "Return the key for the current element"
				},
				"cachingiterator.next": {
					"tokens": [
						"CachingIterator::next",
						"next",
						"::next"
					],
					"id": "cachingiterator.next",
					"name": "CachingIterator::next",
					"description": "Move the iterator forward"
				},
				"cachingiterator.offsetexists": {
					"tokens": [
						"CachingIterator::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "cachingiterator.offsetexists",
					"name": "CachingIterator::offsetExists",
					"description": "The offsetExists purpose"
				},
				"cachingiterator.offsetget": {
					"tokens": [
						"CachingIterator::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "cachingiterator.offsetget",
					"name": "CachingIterator::offsetGet",
					"description": "The offsetGet purpose"
				},
				"cachingiterator.offsetset": {
					"tokens": [
						"CachingIterator::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "cachingiterator.offsetset",
					"name": "CachingIterator::offsetSet",
					"description": "The offsetSet purpose"
				},
				"cachingiterator.offsetunset": {
					"tokens": [
						"CachingIterator::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "cachingiterator.offsetunset",
					"name": "CachingIterator::offsetUnset",
					"description": "The offsetUnset purpose"
				},
				"cachingiterator.rewind": {
					"tokens": [
						"CachingIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "cachingiterator.rewind",
					"name": "CachingIterator::rewind",
					"description": "Rewind the iterator"
				},
				"cachingiterator.setflags": {
					"tokens": [
						"CachingIterator::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "cachingiterator.setflags",
					"name": "CachingIterator::setFlags",
					"description": "The setFlags purpose"
				},
				"cachingiterator.tostring": {
					"tokens": [
						"CachingIterator::__toString",
						"CachingIterator::_toString",
						"__toString",
						"::__toString"
					],
					"id": "cachingiterator.tostring",
					"name": "CachingIterator::__toString",
					"description": "Return the string representation of the current element"
				},
				"cachingiterator.valid": {
					"tokens": [
						"CachingIterator::valid",
						"valid",
						"::valid"
					],
					"id": "cachingiterator.valid",
					"name": "CachingIterator::valid",
					"description": "Check whether the current element is valid"
				},
				"callbackfilteriterator.accept": {
					"tokens": [
						"CallbackFilterIterator::accept",
						"accept",
						"::accept"
					],
					"id": "callbackfilteriterator.accept",
					"name": "CallbackFilterIterator::accept",
					"description": "Calls the callback with the current value, the current key and the inner iterator as arguments"
				},
				"callbackfilteriterator.construct": {
					"tokens": [
						"CallbackFilterIterator::__construct",
						"CallbackFilterIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "callbackfilteriterator.construct",
					"name": "CallbackFilterIterator::__construct",
					"description": "Create a filtered iterator from another iterator"
				},
				"directoryiterator.construct": {
					"tokens": [
						"DirectoryIterator::__construct",
						"DirectoryIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "directoryiterator.construct",
					"name": "DirectoryIterator::__construct",
					"description": "Constructs a new directory iterator from a path"
				},
				"directoryiterator.current": {
					"tokens": [
						"DirectoryIterator::current",
						"current",
						"::current"
					],
					"id": "directoryiterator.current",
					"name": "DirectoryIterator::current",
					"description": "Return the current DirectoryIterator item."
				},
				"directoryiterator.getatime": {
					"tokens": [
						"DirectoryIterator::getATime",
						"getATime",
						"::getATime"
					],
					"id": "directoryiterator.getatime",
					"name": "DirectoryIterator::getATime",
					"description": "Get last access time of the current DirectoryIterator item"
				},
				"directoryiterator.getbasename": {
					"tokens": [
						"DirectoryIterator::getBasename",
						"getBasename",
						"::getBasename"
					],
					"id": "directoryiterator.getbasename",
					"name": "DirectoryIterator::getBasename",
					"description": "Get base name of current DirectoryIterator item."
				},
				"directoryiterator.getctime": {
					"tokens": [
						"DirectoryIterator::getCTime",
						"getCTime",
						"::getCTime"
					],
					"id": "directoryiterator.getctime",
					"name": "DirectoryIterator::getCTime",
					"description": "Get inode change time of the current DirectoryIterator item"
				},
				"directoryiterator.getextension": {
					"tokens": [
						"DirectoryIterator::getExtension",
						"getExtension",
						"::getExtension"
					],
					"id": "directoryiterator.getextension",
					"name": "DirectoryIterator::getExtension",
					"description": "Gets the file extension"
				},
				"directoryiterator.getfilename": {
					"tokens": [
						"DirectoryIterator::getFilename",
						"getFilename",
						"::getFilename"
					],
					"id": "directoryiterator.getfilename",
					"name": "DirectoryIterator::getFilename",
					"description": "Return file name of current DirectoryIterator item."
				},
				"directoryiterator.getgroup": {
					"tokens": [
						"DirectoryIterator::getGroup",
						"getGroup",
						"::getGroup"
					],
					"id": "directoryiterator.getgroup",
					"name": "DirectoryIterator::getGroup",
					"description": "Get group for the current DirectoryIterator item"
				},
				"directoryiterator.getinode": {
					"tokens": [
						"DirectoryIterator::getInode",
						"getInode",
						"::getInode"
					],
					"id": "directoryiterator.getinode",
					"name": "DirectoryIterator::getInode",
					"description": "Get inode for the current DirectoryIterator item"
				},
				"directoryiterator.getmtime": {
					"tokens": [
						"DirectoryIterator::getMTime",
						"getMTime",
						"::getMTime"
					],
					"id": "directoryiterator.getmtime",
					"name": "DirectoryIterator::getMTime",
					"description": "Get last modification time of current DirectoryIterator item"
				},
				"directoryiterator.getowner": {
					"tokens": [
						"DirectoryIterator::getOwner",
						"getOwner",
						"::getOwner"
					],
					"id": "directoryiterator.getowner",
					"name": "DirectoryIterator::getOwner",
					"description": "Get owner of current DirectoryIterator item"
				},
				"directoryiterator.getpath": {
					"tokens": [
						"DirectoryIterator::getPath",
						"getPath",
						"::getPath"
					],
					"id": "directoryiterator.getpath",
					"name": "DirectoryIterator::getPath",
					"description": "Get path of current Iterator item without filename"
				},
				"directoryiterator.getpathname": {
					"tokens": [
						"DirectoryIterator::getPathname",
						"getPathname",
						"::getPathname"
					],
					"id": "directoryiterator.getpathname",
					"name": "DirectoryIterator::getPathname",
					"description": "Return path and file name of current DirectoryIterator item"
				},
				"directoryiterator.getperms": {
					"tokens": [
						"DirectoryIterator::getPerms",
						"getPerms",
						"::getPerms"
					],
					"id": "directoryiterator.getperms",
					"name": "DirectoryIterator::getPerms",
					"description": "Get the permissions of current DirectoryIterator item"
				},
				"directoryiterator.getsize": {
					"tokens": [
						"DirectoryIterator::getSize",
						"getSize",
						"::getSize"
					],
					"id": "directoryiterator.getsize",
					"name": "DirectoryIterator::getSize",
					"description": "Get size of current DirectoryIterator item"
				},
				"directoryiterator.gettype": {
					"tokens": [
						"DirectoryIterator::getType",
						"getType",
						"::getType"
					],
					"id": "directoryiterator.gettype",
					"name": "DirectoryIterator::getType",
					"description": "Determine the type of the current DirectoryIterator item"
				},
				"directoryiterator.isdir": {
					"tokens": [
						"DirectoryIterator::isDir",
						"isDir",
						"::isDir"
					],
					"id": "directoryiterator.isdir",
					"name": "DirectoryIterator::isDir",
					"description": "Determine if current DirectoryIterator item is a directory"
				},
				"directoryiterator.isdot": {
					"tokens": [
						"DirectoryIterator::isDot",
						"isDot",
						"::isDot"
					],
					"id": "directoryiterator.isdot",
					"name": "DirectoryIterator::isDot",
					"description": "Determine if current DirectoryIterator item is '.' or '..'"
				},
				"directoryiterator.isexecutable": {
					"tokens": [
						"DirectoryIterator::isExecutable",
						"isExecutable",
						"::isExecutable"
					],
					"id": "directoryiterator.isexecutable",
					"name": "DirectoryIterator::isExecutable",
					"description": "Determine if current DirectoryIterator item is executable"
				},
				"directoryiterator.isfile": {
					"tokens": [
						"DirectoryIterator::isFile",
						"isFile",
						"::isFile"
					],
					"id": "directoryiterator.isfile",
					"name": "DirectoryIterator::isFile",
					"description": "Determine if current DirectoryIterator item is a regular file"
				},
				"directoryiterator.islink": {
					"tokens": [
						"DirectoryIterator::isLink",
						"isLink",
						"::isLink"
					],
					"id": "directoryiterator.islink",
					"name": "DirectoryIterator::isLink",
					"description": "Determine if current DirectoryIterator item is a symbolic link"
				},
				"directoryiterator.isreadable": {
					"tokens": [
						"DirectoryIterator::isReadable",
						"isReadable",
						"::isReadable"
					],
					"id": "directoryiterator.isreadable",
					"name": "DirectoryIterator::isReadable",
					"description": "Determine if current DirectoryIterator item can be read"
				},
				"directoryiterator.iswritable": {
					"tokens": [
						"DirectoryIterator::isWritable",
						"isWritable",
						"::isWritable"
					],
					"id": "directoryiterator.iswritable",
					"name": "DirectoryIterator::isWritable",
					"description": "Determine if current DirectoryIterator item can be written to"
				},
				"directoryiterator.key": {
					"tokens": [
						"DirectoryIterator::key",
						"key",
						"::key"
					],
					"id": "directoryiterator.key",
					"name": "DirectoryIterator::key",
					"description": "Return the key for the current DirectoryIterator item"
				},
				"directoryiterator.next": {
					"tokens": [
						"DirectoryIterator::next",
						"next",
						"::next"
					],
					"id": "directoryiterator.next",
					"name": "DirectoryIterator::next",
					"description": "Move forward to next DirectoryIterator item"
				},
				"directoryiterator.rewind": {
					"tokens": [
						"DirectoryIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "directoryiterator.rewind",
					"name": "DirectoryIterator::rewind",
					"description": "Rewind the DirectoryIterator back to the start"
				},
				"directoryiterator.seek": {
					"tokens": [
						"DirectoryIterator::seek",
						"seek",
						"::seek"
					],
					"id": "directoryiterator.seek",
					"name": "DirectoryIterator::seek",
					"description": "Seek to a DirectoryIterator item"
				},
				"directoryiterator.tostring": {
					"tokens": [
						"DirectoryIterator::__toString",
						"DirectoryIterator::_toString",
						"__toString",
						"::__toString"
					],
					"id": "directoryiterator.tostring",
					"name": "DirectoryIterator::__toString",
					"description": "Get file name as a string"
				},
				"directoryiterator.valid": {
					"tokens": [
						"DirectoryIterator::valid",
						"valid",
						"::valid"
					],
					"id": "directoryiterator.valid",
					"name": "DirectoryIterator::valid",
					"description": "Check whether current DirectoryIterator position is a valid file"
				},
				"emptyiterator.current": {
					"tokens": [
						"EmptyIterator::current",
						"current",
						"::current"
					],
					"id": "emptyiterator.current",
					"name": "EmptyIterator::current",
					"description": "The current() method"
				},
				"emptyiterator.key": {
					"tokens": [
						"EmptyIterator::key",
						"key",
						"::key"
					],
					"id": "emptyiterator.key",
					"name": "EmptyIterator::key",
					"description": "The key() method"
				},
				"emptyiterator.next": {
					"tokens": [
						"EmptyIterator::next",
						"next",
						"::next"
					],
					"id": "emptyiterator.next",
					"name": "EmptyIterator::next",
					"description": "The next() method"
				},
				"emptyiterator.rewind": {
					"tokens": [
						"EmptyIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "emptyiterator.rewind",
					"name": "EmptyIterator::rewind",
					"description": "The rewind() method"
				},
				"emptyiterator.valid": {
					"tokens": [
						"EmptyIterator::valid",
						"valid",
						"::valid"
					],
					"id": "emptyiterator.valid",
					"name": "EmptyIterator::valid",
					"description": "The valid() method"
				},
				"filesystemiterator.construct": {
					"tokens": [
						"FilesystemIterator::__construct",
						"FilesystemIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "filesystemiterator.construct",
					"name": "FilesystemIterator::__construct",
					"description": "Constructs a new filesystem iterator"
				},
				"filesystemiterator.current": {
					"tokens": [
						"FilesystemIterator::current",
						"current",
						"::current"
					],
					"id": "filesystemiterator.current",
					"name": "FilesystemIterator::current",
					"description": "The current file"
				},
				"filesystemiterator.getflags": {
					"tokens": [
						"FilesystemIterator::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "filesystemiterator.getflags",
					"name": "FilesystemIterator::getFlags",
					"description": "Get the handling flags"
				},
				"filesystemiterator.key": {
					"tokens": [
						"FilesystemIterator::key",
						"key",
						"::key"
					],
					"id": "filesystemiterator.key",
					"name": "FilesystemIterator::key",
					"description": "Retrieve the key for the current file"
				},
				"filesystemiterator.next": {
					"tokens": [
						"FilesystemIterator::next",
						"next",
						"::next"
					],
					"id": "filesystemiterator.next",
					"name": "FilesystemIterator::next",
					"description": "Move to the next file"
				},
				"filesystemiterator.rewind": {
					"tokens": [
						"FilesystemIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "filesystemiterator.rewind",
					"name": "FilesystemIterator::rewind",
					"description": "Rewinds back to the beginning"
				},
				"filesystemiterator.setflags": {
					"tokens": [
						"FilesystemIterator::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "filesystemiterator.setflags",
					"name": "FilesystemIterator::setFlags",
					"description": "Sets handling flags"
				},
				"filteriterator.accept": {
					"tokens": [
						"FilterIterator::accept",
						"accept",
						"::accept"
					],
					"id": "filteriterator.accept",
					"name": "FilterIterator::accept",
					"description": "Check whether the current element of the iterator is acceptable"
				},
				"filteriterator.construct": {
					"tokens": [
						"FilterIterator::__construct",
						"FilterIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "filteriterator.construct",
					"name": "FilterIterator::__construct",
					"description": "Construct a filterIterator"
				},
				"filteriterator.current": {
					"tokens": [
						"FilterIterator::current",
						"current",
						"::current"
					],
					"id": "filteriterator.current",
					"name": "FilterIterator::current",
					"description": "Get the current element value"
				},
				"filteriterator.getinneriterator": {
					"tokens": [
						"FilterIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "filteriterator.getinneriterator",
					"name": "FilterIterator::getInnerIterator",
					"description": "Get the inner iterator"
				},
				"filteriterator.key": {
					"tokens": [
						"FilterIterator::key",
						"key",
						"::key"
					],
					"id": "filteriterator.key",
					"name": "FilterIterator::key",
					"description": "Get the current key"
				},
				"filteriterator.next": {
					"tokens": [
						"FilterIterator::next",
						"next",
						"::next"
					],
					"id": "filteriterator.next",
					"name": "FilterIterator::next",
					"description": "Move the iterator forward"
				},
				"filteriterator.rewind": {
					"tokens": [
						"FilterIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "filteriterator.rewind",
					"name": "FilterIterator::rewind",
					"description": "Rewind the iterator"
				},
				"filteriterator.valid": {
					"tokens": [
						"FilterIterator::valid",
						"valid",
						"::valid"
					],
					"id": "filteriterator.valid",
					"name": "FilterIterator::valid",
					"description": "Check whether the current element is valid"
				},
				"globiterator.construct": {
					"tokens": [
						"GlobIterator::__construct",
						"GlobIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "globiterator.construct",
					"name": "GlobIterator::__construct",
					"description": "Construct a directory using glob"
				},
				"globiterator.count": {
					"tokens": [
						"GlobIterator::count",
						"count",
						"::count"
					],
					"id": "globiterator.count",
					"name": "GlobIterator::count",
					"description": "Get the number of directories and files"
				},
				"infiniteiterator.construct": {
					"tokens": [
						"InfiniteIterator::__construct",
						"InfiniteIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "infiniteiterator.construct",
					"name": "InfiniteIterator::__construct",
					"description": "Constructs an InfiniteIterator"
				},
				"infiniteiterator.next": {
					"tokens": [
						"InfiniteIterator::next",
						"next",
						"::next"
					],
					"id": "infiniteiterator.next",
					"name": "InfiniteIterator::next",
					"description": "Moves the inner Iterator forward or rewinds it"
				},
				"iteratoriterator.construct": {
					"tokens": [
						"IteratorIterator::__construct",
						"IteratorIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "iteratoriterator.construct",
					"name": "IteratorIterator::__construct",
					"description": "Create an iterator from anything that is traversable"
				},
				"iteratoriterator.current": {
					"tokens": [
						"IteratorIterator::current",
						"current",
						"::current"
					],
					"id": "iteratoriterator.current",
					"name": "IteratorIterator::current",
					"description": "Get the current value"
				},
				"iteratoriterator.getinneriterator": {
					"tokens": [
						"IteratorIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "iteratoriterator.getinneriterator",
					"name": "IteratorIterator::getInnerIterator",
					"description": "Get the inner iterator"
				},
				"iteratoriterator.key": {
					"tokens": [
						"IteratorIterator::key",
						"key",
						"::key"
					],
					"id": "iteratoriterator.key",
					"name": "IteratorIterator::key",
					"description": "Get the key of the current element"
				},
				"iteratoriterator.next": {
					"tokens": [
						"IteratorIterator::next",
						"next",
						"::next"
					],
					"id": "iteratoriterator.next",
					"name": "IteratorIterator::next",
					"description": "Forward to the next element"
				},
				"iteratoriterator.rewind": {
					"tokens": [
						"IteratorIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "iteratoriterator.rewind",
					"name": "IteratorIterator::rewind",
					"description": "Rewind to the first element"
				},
				"iteratoriterator.valid": {
					"tokens": [
						"IteratorIterator::valid",
						"valid",
						"::valid"
					],
					"id": "iteratoriterator.valid",
					"name": "IteratorIterator::valid",
					"description": "Checks if the iterator is valid"
				},
				"limititerator.construct": {
					"tokens": [
						"LimitIterator::__construct",
						"LimitIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "limititerator.construct",
					"name": "LimitIterator::__construct",
					"description": "Construct a LimitIterator"
				},
				"limititerator.current": {
					"tokens": [
						"LimitIterator::current",
						"current",
						"::current"
					],
					"id": "limititerator.current",
					"name": "LimitIterator::current",
					"description": "Get current element"
				},
				"limititerator.getinneriterator": {
					"tokens": [
						"LimitIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "limititerator.getinneriterator",
					"name": "LimitIterator::getInnerIterator",
					"description": "Get inner iterator"
				},
				"limititerator.getposition": {
					"tokens": [
						"LimitIterator::getPosition",
						"getPosition",
						"::getPosition"
					],
					"id": "limititerator.getposition",
					"name": "LimitIterator::getPosition",
					"description": "Return the current position"
				},
				"limititerator.key": {
					"tokens": [
						"LimitIterator::key",
						"key",
						"::key"
					],
					"id": "limititerator.key",
					"name": "LimitIterator::key",
					"description": "Get current key"
				},
				"limititerator.next": {
					"tokens": [
						"LimitIterator::next",
						"next",
						"::next"
					],
					"id": "limititerator.next",
					"name": "LimitIterator::next",
					"description": "Move the iterator forward"
				},
				"limititerator.rewind": {
					"tokens": [
						"LimitIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "limititerator.rewind",
					"name": "LimitIterator::rewind",
					"description": "Rewind the iterator to the specified starting offset"
				},
				"limititerator.seek": {
					"tokens": [
						"LimitIterator::seek",
						"seek",
						"::seek"
					],
					"id": "limititerator.seek",
					"name": "LimitIterator::seek",
					"description": "Seek to the given position"
				},
				"limititerator.valid": {
					"tokens": [
						"LimitIterator::valid",
						"valid",
						"::valid"
					],
					"id": "limititerator.valid",
					"name": "LimitIterator::valid",
					"description": "Check whether the current element is valid"
				},
				"multipleiterator.attachiterator": {
					"tokens": [
						"MultipleIterator::attachIterator",
						"attachIterator",
						"::attachIterator"
					],
					"id": "multipleiterator.attachiterator",
					"name": "MultipleIterator::attachIterator",
					"description": "Attaches iterator information"
				},
				"multipleiterator.construct": {
					"tokens": [
						"MultipleIterator::__construct",
						"MultipleIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "multipleiterator.construct",
					"name": "MultipleIterator::__construct",
					"description": "Constructs a new MultipleIterator"
				},
				"multipleiterator.containsiterator": {
					"tokens": [
						"MultipleIterator::containsIterator",
						"containsIterator",
						"::containsIterator"
					],
					"id": "multipleiterator.containsiterator",
					"name": "MultipleIterator::containsIterator",
					"description": "Checks if an iterator is attached"
				},
				"multipleiterator.countiterators": {
					"tokens": [
						"MultipleIterator::countIterators",
						"countIterators",
						"::countIterators"
					],
					"id": "multipleiterator.countiterators",
					"name": "MultipleIterator::countIterators",
					"description": "Gets the number of attached iterator instances"
				},
				"multipleiterator.current": {
					"tokens": [
						"MultipleIterator::current",
						"current",
						"::current"
					],
					"id": "multipleiterator.current",
					"name": "MultipleIterator::current",
					"description": "Gets the registered iterator instances"
				},
				"multipleiterator.detachiterator": {
					"tokens": [
						"MultipleIterator::detachIterator",
						"detachIterator",
						"::detachIterator"
					],
					"id": "multipleiterator.detachiterator",
					"name": "MultipleIterator::detachIterator",
					"description": "Detaches an iterator"
				},
				"multipleiterator.getflags": {
					"tokens": [
						"MultipleIterator::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "multipleiterator.getflags",
					"name": "MultipleIterator::getFlags",
					"description": "Gets the flag information"
				},
				"multipleiterator.key": {
					"tokens": [
						"MultipleIterator::key",
						"key",
						"::key"
					],
					"id": "multipleiterator.key",
					"name": "MultipleIterator::key",
					"description": "Gets the registered iterator instances"
				},
				"multipleiterator.next": {
					"tokens": [
						"MultipleIterator::next",
						"next",
						"::next"
					],
					"id": "multipleiterator.next",
					"name": "MultipleIterator::next",
					"description": "Moves all attached iterator instances forward"
				},
				"multipleiterator.rewind": {
					"tokens": [
						"MultipleIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "multipleiterator.rewind",
					"name": "MultipleIterator::rewind",
					"description": "Rewinds all attached iterator instances"
				},
				"multipleiterator.setflags": {
					"tokens": [
						"MultipleIterator::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "multipleiterator.setflags",
					"name": "MultipleIterator::setFlags",
					"description": "Sets flags"
				},
				"multipleiterator.valid": {
					"tokens": [
						"MultipleIterator::valid",
						"valid",
						"::valid"
					],
					"id": "multipleiterator.valid",
					"name": "MultipleIterator::valid",
					"description": "Checks the validity of sub iterators"
				},
				"norewinditerator.construct": {
					"tokens": [
						"NoRewindIterator::__construct",
						"NoRewindIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "norewinditerator.construct",
					"name": "NoRewindIterator::__construct",
					"description": "Construct a NoRewindIterator"
				},
				"norewinditerator.current": {
					"tokens": [
						"NoRewindIterator::current",
						"current",
						"::current"
					],
					"id": "norewinditerator.current",
					"name": "NoRewindIterator::current",
					"description": "Get the current value"
				},
				"norewinditerator.getinneriterator": {
					"tokens": [
						"NoRewindIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "norewinditerator.getinneriterator",
					"name": "NoRewindIterator::getInnerIterator",
					"description": "Get the inner iterator"
				},
				"norewinditerator.key": {
					"tokens": [
						"NoRewindIterator::key",
						"key",
						"::key"
					],
					"id": "norewinditerator.key",
					"name": "NoRewindIterator::key",
					"description": "Get the current key"
				},
				"norewinditerator.next": {
					"tokens": [
						"NoRewindIterator::next",
						"next",
						"::next"
					],
					"id": "norewinditerator.next",
					"name": "NoRewindIterator::next",
					"description": "Forward to the next element"
				},
				"norewinditerator.rewind": {
					"tokens": [
						"NoRewindIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "norewinditerator.rewind",
					"name": "NoRewindIterator::rewind",
					"description": "Prevents the rewind operation on the inner iterator."
				},
				"norewinditerator.valid": {
					"tokens": [
						"NoRewindIterator::valid",
						"valid",
						"::valid"
					],
					"id": "norewinditerator.valid",
					"name": "NoRewindIterator::valid",
					"description": "Validates the iterator"
				},
				"parentiterator.accept": {
					"tokens": [
						"ParentIterator::accept",
						"accept",
						"::accept"
					],
					"id": "parentiterator.accept",
					"name": "ParentIterator::accept",
					"description": "Determines acceptability"
				},
				"parentiterator.construct": {
					"tokens": [
						"ParentIterator::__construct",
						"ParentIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "parentiterator.construct",
					"name": "ParentIterator::__construct",
					"description": "Constructs a ParentIterator"
				},
				"parentiterator.getchildren": {
					"tokens": [
						"ParentIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "parentiterator.getchildren",
					"name": "ParentIterator::getChildren",
					"description": "Return the inner iterator's children contained in a ParentIterator"
				},
				"parentiterator.haschildren": {
					"tokens": [
						"ParentIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "parentiterator.haschildren",
					"name": "ParentIterator::hasChildren",
					"description": "Check whether the inner iterator's current element has children"
				},
				"parentiterator.next": {
					"tokens": [
						"ParentIterator::next",
						"next",
						"::next"
					],
					"id": "parentiterator.next",
					"name": "ParentIterator::next",
					"description": "Move the iterator forward"
				},
				"parentiterator.rewind": {
					"tokens": [
						"ParentIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "parentiterator.rewind",
					"name": "ParentIterator::rewind",
					"description": "Rewind the iterator"
				},
				"recursivearrayiterator.getchildren": {
					"tokens": [
						"RecursiveArrayIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursivearrayiterator.getchildren",
					"name": "RecursiveArrayIterator::getChildren",
					"description": "Returns an iterator for the current entry if it is an array or an object."
				},
				"recursivearrayiterator.haschildren": {
					"tokens": [
						"RecursiveArrayIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursivearrayiterator.haschildren",
					"name": "RecursiveArrayIterator::hasChildren",
					"description": "Returns whether current entry is an array or an object."
				},
				"recursivecachingiterator.construct": {
					"tokens": [
						"RecursiveCachingIterator::__construct",
						"RecursiveCachingIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursivecachingiterator.construct",
					"name": "RecursiveCachingIterator::__construct",
					"description": "Construct"
				},
				"recursivecachingiterator.getchildren": {
					"tokens": [
						"RecursiveCachingIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursivecachingiterator.getchildren",
					"name": "RecursiveCachingIterator::getChildren",
					"description": "Return the inner iterator's children as a RecursiveCachingIterator"
				},
				"recursivecachingiterator.haschildren": {
					"tokens": [
						"RecursiveCachingIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursivecachingiterator.haschildren",
					"name": "RecursiveCachingIterator::hasChildren",
					"description": "Check whether the current element of the inner iterator has children"
				},
				"recursivecallbackfilteriterator.construct": {
					"tokens": [
						"RecursiveCallbackFilterIterator::__construct",
						"RecursiveCallbackFilterIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursivecallbackfilteriterator.construct",
					"name": "RecursiveCallbackFilterIterator::__construct",
					"description": "Create a RecursiveCallbackFilterIterator from a RecursiveIterator"
				},
				"recursivecallbackfilteriterator.getchildren": {
					"tokens": [
						"RecursiveCallbackFilterIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursivecallbackfilteriterator.getchildren",
					"name": "RecursiveCallbackFilterIterator::getChildren",
					"description": "Return the inner iterator's children contained in a RecursiveCallbackFilterIterator"
				},
				"recursivecallbackfilteriterator.haschildren": {
					"tokens": [
						"RecursiveCallbackFilterIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursivecallbackfilteriterator.haschildren",
					"name": "RecursiveCallbackFilterIterator::hasChildren",
					"description": "Check whether the inner iterator's current element has children"
				},
				"recursivedirectoryiterator.construct": {
					"tokens": [
						"RecursiveDirectoryIterator::__construct",
						"RecursiveDirectoryIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursivedirectoryiterator.construct",
					"name": "RecursiveDirectoryIterator::__construct",
					"description": "Constructs a RecursiveDirectoryIterator"
				},
				"recursivedirectoryiterator.getchildren": {
					"tokens": [
						"RecursiveDirectoryIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursivedirectoryiterator.getchildren",
					"name": "RecursiveDirectoryIterator::getChildren",
					"description": "Returns an iterator for the current entry if it is a directory"
				},
				"recursivedirectoryiterator.getsubpath": {
					"tokens": [
						"RecursiveDirectoryIterator::getSubPath",
						"getSubPath",
						"::getSubPath"
					],
					"id": "recursivedirectoryiterator.getsubpath",
					"name": "RecursiveDirectoryIterator::getSubPath",
					"description": "Get sub path"
				},
				"recursivedirectoryiterator.getsubpathname": {
					"tokens": [
						"RecursiveDirectoryIterator::getSubPathname",
						"getSubPathname",
						"::getSubPathname"
					],
					"id": "recursivedirectoryiterator.getsubpathname",
					"name": "RecursiveDirectoryIterator::getSubPathname",
					"description": "Get sub path and name"
				},
				"recursivedirectoryiterator.haschildren": {
					"tokens": [
						"RecursiveDirectoryIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursivedirectoryiterator.haschildren",
					"name": "RecursiveDirectoryIterator::hasChildren",
					"description": "Returns whether current entry is a directory and not '.' or '..'"
				},
				"recursivedirectoryiterator.key": {
					"tokens": [
						"RecursiveDirectoryIterator::key",
						"key",
						"::key"
					],
					"id": "recursivedirectoryiterator.key",
					"name": "RecursiveDirectoryIterator::key",
					"description": "Return path and filename of current dir entry"
				},
				"recursivedirectoryiterator.next": {
					"tokens": [
						"RecursiveDirectoryIterator::next",
						"next",
						"::next"
					],
					"id": "recursivedirectoryiterator.next",
					"name": "RecursiveDirectoryIterator::next",
					"description": "Move to next entry"
				},
				"recursivedirectoryiterator.rewind": {
					"tokens": [
						"RecursiveDirectoryIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "recursivedirectoryiterator.rewind",
					"name": "RecursiveDirectoryIterator::rewind",
					"description": "Rewind dir back to the start"
				},
				"recursivefilteriterator.construct": {
					"tokens": [
						"RecursiveFilterIterator::__construct",
						"RecursiveFilterIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursivefilteriterator.construct",
					"name": "RecursiveFilterIterator::__construct",
					"description": "Create a RecursiveFilterIterator from a RecursiveIterator"
				},
				"recursivefilteriterator.getchildren": {
					"tokens": [
						"RecursiveFilterIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursivefilteriterator.getchildren",
					"name": "RecursiveFilterIterator::getChildren",
					"description": "Return the inner iterator's children contained in a RecursiveFilterIterator"
				},
				"recursivefilteriterator.haschildren": {
					"tokens": [
						"RecursiveFilterIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursivefilteriterator.haschildren",
					"name": "RecursiveFilterIterator::hasChildren",
					"description": "Check whether the inner iterator's current element has children"
				},
				"recursiveiteratoriterator.beginchildren": {
					"tokens": [
						"RecursiveIteratorIterator::beginChildren",
						"beginChildren",
						"::beginChildren"
					],
					"id": "recursiveiteratoriterator.beginchildren",
					"name": "RecursiveIteratorIterator::beginChildren",
					"description": "Begin children"
				},
				"recursiveiteratoriterator.beginiteration": {
					"tokens": [
						"RecursiveIteratorIterator::beginIteration",
						"beginIteration",
						"::beginIteration"
					],
					"id": "recursiveiteratoriterator.beginiteration",
					"name": "RecursiveIteratorIterator::beginIteration",
					"description": "Begin Iteration"
				},
				"recursiveiteratoriterator.callgetchildren": {
					"tokens": [
						"RecursiveIteratorIterator::callGetChildren",
						"callGetChildren",
						"::callGetChildren"
					],
					"id": "recursiveiteratoriterator.callgetchildren",
					"name": "RecursiveIteratorIterator::callGetChildren",
					"description": "Get children"
				},
				"recursiveiteratoriterator.callhaschildren": {
					"tokens": [
						"RecursiveIteratorIterator::callHasChildren",
						"callHasChildren",
						"::callHasChildren"
					],
					"id": "recursiveiteratoriterator.callhaschildren",
					"name": "RecursiveIteratorIterator::callHasChildren",
					"description": "Has children"
				},
				"recursiveiteratoriterator.construct": {
					"tokens": [
						"RecursiveIteratorIterator::__construct",
						"RecursiveIteratorIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursiveiteratoriterator.construct",
					"name": "RecursiveIteratorIterator::__construct",
					"description": "Construct a RecursiveIteratorIterator"
				},
				"recursiveiteratoriterator.current": {
					"tokens": [
						"RecursiveIteratorIterator::current",
						"current",
						"::current"
					],
					"id": "recursiveiteratoriterator.current",
					"name": "RecursiveIteratorIterator::current",
					"description": "Access the current element value"
				},
				"recursiveiteratoriterator.endchildren": {
					"tokens": [
						"RecursiveIteratorIterator::endChildren",
						"endChildren",
						"::endChildren"
					],
					"id": "recursiveiteratoriterator.endchildren",
					"name": "RecursiveIteratorIterator::endChildren",
					"description": "End children"
				},
				"recursiveiteratoriterator.enditeration": {
					"tokens": [
						"RecursiveIteratorIterator::endIteration",
						"endIteration",
						"::endIteration"
					],
					"id": "recursiveiteratoriterator.enditeration",
					"name": "RecursiveIteratorIterator::endIteration",
					"description": "End Iteration"
				},
				"recursiveiteratoriterator.getdepth": {
					"tokens": [
						"RecursiveIteratorIterator::getDepth",
						"getDepth",
						"::getDepth"
					],
					"id": "recursiveiteratoriterator.getdepth",
					"name": "RecursiveIteratorIterator::getDepth",
					"description": "Get the current depth of the recursive iteration"
				},
				"recursiveiteratoriterator.getinneriterator": {
					"tokens": [
						"RecursiveIteratorIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "recursiveiteratoriterator.getinneriterator",
					"name": "RecursiveIteratorIterator::getInnerIterator",
					"description": "Get inner iterator"
				},
				"recursiveiteratoriterator.getmaxdepth": {
					"tokens": [
						"RecursiveIteratorIterator::getMaxDepth",
						"getMaxDepth",
						"::getMaxDepth"
					],
					"id": "recursiveiteratoriterator.getmaxdepth",
					"name": "RecursiveIteratorIterator::getMaxDepth",
					"description": "Get max depth"
				},
				"recursiveiteratoriterator.getsubiterator": {
					"tokens": [
						"RecursiveIteratorIterator::getSubIterator",
						"getSubIterator",
						"::getSubIterator"
					],
					"id": "recursiveiteratoriterator.getsubiterator",
					"name": "RecursiveIteratorIterator::getSubIterator",
					"description": "The current active sub iterator"
				},
				"recursiveiteratoriterator.key": {
					"tokens": [
						"RecursiveIteratorIterator::key",
						"key",
						"::key"
					],
					"id": "recursiveiteratoriterator.key",
					"name": "RecursiveIteratorIterator::key",
					"description": "Access the current key"
				},
				"recursiveiteratoriterator.next": {
					"tokens": [
						"RecursiveIteratorIterator::next",
						"next",
						"::next"
					],
					"id": "recursiveiteratoriterator.next",
					"name": "RecursiveIteratorIterator::next",
					"description": "Move forward to the next element"
				},
				"recursiveiteratoriterator.nextelement": {
					"tokens": [
						"RecursiveIteratorIterator::nextElement",
						"nextElement",
						"::nextElement"
					],
					"id": "recursiveiteratoriterator.nextelement",
					"name": "RecursiveIteratorIterator::nextElement",
					"description": "Next element"
				},
				"recursiveiteratoriterator.rewind": {
					"tokens": [
						"RecursiveIteratorIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "recursiveiteratoriterator.rewind",
					"name": "RecursiveIteratorIterator::rewind",
					"description": "Rewind the iterator to the first element of the top level inner iterator"
				},
				"recursiveiteratoriterator.setmaxdepth": {
					"tokens": [
						"RecursiveIteratorIterator::setMaxDepth",
						"setMaxDepth",
						"::setMaxDepth"
					],
					"id": "recursiveiteratoriterator.setmaxdepth",
					"name": "RecursiveIteratorIterator::setMaxDepth",
					"description": "Set max depth"
				},
				"recursiveiteratoriterator.valid": {
					"tokens": [
						"RecursiveIteratorIterator::valid",
						"valid",
						"::valid"
					],
					"id": "recursiveiteratoriterator.valid",
					"name": "RecursiveIteratorIterator::valid",
					"description": "Check whether the current position is valid"
				},
				"recursiveregexiterator.construct": {
					"tokens": [
						"RecursiveRegexIterator::__construct",
						"RecursiveRegexIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursiveregexiterator.construct",
					"name": "RecursiveRegexIterator::__construct",
					"description": "Creates a new RecursiveRegexIterator."
				},
				"recursiveregexiterator.getchildren": {
					"tokens": [
						"RecursiveRegexIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursiveregexiterator.getchildren",
					"name": "RecursiveRegexIterator::getChildren",
					"description": "Returns an iterator for the current entry."
				},
				"recursiveregexiterator.haschildren": {
					"tokens": [
						"RecursiveRegexIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursiveregexiterator.haschildren",
					"name": "RecursiveRegexIterator::hasChildren",
					"description": "Returns whether an iterator can be obtained for the current entry."
				},
				"recursivetreeiterator.beginchildren": {
					"tokens": [
						"RecursiveTreeIterator::beginChildren",
						"beginChildren",
						"::beginChildren"
					],
					"id": "recursivetreeiterator.beginchildren",
					"name": "RecursiveTreeIterator::beginChildren",
					"description": "Begin children"
				},
				"recursivetreeiterator.beginiteration": {
					"tokens": [
						"RecursiveTreeIterator::beginIteration",
						"beginIteration",
						"::beginIteration"
					],
					"id": "recursivetreeiterator.beginiteration",
					"name": "RecursiveTreeIterator::beginIteration",
					"description": "Begin iteration"
				},
				"recursivetreeiterator.callgetchildren": {
					"tokens": [
						"RecursiveTreeIterator::callGetChildren",
						"callGetChildren",
						"::callGetChildren"
					],
					"id": "recursivetreeiterator.callgetchildren",
					"name": "RecursiveTreeIterator::callGetChildren",
					"description": "Get children"
				},
				"recursivetreeiterator.callhaschildren": {
					"tokens": [
						"RecursiveTreeIterator::callHasChildren",
						"callHasChildren",
						"::callHasChildren"
					],
					"id": "recursivetreeiterator.callhaschildren",
					"name": "RecursiveTreeIterator::callHasChildren",
					"description": "Has children"
				},
				"recursivetreeiterator.construct": {
					"tokens": [
						"RecursiveTreeIterator::__construct",
						"RecursiveTreeIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "recursivetreeiterator.construct",
					"name": "RecursiveTreeIterator::__construct",
					"description": "Construct a RecursiveTreeIterator"
				},
				"recursivetreeiterator.current": {
					"tokens": [
						"RecursiveTreeIterator::current",
						"current",
						"::current"
					],
					"id": "recursivetreeiterator.current",
					"name": "RecursiveTreeIterator::current",
					"description": "Get current element"
				},
				"recursivetreeiterator.endchildren": {
					"tokens": [
						"RecursiveTreeIterator::endChildren",
						"endChildren",
						"::endChildren"
					],
					"id": "recursivetreeiterator.endchildren",
					"name": "RecursiveTreeIterator::endChildren",
					"description": "End children"
				},
				"recursivetreeiterator.enditeration": {
					"tokens": [
						"RecursiveTreeIterator::endIteration",
						"endIteration",
						"::endIteration"
					],
					"id": "recursivetreeiterator.enditeration",
					"name": "RecursiveTreeIterator::endIteration",
					"description": "End iteration"
				},
				"recursivetreeiterator.getentry": {
					"tokens": [
						"RecursiveTreeIterator::getEntry",
						"getEntry",
						"::getEntry"
					],
					"id": "recursivetreeiterator.getentry",
					"name": "RecursiveTreeIterator::getEntry",
					"description": "Get current entry"
				},
				"recursivetreeiterator.getpostfix": {
					"tokens": [
						"RecursiveTreeIterator::getPostfix",
						"getPostfix",
						"::getPostfix"
					],
					"id": "recursivetreeiterator.getpostfix",
					"name": "RecursiveTreeIterator::getPostfix",
					"description": "Get the postfix"
				},
				"recursivetreeiterator.getprefix": {
					"tokens": [
						"RecursiveTreeIterator::getPrefix",
						"getPrefix",
						"::getPrefix"
					],
					"id": "recursivetreeiterator.getprefix",
					"name": "RecursiveTreeIterator::getPrefix",
					"description": "Get the prefix"
				},
				"recursivetreeiterator.key": {
					"tokens": [
						"RecursiveTreeIterator::key",
						"key",
						"::key"
					],
					"id": "recursivetreeiterator.key",
					"name": "RecursiveTreeIterator::key",
					"description": "Get the key of the current element"
				},
				"recursivetreeiterator.next": {
					"tokens": [
						"RecursiveTreeIterator::next",
						"next",
						"::next"
					],
					"id": "recursivetreeiterator.next",
					"name": "RecursiveTreeIterator::next",
					"description": "Move to next element"
				},
				"recursivetreeiterator.nextelement": {
					"tokens": [
						"RecursiveTreeIterator::nextElement",
						"nextElement",
						"::nextElement"
					],
					"id": "recursivetreeiterator.nextelement",
					"name": "RecursiveTreeIterator::nextElement",
					"description": "Next element"
				},
				"recursivetreeiterator.rewind": {
					"tokens": [
						"RecursiveTreeIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "recursivetreeiterator.rewind",
					"name": "RecursiveTreeIterator::rewind",
					"description": "Rewind iterator"
				},
				"recursivetreeiterator.setprefixpart": {
					"tokens": [
						"RecursiveTreeIterator::setPrefixPart",
						"setPrefixPart",
						"::setPrefixPart"
					],
					"id": "recursivetreeiterator.setprefixpart",
					"name": "RecursiveTreeIterator::setPrefixPart",
					"description": "Set a part of the prefix"
				},
				"recursivetreeiterator.valid": {
					"tokens": [
						"RecursiveTreeIterator::valid",
						"valid",
						"::valid"
					],
					"id": "recursivetreeiterator.valid",
					"name": "RecursiveTreeIterator::valid",
					"description": "Check validity"
				},
				"regexiterator.accept": {
					"tokens": [
						"RegexIterator::accept",
						"accept",
						"::accept"
					],
					"id": "regexiterator.accept",
					"name": "RegexIterator::accept",
					"description": "Get accept status"
				},
				"regexiterator.construct": {
					"tokens": [
						"RegexIterator::__construct",
						"RegexIterator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "regexiterator.construct",
					"name": "RegexIterator::__construct",
					"description": "Create a new RegexIterator"
				},
				"regexiterator.getflags": {
					"tokens": [
						"RegexIterator::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "regexiterator.getflags",
					"name": "RegexIterator::getFlags",
					"description": "Get flags"
				},
				"regexiterator.getmode": {
					"tokens": [
						"RegexIterator::getMode",
						"getMode",
						"::getMode"
					],
					"id": "regexiterator.getmode",
					"name": "RegexIterator::getMode",
					"description": "Returns operation mode."
				},
				"regexiterator.getpregflags": {
					"tokens": [
						"RegexIterator::getPregFlags",
						"getPregFlags",
						"::getPregFlags"
					],
					"id": "regexiterator.getpregflags",
					"name": "RegexIterator::getPregFlags",
					"description": "Returns the regular expression flags."
				},
				"regexiterator.getregex": {
					"tokens": [
						"RegexIterator::getRegex",
						"getRegex",
						"::getRegex"
					],
					"id": "regexiterator.getregex",
					"name": "RegexIterator::getRegex",
					"description": "Returns current regular expression"
				},
				"regexiterator.setflags": {
					"tokens": [
						"RegexIterator::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "regexiterator.setflags",
					"name": "RegexIterator::setFlags",
					"description": "Sets the flags."
				},
				"regexiterator.setmode": {
					"tokens": [
						"RegexIterator::setMode",
						"setMode",
						"::setMode"
					],
					"id": "regexiterator.setmode",
					"name": "RegexIterator::setMode",
					"description": "Sets the operation mode."
				},
				"regexiterator.setpregflags": {
					"tokens": [
						"RegexIterator::setPregFlags",
						"setPregFlags",
						"::setPregFlags"
					],
					"id": "regexiterator.setpregflags",
					"name": "RegexIterator::setPregFlags",
					"description": "Sets the regular expression flags."
				},
				"countable.count": {
					"tokens": [
						"Countable::count",
						"count",
						"::count"
					],
					"id": "countable.count",
					"name": "Countable::count",
					"description": "Count elements of an object"
				},
				"outeriterator.getinneriterator": {
					"tokens": [
						"OuterIterator::getInnerIterator",
						"getInnerIterator",
						"::getInnerIterator"
					],
					"id": "outeriterator.getinneriterator",
					"name": "OuterIterator::getInnerIterator",
					"description": "Returns the inner iterator for the current entry."
				},
				"recursiveiterator.getchildren": {
					"tokens": [
						"RecursiveIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "recursiveiterator.getchildren",
					"name": "RecursiveIterator::getChildren",
					"description": "Returns an iterator for the current entry."
				},
				"recursiveiterator.haschildren": {
					"tokens": [
						"RecursiveIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "recursiveiterator.haschildren",
					"name": "RecursiveIterator::hasChildren",
					"description": "Returns if an iterator can be created fot the current entry."
				},
				"seekableiterator.seek": {
					"tokens": [
						"SeekableIterator::seek",
						"seek",
						"::seek"
					],
					"id": "seekableiterator.seek",
					"name": "SeekableIterator::seek",
					"description": "Seeks to a position"
				},
				"function.class-implements": {
					"tokens": [
						"class_implements",
						"classimplements"
					],
					"id": "function.class-implements",
					"name": "class_implements",
					"description": "Return the interfaces which are implemented by the given class or interface"
				},
				"function.class-parents": {
					"tokens": [
						"class_parents",
						"classparents"
					],
					"id": "function.class-parents",
					"name": "class_parents",
					"description": "Return the parent classes of the given class"
				},
				"function.class-uses": {
					"tokens": [
						"class_uses",
						"classuses"
					],
					"id": "function.class-uses",
					"name": "class_uses",
					"description": "Return the traits used by the given class"
				},
				"function.iterator-apply": {
					"tokens": [
						"iterator_apply",
						"iteratorapply"
					],
					"id": "function.iterator-apply",
					"name": "iterator_apply",
					"description": "Call a function for every element in an iterator"
				},
				"function.iterator-count": {
					"tokens": [
						"iterator_count",
						"iteratorcount"
					],
					"id": "function.iterator-count",
					"name": "iterator_count",
					"description": "Count the elements in an iterator"
				},
				"function.iterator-to-array": {
					"tokens": [
						"iterator_to_array",
						"iteratorto_array"
					],
					"id": "function.iterator-to-array",
					"name": "iterator_to_array",
					"description": "Copy the iterator into an array"
				},
				"function.spl-autoload-call": {
					"tokens": [
						"spl_autoload_call",
						"splautoload_call"
					],
					"id": "function.spl-autoload-call",
					"name": "spl_autoload_call",
					"description": "Try all registered __autoload() function to load the requested class"
				},
				"function.spl-autoload-extensions": {
					"tokens": [
						"spl_autoload_extensions",
						"splautoload_extensions"
					],
					"id": "function.spl-autoload-extensions",
					"name": "spl_autoload_extensions",
					"description": "Register and return default file extensions for spl_autoload"
				},
				"function.spl-autoload-functions": {
					"tokens": [
						"spl_autoload_functions",
						"splautoload_functions"
					],
					"id": "function.spl-autoload-functions",
					"name": "spl_autoload_functions",
					"description": "Return all registered __autoload() functions"
				},
				"function.spl-autoload-register": {
					"tokens": [
						"spl_autoload_register",
						"splautoload_register"
					],
					"id": "function.spl-autoload-register",
					"name": "spl_autoload_register",
					"description": "Register given function as __autoload() implementation"
				},
				"function.spl-autoload-unregister": {
					"tokens": [
						"spl_autoload_unregister",
						"splautoload_unregister"
					],
					"id": "function.spl-autoload-unregister",
					"name": "spl_autoload_unregister",
					"description": "Unregister given function as __autoload() implementation"
				},
				"function.spl-autoload": {
					"tokens": [
						"spl_autoload",
						"splautoload"
					],
					"id": "function.spl-autoload",
					"name": "spl_autoload",
					"description": "Default implementation for __autoload()"
				},
				"function.spl-classes": {
					"tokens": [
						"spl_classes",
						"splclasses"
					],
					"id": "function.spl-classes",
					"name": "spl_classes",
					"description": "Return available SPL classes"
				},
				"function.spl-object-hash": {
					"tokens": [
						"spl_object_hash",
						"splobject_hash"
					],
					"id": "function.spl-object-hash",
					"name": "spl_object_hash",
					"description": "Return hash id for given object"
				},
				"splfileinfo.construct": {
					"tokens": [
						"SplFileInfo::__construct",
						"SplFileInfo::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splfileinfo.construct",
					"name": "SplFileInfo::__construct",
					"description": "Construct a new SplFileInfo object"
				},
				"splfileinfo.getatime": {
					"tokens": [
						"SplFileInfo::getATime",
						"getATime",
						"::getATime"
					],
					"id": "splfileinfo.getatime",
					"name": "SplFileInfo::getATime",
					"description": "Gets last access time of the file"
				},
				"splfileinfo.getbasename": {
					"tokens": [
						"SplFileInfo::getBasename",
						"getBasename",
						"::getBasename"
					],
					"id": "splfileinfo.getbasename",
					"name": "SplFileInfo::getBasename",
					"description": "Gets the base name of the file"
				},
				"splfileinfo.getctime": {
					"tokens": [
						"SplFileInfo::getCTime",
						"getCTime",
						"::getCTime"
					],
					"id": "splfileinfo.getctime",
					"name": "SplFileInfo::getCTime",
					"description": "Gets the inode change time"
				},
				"splfileinfo.getextension": {
					"tokens": [
						"SplFileInfo::getExtension",
						"getExtension",
						"::getExtension"
					],
					"id": "splfileinfo.getextension",
					"name": "SplFileInfo::getExtension",
					"description": "Gets the file extension"
				},
				"splfileinfo.getfileinfo": {
					"tokens": [
						"SplFileInfo::getFileInfo",
						"getFileInfo",
						"::getFileInfo"
					],
					"id": "splfileinfo.getfileinfo",
					"name": "SplFileInfo::getFileInfo",
					"description": "Gets an SplFileInfo object for the file"
				},
				"splfileinfo.getfilename": {
					"tokens": [
						"SplFileInfo::getFilename",
						"getFilename",
						"::getFilename"
					],
					"id": "splfileinfo.getfilename",
					"name": "SplFileInfo::getFilename",
					"description": "Gets the filename"
				},
				"splfileinfo.getgroup": {
					"tokens": [
						"SplFileInfo::getGroup",
						"getGroup",
						"::getGroup"
					],
					"id": "splfileinfo.getgroup",
					"name": "SplFileInfo::getGroup",
					"description": "Gets the file group"
				},
				"splfileinfo.getinode": {
					"tokens": [
						"SplFileInfo::getInode",
						"getInode",
						"::getInode"
					],
					"id": "splfileinfo.getinode",
					"name": "SplFileInfo::getInode",
					"description": "Gets the inode for the file"
				},
				"splfileinfo.getlinktarget": {
					"tokens": [
						"SplFileInfo::getLinkTarget",
						"getLinkTarget",
						"::getLinkTarget"
					],
					"id": "splfileinfo.getlinktarget",
					"name": "SplFileInfo::getLinkTarget",
					"description": "Gets the target of a link"
				},
				"splfileinfo.getmtime": {
					"tokens": [
						"SplFileInfo::getMTime",
						"getMTime",
						"::getMTime"
					],
					"id": "splfileinfo.getmtime",
					"name": "SplFileInfo::getMTime",
					"description": "Gets the last modified time"
				},
				"splfileinfo.getowner": {
					"tokens": [
						"SplFileInfo::getOwner",
						"getOwner",
						"::getOwner"
					],
					"id": "splfileinfo.getowner",
					"name": "SplFileInfo::getOwner",
					"description": "Gets the owner of the file"
				},
				"splfileinfo.getpath": {
					"tokens": [
						"SplFileInfo::getPath",
						"getPath",
						"::getPath"
					],
					"id": "splfileinfo.getpath",
					"name": "SplFileInfo::getPath",
					"description": "Gets the path without filename"
				},
				"splfileinfo.getpathinfo": {
					"tokens": [
						"SplFileInfo::getPathInfo",
						"getPathInfo",
						"::getPathInfo"
					],
					"id": "splfileinfo.getpathinfo",
					"name": "SplFileInfo::getPathInfo",
					"description": "Gets an SplFileInfo object for the path"
				},
				"splfileinfo.getpathname": {
					"tokens": [
						"SplFileInfo::getPathname",
						"getPathname",
						"::getPathname"
					],
					"id": "splfileinfo.getpathname",
					"name": "SplFileInfo::getPathname",
					"description": "Gets the path to the file"
				},
				"splfileinfo.getperms": {
					"tokens": [
						"SplFileInfo::getPerms",
						"getPerms",
						"::getPerms"
					],
					"id": "splfileinfo.getperms",
					"name": "SplFileInfo::getPerms",
					"description": "Gets file permissions"
				},
				"splfileinfo.getrealpath": {
					"tokens": [
						"SplFileInfo::getRealPath",
						"getRealPath",
						"::getRealPath"
					],
					"id": "splfileinfo.getrealpath",
					"name": "SplFileInfo::getRealPath",
					"description": "Gets absolute path to file"
				},
				"splfileinfo.getsize": {
					"tokens": [
						"SplFileInfo::getSize",
						"getSize",
						"::getSize"
					],
					"id": "splfileinfo.getsize",
					"name": "SplFileInfo::getSize",
					"description": "Gets file size"
				},
				"splfileinfo.gettype": {
					"tokens": [
						"SplFileInfo::getType",
						"getType",
						"::getType"
					],
					"id": "splfileinfo.gettype",
					"name": "SplFileInfo::getType",
					"description": "Gets file type"
				},
				"splfileinfo.isdir": {
					"tokens": [
						"SplFileInfo::isDir",
						"isDir",
						"::isDir"
					],
					"id": "splfileinfo.isdir",
					"name": "SplFileInfo::isDir",
					"description": "Tells if the file is a directory"
				},
				"splfileinfo.isexecutable": {
					"tokens": [
						"SplFileInfo::isExecutable",
						"isExecutable",
						"::isExecutable"
					],
					"id": "splfileinfo.isexecutable",
					"name": "SplFileInfo::isExecutable",
					"description": "Tells if the file is executable"
				},
				"splfileinfo.isfile": {
					"tokens": [
						"SplFileInfo::isFile",
						"isFile",
						"::isFile"
					],
					"id": "splfileinfo.isfile",
					"name": "SplFileInfo::isFile",
					"description": "Tells if the object references a regular file"
				},
				"splfileinfo.islink": {
					"tokens": [
						"SplFileInfo::isLink",
						"isLink",
						"::isLink"
					],
					"id": "splfileinfo.islink",
					"name": "SplFileInfo::isLink",
					"description": "Tells if the file is a link"
				},
				"splfileinfo.isreadable": {
					"tokens": [
						"SplFileInfo::isReadable",
						"isReadable",
						"::isReadable"
					],
					"id": "splfileinfo.isreadable",
					"name": "SplFileInfo::isReadable",
					"description": "Tells if file is readable"
				},
				"splfileinfo.iswritable": {
					"tokens": [
						"SplFileInfo::isWritable",
						"isWritable",
						"::isWritable"
					],
					"id": "splfileinfo.iswritable",
					"name": "SplFileInfo::isWritable",
					"description": "Tells if the entry is writable"
				},
				"splfileinfo.openfile": {
					"tokens": [
						"SplFileInfo::openFile",
						"openFile",
						"::openFile"
					],
					"id": "splfileinfo.openfile",
					"name": "SplFileInfo::openFile",
					"description": "Gets an SplFileObject object for the file"
				},
				"splfileinfo.setfileclass": {
					"tokens": [
						"SplFileInfo::setFileClass",
						"setFileClass",
						"::setFileClass"
					],
					"id": "splfileinfo.setfileclass",
					"name": "SplFileInfo::setFileClass",
					"description": "Sets the class used with SplFileInfo::openFile"
				},
				"splfileinfo.setinfoclass": {
					"tokens": [
						"SplFileInfo::setInfoClass",
						"setInfoClass",
						"::setInfoClass"
					],
					"id": "splfileinfo.setinfoclass",
					"name": "SplFileInfo::setInfoClass",
					"description": "Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo"
				},
				"splfileinfo.tostring": {
					"tokens": [
						"SplFileInfo::__toString",
						"SplFileInfo::_toString",
						"__toString",
						"::__toString"
					],
					"id": "splfileinfo.tostring",
					"name": "SplFileInfo::__toString",
					"description": "Returns the path to the file as a string"
				},
				"splfileobject.construct": {
					"tokens": [
						"SplFileObject::__construct",
						"SplFileObject::_construct",
						"__construct",
						"::__construct"
					],
					"id": "splfileobject.construct",
					"name": "SplFileObject::__construct",
					"description": "Construct a new file object."
				},
				"splfileobject.current": {
					"tokens": [
						"SplFileObject::current",
						"current",
						"::current"
					],
					"id": "splfileobject.current",
					"name": "SplFileObject::current",
					"description": "Retrieve current line of file"
				},
				"splfileobject.eof": {
					"tokens": [
						"SplFileObject::eof",
						"eof",
						"::eof"
					],
					"id": "splfileobject.eof",
					"name": "SplFileObject::eof",
					"description": "Reached end of file"
				},
				"splfileobject.fflush": {
					"tokens": [
						"SplFileObject::fflush",
						"fflush",
						"::fflush"
					],
					"id": "splfileobject.fflush",
					"name": "SplFileObject::fflush",
					"description": "Flushes the output to the file"
				},
				"splfileobject.fgetc": {
					"tokens": [
						"SplFileObject::fgetc",
						"fgetc",
						"::fgetc"
					],
					"id": "splfileobject.fgetc",
					"name": "SplFileObject::fgetc",
					"description": "Gets character from file"
				},
				"splfileobject.fgetcsv": {
					"tokens": [
						"SplFileObject::fgetcsv",
						"fgetcsv",
						"::fgetcsv"
					],
					"id": "splfileobject.fgetcsv",
					"name": "SplFileObject::fgetcsv",
					"description": "Gets line from file and parse as CSV fields"
				},
				"splfileobject.fgets": {
					"tokens": [
						"SplFileObject::fgets",
						"fgets",
						"::fgets"
					],
					"id": "splfileobject.fgets",
					"name": "SplFileObject::fgets",
					"description": "Gets line from file"
				},
				"splfileobject.fgetss": {
					"tokens": [
						"SplFileObject::fgetss",
						"fgetss",
						"::fgetss"
					],
					"id": "splfileobject.fgetss",
					"name": "SplFileObject::fgetss",
					"description": "Gets line from file and strip HTML tags"
				},
				"splfileobject.flock": {
					"tokens": [
						"SplFileObject::flock",
						"flock",
						"::flock"
					],
					"id": "splfileobject.flock",
					"name": "SplFileObject::flock",
					"description": "Portable file locking"
				},
				"splfileobject.fpassthru": {
					"tokens": [
						"SplFileObject::fpassthru",
						"fpassthru",
						"::fpassthru"
					],
					"id": "splfileobject.fpassthru",
					"name": "SplFileObject::fpassthru",
					"description": "Output all remaining data on a file pointer"
				},
				"splfileobject.fputcsv": {
					"tokens": [
						"SplFileObject::fputcsv",
						"fputcsv",
						"::fputcsv"
					],
					"id": "splfileobject.fputcsv",
					"name": "SplFileObject::fputcsv",
					"description": "Write a field array as a CSV line"
				},
				"splfileobject.fread": {
					"tokens": [
						"SplFileObject::fread",
						"fread",
						"::fread"
					],
					"id": "splfileobject.fread",
					"name": "SplFileObject::fread",
					"description": "Read from file"
				},
				"splfileobject.fscanf": {
					"tokens": [
						"SplFileObject::fscanf",
						"fscanf",
						"::fscanf"
					],
					"id": "splfileobject.fscanf",
					"name": "SplFileObject::fscanf",
					"description": "Parses input from file according to a format"
				},
				"splfileobject.fseek": {
					"tokens": [
						"SplFileObject::fseek",
						"fseek",
						"::fseek"
					],
					"id": "splfileobject.fseek",
					"name": "SplFileObject::fseek",
					"description": "Seek to a position"
				},
				"splfileobject.fstat": {
					"tokens": [
						"SplFileObject::fstat",
						"fstat",
						"::fstat"
					],
					"id": "splfileobject.fstat",
					"name": "SplFileObject::fstat",
					"description": "Gets information about the file"
				},
				"splfileobject.ftell": {
					"tokens": [
						"SplFileObject::ftell",
						"ftell",
						"::ftell"
					],
					"id": "splfileobject.ftell",
					"name": "SplFileObject::ftell",
					"description": "Return current file position"
				},
				"splfileobject.ftruncate": {
					"tokens": [
						"SplFileObject::ftruncate",
						"ftruncate",
						"::ftruncate"
					],
					"id": "splfileobject.ftruncate",
					"name": "SplFileObject::ftruncate",
					"description": "Truncates the file to a given length"
				},
				"splfileobject.fwrite": {
					"tokens": [
						"SplFileObject::fwrite",
						"fwrite",
						"::fwrite"
					],
					"id": "splfileobject.fwrite",
					"name": "SplFileObject::fwrite",
					"description": "Write to file"
				},
				"splfileobject.getchildren": {
					"tokens": [
						"SplFileObject::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "splfileobject.getchildren",
					"name": "SplFileObject::getChildren",
					"description": "No purpose"
				},
				"splfileobject.getcsvcontrol": {
					"tokens": [
						"SplFileObject::getCsvControl",
						"getCsvControl",
						"::getCsvControl"
					],
					"id": "splfileobject.getcsvcontrol",
					"name": "SplFileObject::getCsvControl",
					"description": "Get the delimiter and enclosure character for CSV"
				},
				"splfileobject.getcurrentline": {
					"tokens": [
						"SplFileObject::getCurrentLine",
						"getCurrentLine",
						"::getCurrentLine"
					],
					"id": "splfileobject.getcurrentline",
					"name": "SplFileObject::getCurrentLine",
					"description": "Alias of SplFileObject::fgets"
				},
				"splfileobject.getflags": {
					"tokens": [
						"SplFileObject::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "splfileobject.getflags",
					"name": "SplFileObject::getFlags",
					"description": "Gets flags for the SplFileObject"
				},
				"splfileobject.getmaxlinelen": {
					"tokens": [
						"SplFileObject::getMaxLineLen",
						"getMaxLineLen",
						"::getMaxLineLen"
					],
					"id": "splfileobject.getmaxlinelen",
					"name": "SplFileObject::getMaxLineLen",
					"description": "Get maximum line length"
				},
				"splfileobject.haschildren": {
					"tokens": [
						"SplFileObject::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "splfileobject.haschildren",
					"name": "SplFileObject::hasChildren",
					"description": "SplFileObject does not have children"
				},
				"splfileobject.key": {
					"tokens": [
						"SplFileObject::key",
						"key",
						"::key"
					],
					"id": "splfileobject.key",
					"name": "SplFileObject::key",
					"description": "Get line number"
				},
				"splfileobject.next": {
					"tokens": [
						"SplFileObject::next",
						"next",
						"::next"
					],
					"id": "splfileobject.next",
					"name": "SplFileObject::next",
					"description": "Read next line"
				},
				"splfileobject.rewind": {
					"tokens": [
						"SplFileObject::rewind",
						"rewind",
						"::rewind"
					],
					"id": "splfileobject.rewind",
					"name": "SplFileObject::rewind",
					"description": "Rewind the file to the first line"
				},
				"splfileobject.seek": {
					"tokens": [
						"SplFileObject::seek",
						"seek",
						"::seek"
					],
					"id": "splfileobject.seek",
					"name": "SplFileObject::seek",
					"description": "Seek to specified line"
				},
				"splfileobject.setcsvcontrol": {
					"tokens": [
						"SplFileObject::setCsvControl",
						"setCsvControl",
						"::setCsvControl"
					],
					"id": "splfileobject.setcsvcontrol",
					"name": "SplFileObject::setCsvControl",
					"description": "Set the delimiter and enclosure character for CSV"
				},
				"splfileobject.setflags": {
					"tokens": [
						"SplFileObject::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "splfileobject.setflags",
					"name": "SplFileObject::setFlags",
					"description": "Sets flags for the SplFileObject"
				},
				"splfileobject.setmaxlinelen": {
					"tokens": [
						"SplFileObject::setMaxLineLen",
						"setMaxLineLen",
						"::setMaxLineLen"
					],
					"id": "splfileobject.setmaxlinelen",
					"name": "SplFileObject::setMaxLineLen",
					"description": "Set maximum line length"
				},
				"splfileobject.tostring": {
					"tokens": [
						"SplFileObject::__toString",
						"SplFileObject::_toString",
						"__toString",
						"::__toString"
					],
					"id": "splfileobject.tostring",
					"name": "SplFileObject::__toString",
					"description": "Alias of SplFileObject::current"
				},
				"splfileobject.valid": {
					"tokens": [
						"SplFileObject::valid",
						"valid",
						"::valid"
					],
					"id": "splfileobject.valid",
					"name": "SplFileObject::valid",
					"description": "Not at EOF"
				},
				"spltempfileobject.construct": {
					"tokens": [
						"SplTempFileObject::__construct",
						"SplTempFileObject::_construct",
						"__construct",
						"::__construct"
					],
					"id": "spltempfileobject.construct",
					"name": "SplTempFileObject::__construct",
					"description": "Construct a new temporary file object"
				},
				"arrayobject.append": {
					"tokens": [
						"ArrayObject::append",
						"append",
						"::append"
					],
					"id": "arrayobject.append",
					"name": "ArrayObject::append",
					"description": "Appends the value"
				},
				"arrayobject.asort": {
					"tokens": [
						"ArrayObject::asort",
						"asort",
						"::asort"
					],
					"id": "arrayobject.asort",
					"name": "ArrayObject::asort",
					"description": "Sort the entries by value"
				},
				"arrayobject.construct": {
					"tokens": [
						"ArrayObject::__construct",
						"ArrayObject::_construct",
						"__construct",
						"::__construct"
					],
					"id": "arrayobject.construct",
					"name": "ArrayObject::__construct",
					"description": "Construct a new array object"
				},
				"arrayobject.count": {
					"tokens": [
						"ArrayObject::count",
						"count",
						"::count"
					],
					"id": "arrayobject.count",
					"name": "ArrayObject::count",
					"description": "Get the number of public properties in the ArrayObject"
				},
				"arrayobject.exchangearray": {
					"tokens": [
						"ArrayObject::exchangeArray",
						"exchangeArray",
						"::exchangeArray"
					],
					"id": "arrayobject.exchangearray",
					"name": "ArrayObject::exchangeArray",
					"description": "Exchange the array for another one."
				},
				"arrayobject.getarraycopy": {
					"tokens": [
						"ArrayObject::getArrayCopy",
						"getArrayCopy",
						"::getArrayCopy"
					],
					"id": "arrayobject.getarraycopy",
					"name": "ArrayObject::getArrayCopy",
					"description": "Creates a copy of the ArrayObject."
				},
				"arrayobject.getflags": {
					"tokens": [
						"ArrayObject::getFlags",
						"getFlags",
						"::getFlags"
					],
					"id": "arrayobject.getflags",
					"name": "ArrayObject::getFlags",
					"description": "Gets the behavior flags."
				},
				"arrayobject.getiterator": {
					"tokens": [
						"ArrayObject::getIterator",
						"getIterator",
						"::getIterator"
					],
					"id": "arrayobject.getiterator",
					"name": "ArrayObject::getIterator",
					"description": "Create a new iterator from an ArrayObject instance"
				},
				"arrayobject.getiteratorclass": {
					"tokens": [
						"ArrayObject::getIteratorClass",
						"getIteratorClass",
						"::getIteratorClass"
					],
					"id": "arrayobject.getiteratorclass",
					"name": "ArrayObject::getIteratorClass",
					"description": "Gets the iterator classname for the ArrayObject."
				},
				"arrayobject.ksort": {
					"tokens": [
						"ArrayObject::ksort",
						"ksort",
						"::ksort"
					],
					"id": "arrayobject.ksort",
					"name": "ArrayObject::ksort",
					"description": "Sort the entries by key"
				},
				"arrayobject.natcasesort": {
					"tokens": [
						"ArrayObject::natcasesort",
						"natcasesort",
						"::natcasesort"
					],
					"id": "arrayobject.natcasesort",
					"name": "ArrayObject::natcasesort",
					"description": "Sort an array using a case insensitive &quot;natural order&quot; algorithm"
				},
				"arrayobject.natsort": {
					"tokens": [
						"ArrayObject::natsort",
						"natsort",
						"::natsort"
					],
					"id": "arrayobject.natsort",
					"name": "ArrayObject::natsort",
					"description": "Sort entries using a &quot;natural order&quot; algorithm"
				},
				"arrayobject.offsetexists": {
					"tokens": [
						"ArrayObject::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "arrayobject.offsetexists",
					"name": "ArrayObject::offsetExists",
					"description": "Returns whether the requested index exists"
				},
				"arrayobject.offsetget": {
					"tokens": [
						"ArrayObject::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "arrayobject.offsetget",
					"name": "ArrayObject::offsetGet",
					"description": "Returns the value at the specified index"
				},
				"arrayobject.offsetset": {
					"tokens": [
						"ArrayObject::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "arrayobject.offsetset",
					"name": "ArrayObject::offsetSet",
					"description": "Sets the value at the specified index to newval"
				},
				"arrayobject.offsetunset": {
					"tokens": [
						"ArrayObject::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "arrayobject.offsetunset",
					"name": "ArrayObject::offsetUnset",
					"description": "Unsets the value at the specified index"
				},
				"arrayobject.serialize": {
					"tokens": [
						"ArrayObject::serialize",
						"serialize",
						"::serialize"
					],
					"id": "arrayobject.serialize",
					"name": "ArrayObject::serialize",
					"description": "Serialize an ArrayObject"
				},
				"arrayobject.setflags": {
					"tokens": [
						"ArrayObject::setFlags",
						"setFlags",
						"::setFlags"
					],
					"id": "arrayobject.setflags",
					"name": "ArrayObject::setFlags",
					"description": "Sets the behavior flags."
				},
				"arrayobject.setiteratorclass": {
					"tokens": [
						"ArrayObject::setIteratorClass",
						"setIteratorClass",
						"::setIteratorClass"
					],
					"id": "arrayobject.setiteratorclass",
					"name": "ArrayObject::setIteratorClass",
					"description": "Sets the iterator classname for the ArrayObject."
				},
				"arrayobject.uasort": {
					"tokens": [
						"ArrayObject::uasort",
						"uasort",
						"::uasort"
					],
					"id": "arrayobject.uasort",
					"name": "ArrayObject::uasort",
					"description": "Sort the entries with a user-defined comparison function and maintain key association"
				},
				"arrayobject.uksort": {
					"tokens": [
						"ArrayObject::uksort",
						"uksort",
						"::uksort"
					],
					"id": "arrayobject.uksort",
					"name": "ArrayObject::uksort",
					"description": "Sort the entries by keys using a user-defined comparison function"
				},
				"arrayobject.unserialize": {
					"tokens": [
						"ArrayObject::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "arrayobject.unserialize",
					"name": "ArrayObject::unserialize",
					"description": "Unserialize an ArrayObject"
				},
				"splobserver.update": {
					"tokens": [
						"SplObserver::update",
						"update",
						"::update"
					],
					"id": "splobserver.update",
					"name": "SplObserver::update",
					"description": "Receive update from subject"
				},
				"splsubject.attach": {
					"tokens": [
						"SplSubject::attach",
						"attach",
						"::attach"
					],
					"id": "splsubject.attach",
					"name": "SplSubject::attach",
					"description": "Attach an SplObserver"
				},
				"splsubject.detach": {
					"tokens": [
						"SplSubject::detach",
						"detach",
						"::detach"
					],
					"id": "splsubject.detach",
					"name": "SplSubject::detach",
					"description": "Detach an observer"
				},
				"splsubject.notify": {
					"tokens": [
						"SplSubject::notify",
						"notify",
						"::notify"
					],
					"id": "splsubject.notify",
					"name": "SplSubject::notify",
					"description": "Notify an observer"
				},
				"spltype.construct": {
					"tokens": [
						"SplType::__construct",
						"SplType::_construct",
						"__construct",
						"::__construct"
					],
					"id": "spltype.construct",
					"name": "SplType::__construct",
					"description": "Creates a new value of some type"
				},
				"splenum.getconstlist": {
					"tokens": [
						"SplEnum::getConstList",
						"getConstList",
						"::getConstList"
					],
					"id": "splenum.getconstlist",
					"name": "SplEnum::getConstList",
					"description": "Returns all consts (possible values) as an array."
				},
				"php-user-filter.filter": {
					"tokens": [
						"php_user_filter::filter",
						"phpuser_filter::filter",
						"filter",
						"::filter"
					],
					"id": "php-user-filter.filter",
					"name": "php_user_filter::filter",
					"description": "Called when applying the filter"
				},
				"php-user-filter.onclose": {
					"tokens": [
						"php_user_filter::onClose",
						"phpuser_filter::onClose",
						"onClose",
						"::onClose"
					],
					"id": "php-user-filter.onclose",
					"name": "php_user_filter::onClose",
					"description": "Called when closing the filter"
				},
				"php-user-filter.oncreate": {
					"tokens": [
						"php_user_filter::onCreate",
						"phpuser_filter::onCreate",
						"onCreate",
						"::onCreate"
					],
					"id": "php-user-filter.oncreate",
					"name": "php_user_filter::onCreate",
					"description": "Called when creating the filter"
				},
				"streamwrapper.construct": {
					"tokens": [
						"streamWrapper::__construct",
						"streamWrapper::_construct",
						"__construct",
						"::__construct"
					],
					"id": "streamwrapper.construct",
					"name": "streamWrapper::__construct",
					"description": "Constructs a new stream wrapper"
				},
				"streamwrapper.destruct": {
					"tokens": [
						"streamWrapper::__destruct",
						"streamWrapper::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "streamwrapper.destruct",
					"name": "streamWrapper::__destruct",
					"description": "Destructs an existing stream wrapper"
				},
				"streamwrapper.dir-closedir": {
					"tokens": [
						"streamWrapper::dir_closedir",
						"streamWrapper::dirclosedir",
						"dir_closedir",
						"::dir_closedir"
					],
					"id": "streamwrapper.dir-closedir",
					"name": "streamWrapper::dir_closedir",
					"description": "Close directory handle"
				},
				"streamwrapper.dir-opendir": {
					"tokens": [
						"streamWrapper::dir_opendir",
						"streamWrapper::diropendir",
						"dir_opendir",
						"::dir_opendir"
					],
					"id": "streamwrapper.dir-opendir",
					"name": "streamWrapper::dir_opendir",
					"description": "Open directory handle"
				},
				"streamwrapper.dir-readdir": {
					"tokens": [
						"streamWrapper::dir_readdir",
						"streamWrapper::dirreaddir",
						"dir_readdir",
						"::dir_readdir"
					],
					"id": "streamwrapper.dir-readdir",
					"name": "streamWrapper::dir_readdir",
					"description": "Read entry from directory handle"
				},
				"streamwrapper.dir-rewinddir": {
					"tokens": [
						"streamWrapper::dir_rewinddir",
						"streamWrapper::dirrewinddir",
						"dir_rewinddir",
						"::dir_rewinddir"
					],
					"id": "streamwrapper.dir-rewinddir",
					"name": "streamWrapper::dir_rewinddir",
					"description": "Rewind directory handle"
				},
				"streamwrapper.mkdir": {
					"tokens": [
						"streamWrapper::mkdir",
						"mkdir",
						"::mkdir"
					],
					"id": "streamwrapper.mkdir",
					"name": "streamWrapper::mkdir",
					"description": "Create a directory"
				},
				"streamwrapper.rename": {
					"tokens": [
						"streamWrapper::rename",
						"rename",
						"::rename"
					],
					"id": "streamwrapper.rename",
					"name": "streamWrapper::rename",
					"description": "Renames a file or directory"
				},
				"streamwrapper.rmdir": {
					"tokens": [
						"streamWrapper::rmdir",
						"rmdir",
						"::rmdir"
					],
					"id": "streamwrapper.rmdir",
					"name": "streamWrapper::rmdir",
					"description": "Removes a directory"
				},
				"streamwrapper.stream-cast": {
					"tokens": [
						"streamWrapper::stream_cast",
						"streamWrapper::streamcast",
						"stream_cast",
						"::stream_cast"
					],
					"id": "streamwrapper.stream-cast",
					"name": "streamWrapper::stream_cast",
					"description": "Retrieve the underlaying resource"
				},
				"streamwrapper.stream-close": {
					"tokens": [
						"streamWrapper::stream_close",
						"streamWrapper::streamclose",
						"stream_close",
						"::stream_close"
					],
					"id": "streamwrapper.stream-close",
					"name": "streamWrapper::stream_close",
					"description": "Close a resource"
				},
				"streamwrapper.stream-eof": {
					"tokens": [
						"streamWrapper::stream_eof",
						"streamWrapper::streameof",
						"stream_eof",
						"::stream_eof"
					],
					"id": "streamwrapper.stream-eof",
					"name": "streamWrapper::stream_eof",
					"description": "Tests for end-of-file on a file pointer"
				},
				"streamwrapper.stream-flush": {
					"tokens": [
						"streamWrapper::stream_flush",
						"streamWrapper::streamflush",
						"stream_flush",
						"::stream_flush"
					],
					"id": "streamwrapper.stream-flush",
					"name": "streamWrapper::stream_flush",
					"description": "Flushes the output"
				},
				"streamwrapper.stream-lock": {
					"tokens": [
						"streamWrapper::stream_lock",
						"streamWrapper::streamlock",
						"stream_lock",
						"::stream_lock"
					],
					"id": "streamwrapper.stream-lock",
					"name": "streamWrapper::stream_lock",
					"description": "Advisory file locking"
				},
				"streamwrapper.stream-metadata": {
					"tokens": [
						"streamWrapper::stream_metadata",
						"streamWrapper::streammetadata",
						"stream_metadata",
						"::stream_metadata"
					],
					"id": "streamwrapper.stream-metadata",
					"name": "streamWrapper::stream_metadata",
					"description": "Change stream metadata"
				},
				"streamwrapper.stream-open": {
					"tokens": [
						"streamWrapper::stream_open",
						"streamWrapper::streamopen",
						"stream_open",
						"::stream_open"
					],
					"id": "streamwrapper.stream-open",
					"name": "streamWrapper::stream_open",
					"description": "Opens file or URL"
				},
				"streamwrapper.stream-read": {
					"tokens": [
						"streamWrapper::stream_read",
						"streamWrapper::streamread",
						"stream_read",
						"::stream_read"
					],
					"id": "streamwrapper.stream-read",
					"name": "streamWrapper::stream_read",
					"description": "Read from stream"
				},
				"streamwrapper.stream-seek": {
					"tokens": [
						"streamWrapper::stream_seek",
						"streamWrapper::streamseek",
						"stream_seek",
						"::stream_seek"
					],
					"id": "streamwrapper.stream-seek",
					"name": "streamWrapper::stream_seek",
					"description": "Seeks to specific location in a stream"
				},
				"streamwrapper.stream-set-option": {
					"tokens": [
						"streamWrapper::stream_set_option",
						"streamWrapper::streamset_option",
						"stream_set_option",
						"::stream_set_option"
					],
					"id": "streamwrapper.stream-set-option",
					"name": "streamWrapper::stream_set_option",
					"description": "Change stream options"
				},
				"streamwrapper.stream-stat": {
					"tokens": [
						"streamWrapper::stream_stat",
						"streamWrapper::streamstat",
						"stream_stat",
						"::stream_stat"
					],
					"id": "streamwrapper.stream-stat",
					"name": "streamWrapper::stream_stat",
					"description": "Retrieve information about a file resource"
				},
				"streamwrapper.stream-tell": {
					"tokens": [
						"streamWrapper::stream_tell",
						"streamWrapper::streamtell",
						"stream_tell",
						"::stream_tell"
					],
					"id": "streamwrapper.stream-tell",
					"name": "streamWrapper::stream_tell",
					"description": "Retrieve the current position of a stream"
				},
				"streamwrapper.stream-truncate": {
					"tokens": [
						"streamWrapper::stream_truncate",
						"streamWrapper::streamtruncate",
						"stream_truncate",
						"::stream_truncate"
					],
					"id": "streamwrapper.stream-truncate",
					"name": "streamWrapper::stream_truncate",
					"description": "Truncate stream"
				},
				"streamwrapper.stream-write": {
					"tokens": [
						"streamWrapper::stream_write",
						"streamWrapper::streamwrite",
						"stream_write",
						"::stream_write"
					],
					"id": "streamwrapper.stream-write",
					"name": "streamWrapper::stream_write",
					"description": "Write to stream"
				},
				"streamwrapper.unlink": {
					"tokens": [
						"streamWrapper::unlink",
						"unlink",
						"::unlink"
					],
					"id": "streamwrapper.unlink",
					"name": "streamWrapper::unlink",
					"description": "Delete a file"
				},
				"streamwrapper.url-stat": {
					"tokens": [
						"streamWrapper::url_stat",
						"streamWrapper::urlstat",
						"url_stat",
						"::url_stat"
					],
					"id": "streamwrapper.url-stat",
					"name": "streamWrapper::url_stat",
					"description": "Retrieve information about a file"
				},
				"function.set-socket-blocking": {
					"tokens": [
						"set_socket_blocking",
						"setsocket_blocking"
					],
					"id": "function.set-socket-blocking",
					"name": "set_socket_blocking",
					"description": "Alias of stream_set_blocking"
				},
				"function.stream-bucket-append": {
					"tokens": [
						"stream_bucket_append",
						"streambucket_append"
					],
					"id": "function.stream-bucket-append",
					"name": "stream_bucket_append",
					"description": "Append bucket to brigade"
				},
				"function.stream-bucket-make-writeable": {
					"tokens": [
						"stream_bucket_make_writeable",
						"streambucket_make_writeable"
					],
					"id": "function.stream-bucket-make-writeable",
					"name": "stream_bucket_make_writeable",
					"description": "Return a bucket object from the brigade for operating on"
				},
				"function.stream-bucket-new": {
					"tokens": [
						"stream_bucket_new",
						"streambucket_new"
					],
					"id": "function.stream-bucket-new",
					"name": "stream_bucket_new",
					"description": "Create a new bucket for use on the current stream"
				},
				"function.stream-bucket-prepend": {
					"tokens": [
						"stream_bucket_prepend",
						"streambucket_prepend"
					],
					"id": "function.stream-bucket-prepend",
					"name": "stream_bucket_prepend",
					"description": "Prepend bucket to brigade"
				},
				"function.stream-context-create": {
					"tokens": [
						"stream_context_create",
						"streamcontext_create"
					],
					"id": "function.stream-context-create",
					"name": "stream_context_create",
					"description": "Creates a stream context"
				},
				"function.stream-context-get-default": {
					"tokens": [
						"stream_context_get_default",
						"streamcontext_get_default"
					],
					"id": "function.stream-context-get-default",
					"name": "stream_context_get_default",
					"description": "Retrieve the default stream context"
				},
				"function.stream-context-get-options": {
					"tokens": [
						"stream_context_get_options",
						"streamcontext_get_options"
					],
					"id": "function.stream-context-get-options",
					"name": "stream_context_get_options",
					"description": "Retrieve options for a stream/wrapper/context"
				},
				"function.stream-context-get-params": {
					"tokens": [
						"stream_context_get_params",
						"streamcontext_get_params"
					],
					"id": "function.stream-context-get-params",
					"name": "stream_context_get_params",
					"description": "Retrieves parameters from a context"
				},
				"function.stream-context-set-default": {
					"tokens": [
						"stream_context_set_default",
						"streamcontext_set_default"
					],
					"id": "function.stream-context-set-default",
					"name": "stream_context_set_default",
					"description": "Set the default stream context"
				},
				"function.stream-context-set-option": {
					"tokens": [
						"stream_context_set_option",
						"streamcontext_set_option"
					],
					"id": "function.stream-context-set-option",
					"name": "stream_context_set_option",
					"description": "Sets an option for a stream/wrapper/context"
				},
				"function.stream-context-set-params": {
					"tokens": [
						"stream_context_set_params",
						"streamcontext_set_params"
					],
					"id": "function.stream-context-set-params",
					"name": "stream_context_set_params",
					"description": "Set parameters for a stream/wrapper/context"
				},
				"function.stream-copy-to-stream": {
					"tokens": [
						"stream_copy_to_stream",
						"streamcopy_to_stream"
					],
					"id": "function.stream-copy-to-stream",
					"name": "stream_copy_to_stream",
					"description": "Copies data from one stream to another"
				},
				"function.stream-encoding": {
					"tokens": [
						"stream_encoding",
						"streamencoding"
					],
					"id": "function.stream-encoding",
					"name": "stream_encoding",
					"description": "Set character set for stream encoding"
				},
				"function.stream-filter-append": {
					"tokens": [
						"stream_filter_append",
						"streamfilter_append"
					],
					"id": "function.stream-filter-append",
					"name": "stream_filter_append",
					"description": "Attach a filter to a stream"
				},
				"function.stream-filter-prepend": {
					"tokens": [
						"stream_filter_prepend",
						"streamfilter_prepend"
					],
					"id": "function.stream-filter-prepend",
					"name": "stream_filter_prepend",
					"description": "Attach a filter to a stream"
				},
				"function.stream-filter-register": {
					"tokens": [
						"stream_filter_register",
						"streamfilter_register"
					],
					"id": "function.stream-filter-register",
					"name": "stream_filter_register",
					"description": "Register a user defined stream filter"
				},
				"function.stream-filter-remove": {
					"tokens": [
						"stream_filter_remove",
						"streamfilter_remove"
					],
					"id": "function.stream-filter-remove",
					"name": "stream_filter_remove",
					"description": "Remove a filter from a stream"
				},
				"function.stream-get-contents": {
					"tokens": [
						"stream_get_contents",
						"streamget_contents"
					],
					"id": "function.stream-get-contents",
					"name": "stream_get_contents",
					"description": "Reads remainder of a stream into a string"
				},
				"function.stream-get-filters": {
					"tokens": [
						"stream_get_filters",
						"streamget_filters"
					],
					"id": "function.stream-get-filters",
					"name": "stream_get_filters",
					"description": "Retrieve list of registered filters"
				},
				"function.stream-get-line": {
					"tokens": [
						"stream_get_line",
						"streamget_line"
					],
					"id": "function.stream-get-line",
					"name": "stream_get_line",
					"description": "Gets line from stream resource up to a given delimiter"
				},
				"function.stream-get-meta-data": {
					"tokens": [
						"stream_get_meta_data",
						"streamget_meta_data"
					],
					"id": "function.stream-get-meta-data",
					"name": "stream_get_meta_data",
					"description": "Retrieves header/meta data from streams/file pointers"
				},
				"function.stream-get-transports": {
					"tokens": [
						"stream_get_transports",
						"streamget_transports"
					],
					"id": "function.stream-get-transports",
					"name": "stream_get_transports",
					"description": "Retrieve list of registered socket transports"
				},
				"function.stream-get-wrappers": {
					"tokens": [
						"stream_get_wrappers",
						"streamget_wrappers"
					],
					"id": "function.stream-get-wrappers",
					"name": "stream_get_wrappers",
					"description": "Retrieve list of registered streams"
				},
				"function.stream-is-local": {
					"tokens": [
						"stream_is_local",
						"streamis_local"
					],
					"id": "function.stream-is-local",
					"name": "stream_is_local",
					"description": "Checks if a stream is a local stream"
				},
				"function.stream-notification-callback": {
					"tokens": [
						"stream_notification_callback",
						"streamnotification_callback"
					],
					"id": "function.stream-notification-callback",
					"name": "stream_notification_callback",
					"description": "A callback function for the notification context parameter"
				},
				"function.stream-register-wrapper": {
					"tokens": [
						"stream_register_wrapper",
						"streamregister_wrapper"
					],
					"id": "function.stream-register-wrapper",
					"name": "stream_register_wrapper",
					"description": "Alias of stream_wrapper_register"
				},
				"function.stream-resolve-include-path": {
					"tokens": [
						"stream_resolve_include_path",
						"streamresolve_include_path"
					],
					"id": "function.stream-resolve-include-path",
					"name": "stream_resolve_include_path",
					"description": "Resolve filename against the include path"
				},
				"function.stream-select": {
					"tokens": [
						"stream_select",
						"streamselect"
					],
					"id": "function.stream-select",
					"name": "stream_select",
					"description": "Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec"
				},
				"function.stream-set-blocking": {
					"tokens": [
						"stream_set_blocking",
						"streamset_blocking"
					],
					"id": "function.stream-set-blocking",
					"name": "stream_set_blocking",
					"description": "Set blocking/non-blocking mode on a stream"
				},
				"function.stream-set-chunk-size": {
					"tokens": [
						"stream_set_chunk_size",
						"streamset_chunk_size"
					],
					"id": "function.stream-set-chunk-size",
					"name": "stream_set_chunk_size",
					"description": "Set the stream chunk size"
				},
				"function.stream-set-read-buffer": {
					"tokens": [
						"stream_set_read_buffer",
						"streamset_read_buffer"
					],
					"id": "function.stream-set-read-buffer",
					"name": "stream_set_read_buffer",
					"description": "Set read file buffering on the given stream"
				},
				"function.stream-set-timeout": {
					"tokens": [
						"stream_set_timeout",
						"streamset_timeout"
					],
					"id": "function.stream-set-timeout",
					"name": "stream_set_timeout",
					"description": "Set timeout period on a stream"
				},
				"function.stream-set-write-buffer": {
					"tokens": [
						"stream_set_write_buffer",
						"streamset_write_buffer"
					],
					"id": "function.stream-set-write-buffer",
					"name": "stream_set_write_buffer",
					"description": "Sets write file buffering on the given stream"
				},
				"function.stream-socket-accept": {
					"tokens": [
						"stream_socket_accept",
						"streamsocket_accept"
					],
					"id": "function.stream-socket-accept",
					"name": "stream_socket_accept",
					"description": "Accept a connection on a socket created by stream_socket_server"
				},
				"function.stream-socket-client": {
					"tokens": [
						"stream_socket_client",
						"streamsocket_client"
					],
					"id": "function.stream-socket-client",
					"name": "stream_socket_client",
					"description": "Open Internet or Unix domain socket connection"
				},
				"function.stream-socket-enable-crypto": {
					"tokens": [
						"stream_socket_enable_crypto",
						"streamsocket_enable_crypto"
					],
					"id": "function.stream-socket-enable-crypto",
					"name": "stream_socket_enable_crypto",
					"description": "Turns encryption on/off on an already connected socket"
				},
				"function.stream-socket-get-name": {
					"tokens": [
						"stream_socket_get_name",
						"streamsocket_get_name"
					],
					"id": "function.stream-socket-get-name",
					"name": "stream_socket_get_name",
					"description": "Retrieve the name of the local or remote sockets"
				},
				"function.stream-socket-pair": {
					"tokens": [
						"stream_socket_pair",
						"streamsocket_pair"
					],
					"id": "function.stream-socket-pair",
					"name": "stream_socket_pair",
					"description": "Creates a pair of connected, indistinguishable socket streams"
				},
				"function.stream-socket-recvfrom": {
					"tokens": [
						"stream_socket_recvfrom",
						"streamsocket_recvfrom"
					],
					"id": "function.stream-socket-recvfrom",
					"name": "stream_socket_recvfrom",
					"description": "Receives data from a socket, connected or not"
				},
				"function.stream-socket-sendto": {
					"tokens": [
						"stream_socket_sendto",
						"streamsocket_sendto"
					],
					"id": "function.stream-socket-sendto",
					"name": "stream_socket_sendto",
					"description": "Sends a message to a socket, whether it is connected or not"
				},
				"function.stream-socket-server": {
					"tokens": [
						"stream_socket_server",
						"streamsocket_server"
					],
					"id": "function.stream-socket-server",
					"name": "stream_socket_server",
					"description": "Create an Internet or Unix domain server socket"
				},
				"function.stream-socket-shutdown": {
					"tokens": [
						"stream_socket_shutdown",
						"streamsocket_shutdown"
					],
					"id": "function.stream-socket-shutdown",
					"name": "stream_socket_shutdown",
					"description": "Shutdown a full-duplex connection"
				},
				"function.stream-supports-lock": {
					"tokens": [
						"stream_supports_lock",
						"streamsupports_lock"
					],
					"id": "function.stream-supports-lock",
					"name": "stream_supports_lock",
					"description": "Tells whether the stream supports locking."
				},
				"function.stream-wrapper-register": {
					"tokens": [
						"stream_wrapper_register",
						"streamwrapper_register"
					],
					"id": "function.stream-wrapper-register",
					"name": "stream_wrapper_register",
					"description": "Register a URL wrapper implemented as a PHP class"
				},
				"function.stream-wrapper-restore": {
					"tokens": [
						"stream_wrapper_restore",
						"streamwrapper_restore"
					],
					"id": "function.stream-wrapper-restore",
					"name": "stream_wrapper_restore",
					"description": "Restores a previously unregistered built-in wrapper"
				},
				"function.stream-wrapper-unregister": {
					"tokens": [
						"stream_wrapper_unregister",
						"streamwrapper_unregister"
					],
					"id": "function.stream-wrapper-unregister",
					"name": "stream_wrapper_unregister",
					"description": "Unregister a URL wrapper"
				},
				"tidy.body": {
					"tokens": [
						"tidy::body",
						"body",
						"::body"
					],
					"id": "tidy.body",
					"name": "tidy::body",
					"description": "Returns a tidyNode object starting from the &lt;body&gt; tag of the tidy parse tree"
				},
				"tidy.cleanrepair": {
					"tokens": [
						"tidy::cleanRepair",
						"cleanRepair",
						"::cleanRepair"
					],
					"id": "tidy.cleanrepair",
					"name": "tidy::cleanRepair",
					"description": "Execute configured cleanup and repair operations on parsed markup"
				},
				"tidy.construct": {
					"tokens": [
						"tidy::__construct",
						"tidy::_construct",
						"__construct",
						"::__construct"
					],
					"id": "tidy.construct",
					"name": "tidy::__construct",
					"description": "Constructs a new tidy object"
				},
				"tidy.diagnose": {
					"tokens": [
						"tidy::diagnose",
						"diagnose",
						"::diagnose"
					],
					"id": "tidy.diagnose",
					"name": "tidy::diagnose",
					"description": "Run configured diagnostics on parsed and repaired markup"
				},
				"tidy.props.errorbuffer": {
					"tokens": [
						"tidy::$errorBuffer",
						"$errorBuffer",
						"::$errorBuffer"
					],
					"id": "tidy.props.errorbuffer",
					"name": "tidy::$errorBuffer",
					"description": "Return warnings and errors which occurred parsing the specified document"
				},
				"tidy.getconfig": {
					"tokens": [
						"tidy::getConfig",
						"getConfig",
						"::getConfig"
					],
					"id": "tidy.getconfig",
					"name": "tidy::getConfig",
					"description": "Get current Tidy configuration"
				},
				"tidy.gethtmlver": {
					"tokens": [
						"tidy::getHtmlVer",
						"getHtmlVer",
						"::getHtmlVer"
					],
					"id": "tidy.gethtmlver",
					"name": "tidy::getHtmlVer",
					"description": "Get the Detected HTML version for the specified document"
				},
				"tidy.getopt": {
					"tokens": [
						"tidy::getOpt",
						"getOpt",
						"::getOpt"
					],
					"id": "tidy.getopt",
					"name": "tidy::getOpt",
					"description": "Returns the value of the specified configuration option for the tidy document"
				},
				"tidy.getoptdoc": {
					"tokens": [
						"tidy::getOptDoc",
						"getOptDoc",
						"::getOptDoc"
					],
					"id": "tidy.getoptdoc",
					"name": "tidy::getOptDoc",
					"description": "Returns the documentation for the given option name"
				},
				"tidy.getrelease": {
					"tokens": [
						"tidy::getRelease",
						"getRelease",
						"::getRelease"
					],
					"id": "tidy.getrelease",
					"name": "tidy::getRelease",
					"description": "Get release date (version) for Tidy library"
				},
				"tidy.getstatus": {
					"tokens": [
						"tidy::getStatus",
						"getStatus",
						"::getStatus"
					],
					"id": "tidy.getstatus",
					"name": "tidy::getStatus",
					"description": "Get status of specified document"
				},
				"tidy.head": {
					"tokens": [
						"tidy::head",
						"head",
						"::head"
					],
					"id": "tidy.head",
					"name": "tidy::head",
					"description": "Returns a tidyNode object starting from the &lt;head&gt; tag of the tidy parse tree"
				},
				"tidy.html": {
					"tokens": [
						"tidy::html",
						"html",
						"::html"
					],
					"id": "tidy.html",
					"name": "tidy::html",
					"description": "Returns a tidyNode object starting from the &lt;html&gt; tag of the tidy parse tree"
				},
				"tidy.isxhtml": {
					"tokens": [
						"tidy::isXhtml",
						"isXhtml",
						"::isXhtml"
					],
					"id": "tidy.isxhtml",
					"name": "tidy::isXhtml",
					"description": "Indicates if the document is a XHTML document"
				},
				"tidy.isxml": {
					"tokens": [
						"tidy::isXml",
						"isXml",
						"::isXml"
					],
					"id": "tidy.isxml",
					"name": "tidy::isXml",
					"description": "Indicates if the document is a generic (non HTML/XHTML) XML document"
				},
				"tidy.parsefile": {
					"tokens": [
						"tidy::parseFile",
						"parseFile",
						"::parseFile"
					],
					"id": "tidy.parsefile",
					"name": "tidy::parseFile",
					"description": "Parse markup in file or URI"
				},
				"tidy.parsestring": {
					"tokens": [
						"tidy::parseString",
						"parseString",
						"::parseString"
					],
					"id": "tidy.parsestring",
					"name": "tidy::parseString",
					"description": "Parse a document stored in a string"
				},
				"tidy.repairfile": {
					"tokens": [
						"tidy::repairFile",
						"repairFile",
						"::repairFile"
					],
					"id": "tidy.repairfile",
					"name": "tidy::repairFile",
					"description": "Repair a file and return it as a string"
				},
				"tidy.repairstring": {
					"tokens": [
						"tidy::repairString",
						"repairString",
						"::repairString"
					],
					"id": "tidy.repairstring",
					"name": "tidy::repairString",
					"description": "Repair a string using an optionally provided configuration file"
				},
				"tidy.root": {
					"tokens": [
						"tidy::root",
						"root",
						"::root"
					],
					"id": "tidy.root",
					"name": "tidy::root",
					"description": "Returns a tidyNode object representing the root of the tidy parse tree"
				},
				"tidynode.getparent": {
					"tokens": [
						"tidyNode::getParent",
						"getParent",
						"::getParent"
					],
					"id": "tidynode.getparent",
					"name": "tidyNode::getParent",
					"description": "Returns the parent node of the current node"
				},
				"tidynode.haschildren": {
					"tokens": [
						"tidyNode::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "tidynode.haschildren",
					"name": "tidyNode::hasChildren",
					"description": "Checks if a node has children"
				},
				"tidynode.hassiblings": {
					"tokens": [
						"tidyNode::hasSiblings",
						"hasSiblings",
						"::hasSiblings"
					],
					"id": "tidynode.hassiblings",
					"name": "tidyNode::hasSiblings",
					"description": "Checks if a node has siblings"
				},
				"tidynode.isasp": {
					"tokens": [
						"tidyNode::isAsp",
						"isAsp",
						"::isAsp"
					],
					"id": "tidynode.isasp",
					"name": "tidyNode::isAsp",
					"description": "Checks if this node is ASP"
				},
				"tidynode.iscomment": {
					"tokens": [
						"tidyNode::isComment",
						"isComment",
						"::isComment"
					],
					"id": "tidynode.iscomment",
					"name": "tidyNode::isComment",
					"description": "Checks if a node represents a comment"
				},
				"tidynode.ishtml": {
					"tokens": [
						"tidyNode::isHtml",
						"isHtml",
						"::isHtml"
					],
					"id": "tidynode.ishtml",
					"name": "tidyNode::isHtml",
					"description": "Checks if a node is part of a HTML document"
				},
				"tidynode.isjste": {
					"tokens": [
						"tidyNode::isJste",
						"isJste",
						"::isJste"
					],
					"id": "tidynode.isjste",
					"name": "tidyNode::isJste",
					"description": "Checks if this node is JSTE"
				},
				"tidynode.isphp": {
					"tokens": [
						"tidyNode::isPhp",
						"isPhp",
						"::isPhp"
					],
					"id": "tidynode.isphp",
					"name": "tidyNode::isPhp",
					"description": "Checks if a node is PHP"
				},
				"tidynode.istext": {
					"tokens": [
						"tidyNode::isText",
						"isText",
						"::isText"
					],
					"id": "tidynode.istext",
					"name": "tidyNode::isText",
					"description": "Checks if a node represents text (no markup)"
				},
				"function.ob-tidyhandler": {
					"tokens": [
						"ob_tidyhandler",
						"obtidyhandler"
					],
					"id": "function.ob-tidyhandler",
					"name": "ob_tidyhandler",
					"description": "ob_start callback function to repair the buffer"
				},
				"function.tidy-access-count": {
					"tokens": [
						"tidy_access_count",
						"tidyaccess_count"
					],
					"id": "function.tidy-access-count",
					"name": "tidy_access_count",
					"description": "Returns the Number of Tidy accessibility warnings encountered for specified document"
				},
				"function.tidy-config-count": {
					"tokens": [
						"tidy_config_count",
						"tidyconfig_count"
					],
					"id": "function.tidy-config-count",
					"name": "tidy_config_count",
					"description": "Returns the Number of Tidy configuration errors encountered for specified document"
				},
				"function.tidy-error-count": {
					"tokens": [
						"tidy_error_count",
						"tidyerror_count"
					],
					"id": "function.tidy-error-count",
					"name": "tidy_error_count",
					"description": "Returns the Number of Tidy errors encountered for specified document"
				},
				"function.tidy-get-output": {
					"tokens": [
						"tidy_get_output",
						"tidyget_output"
					],
					"id": "function.tidy-get-output",
					"name": "tidy_get_output",
					"description": "Return a string representing the parsed tidy markup"
				},
				"function.tidy-load-config": {
					"tokens": [
						"tidy_load_config",
						"tidyload_config"
					],
					"id": "function.tidy-load-config",
					"name": "tidy_load_config",
					"description": "Load an ASCII Tidy configuration file with the specified encoding"
				},
				"function.tidy-reset-config": {
					"tokens": [
						"tidy_reset_config",
						"tidyreset_config"
					],
					"id": "function.tidy-reset-config",
					"name": "tidy_reset_config",
					"description": "Restore Tidy configuration to default values"
				},
				"function.tidy-save-config": {
					"tokens": [
						"tidy_save_config",
						"tidysave_config"
					],
					"id": "function.tidy-save-config",
					"name": "tidy_save_config",
					"description": "Save current settings to named file"
				},
				"function.tidy-set-encoding": {
					"tokens": [
						"tidy_set_encoding",
						"tidyset_encoding"
					],
					"id": "function.tidy-set-encoding",
					"name": "tidy_set_encoding",
					"description": "Set the input/output character encoding for parsing markup"
				},
				"function.tidy-setopt": {
					"tokens": [
						"tidy_setopt",
						"tidysetopt"
					],
					"id": "function.tidy-setopt",
					"name": "tidy_setopt",
					"description": "Updates the configuration settings for the specified tidy document"
				},
				"function.tidy-warning-count": {
					"tokens": [
						"tidy_warning_count",
						"tidywarning_count"
					],
					"id": "function.tidy-warning-count",
					"name": "tidy_warning_count",
					"description": "Returns the Number of Tidy warnings encountered for specified document"
				},
				"function.token-get-all": {
					"tokens": [
						"token_get_all",
						"tokenget_all"
					],
					"id": "function.token-get-all",
					"name": "token_get_all",
					"description": "Split given source into PHP tokens"
				},
				"function.token-name": {
					"tokens": [
						"token_name",
						"tokenname"
					],
					"id": "function.token-name",
					"name": "token_name",
					"description": "Get the symbolic name of a given PHP token"
				},
				"function.base64-decode": {
					"tokens": [
						"base64_decode",
						"base64decode"
					],
					"id": "function.base64-decode",
					"name": "base64_decode",
					"description": "Decodes data encoded with MIME base64"
				},
				"function.base64-encode": {
					"tokens": [
						"base64_encode",
						"base64encode"
					],
					"id": "function.base64-encode",
					"name": "base64_encode",
					"description": "Encodes data with MIME base64"
				},
				"function.get-headers": {
					"tokens": [
						"get_headers",
						"getheaders"
					],
					"id": "function.get-headers",
					"name": "get_headers",
					"description": "Fetches all the headers sent by the server in response to a HTTP request"
				},
				"function.get-meta-tags": {
					"tokens": [
						"get_meta_tags",
						"getmeta_tags"
					],
					"id": "function.get-meta-tags",
					"name": "get_meta_tags",
					"description": "Extracts all meta tag content attributes from a file and returns an array"
				},
				"function.http-build-query": {
					"tokens": [
						"http_build_query",
						"httpbuild_query"
					],
					"id": "function.http-build-query",
					"name": "http_build_query",
					"description": "Generate URL-encoded query string"
				},
				"function.parse-url": {
					"tokens": [
						"parse_url",
						"parseurl"
					],
					"id": "function.parse-url",
					"name": "parse_url",
					"description": "Parse a URL and return its components"
				},
				"function.rawurldecode": {
					"tokens": [
						"rawurldecode"
					],
					"id": "function.rawurldecode",
					"name": "rawurldecode",
					"description": "Decode URL-encoded strings"
				},
				"function.rawurlencode": {
					"tokens": [
						"rawurlencode"
					],
					"id": "function.rawurlencode",
					"name": "rawurlencode",
					"description": "URL-encode according to RFC 3986"
				},
				"function.urldecode": {
					"tokens": [
						"urldecode"
					],
					"id": "function.urldecode",
					"name": "urldecode",
					"description": "Decodes URL-encoded string"
				},
				"function.urlencode": {
					"tokens": [
						"urlencode"
					],
					"id": "function.urlencode",
					"name": "urlencode",
					"description": "URL-encodes string"
				},
				"v8js.construct": {
					"tokens": [
						"V8Js::__construct",
						"V8Js::_construct",
						"__construct",
						"::__construct"
					],
					"id": "v8js.construct",
					"name": "V8Js::__construct",
					"description": "Construct a new V8Js object"
				},
				"v8js.executestring": {
					"tokens": [
						"V8Js::executeString",
						"executeString",
						"::executeString"
					],
					"id": "v8js.executestring",
					"name": "V8Js::executeString",
					"description": "Execute a string as Javascript code"
				},
				"v8js.getextensions": {
					"tokens": [
						"V8Js::getExtensions",
						"getExtensions",
						"::getExtensions"
					],
					"id": "v8js.getextensions",
					"name": "V8Js::getExtensions",
					"description": "Return an array of registered extensions"
				},
				"v8js.getpendingexception": {
					"tokens": [
						"V8Js::getPendingException",
						"getPendingException",
						"::getPendingException"
					],
					"id": "v8js.getpendingexception",
					"name": "V8Js::getPendingException",
					"description": "Return pending uncaught Javascript exception"
				},
				"v8js.registerextension": {
					"tokens": [
						"V8Js::registerExtension",
						"registerExtension",
						"::registerExtension"
					],
					"id": "v8js.registerextension",
					"name": "V8Js::registerExtension",
					"description": "Register Javascript extensions for V8Js"
				},
				"v8jsexception.getjsfilename": {
					"tokens": [
						"V8JsException::getJsFileName",
						"getJsFileName",
						"::getJsFileName"
					],
					"id": "v8jsexception.getjsfilename",
					"name": "V8JsException::getJsFileName",
					"description": "The getJsFileName purpose"
				},
				"v8jsexception.getjslinenumber": {
					"tokens": [
						"V8JsException::getJsLineNumber",
						"getJsLineNumber",
						"::getJsLineNumber"
					],
					"id": "v8jsexception.getjslinenumber",
					"name": "V8JsException::getJsLineNumber",
					"description": "The getJsLineNumber purpose"
				},
				"v8jsexception.getjssourceline": {
					"tokens": [
						"V8JsException::getJsSourceLine",
						"getJsSourceLine",
						"::getJsSourceLine"
					],
					"id": "v8jsexception.getjssourceline",
					"name": "V8JsException::getJsSourceLine",
					"description": "The getJsSourceLine purpose"
				},
				"v8jsexception.getjstrace": {
					"tokens": [
						"V8JsException::getJsTrace",
						"getJsTrace",
						"::getJsTrace"
					],
					"id": "v8jsexception.getjstrace",
					"name": "V8JsException::getJsTrace",
					"description": "The getJsTrace purpose"
				},
				"function.yaml-emit-file": {
					"tokens": [
						"yaml_emit_file",
						"yamlemit_file"
					],
					"id": "function.yaml-emit-file",
					"name": "yaml_emit_file",
					"description": "Send the YAML representation of a value to a file"
				},
				"function.yaml-emit": {
					"tokens": [
						"yaml_emit",
						"yamlemit"
					],
					"id": "function.yaml-emit",
					"name": "yaml_emit",
					"description": "Returns the YAML representation of a value"
				},
				"function.yaml-parse-file": {
					"tokens": [
						"yaml_parse_file",
						"yamlparse_file"
					],
					"id": "function.yaml-parse-file",
					"name": "yaml_parse_file",
					"description": "Parse a YAML stream from a file"
				},
				"function.yaml-parse-url": {
					"tokens": [
						"yaml_parse_url",
						"yamlparse_url"
					],
					"id": "function.yaml-parse-url",
					"name": "yaml_parse_url",
					"description": "Parse a Yaml stream from a URL"
				},
				"function.yaml-parse": {
					"tokens": [
						"yaml_parse",
						"yamlparse"
					],
					"id": "function.yaml-parse",
					"name": "yaml_parse",
					"description": "Parse a YAML stream"
				},
				"yaf-application.app": {
					"tokens": [
						"Yaf_Application::app",
						"YafApplication::app",
						"app",
						"::app"
					],
					"id": "yaf-application.app",
					"name": "Yaf_Application::app",
					"description": "Retrieve an Application instance"
				},
				"yaf-application.bootstrap": {
					"tokens": [
						"Yaf_Application::bootstrap",
						"YafApplication::bootstrap",
						"bootstrap",
						"::bootstrap"
					],
					"id": "yaf-application.bootstrap",
					"name": "Yaf_Application::bootstrap",
					"description": "Call bootstrap"
				},
				"yaf-application.clearlasterror": {
					"tokens": [
						"Yaf_Application::clearLastError",
						"YafApplication::clearLastError",
						"clearLastError",
						"::clearLastError"
					],
					"id": "yaf-application.clearlasterror",
					"name": "Yaf_Application::clearLastError",
					"description": "Clear the last error info"
				},
				"yaf-application.clone": {
					"tokens": [
						"Yaf_Application::__clone",
						"YafApplication::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-application.clone",
					"name": "Yaf_Application::__clone",
					"description": "Yaf_Application can not be cloned"
				},
				"yaf-application.construct": {
					"tokens": [
						"Yaf_Application::__construct",
						"YafApplication::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-application.construct",
					"name": "Yaf_Application::__construct",
					"description": "Yaf_Application constructor"
				},
				"yaf-application.destruct": {
					"tokens": [
						"Yaf_Application::__destruct",
						"YafApplication::__destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "yaf-application.destruct",
					"name": "Yaf_Application::__destruct",
					"description": "The __destruct purpose"
				},
				"yaf-application.environ": {
					"tokens": [
						"Yaf_Application::environ",
						"YafApplication::environ",
						"environ",
						"::environ"
					],
					"id": "yaf-application.environ",
					"name": "Yaf_Application::environ",
					"description": "Retrive environ"
				},
				"yaf-application.execute": {
					"tokens": [
						"Yaf_Application::execute",
						"YafApplication::execute",
						"execute",
						"::execute"
					],
					"id": "yaf-application.execute",
					"name": "Yaf_Application::execute",
					"description": "Execute a callback"
				},
				"yaf-application.getappdirectory": {
					"tokens": [
						"Yaf_Application::getAppDirectory",
						"YafApplication::getAppDirectory",
						"getAppDirectory",
						"::getAppDirectory"
					],
					"id": "yaf-application.getappdirectory",
					"name": "Yaf_Application::getAppDirectory",
					"description": "Get the application directory"
				},
				"yaf-application.getconfig": {
					"tokens": [
						"Yaf_Application::getConfig",
						"YafApplication::getConfig",
						"getConfig",
						"::getConfig"
					],
					"id": "yaf-application.getconfig",
					"name": "Yaf_Application::getConfig",
					"description": "Retrive the config instance"
				},
				"yaf-application.getdispatcher": {
					"tokens": [
						"Yaf_Application::getDispatcher",
						"YafApplication::getDispatcher",
						"getDispatcher",
						"::getDispatcher"
					],
					"id": "yaf-application.getdispatcher",
					"name": "Yaf_Application::getDispatcher",
					"description": "Get Yaf_Dispatcher instance"
				},
				"yaf-application.getlasterrormsg": {
					"tokens": [
						"Yaf_Application::getLastErrorMsg",
						"YafApplication::getLastErrorMsg",
						"getLastErrorMsg",
						"::getLastErrorMsg"
					],
					"id": "yaf-application.getlasterrormsg",
					"name": "Yaf_Application::getLastErrorMsg",
					"description": "Get message of the last occurred error"
				},
				"yaf-application.getlasterrorno": {
					"tokens": [
						"Yaf_Application::getLastErrorNo",
						"YafApplication::getLastErrorNo",
						"getLastErrorNo",
						"::getLastErrorNo"
					],
					"id": "yaf-application.getlasterrorno",
					"name": "Yaf_Application::getLastErrorNo",
					"description": "Get code of last occurred error"
				},
				"yaf-application.getmodules": {
					"tokens": [
						"Yaf_Application::getModules",
						"YafApplication::getModules",
						"getModules",
						"::getModules"
					],
					"id": "yaf-application.getmodules",
					"name": "Yaf_Application::getModules",
					"description": "Get defined module names"
				},
				"yaf-application.run": {
					"tokens": [
						"Yaf_Application::run",
						"YafApplication::run",
						"run",
						"::run"
					],
					"id": "yaf-application.run",
					"name": "Yaf_Application::run",
					"description": "Start Yaf_Application"
				},
				"yaf-application.setappdirectory": {
					"tokens": [
						"Yaf_Application::setAppDirectory",
						"YafApplication::setAppDirectory",
						"setAppDirectory",
						"::setAppDirectory"
					],
					"id": "yaf-application.setappdirectory",
					"name": "Yaf_Application::setAppDirectory",
					"description": "Change the application directory"
				},
				"yaf-application.sleep": {
					"tokens": [
						"Yaf_Application::__sleep",
						"YafApplication::__sleep",
						"__sleep",
						"::__sleep"
					],
					"id": "yaf-application.sleep",
					"name": "Yaf_Application::__sleep",
					"description": "Yaf_Application can not be serialized"
				},
				"yaf-application.wakeup": {
					"tokens": [
						"Yaf_Application::__wakeup",
						"YafApplication::__wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "yaf-application.wakeup",
					"name": "Yaf_Application::__wakeup",
					"description": "Yaf_Application can not be unserialized"
				},
				"yaf-dispatcher.autorender": {
					"tokens": [
						"Yaf_Dispatcher::autoRender",
						"YafDispatcher::autoRender",
						"autoRender",
						"::autoRender"
					],
					"id": "yaf-dispatcher.autorender",
					"name": "Yaf_Dispatcher::autoRender",
					"description": "Switch on/off autorendering"
				},
				"yaf-dispatcher.catchexception": {
					"tokens": [
						"Yaf_Dispatcher::catchException",
						"YafDispatcher::catchException",
						"catchException",
						"::catchException"
					],
					"id": "yaf-dispatcher.catchexception",
					"name": "Yaf_Dispatcher::catchException",
					"description": "Switch on/off exception catching"
				},
				"yaf-dispatcher.clone": {
					"tokens": [
						"Yaf_Dispatcher::__clone",
						"YafDispatcher::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-dispatcher.clone",
					"name": "Yaf_Dispatcher::__clone",
					"description": "Yaf_Dispatcher can not be cloned"
				},
				"yaf-dispatcher.construct": {
					"tokens": [
						"Yaf_Dispatcher::__construct",
						"YafDispatcher::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-dispatcher.construct",
					"name": "Yaf_Dispatcher::__construct",
					"description": "Yaf_Dispatcher constructor"
				},
				"yaf-dispatcher.disableview": {
					"tokens": [
						"Yaf_Dispatcher::disableView",
						"YafDispatcher::disableView",
						"disableView",
						"::disableView"
					],
					"id": "yaf-dispatcher.disableview",
					"name": "Yaf_Dispatcher::disableView",
					"description": "Disable view rendering"
				},
				"yaf-dispatcher.dispatch": {
					"tokens": [
						"Yaf_Dispatcher::dispatch",
						"YafDispatcher::dispatch",
						"dispatch",
						"::dispatch"
					],
					"id": "yaf-dispatcher.dispatch",
					"name": "Yaf_Dispatcher::dispatch",
					"description": "Dispatch a request"
				},
				"yaf-dispatcher.enableview": {
					"tokens": [
						"Yaf_Dispatcher::enableView",
						"YafDispatcher::enableView",
						"enableView",
						"::enableView"
					],
					"id": "yaf-dispatcher.enableview",
					"name": "Yaf_Dispatcher::enableView",
					"description": "enable view rendering"
				},
				"yaf-dispatcher.flushinstantly": {
					"tokens": [
						"Yaf_Dispatcher::flushInstantly",
						"YafDispatcher::flushInstantly",
						"flushInstantly",
						"::flushInstantly"
					],
					"id": "yaf-dispatcher.flushinstantly",
					"name": "Yaf_Dispatcher::flushInstantly",
					"description": "Switch on/off the instant flushing"
				},
				"yaf-dispatcher.getapplication": {
					"tokens": [
						"Yaf_Dispatcher::getApplication",
						"YafDispatcher::getApplication",
						"getApplication",
						"::getApplication"
					],
					"id": "yaf-dispatcher.getapplication",
					"name": "Yaf_Dispatcher::getApplication",
					"description": "Retrive the application"
				},
				"yaf-dispatcher.getinstance": {
					"tokens": [
						"Yaf_Dispatcher::getInstance",
						"YafDispatcher::getInstance",
						"getInstance",
						"::getInstance"
					],
					"id": "yaf-dispatcher.getinstance",
					"name": "Yaf_Dispatcher::getInstance",
					"description": "Retrive the dispatcher instance"
				},
				"yaf-dispatcher.getrequest": {
					"tokens": [
						"Yaf_Dispatcher::getRequest",
						"YafDispatcher::getRequest",
						"getRequest",
						"::getRequest"
					],
					"id": "yaf-dispatcher.getrequest",
					"name": "Yaf_Dispatcher::getRequest",
					"description": "Retrive the request instance"
				},
				"yaf-dispatcher.getrouter": {
					"tokens": [
						"Yaf_Dispatcher::getRouter",
						"YafDispatcher::getRouter",
						"getRouter",
						"::getRouter"
					],
					"id": "yaf-dispatcher.getrouter",
					"name": "Yaf_Dispatcher::getRouter",
					"description": "Retrive router instance"
				},
				"yaf-dispatcher.initview": {
					"tokens": [
						"Yaf_Dispatcher::initView",
						"YafDispatcher::initView",
						"initView",
						"::initView"
					],
					"id": "yaf-dispatcher.initview",
					"name": "Yaf_Dispatcher::initView",
					"description": "Initialize view and return it"
				},
				"yaf-dispatcher.registerplugin": {
					"tokens": [
						"Yaf_Dispatcher::registerPlugin",
						"YafDispatcher::registerPlugin",
						"registerPlugin",
						"::registerPlugin"
					],
					"id": "yaf-dispatcher.registerplugin",
					"name": "Yaf_Dispatcher::registerPlugin",
					"description": "Register a plugin"
				},
				"yaf-dispatcher.returnresponse": {
					"tokens": [
						"Yaf_Dispatcher::returnResponse",
						"YafDispatcher::returnResponse",
						"returnResponse",
						"::returnResponse"
					],
					"id": "yaf-dispatcher.returnresponse",
					"name": "Yaf_Dispatcher::returnResponse",
					"description": "The returnResponse purpose"
				},
				"yaf-dispatcher.setdefaultaction": {
					"tokens": [
						"Yaf_Dispatcher::setDefaultAction",
						"YafDispatcher::setDefaultAction",
						"setDefaultAction",
						"::setDefaultAction"
					],
					"id": "yaf-dispatcher.setdefaultaction",
					"name": "Yaf_Dispatcher::setDefaultAction",
					"description": "Change default action name"
				},
				"yaf-dispatcher.setdefaultcontroller": {
					"tokens": [
						"Yaf_Dispatcher::setDefaultController",
						"YafDispatcher::setDefaultController",
						"setDefaultController",
						"::setDefaultController"
					],
					"id": "yaf-dispatcher.setdefaultcontroller",
					"name": "Yaf_Dispatcher::setDefaultController",
					"description": "Change default controller name"
				},
				"yaf-dispatcher.setdefaultmodule": {
					"tokens": [
						"Yaf_Dispatcher::setDefaultModule",
						"YafDispatcher::setDefaultModule",
						"setDefaultModule",
						"::setDefaultModule"
					],
					"id": "yaf-dispatcher.setdefaultmodule",
					"name": "Yaf_Dispatcher::setDefaultModule",
					"description": "Change default module name"
				},
				"yaf-dispatcher.seterrorhandler": {
					"tokens": [
						"Yaf_Dispatcher::setErrorHandler",
						"YafDispatcher::setErrorHandler",
						"setErrorHandler",
						"::setErrorHandler"
					],
					"id": "yaf-dispatcher.seterrorhandler",
					"name": "Yaf_Dispatcher::setErrorHandler",
					"description": "Set error handler"
				},
				"yaf-dispatcher.setrequest": {
					"tokens": [
						"Yaf_Dispatcher::setRequest",
						"YafDispatcher::setRequest",
						"setRequest",
						"::setRequest"
					],
					"id": "yaf-dispatcher.setrequest",
					"name": "Yaf_Dispatcher::setRequest",
					"description": "The setRequest purpose"
				},
				"yaf-dispatcher.setview": {
					"tokens": [
						"Yaf_Dispatcher::setView",
						"YafDispatcher::setView",
						"setView",
						"::setView"
					],
					"id": "yaf-dispatcher.setview",
					"name": "Yaf_Dispatcher::setView",
					"description": "Set a custom view engine"
				},
				"yaf-dispatcher.sleep": {
					"tokens": [
						"Yaf_Dispatcher::__sleep",
						"YafDispatcher::__sleep",
						"__sleep",
						"::__sleep"
					],
					"id": "yaf-dispatcher.sleep",
					"name": "Yaf_Dispatcher::__sleep",
					"description": "Yaf_Dispatcher can not be serialized"
				},
				"yaf-dispatcher.throwexception": {
					"tokens": [
						"Yaf_Dispatcher::throwException",
						"YafDispatcher::throwException",
						"throwException",
						"::throwException"
					],
					"id": "yaf-dispatcher.throwexception",
					"name": "Yaf_Dispatcher::throwException",
					"description": "Switch on/off exception throwing"
				},
				"yaf-dispatcher.wakeup": {
					"tokens": [
						"Yaf_Dispatcher::__wakeup",
						"YafDispatcher::__wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "yaf-dispatcher.wakeup",
					"name": "Yaf_Dispatcher::__wakeup",
					"description": "Yaf_Dispatcher can not be unserialized"
				},
				"yaf-config-abstract.get": {
					"tokens": [
						"Yaf_Config_Abstract::get",
						"YafConfig_Abstract::get",
						"get",
						"::get"
					],
					"id": "yaf-config-abstract.get",
					"name": "Yaf_Config_Abstract::get",
					"description": "Getter"
				},
				"yaf-config-abstract.readonly": {
					"tokens": [
						"Yaf_Config_Abstract::readonly",
						"YafConfig_Abstract::readonly",
						"readonly",
						"::readonly"
					],
					"id": "yaf-config-abstract.readonly",
					"name": "Yaf_Config_Abstract::readonly",
					"description": "Find a config whether readonly"
				},
				"yaf-config-abstract.set": {
					"tokens": [
						"Yaf_Config_Abstract::set",
						"YafConfig_Abstract::set",
						"set",
						"::set"
					],
					"id": "yaf-config-abstract.set",
					"name": "Yaf_Config_Abstract::set",
					"description": "Setter"
				},
				"yaf-config-abstract.toarray": {
					"tokens": [
						"Yaf_Config_Abstract::toArray",
						"YafConfig_Abstract::toArray",
						"toArray",
						"::toArray"
					],
					"id": "yaf-config-abstract.toarray",
					"name": "Yaf_Config_Abstract::toArray",
					"description": "Cast to array"
				},
				"yaf-config-ini.construct": {
					"tokens": [
						"Yaf_Config_Ini::__construct",
						"YafConfig_Ini::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-config-ini.construct",
					"name": "Yaf_Config_Ini::__construct",
					"description": "Yaf_Config_Ini constructor"
				},
				"yaf-config-ini.count": {
					"tokens": [
						"Yaf_Config_Ini::count",
						"YafConfig_Ini::count",
						"count",
						"::count"
					],
					"id": "yaf-config-ini.count",
					"name": "Yaf_Config_Ini::count",
					"description": "The count purpose"
				},
				"yaf-config-ini.current": {
					"tokens": [
						"Yaf_Config_Ini::current",
						"YafConfig_Ini::current",
						"current",
						"::current"
					],
					"id": "yaf-config-ini.current",
					"name": "Yaf_Config_Ini::current",
					"description": "The current purpose"
				},
				"yaf-config-ini.get": {
					"tokens": [
						"Yaf_Config_Ini::__get",
						"YafConfig_Ini::__get",
						"__get",
						"::__get"
					],
					"id": "yaf-config-ini.get",
					"name": "Yaf_Config_Ini::__get",
					"description": "The __get purpose"
				},
				"yaf-config-ini.isset": {
					"tokens": [
						"Yaf_Config_Ini::__isset",
						"YafConfig_Ini::__isset",
						"__isset",
						"::__isset"
					],
					"id": "yaf-config-ini.isset",
					"name": "Yaf_Config_Ini::__isset",
					"description": "The __isset purpose"
				},
				"yaf-config-ini.key": {
					"tokens": [
						"Yaf_Config_Ini::key",
						"YafConfig_Ini::key",
						"key",
						"::key"
					],
					"id": "yaf-config-ini.key",
					"name": "Yaf_Config_Ini::key",
					"description": "The key purpose"
				},
				"yaf-config-ini.next": {
					"tokens": [
						"Yaf_Config_Ini::next",
						"YafConfig_Ini::next",
						"next",
						"::next"
					],
					"id": "yaf-config-ini.next",
					"name": "Yaf_Config_Ini::next",
					"description": "The next purpose"
				},
				"yaf-config-ini.offsetexists": {
					"tokens": [
						"Yaf_Config_Ini::offsetExists",
						"YafConfig_Ini::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "yaf-config-ini.offsetexists",
					"name": "Yaf_Config_Ini::offsetExists",
					"description": "The offsetExists purpose"
				},
				"yaf-config-ini.offsetget": {
					"tokens": [
						"Yaf_Config_Ini::offsetGet",
						"YafConfig_Ini::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "yaf-config-ini.offsetget",
					"name": "Yaf_Config_Ini::offsetGet",
					"description": "The offsetGet purpose"
				},
				"yaf-config-ini.offsetset": {
					"tokens": [
						"Yaf_Config_Ini::offsetSet",
						"YafConfig_Ini::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "yaf-config-ini.offsetset",
					"name": "Yaf_Config_Ini::offsetSet",
					"description": "The offsetSet purpose"
				},
				"yaf-config-ini.offsetunset": {
					"tokens": [
						"Yaf_Config_Ini::offsetUnset",
						"YafConfig_Ini::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "yaf-config-ini.offsetunset",
					"name": "Yaf_Config_Ini::offsetUnset",
					"description": "The offsetUnset purpose"
				},
				"yaf-config-ini.readonly": {
					"tokens": [
						"Yaf_Config_Ini::readonly",
						"YafConfig_Ini::readonly",
						"readonly",
						"::readonly"
					],
					"id": "yaf-config-ini.readonly",
					"name": "Yaf_Config_Ini::readonly",
					"description": "The readonly purpose"
				},
				"yaf-config-ini.rewind": {
					"tokens": [
						"Yaf_Config_Ini::rewind",
						"YafConfig_Ini::rewind",
						"rewind",
						"::rewind"
					],
					"id": "yaf-config-ini.rewind",
					"name": "Yaf_Config_Ini::rewind",
					"description": "The rewind purpose"
				},
				"yaf-config-ini.set": {
					"tokens": [
						"Yaf_Config_Ini::__set",
						"YafConfig_Ini::__set",
						"__set",
						"::__set"
					],
					"id": "yaf-config-ini.set",
					"name": "Yaf_Config_Ini::__set",
					"description": "The __set purpose"
				},
				"yaf-config-ini.toarray": {
					"tokens": [
						"Yaf_Config_Ini::toArray",
						"YafConfig_Ini::toArray",
						"toArray",
						"::toArray"
					],
					"id": "yaf-config-ini.toarray",
					"name": "Yaf_Config_Ini::toArray",
					"description": "Returns a PHP array"
				},
				"yaf-config-ini.valid": {
					"tokens": [
						"Yaf_Config_Ini::valid",
						"YafConfig_Ini::valid",
						"valid",
						"::valid"
					],
					"id": "yaf-config-ini.valid",
					"name": "Yaf_Config_Ini::valid",
					"description": "The valid purpose"
				},
				"yaf-config-simple.construct": {
					"tokens": [
						"Yaf_Config_Simple::__construct",
						"YafConfig_Simple::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-config-simple.construct",
					"name": "Yaf_Config_Simple::__construct",
					"description": "The __construct purpose"
				},
				"yaf-config-simple.count": {
					"tokens": [
						"Yaf_Config_Simple::count",
						"YafConfig_Simple::count",
						"count",
						"::count"
					],
					"id": "yaf-config-simple.count",
					"name": "Yaf_Config_Simple::count",
					"description": "The count purpose"
				},
				"yaf-config-simple.current": {
					"tokens": [
						"Yaf_Config_Simple::current",
						"YafConfig_Simple::current",
						"current",
						"::current"
					],
					"id": "yaf-config-simple.current",
					"name": "Yaf_Config_Simple::current",
					"description": "The current purpose"
				},
				"yaf-config-simple.get": {
					"tokens": [
						"Yaf_Config_Simple::__get",
						"YafConfig_Simple::__get",
						"__get",
						"::__get"
					],
					"id": "yaf-config-simple.get",
					"name": "Yaf_Config_Simple::__get",
					"description": "The __get purpose"
				},
				"yaf-config-simple.isset": {
					"tokens": [
						"Yaf_Config_Simple::__isset",
						"YafConfig_Simple::__isset",
						"__isset",
						"::__isset"
					],
					"id": "yaf-config-simple.isset",
					"name": "Yaf_Config_Simple::__isset",
					"description": "The __isset purpose"
				},
				"yaf-config-simple.key": {
					"tokens": [
						"Yaf_Config_Simple::key",
						"YafConfig_Simple::key",
						"key",
						"::key"
					],
					"id": "yaf-config-simple.key",
					"name": "Yaf_Config_Simple::key",
					"description": "The key purpose"
				},
				"yaf-config-simple.next": {
					"tokens": [
						"Yaf_Config_Simple::next",
						"YafConfig_Simple::next",
						"next",
						"::next"
					],
					"id": "yaf-config-simple.next",
					"name": "Yaf_Config_Simple::next",
					"description": "The next purpose"
				},
				"yaf-config-simple.offsetexists": {
					"tokens": [
						"Yaf_Config_Simple::offsetExists",
						"YafConfig_Simple::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "yaf-config-simple.offsetexists",
					"name": "Yaf_Config_Simple::offsetExists",
					"description": "The offsetExists purpose"
				},
				"yaf-config-simple.offsetget": {
					"tokens": [
						"Yaf_Config_Simple::offsetGet",
						"YafConfig_Simple::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "yaf-config-simple.offsetget",
					"name": "Yaf_Config_Simple::offsetGet",
					"description": "The offsetGet purpose"
				},
				"yaf-config-simple.offsetset": {
					"tokens": [
						"Yaf_Config_Simple::offsetSet",
						"YafConfig_Simple::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "yaf-config-simple.offsetset",
					"name": "Yaf_Config_Simple::offsetSet",
					"description": "The offsetSet purpose"
				},
				"yaf-config-simple.offsetunset": {
					"tokens": [
						"Yaf_Config_Simple::offsetUnset",
						"YafConfig_Simple::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "yaf-config-simple.offsetunset",
					"name": "Yaf_Config_Simple::offsetUnset",
					"description": "The offsetUnset purpose"
				},
				"yaf-config-simple.readonly": {
					"tokens": [
						"Yaf_Config_Simple::readonly",
						"YafConfig_Simple::readonly",
						"readonly",
						"::readonly"
					],
					"id": "yaf-config-simple.readonly",
					"name": "Yaf_Config_Simple::readonly",
					"description": "The readonly purpose"
				},
				"yaf-config-simple.rewind": {
					"tokens": [
						"Yaf_Config_Simple::rewind",
						"YafConfig_Simple::rewind",
						"rewind",
						"::rewind"
					],
					"id": "yaf-config-simple.rewind",
					"name": "Yaf_Config_Simple::rewind",
					"description": "The rewind purpose"
				},
				"yaf-config-simple.set": {
					"tokens": [
						"Yaf_Config_Simple::__set",
						"YafConfig_Simple::__set",
						"__set",
						"::__set"
					],
					"id": "yaf-config-simple.set",
					"name": "Yaf_Config_Simple::__set",
					"description": "The __set purpose"
				},
				"yaf-config-simple.toarray": {
					"tokens": [
						"Yaf_Config_Simple::toArray",
						"YafConfig_Simple::toArray",
						"toArray",
						"::toArray"
					],
					"id": "yaf-config-simple.toarray",
					"name": "Yaf_Config_Simple::toArray",
					"description": "Returns a PHP array"
				},
				"yaf-config-simple.valid": {
					"tokens": [
						"Yaf_Config_Simple::valid",
						"YafConfig_Simple::valid",
						"valid",
						"::valid"
					],
					"id": "yaf-config-simple.valid",
					"name": "Yaf_Config_Simple::valid",
					"description": "The valid purpose"
				},
				"yaf-controller-abstract.clone": {
					"tokens": [
						"Yaf_Controller_Abstract::__clone",
						"YafController_Abstract::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-controller-abstract.clone",
					"name": "Yaf_Controller_Abstract::__clone",
					"description": "Yaf_Controller_Abstract can not be cloned"
				},
				"yaf-controller-abstract.construct": {
					"tokens": [
						"Yaf_Controller_Abstract::__construct",
						"YafController_Abstract::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-controller-abstract.construct",
					"name": "Yaf_Controller_Abstract::__construct",
					"description": "Yaf_Controller_Abstract constructor"
				},
				"yaf-controller-abstract.display": {
					"tokens": [
						"Yaf_Controller_Abstract::display",
						"YafController_Abstract::display",
						"display",
						"::display"
					],
					"id": "yaf-controller-abstract.display",
					"name": "Yaf_Controller_Abstract::display",
					"description": "The display purpose"
				},
				"yaf-controller-abstract.forward": {
					"tokens": [
						"Yaf_Controller_Abstract::forward",
						"YafController_Abstract::forward",
						"forward",
						"::forward"
					],
					"id": "yaf-controller-abstract.forward",
					"name": "Yaf_Controller_Abstract::forward",
					"description": "foward to another action"
				},
				"yaf-controller-abstract.getinvokearg": {
					"tokens": [
						"Yaf_Controller_Abstract::getInvokeArg",
						"YafController_Abstract::getInvokeArg",
						"getInvokeArg",
						"::getInvokeArg"
					],
					"id": "yaf-controller-abstract.getinvokearg",
					"name": "Yaf_Controller_Abstract::getInvokeArg",
					"description": "The getInvokeArg purpose"
				},
				"yaf-controller-abstract.getinvokeargs": {
					"tokens": [
						"Yaf_Controller_Abstract::getInvokeArgs",
						"YafController_Abstract::getInvokeArgs",
						"getInvokeArgs",
						"::getInvokeArgs"
					],
					"id": "yaf-controller-abstract.getinvokeargs",
					"name": "Yaf_Controller_Abstract::getInvokeArgs",
					"description": "The getInvokeArgs purpose"
				},
				"yaf-controller-abstract.getmodulename": {
					"tokens": [
						"Yaf_Controller_Abstract::getModuleName",
						"YafController_Abstract::getModuleName",
						"getModuleName",
						"::getModuleName"
					],
					"id": "yaf-controller-abstract.getmodulename",
					"name": "Yaf_Controller_Abstract::getModuleName",
					"description": "Get module name"
				},
				"yaf-controller-abstract.getrequest": {
					"tokens": [
						"Yaf_Controller_Abstract::getRequest",
						"YafController_Abstract::getRequest",
						"getRequest",
						"::getRequest"
					],
					"id": "yaf-controller-abstract.getrequest",
					"name": "Yaf_Controller_Abstract::getRequest",
					"description": "Retrieve current request object"
				},
				"yaf-controller-abstract.getresponse": {
					"tokens": [
						"Yaf_Controller_Abstract::getResponse",
						"YafController_Abstract::getResponse",
						"getResponse",
						"::getResponse"
					],
					"id": "yaf-controller-abstract.getresponse",
					"name": "Yaf_Controller_Abstract::getResponse",
					"description": "Retrieve current response object"
				},
				"yaf-controller-abstract.getview": {
					"tokens": [
						"Yaf_Controller_Abstract::getView",
						"YafController_Abstract::getView",
						"getView",
						"::getView"
					],
					"id": "yaf-controller-abstract.getview",
					"name": "Yaf_Controller_Abstract::getView",
					"description": "Retrieve the view engine"
				},
				"yaf-controller-abstract.getviewpath": {
					"tokens": [
						"Yaf_Controller_Abstract::getViewpath",
						"YafController_Abstract::getViewpath",
						"getViewpath",
						"::getViewpath"
					],
					"id": "yaf-controller-abstract.getviewpath",
					"name": "Yaf_Controller_Abstract::getViewpath",
					"description": "The getViewpath purpose"
				},
				"yaf-controller-abstract.init": {
					"tokens": [
						"Yaf_Controller_Abstract::init",
						"YafController_Abstract::init",
						"init",
						"::init"
					],
					"id": "yaf-controller-abstract.init",
					"name": "Yaf_Controller_Abstract::init",
					"description": "Controller initializer"
				},
				"yaf-controller-abstract.initview": {
					"tokens": [
						"Yaf_Controller_Abstract::initView",
						"YafController_Abstract::initView",
						"initView",
						"::initView"
					],
					"id": "yaf-controller-abstract.initview",
					"name": "Yaf_Controller_Abstract::initView",
					"description": "The initView purpose"
				},
				"yaf-controller-abstract.redirect": {
					"tokens": [
						"Yaf_Controller_Abstract::redirect",
						"YafController_Abstract::redirect",
						"redirect",
						"::redirect"
					],
					"id": "yaf-controller-abstract.redirect",
					"name": "Yaf_Controller_Abstract::redirect",
					"description": "Redirect to a URL"
				},
				"yaf-controller-abstract.render": {
					"tokens": [
						"Yaf_Controller_Abstract::render",
						"YafController_Abstract::render",
						"render",
						"::render"
					],
					"id": "yaf-controller-abstract.render",
					"name": "Yaf_Controller_Abstract::render",
					"description": "Render view template"
				},
				"yaf-controller-abstract.setviewpath": {
					"tokens": [
						"Yaf_Controller_Abstract::setViewpath",
						"YafController_Abstract::setViewpath",
						"setViewpath",
						"::setViewpath"
					],
					"id": "yaf-controller-abstract.setviewpath",
					"name": "Yaf_Controller_Abstract::setViewpath",
					"description": "The setViewpath purpose"
				},
				"yaf-action-abstract.execute": {
					"tokens": [
						"Yaf_Action_Abstract::execute",
						"YafAction_Abstract::execute",
						"execute",
						"::execute"
					],
					"id": "yaf-action-abstract.execute",
					"name": "Yaf_Action_Abstract::execute",
					"description": "Action entry point"
				},
				"yaf-action-abstract.getcontroller": {
					"tokens": [
						"Yaf_Action_Abstract::getController",
						"YafAction_Abstract::getController",
						"getController",
						"::getController"
					],
					"id": "yaf-action-abstract.getcontroller",
					"name": "Yaf_Action_Abstract::getController",
					"description": "Retrieve controller object"
				},
				"yaf-view-interface.assign": {
					"tokens": [
						"Yaf_View_Interface::assign",
						"YafView_Interface::assign",
						"assign",
						"::assign"
					],
					"id": "yaf-view-interface.assign",
					"name": "Yaf_View_Interface::assign",
					"description": "Assign value to View engine"
				},
				"yaf-view-interface.display": {
					"tokens": [
						"Yaf_View_Interface::display",
						"YafView_Interface::display",
						"display",
						"::display"
					],
					"id": "yaf-view-interface.display",
					"name": "Yaf_View_Interface::display",
					"description": "Render and output a template"
				},
				"yaf-view-interface.getscriptpath": {
					"tokens": [
						"Yaf_View_Interface::getScriptPath",
						"YafView_Interface::getScriptPath",
						"getScriptPath",
						"::getScriptPath"
					],
					"id": "yaf-view-interface.getscriptpath",
					"name": "Yaf_View_Interface::getScriptPath",
					"description": "The getScriptPath purpose"
				},
				"yaf-view-interface.render": {
					"tokens": [
						"Yaf_View_Interface::render",
						"YafView_Interface::render",
						"render",
						"::render"
					],
					"id": "yaf-view-interface.render",
					"name": "Yaf_View_Interface::render",
					"description": "Render a template"
				},
				"yaf-view-interface.setscriptpath": {
					"tokens": [
						"Yaf_View_Interface::setScriptPath",
						"YafView_Interface::setScriptPath",
						"setScriptPath",
						"::setScriptPath"
					],
					"id": "yaf-view-interface.setscriptpath",
					"name": "Yaf_View_Interface::setScriptPath",
					"description": "The setScriptPath purpose"
				},
				"yaf-view-simple.assign": {
					"tokens": [
						"Yaf_View_Simple::assign",
						"YafView_Simple::assign",
						"assign",
						"::assign"
					],
					"id": "yaf-view-simple.assign",
					"name": "Yaf_View_Simple::assign",
					"description": "Assign values"
				},
				"yaf-view-simple.assignref": {
					"tokens": [
						"Yaf_View_Simple::assignRef",
						"YafView_Simple::assignRef",
						"assignRef",
						"::assignRef"
					],
					"id": "yaf-view-simple.assignref",
					"name": "Yaf_View_Simple::assignRef",
					"description": "The assignRef purpose"
				},
				"yaf-view-simple.clear": {
					"tokens": [
						"Yaf_View_Simple::clear",
						"YafView_Simple::clear",
						"clear",
						"::clear"
					],
					"id": "yaf-view-simple.clear",
					"name": "Yaf_View_Simple::clear",
					"description": "Clear Assigned values"
				},
				"yaf-view-simple.construct": {
					"tokens": [
						"Yaf_View_Simple::__construct",
						"YafView_Simple::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-view-simple.construct",
					"name": "Yaf_View_Simple::__construct",
					"description": "Constructor of Yaf_View_Simple"
				},
				"yaf-view-simple.display": {
					"tokens": [
						"Yaf_View_Simple::display",
						"YafView_Simple::display",
						"display",
						"::display"
					],
					"id": "yaf-view-simple.display",
					"name": "Yaf_View_Simple::display",
					"description": "Render and display"
				},
				"yaf-view-simple.eval": {
					"tokens": [
						"Yaf_View_Simple::eval",
						"YafView_Simple::eval",
						"eval",
						"::eval"
					],
					"id": "yaf-view-simple.eval",
					"name": "Yaf_View_Simple::eval",
					"description": "Render template"
				},
				"yaf-view-simple.get": {
					"tokens": [
						"Yaf_View_Simple::__get",
						"YafView_Simple::__get",
						"__get",
						"::__get"
					],
					"id": "yaf-view-simple.get",
					"name": "Yaf_View_Simple::__get",
					"description": "Retrieve assigned variable"
				},
				"yaf-view-simple.getscriptpath": {
					"tokens": [
						"Yaf_View_Simple::getScriptPath",
						"YafView_Simple::getScriptPath",
						"getScriptPath",
						"::getScriptPath"
					],
					"id": "yaf-view-simple.getscriptpath",
					"name": "Yaf_View_Simple::getScriptPath",
					"description": "Get templates directory"
				},
				"yaf-view-simple.isset": {
					"tokens": [
						"Yaf_View_Simple::__isset",
						"YafView_Simple::__isset",
						"__isset",
						"::__isset"
					],
					"id": "yaf-view-simple.isset",
					"name": "Yaf_View_Simple::__isset",
					"description": "The __isset purpose"
				},
				"yaf-view-simple.render": {
					"tokens": [
						"Yaf_View_Simple::render",
						"YafView_Simple::render",
						"render",
						"::render"
					],
					"id": "yaf-view-simple.render",
					"name": "Yaf_View_Simple::render",
					"description": "Render template"
				},
				"yaf-view-simple.set": {
					"tokens": [
						"Yaf_View_Simple::__set",
						"YafView_Simple::__set",
						"__set",
						"::__set"
					],
					"id": "yaf-view-simple.set",
					"name": "Yaf_View_Simple::__set",
					"description": "Set value to engine"
				},
				"yaf-view-simple.setscriptpath": {
					"tokens": [
						"Yaf_View_Simple::setScriptPath",
						"YafView_Simple::setScriptPath",
						"setScriptPath",
						"::setScriptPath"
					],
					"id": "yaf-view-simple.setscriptpath",
					"name": "Yaf_View_Simple::setScriptPath",
					"description": "Set tempaltes directory"
				},
				"yaf-loader.autoload": {
					"tokens": [
						"Yaf_Loader::autoload",
						"YafLoader::autoload",
						"autoload",
						"::autoload"
					],
					"id": "yaf-loader.autoload",
					"name": "Yaf_Loader::autoload",
					"description": "The autoload purpose"
				},
				"yaf-loader.clearlocalnamespace": {
					"tokens": [
						"Yaf_Loader::clearLocalNamespace",
						"YafLoader::clearLocalNamespace",
						"clearLocalNamespace",
						"::clearLocalNamespace"
					],
					"id": "yaf-loader.clearlocalnamespace",
					"name": "Yaf_Loader::clearLocalNamespace",
					"description": "The clearLocalNamespace purpose"
				},
				"yaf-loader.clone": {
					"tokens": [
						"Yaf_Loader::__clone",
						"YafLoader::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-loader.clone",
					"name": "Yaf_Loader::__clone",
					"description": "The __clone purpose"
				},
				"yaf-loader.construct": {
					"tokens": [
						"Yaf_Loader::__construct",
						"YafLoader::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-loader.construct",
					"name": "Yaf_Loader::__construct",
					"description": "The __construct purpose"
				},
				"yaf-loader.getinstance": {
					"tokens": [
						"Yaf_Loader::getInstance",
						"YafLoader::getInstance",
						"getInstance",
						"::getInstance"
					],
					"id": "yaf-loader.getinstance",
					"name": "Yaf_Loader::getInstance",
					"description": "The getInstance purpose"
				},
				"yaf-loader.getlibrarypath": {
					"tokens": [
						"Yaf_Loader::getLibraryPath",
						"YafLoader::getLibraryPath",
						"getLibraryPath",
						"::getLibraryPath"
					],
					"id": "yaf-loader.getlibrarypath",
					"name": "Yaf_Loader::getLibraryPath",
					"description": "get the library path"
				},
				"yaf-loader.getlocalnamespace": {
					"tokens": [
						"Yaf_Loader::getLocalNamespace",
						"YafLoader::getLocalNamespace",
						"getLocalNamespace",
						"::getLocalNamespace"
					],
					"id": "yaf-loader.getlocalnamespace",
					"name": "Yaf_Loader::getLocalNamespace",
					"description": "The getLocalNamespace purpose"
				},
				"yaf-loader.import": {
					"tokens": [
						"Yaf_Loader::import",
						"YafLoader::import",
						"import",
						"::import"
					],
					"id": "yaf-loader.import",
					"name": "Yaf_Loader::import",
					"description": "The import purpose"
				},
				"yaf-loader.islocalname": {
					"tokens": [
						"Yaf_Loader::isLocalName",
						"YafLoader::isLocalName",
						"isLocalName",
						"::isLocalName"
					],
					"id": "yaf-loader.islocalname",
					"name": "Yaf_Loader::isLocalName",
					"description": "The isLocalName purpose"
				},
				"yaf-loader.registerlocalnamespace": {
					"tokens": [
						"Yaf_Loader::registerLocalNamespace",
						"YafLoader::registerLocalNamespace",
						"registerLocalNamespace",
						"::registerLocalNamespace"
					],
					"id": "yaf-loader.registerlocalnamespace",
					"name": "Yaf_Loader::registerLocalNamespace",
					"description": "register local class prefix"
				},
				"yaf-loader.setlibrarypath": {
					"tokens": [
						"Yaf_Loader::setLibraryPath",
						"YafLoader::setLibraryPath",
						"setLibraryPath",
						"::setLibraryPath"
					],
					"id": "yaf-loader.setlibrarypath",
					"name": "Yaf_Loader::setLibraryPath",
					"description": "Change the library path"
				},
				"yaf-loader.sleep": {
					"tokens": [
						"Yaf_Loader::__sleep",
						"YafLoader::__sleep",
						"__sleep",
						"::__sleep"
					],
					"id": "yaf-loader.sleep",
					"name": "Yaf_Loader::__sleep",
					"description": "The __sleep purpose"
				},
				"yaf-loader.wakeup": {
					"tokens": [
						"Yaf_Loader::__wakeup",
						"YafLoader::__wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "yaf-loader.wakeup",
					"name": "Yaf_Loader::__wakeup",
					"description": "The __wakeup purpose"
				},
				"yaf-plugin-abstract.dispatchloopshutdown": {
					"tokens": [
						"Yaf_Plugin_Abstract::dispatchLoopShutdown",
						"YafPlugin_Abstract::dispatchLoopShutdown",
						"dispatchLoopShutdown",
						"::dispatchLoopShutdown"
					],
					"id": "yaf-plugin-abstract.dispatchloopshutdown",
					"name": "Yaf_Plugin_Abstract::dispatchLoopShutdown",
					"description": "The dispatchLoopShutdown purpose"
				},
				"yaf-plugin-abstract.dispatchloopstartup": {
					"tokens": [
						"Yaf_Plugin_Abstract::dispatchLoopStartup",
						"YafPlugin_Abstract::dispatchLoopStartup",
						"dispatchLoopStartup",
						"::dispatchLoopStartup"
					],
					"id": "yaf-plugin-abstract.dispatchloopstartup",
					"name": "Yaf_Plugin_Abstract::dispatchLoopStartup",
					"description": "The dispatchLoopStartup purpose"
				},
				"yaf-plugin-abstract.postdispatch": {
					"tokens": [
						"Yaf_Plugin_Abstract::postDispatch",
						"YafPlugin_Abstract::postDispatch",
						"postDispatch",
						"::postDispatch"
					],
					"id": "yaf-plugin-abstract.postdispatch",
					"name": "Yaf_Plugin_Abstract::postDispatch",
					"description": "The postDispatch purpose"
				},
				"yaf-plugin-abstract.predispatch": {
					"tokens": [
						"Yaf_Plugin_Abstract::preDispatch",
						"YafPlugin_Abstract::preDispatch",
						"preDispatch",
						"::preDispatch"
					],
					"id": "yaf-plugin-abstract.predispatch",
					"name": "Yaf_Plugin_Abstract::preDispatch",
					"description": "The preDispatch purpose"
				},
				"yaf-plugin-abstract.preresponse": {
					"tokens": [
						"Yaf_Plugin_Abstract::preResponse",
						"YafPlugin_Abstract::preResponse",
						"preResponse",
						"::preResponse"
					],
					"id": "yaf-plugin-abstract.preresponse",
					"name": "Yaf_Plugin_Abstract::preResponse",
					"description": "The preResponse purpose"
				},
				"yaf-plugin-abstract.routershutdown": {
					"tokens": [
						"Yaf_Plugin_Abstract::routerShutdown",
						"YafPlugin_Abstract::routerShutdown",
						"routerShutdown",
						"::routerShutdown"
					],
					"id": "yaf-plugin-abstract.routershutdown",
					"name": "Yaf_Plugin_Abstract::routerShutdown",
					"description": "The routerShutdown purpose"
				},
				"yaf-plugin-abstract.routerstartup": {
					"tokens": [
						"Yaf_Plugin_Abstract::routerStartup",
						"YafPlugin_Abstract::routerStartup",
						"routerStartup",
						"::routerStartup"
					],
					"id": "yaf-plugin-abstract.routerstartup",
					"name": "Yaf_Plugin_Abstract::routerStartup",
					"description": "RouterStartup hook"
				},
				"yaf-registry.clone": {
					"tokens": [
						"Yaf_Registry::__clone",
						"YafRegistry::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-registry.clone",
					"name": "Yaf_Registry::__clone",
					"description": "The __clone purpose"
				},
				"yaf-registry.construct": {
					"tokens": [
						"Yaf_Registry::__construct",
						"YafRegistry::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-registry.construct",
					"name": "Yaf_Registry::__construct",
					"description": "Yaf_Registry implements singleton"
				},
				"yaf-registry.del": {
					"tokens": [
						"Yaf_Registry::del",
						"YafRegistry::del",
						"del",
						"::del"
					],
					"id": "yaf-registry.del",
					"name": "Yaf_Registry::del",
					"description": "Remove an item from registry"
				},
				"yaf-registry.get": {
					"tokens": [
						"Yaf_Registry::get",
						"YafRegistry::get",
						"get",
						"::get"
					],
					"id": "yaf-registry.get",
					"name": "Yaf_Registry::get",
					"description": "Retrieve an item from registry"
				},
				"yaf-registry.has": {
					"tokens": [
						"Yaf_Registry::has",
						"YafRegistry::has",
						"has",
						"::has"
					],
					"id": "yaf-registry.has",
					"name": "Yaf_Registry::has",
					"description": "Check whether an item exists"
				},
				"yaf-registry.set": {
					"tokens": [
						"Yaf_Registry::set",
						"YafRegistry::set",
						"set",
						"::set"
					],
					"id": "yaf-registry.set",
					"name": "Yaf_Registry::set",
					"description": "Add an item into registry"
				},
				"yaf-request-abstract.getactionname": {
					"tokens": [
						"Yaf_Request_Abstract::getActionName",
						"YafRequest_Abstract::getActionName",
						"getActionName",
						"::getActionName"
					],
					"id": "yaf-request-abstract.getactionname",
					"name": "Yaf_Request_Abstract::getActionName",
					"description": "The getActionName purpose"
				},
				"yaf-request-abstract.getbaseuri": {
					"tokens": [
						"Yaf_Request_Abstract::getBaseUri",
						"YafRequest_Abstract::getBaseUri",
						"getBaseUri",
						"::getBaseUri"
					],
					"id": "yaf-request-abstract.getbaseuri",
					"name": "Yaf_Request_Abstract::getBaseUri",
					"description": "The getBaseUri purpose"
				},
				"yaf-request-abstract.getcontrollername": {
					"tokens": [
						"Yaf_Request_Abstract::getControllerName",
						"YafRequest_Abstract::getControllerName",
						"getControllerName",
						"::getControllerName"
					],
					"id": "yaf-request-abstract.getcontrollername",
					"name": "Yaf_Request_Abstract::getControllerName",
					"description": "The getControllerName purpose"
				},
				"yaf-request-abstract.getenv": {
					"tokens": [
						"Yaf_Request_Abstract::getEnv",
						"YafRequest_Abstract::getEnv",
						"getEnv",
						"::getEnv"
					],
					"id": "yaf-request-abstract.getenv",
					"name": "Yaf_Request_Abstract::getEnv",
					"description": "Retrieve ENV varialbe"
				},
				"yaf-request-abstract.getexception": {
					"tokens": [
						"Yaf_Request_Abstract::getException",
						"YafRequest_Abstract::getException",
						"getException",
						"::getException"
					],
					"id": "yaf-request-abstract.getexception",
					"name": "Yaf_Request_Abstract::getException",
					"description": "The getException purpose"
				},
				"yaf-request-abstract.getlanguage": {
					"tokens": [
						"Yaf_Request_Abstract::getLanguage",
						"YafRequest_Abstract::getLanguage",
						"getLanguage",
						"::getLanguage"
					],
					"id": "yaf-request-abstract.getlanguage",
					"name": "Yaf_Request_Abstract::getLanguage",
					"description": "The getLanguage purpose"
				},
				"yaf-request-abstract.getmethod": {
					"tokens": [
						"Yaf_Request_Abstract::getMethod",
						"YafRequest_Abstract::getMethod",
						"getMethod",
						"::getMethod"
					],
					"id": "yaf-request-abstract.getmethod",
					"name": "Yaf_Request_Abstract::getMethod",
					"description": "The getMethod purpose"
				},
				"yaf-request-abstract.getmodulename": {
					"tokens": [
						"Yaf_Request_Abstract::getModuleName",
						"YafRequest_Abstract::getModuleName",
						"getModuleName",
						"::getModuleName"
					],
					"id": "yaf-request-abstract.getmodulename",
					"name": "Yaf_Request_Abstract::getModuleName",
					"description": "The getModuleName purpose"
				},
				"yaf-request-abstract.getparam": {
					"tokens": [
						"Yaf_Request_Abstract::getParam",
						"YafRequest_Abstract::getParam",
						"getParam",
						"::getParam"
					],
					"id": "yaf-request-abstract.getparam",
					"name": "Yaf_Request_Abstract::getParam",
					"description": "The getParam purpose"
				},
				"yaf-request-abstract.getparams": {
					"tokens": [
						"Yaf_Request_Abstract::getParams",
						"YafRequest_Abstract::getParams",
						"getParams",
						"::getParams"
					],
					"id": "yaf-request-abstract.getparams",
					"name": "Yaf_Request_Abstract::getParams",
					"description": "The getParams purpose"
				},
				"yaf-request-abstract.getrequesturi": {
					"tokens": [
						"Yaf_Request_Abstract::getRequestUri",
						"YafRequest_Abstract::getRequestUri",
						"getRequestUri",
						"::getRequestUri"
					],
					"id": "yaf-request-abstract.getrequesturi",
					"name": "Yaf_Request_Abstract::getRequestUri",
					"description": "The getRequestUri purpose"
				},
				"yaf-request-abstract.getserver": {
					"tokens": [
						"Yaf_Request_Abstract::getServer",
						"YafRequest_Abstract::getServer",
						"getServer",
						"::getServer"
					],
					"id": "yaf-request-abstract.getserver",
					"name": "Yaf_Request_Abstract::getServer",
					"description": "Retrieve SERVER variable"
				},
				"yaf-request-abstract.iscli": {
					"tokens": [
						"Yaf_Request_Abstract::isCli",
						"YafRequest_Abstract::isCli",
						"isCli",
						"::isCli"
					],
					"id": "yaf-request-abstract.iscli",
					"name": "Yaf_Request_Abstract::isCli",
					"description": "The isCli purpose"
				},
				"yaf-request-abstract.isdispatched": {
					"tokens": [
						"Yaf_Request_Abstract::isDispatched",
						"YafRequest_Abstract::isDispatched",
						"isDispatched",
						"::isDispatched"
					],
					"id": "yaf-request-abstract.isdispatched",
					"name": "Yaf_Request_Abstract::isDispatched",
					"description": "The isDispatched purpose"
				},
				"yaf-request-abstract.isget": {
					"tokens": [
						"Yaf_Request_Abstract::isGet",
						"YafRequest_Abstract::isGet",
						"isGet",
						"::isGet"
					],
					"id": "yaf-request-abstract.isget",
					"name": "Yaf_Request_Abstract::isGet",
					"description": "The isGet purpose"
				},
				"yaf-request-abstract.ishead": {
					"tokens": [
						"Yaf_Request_Abstract::isHead",
						"YafRequest_Abstract::isHead",
						"isHead",
						"::isHead"
					],
					"id": "yaf-request-abstract.ishead",
					"name": "Yaf_Request_Abstract::isHead",
					"description": "The isHead purpose"
				},
				"yaf-request-abstract.isoptions": {
					"tokens": [
						"Yaf_Request_Abstract::isOptions",
						"YafRequest_Abstract::isOptions",
						"isOptions",
						"::isOptions"
					],
					"id": "yaf-request-abstract.isoptions",
					"name": "Yaf_Request_Abstract::isOptions",
					"description": "The isOptions purpose"
				},
				"yaf-request-abstract.ispost": {
					"tokens": [
						"Yaf_Request_Abstract::isPost",
						"YafRequest_Abstract::isPost",
						"isPost",
						"::isPost"
					],
					"id": "yaf-request-abstract.ispost",
					"name": "Yaf_Request_Abstract::isPost",
					"description": "The isPost purpose"
				},
				"yaf-request-abstract.isput": {
					"tokens": [
						"Yaf_Request_Abstract::isPut",
						"YafRequest_Abstract::isPut",
						"isPut",
						"::isPut"
					],
					"id": "yaf-request-abstract.isput",
					"name": "Yaf_Request_Abstract::isPut",
					"description": "The isPut purpose"
				},
				"yaf-request-abstract.isrouted": {
					"tokens": [
						"Yaf_Request_Abstract::isRouted",
						"YafRequest_Abstract::isRouted",
						"isRouted",
						"::isRouted"
					],
					"id": "yaf-request-abstract.isrouted",
					"name": "Yaf_Request_Abstract::isRouted",
					"description": "The isRouted purpose"
				},
				"yaf-request-abstract.isxmlhttprequest": {
					"tokens": [
						"Yaf_Request_Abstract::isXmlHttpRequest",
						"YafRequest_Abstract::isXmlHttpRequest",
						"isXmlHttpRequest",
						"::isXmlHttpRequest"
					],
					"id": "yaf-request-abstract.isxmlhttprequest",
					"name": "Yaf_Request_Abstract::isXmlHttpRequest",
					"description": "The isXmlHttpRequest purpose"
				},
				"yaf-request-abstract.setactionname": {
					"tokens": [
						"Yaf_Request_Abstract::setActionName",
						"YafRequest_Abstract::setActionName",
						"setActionName",
						"::setActionName"
					],
					"id": "yaf-request-abstract.setactionname",
					"name": "Yaf_Request_Abstract::setActionName",
					"description": "The setActionName purpose"
				},
				"yaf-request-abstract.setbaseuri": {
					"tokens": [
						"Yaf_Request_Abstract::setBaseUri",
						"YafRequest_Abstract::setBaseUri",
						"setBaseUri",
						"::setBaseUri"
					],
					"id": "yaf-request-abstract.setbaseuri",
					"name": "Yaf_Request_Abstract::setBaseUri",
					"description": "set base URI"
				},
				"yaf-request-abstract.setcontrollername": {
					"tokens": [
						"Yaf_Request_Abstract::setControllerName",
						"YafRequest_Abstract::setControllerName",
						"setControllerName",
						"::setControllerName"
					],
					"id": "yaf-request-abstract.setcontrollername",
					"name": "Yaf_Request_Abstract::setControllerName",
					"description": "The setControllerName purpose"
				},
				"yaf-request-abstract.setdispatched": {
					"tokens": [
						"Yaf_Request_Abstract::setDispatched",
						"YafRequest_Abstract::setDispatched",
						"setDispatched",
						"::setDispatched"
					],
					"id": "yaf-request-abstract.setdispatched",
					"name": "Yaf_Request_Abstract::setDispatched",
					"description": "The setDispatched purpose"
				},
				"yaf-request-abstract.setmodulename": {
					"tokens": [
						"Yaf_Request_Abstract::setModuleName",
						"YafRequest_Abstract::setModuleName",
						"setModuleName",
						"::setModuleName"
					],
					"id": "yaf-request-abstract.setmodulename",
					"name": "Yaf_Request_Abstract::setModuleName",
					"description": "The setModuleName purpose"
				},
				"yaf-request-abstract.setparam": {
					"tokens": [
						"Yaf_Request_Abstract::setParam",
						"YafRequest_Abstract::setParam",
						"setParam",
						"::setParam"
					],
					"id": "yaf-request-abstract.setparam",
					"name": "Yaf_Request_Abstract::setParam",
					"description": "The setParam purpose"
				},
				"yaf-request-abstract.setrequesturi": {
					"tokens": [
						"Yaf_Request_Abstract::setRequestUri",
						"YafRequest_Abstract::setRequestUri",
						"setRequestUri",
						"::setRequestUri"
					],
					"id": "yaf-request-abstract.setrequesturi",
					"name": "Yaf_Request_Abstract::setRequestUri",
					"description": "The setRequestUri purpose"
				},
				"yaf-request-abstract.setrouted": {
					"tokens": [
						"Yaf_Request_Abstract::setRouted",
						"YafRequest_Abstract::setRouted",
						"setRouted",
						"::setRouted"
					],
					"id": "yaf-request-abstract.setrouted",
					"name": "Yaf_Request_Abstract::setRouted",
					"description": "The setRouted purpose"
				},
				"yaf-request-http.clone": {
					"tokens": [
						"Yaf_Request_Http::__clone",
						"YafRequest_Http::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-request-http.clone",
					"name": "Yaf_Request_Http::__clone",
					"description": "The __clone purpose"
				},
				"yaf-request-http.construct": {
					"tokens": [
						"Yaf_Request_Http::__construct",
						"YafRequest_Http::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-request-http.construct",
					"name": "Yaf_Request_Http::__construct",
					"description": "Constructor of Yaf_Request_Http"
				},
				"yaf-request-http.get": {
					"tokens": [
						"Yaf_Request_Http::get",
						"YafRequest_Http::get",
						"get",
						"::get"
					],
					"id": "yaf-request-http.get",
					"name": "Yaf_Request_Http::get",
					"description": "Retrieve variable from client"
				},
				"yaf-request-http.getcookie": {
					"tokens": [
						"Yaf_Request_Http::getCookie",
						"YafRequest_Http::getCookie",
						"getCookie",
						"::getCookie"
					],
					"id": "yaf-request-http.getcookie",
					"name": "Yaf_Request_Http::getCookie",
					"description": "Retrieve Cookie variable"
				},
				"yaf-request-http.getfiles": {
					"tokens": [
						"Yaf_Request_Http::getFiles",
						"YafRequest_Http::getFiles",
						"getFiles",
						"::getFiles"
					],
					"id": "yaf-request-http.getfiles",
					"name": "Yaf_Request_Http::getFiles",
					"description": "The getFiles purpose"
				},
				"yaf-request-http.getpost": {
					"tokens": [
						"Yaf_Request_Http::getPost",
						"YafRequest_Http::getPost",
						"getPost",
						"::getPost"
					],
					"id": "yaf-request-http.getpost",
					"name": "Yaf_Request_Http::getPost",
					"description": "Retrieve POST variable"
				},
				"yaf-request-http.getquery": {
					"tokens": [
						"Yaf_Request_Http::getQuery",
						"YafRequest_Http::getQuery",
						"getQuery",
						"::getQuery"
					],
					"id": "yaf-request-http.getquery",
					"name": "Yaf_Request_Http::getQuery",
					"description": "Fetch a query parameter"
				},
				"yaf-request-http.getrequest": {
					"tokens": [
						"Yaf_Request_Http::getRequest",
						"YafRequest_Http::getRequest",
						"getRequest",
						"::getRequest"
					],
					"id": "yaf-request-http.getrequest",
					"name": "Yaf_Request_Http::getRequest",
					"description": "The getRequest purpose"
				},
				"yaf-request-http.isxmlhttprequest": {
					"tokens": [
						"Yaf_Request_Http::isXmlHttpRequest",
						"YafRequest_Http::isXmlHttpRequest",
						"isXmlHttpRequest",
						"::isXmlHttpRequest"
					],
					"id": "yaf-request-http.isxmlhttprequest",
					"name": "Yaf_Request_Http::isXmlHttpRequest",
					"description": "Whether a Ajax Request"
				},
				"yaf-request-simple.clone": {
					"tokens": [
						"Yaf_Request_Simple::__clone",
						"YafRequest_Simple::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-request-simple.clone",
					"name": "Yaf_Request_Simple::__clone",
					"description": "The __clone purpose"
				},
				"yaf-request-simple.construct": {
					"tokens": [
						"Yaf_Request_Simple::__construct",
						"YafRequest_Simple::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-request-simple.construct",
					"name": "Yaf_Request_Simple::__construct",
					"description": "Constructor of Yaf_Request_Simple"
				},
				"yaf-request-simple.get": {
					"tokens": [
						"Yaf_Request_Simple::get",
						"YafRequest_Simple::get",
						"get",
						"::get"
					],
					"id": "yaf-request-simple.get",
					"name": "Yaf_Request_Simple::get",
					"description": "The get purpose"
				},
				"yaf-request-simple.getcookie": {
					"tokens": [
						"Yaf_Request_Simple::getCookie",
						"YafRequest_Simple::getCookie",
						"getCookie",
						"::getCookie"
					],
					"id": "yaf-request-simple.getcookie",
					"name": "Yaf_Request_Simple::getCookie",
					"description": "The getCookie purpose"
				},
				"yaf-request-simple.getfiles": {
					"tokens": [
						"Yaf_Request_Simple::getFiles",
						"YafRequest_Simple::getFiles",
						"getFiles",
						"::getFiles"
					],
					"id": "yaf-request-simple.getfiles",
					"name": "Yaf_Request_Simple::getFiles",
					"description": "The getFiles purpose"
				},
				"yaf-request-simple.getpost": {
					"tokens": [
						"Yaf_Request_Simple::getPost",
						"YafRequest_Simple::getPost",
						"getPost",
						"::getPost"
					],
					"id": "yaf-request-simple.getpost",
					"name": "Yaf_Request_Simple::getPost",
					"description": "The getPost purpose"
				},
				"yaf-request-simple.getquery": {
					"tokens": [
						"Yaf_Request_Simple::getQuery",
						"YafRequest_Simple::getQuery",
						"getQuery",
						"::getQuery"
					],
					"id": "yaf-request-simple.getquery",
					"name": "Yaf_Request_Simple::getQuery",
					"description": "The getQuery purpose"
				},
				"yaf-request-simple.getrequest": {
					"tokens": [
						"Yaf_Request_Simple::getRequest",
						"YafRequest_Simple::getRequest",
						"getRequest",
						"::getRequest"
					],
					"id": "yaf-request-simple.getrequest",
					"name": "Yaf_Request_Simple::getRequest",
					"description": "The getRequest purpose"
				},
				"yaf-request-simple.isxmlhttprequest": {
					"tokens": [
						"Yaf_Request_Simple::isXmlHttpRequest",
						"YafRequest_Simple::isXmlHttpRequest",
						"isXmlHttpRequest",
						"::isXmlHttpRequest"
					],
					"id": "yaf-request-simple.isxmlhttprequest",
					"name": "Yaf_Request_Simple::isXmlHttpRequest",
					"description": "The isXmlHttpRequest purpose"
				},
				"yaf-response-abstract.appendbody": {
					"tokens": [
						"Yaf_Response_Abstract::appendBody",
						"YafResponse_Abstract::appendBody",
						"appendBody",
						"::appendBody"
					],
					"id": "yaf-response-abstract.appendbody",
					"name": "Yaf_Response_Abstract::appendBody",
					"description": "append to body"
				},
				"yaf-response-abstract.clearbody": {
					"tokens": [
						"Yaf_Response_Abstract::clearBody",
						"YafResponse_Abstract::clearBody",
						"clearBody",
						"::clearBody"
					],
					"id": "yaf-response-abstract.clearbody",
					"name": "Yaf_Response_Abstract::clearBody",
					"description": "The clearBody purpose"
				},
				"yaf-response-abstract.clearheaders": {
					"tokens": [
						"Yaf_Response_Abstract::clearHeaders",
						"YafResponse_Abstract::clearHeaders",
						"clearHeaders",
						"::clearHeaders"
					],
					"id": "yaf-response-abstract.clearheaders",
					"name": "Yaf_Response_Abstract::clearHeaders",
					"description": "The clearHeaders purpose"
				},
				"yaf-response-abstract.clone": {
					"tokens": [
						"Yaf_Response_Abstract::__clone",
						"YafResponse_Abstract::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-response-abstract.clone",
					"name": "Yaf_Response_Abstract::__clone",
					"description": "The __clone purpose"
				},
				"yaf-response-abstract.construct": {
					"tokens": [
						"Yaf_Response_Abstract::__construct",
						"YafResponse_Abstract::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-response-abstract.construct",
					"name": "Yaf_Response_Abstract::__construct",
					"description": "The __construct purpose"
				},
				"yaf-response-abstract.destruct": {
					"tokens": [
						"Yaf_Response_Abstract::__destruct",
						"YafResponse_Abstract::__destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "yaf-response-abstract.destruct",
					"name": "Yaf_Response_Abstract::__destruct",
					"description": "The __destruct purpose"
				},
				"yaf-response-abstract.getbody": {
					"tokens": [
						"Yaf_Response_Abstract::getBody",
						"YafResponse_Abstract::getBody",
						"getBody",
						"::getBody"
					],
					"id": "yaf-response-abstract.getbody",
					"name": "Yaf_Response_Abstract::getBody",
					"description": "Retrieve a exists content"
				},
				"yaf-response-abstract.getheader": {
					"tokens": [
						"Yaf_Response_Abstract::getHeader",
						"YafResponse_Abstract::getHeader",
						"getHeader",
						"::getHeader"
					],
					"id": "yaf-response-abstract.getheader",
					"name": "Yaf_Response_Abstract::getHeader",
					"description": "The getHeader purpose"
				},
				"yaf-response-abstract.prependbody": {
					"tokens": [
						"Yaf_Response_Abstract::prependBody",
						"YafResponse_Abstract::prependBody",
						"prependBody",
						"::prependBody"
					],
					"id": "yaf-response-abstract.prependbody",
					"name": "Yaf_Response_Abstract::prependBody",
					"description": "The prependBody purpose"
				},
				"yaf-response-abstract.response": {
					"tokens": [
						"Yaf_Response_Abstract::response",
						"YafResponse_Abstract::response",
						"response",
						"::response"
					],
					"id": "yaf-response-abstract.response",
					"name": "Yaf_Response_Abstract::response",
					"description": "send response"
				},
				"yaf-response-abstract.setallheaders": {
					"tokens": [
						"Yaf_Response_Abstract::setAllHeaders",
						"YafResponse_Abstract::setAllHeaders",
						"setAllHeaders",
						"::setAllHeaders"
					],
					"id": "yaf-response-abstract.setallheaders",
					"name": "Yaf_Response_Abstract::setAllHeaders",
					"description": "The setAllHeaders purpose"
				},
				"yaf-response-abstract.setbody": {
					"tokens": [
						"Yaf_Response_Abstract::setBody",
						"YafResponse_Abstract::setBody",
						"setBody",
						"::setBody"
					],
					"id": "yaf-response-abstract.setbody",
					"name": "Yaf_Response_Abstract::setBody",
					"description": "Set content to response"
				},
				"yaf-response-abstract.setheader": {
					"tokens": [
						"Yaf_Response_Abstract::setHeader",
						"YafResponse_Abstract::setHeader",
						"setHeader",
						"::setHeader"
					],
					"id": "yaf-response-abstract.setheader",
					"name": "Yaf_Response_Abstract::setHeader",
					"description": "The setHeader purpose"
				},
				"yaf-response-abstract.setredirect": {
					"tokens": [
						"Yaf_Response_Abstract::setRedirect",
						"YafResponse_Abstract::setRedirect",
						"setRedirect",
						"::setRedirect"
					],
					"id": "yaf-response-abstract.setredirect",
					"name": "Yaf_Response_Abstract::setRedirect",
					"description": "The setRedirect purpose"
				},
				"yaf-response-abstract.tostring": {
					"tokens": [
						"Yaf_Response_Abstract::__toString",
						"YafResponse_Abstract::__toString",
						"__toString",
						"::__toString"
					],
					"id": "yaf-response-abstract.tostring",
					"name": "Yaf_Response_Abstract::__toString",
					"description": "The __toString purpose"
				},
				"yaf-route-interface.assemble": {
					"tokens": [
						"Yaf_Route_Interface::assemble",
						"YafRoute_Interface::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-interface.assemble",
					"name": "Yaf_Route_Interface::assemble",
					"description": "assemble a request"
				},
				"yaf-route-interface.route": {
					"tokens": [
						"Yaf_Route_Interface::route",
						"YafRoute_Interface::route",
						"route",
						"::route"
					],
					"id": "yaf-route-interface.route",
					"name": "Yaf_Route_Interface::route",
					"description": "route a request"
				},
				"yaf-route-map.assemble": {
					"tokens": [
						"Yaf_Route_Map::assemble",
						"YafRoute_Map::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-map.assemble",
					"name": "Yaf_Route_Map::assemble",
					"description": "Assemble a url"
				},
				"yaf-route-map.construct": {
					"tokens": [
						"Yaf_Route_Map::__construct",
						"YafRoute_Map::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-route-map.construct",
					"name": "Yaf_Route_Map::__construct",
					"description": "The __construct purpose"
				},
				"yaf-route-map.route": {
					"tokens": [
						"Yaf_Route_Map::route",
						"YafRoute_Map::route",
						"route",
						"::route"
					],
					"id": "yaf-route-map.route",
					"name": "Yaf_Route_Map::route",
					"description": "The route purpose"
				},
				"yaf-route-regex.assemble": {
					"tokens": [
						"Yaf_Route_Regex::assemble",
						"YafRoute_Regex::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-regex.assemble",
					"name": "Yaf_Route_Regex::assemble",
					"description": "Assemble a url"
				},
				"yaf-route-regex.construct": {
					"tokens": [
						"Yaf_Route_Regex::__construct",
						"YafRoute_Regex::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-route-regex.construct",
					"name": "Yaf_Route_Regex::__construct",
					"description": "Yaf_Route_Regex constructor"
				},
				"yaf-route-regex.route": {
					"tokens": [
						"Yaf_Route_Regex::route",
						"YafRoute_Regex::route",
						"route",
						"::route"
					],
					"id": "yaf-route-regex.route",
					"name": "Yaf_Route_Regex::route",
					"description": "The route purpose"
				},
				"yaf-route-rewrite.assemble": {
					"tokens": [
						"Yaf_Route_Rewrite::assemble",
						"YafRoute_Rewrite::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-rewrite.assemble",
					"name": "Yaf_Route_Rewrite::assemble",
					"description": "Assemble a url"
				},
				"yaf-route-rewrite.construct": {
					"tokens": [
						"Yaf_Route_Rewrite::__construct",
						"YafRoute_Rewrite::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-route-rewrite.construct",
					"name": "Yaf_Route_Rewrite::__construct",
					"description": "Yaf_Route_Rewrite constructor"
				},
				"yaf-route-rewrite.route": {
					"tokens": [
						"Yaf_Route_Rewrite::route",
						"YafRoute_Rewrite::route",
						"route",
						"::route"
					],
					"id": "yaf-route-rewrite.route",
					"name": "Yaf_Route_Rewrite::route",
					"description": "The route purpose"
				},
				"yaf-router.addconfig": {
					"tokens": [
						"Yaf_Router::addConfig",
						"YafRouter::addConfig",
						"addConfig",
						"::addConfig"
					],
					"id": "yaf-router.addconfig",
					"name": "Yaf_Router::addConfig",
					"description": "Add config-defined routes into Router"
				},
				"yaf-router.addroute": {
					"tokens": [
						"Yaf_Router::addRoute",
						"YafRouter::addRoute",
						"addRoute",
						"::addRoute"
					],
					"id": "yaf-router.addroute",
					"name": "Yaf_Router::addRoute",
					"description": "Add new Route into Router"
				},
				"yaf-router.construct": {
					"tokens": [
						"Yaf_Router::__construct",
						"YafRouter::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-router.construct",
					"name": "Yaf_Router::__construct",
					"description": "Yaf_Router constructor"
				},
				"yaf-router.getcurrentroute": {
					"tokens": [
						"Yaf_Router::getCurrentRoute",
						"YafRouter::getCurrentRoute",
						"getCurrentRoute",
						"::getCurrentRoute"
					],
					"id": "yaf-router.getcurrentroute",
					"name": "Yaf_Router::getCurrentRoute",
					"description": "Get the effective route name"
				},
				"yaf-router.getroute": {
					"tokens": [
						"Yaf_Router::getRoute",
						"YafRouter::getRoute",
						"getRoute",
						"::getRoute"
					],
					"id": "yaf-router.getroute",
					"name": "Yaf_Router::getRoute",
					"description": "Retrieve a route by name"
				},
				"yaf-router.getroutes": {
					"tokens": [
						"Yaf_Router::getRoutes",
						"YafRouter::getRoutes",
						"getRoutes",
						"::getRoutes"
					],
					"id": "yaf-router.getroutes",
					"name": "Yaf_Router::getRoutes",
					"description": "Retrieve registered routes"
				},
				"yaf-router.route": {
					"tokens": [
						"Yaf_Router::route",
						"YafRouter::route",
						"route",
						"::route"
					],
					"id": "yaf-router.route",
					"name": "Yaf_Router::route",
					"description": "The route purpose"
				},
				"yaf-route-simple.assemble": {
					"tokens": [
						"Yaf_Route_Simple::assemble",
						"YafRoute_Simple::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-simple.assemble",
					"name": "Yaf_Route_Simple::assemble",
					"description": "Assemble a url"
				},
				"yaf-route-simple.construct": {
					"tokens": [
						"Yaf_Route_Simple::__construct",
						"YafRoute_Simple::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-route-simple.construct",
					"name": "Yaf_Route_Simple::__construct",
					"description": "Yaf_Route_Simple constructor"
				},
				"yaf-route-simple.route": {
					"tokens": [
						"Yaf_Route_Simple::route",
						"YafRoute_Simple::route",
						"route",
						"::route"
					],
					"id": "yaf-route-simple.route",
					"name": "Yaf_Route_Simple::route",
					"description": "Route a request"
				},
				"yaf-route-static.assemble": {
					"tokens": [
						"Yaf_Route_Static::assemble",
						"YafRoute_Static::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-static.assemble",
					"name": "Yaf_Route_Static::assemble",
					"description": "Assemble a url"
				},
				"yaf-route-static.match": {
					"tokens": [
						"Yaf_Route_Static::match",
						"YafRoute_Static::match",
						"match",
						"::match"
					],
					"id": "yaf-route-static.match",
					"name": "Yaf_Route_Static::match",
					"description": "The match purpose"
				},
				"yaf-route-static.route": {
					"tokens": [
						"Yaf_Route_Static::route",
						"YafRoute_Static::route",
						"route",
						"::route"
					],
					"id": "yaf-route-static.route",
					"name": "Yaf_Route_Static::route",
					"description": "Route a request"
				},
				"yaf-route-supervar.assemble": {
					"tokens": [
						"Yaf_Route_Supervar::assemble",
						"YafRoute_Supervar::assemble",
						"assemble",
						"::assemble"
					],
					"id": "yaf-route-supervar.assemble",
					"name": "Yaf_Route_Supervar::assemble",
					"description": "Assemble a url"
				},
				"yaf-route-supervar.construct": {
					"tokens": [
						"Yaf_Route_Supervar::__construct",
						"YafRoute_Supervar::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-route-supervar.construct",
					"name": "Yaf_Route_Supervar::__construct",
					"description": "The __construct purpose"
				},
				"yaf-route-supervar.route": {
					"tokens": [
						"Yaf_Route_Supervar::route",
						"YafRoute_Supervar::route",
						"route",
						"::route"
					],
					"id": "yaf-route-supervar.route",
					"name": "Yaf_Route_Supervar::route",
					"description": "The route purpose"
				},
				"yaf-session.clone": {
					"tokens": [
						"Yaf_Session::__clone",
						"YafSession::__clone",
						"__clone",
						"::__clone"
					],
					"id": "yaf-session.clone",
					"name": "Yaf_Session::__clone",
					"description": "The __clone purpose"
				},
				"yaf-session.construct": {
					"tokens": [
						"Yaf_Session::__construct",
						"YafSession::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-session.construct",
					"name": "Yaf_Session::__construct",
					"description": "Constructor of Yaf_Session"
				},
				"yaf-session.count": {
					"tokens": [
						"Yaf_Session::count",
						"YafSession::count",
						"count",
						"::count"
					],
					"id": "yaf-session.count",
					"name": "Yaf_Session::count",
					"description": "The count purpose"
				},
				"yaf-session.current": {
					"tokens": [
						"Yaf_Session::current",
						"YafSession::current",
						"current",
						"::current"
					],
					"id": "yaf-session.current",
					"name": "Yaf_Session::current",
					"description": "The current purpose"
				},
				"yaf-session.del": {
					"tokens": [
						"Yaf_Session::del",
						"YafSession::del",
						"del",
						"::del"
					],
					"id": "yaf-session.del",
					"name": "Yaf_Session::del",
					"description": "The del purpose"
				},
				"yaf-session.get": {
					"tokens": [
						"Yaf_Session::__get",
						"YafSession::__get",
						"__get",
						"::__get"
					],
					"id": "yaf-session.get",
					"name": "Yaf_Session::__get",
					"description": "The __get purpose"
				},
				"yaf-session.getinstance": {
					"tokens": [
						"Yaf_Session::getInstance",
						"YafSession::getInstance",
						"getInstance",
						"::getInstance"
					],
					"id": "yaf-session.getinstance",
					"name": "Yaf_Session::getInstance",
					"description": "The getInstance purpose"
				},
				"yaf-session.has": {
					"tokens": [
						"Yaf_Session::has",
						"YafSession::has",
						"has",
						"::has"
					],
					"id": "yaf-session.has",
					"name": "Yaf_Session::has",
					"description": "The has purpose"
				},
				"yaf-session.isset": {
					"tokens": [
						"Yaf_Session::__isset",
						"YafSession::__isset",
						"__isset",
						"::__isset"
					],
					"id": "yaf-session.isset",
					"name": "Yaf_Session::__isset",
					"description": "The __isset purpose"
				},
				"yaf-session.key": {
					"tokens": [
						"Yaf_Session::key",
						"YafSession::key",
						"key",
						"::key"
					],
					"id": "yaf-session.key",
					"name": "Yaf_Session::key",
					"description": "The key purpose"
				},
				"yaf-session.next": {
					"tokens": [
						"Yaf_Session::next",
						"YafSession::next",
						"next",
						"::next"
					],
					"id": "yaf-session.next",
					"name": "Yaf_Session::next",
					"description": "The next purpose"
				},
				"yaf-session.offsetexists": {
					"tokens": [
						"Yaf_Session::offsetExists",
						"YafSession::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "yaf-session.offsetexists",
					"name": "Yaf_Session::offsetExists",
					"description": "The offsetExists purpose"
				},
				"yaf-session.offsetget": {
					"tokens": [
						"Yaf_Session::offsetGet",
						"YafSession::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "yaf-session.offsetget",
					"name": "Yaf_Session::offsetGet",
					"description": "The offsetGet purpose"
				},
				"yaf-session.offsetset": {
					"tokens": [
						"Yaf_Session::offsetSet",
						"YafSession::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "yaf-session.offsetset",
					"name": "Yaf_Session::offsetSet",
					"description": "The offsetSet purpose"
				},
				"yaf-session.offsetunset": {
					"tokens": [
						"Yaf_Session::offsetUnset",
						"YafSession::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "yaf-session.offsetunset",
					"name": "Yaf_Session::offsetUnset",
					"description": "The offsetUnset purpose"
				},
				"yaf-session.rewind": {
					"tokens": [
						"Yaf_Session::rewind",
						"YafSession::rewind",
						"rewind",
						"::rewind"
					],
					"id": "yaf-session.rewind",
					"name": "Yaf_Session::rewind",
					"description": "The rewind purpose"
				},
				"yaf-session.set": {
					"tokens": [
						"Yaf_Session::__set",
						"YafSession::__set",
						"__set",
						"::__set"
					],
					"id": "yaf-session.set",
					"name": "Yaf_Session::__set",
					"description": "The __set purpose"
				},
				"yaf-session.sleep": {
					"tokens": [
						"Yaf_Session::__sleep",
						"YafSession::__sleep",
						"__sleep",
						"::__sleep"
					],
					"id": "yaf-session.sleep",
					"name": "Yaf_Session::__sleep",
					"description": "The __sleep purpose"
				},
				"yaf-session.start": {
					"tokens": [
						"Yaf_Session::start",
						"YafSession::start",
						"start",
						"::start"
					],
					"id": "yaf-session.start",
					"name": "Yaf_Session::start",
					"description": "The start purpose"
				},
				"yaf-session.unset": {
					"tokens": [
						"Yaf_Session::__unset",
						"YafSession::__unset",
						"__unset",
						"::__unset"
					],
					"id": "yaf-session.unset",
					"name": "Yaf_Session::__unset",
					"description": "The __unset purpose"
				},
				"yaf-session.valid": {
					"tokens": [
						"Yaf_Session::valid",
						"YafSession::valid",
						"valid",
						"::valid"
					],
					"id": "yaf-session.valid",
					"name": "Yaf_Session::valid",
					"description": "The valid purpose"
				},
				"yaf-session.wakeup": {
					"tokens": [
						"Yaf_Session::__wakeup",
						"YafSession::__wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "yaf-session.wakeup",
					"name": "Yaf_Session::__wakeup",
					"description": "The __wakeup purpose"
				},
				"yaf-exception.construct": {
					"tokens": [
						"Yaf_Exception::__construct",
						"YafException::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yaf-exception.construct",
					"name": "Yaf_Exception::__construct",
					"description": "The __construct purpose"
				},
				"yaf-exception.getprevious": {
					"tokens": [
						"Yaf_Exception::getPrevious",
						"YafException::getPrevious",
						"getPrevious",
						"::getPrevious"
					],
					"id": "yaf-exception.getprevious",
					"name": "Yaf_Exception::getPrevious",
					"description": "The getPrevious purpose"
				},
				"function.is-tainted": {
					"tokens": [
						"is_tainted",
						"istainted"
					],
					"id": "function.is-tainted",
					"name": "is_tainted",
					"description": "Checks whether a string is tainted"
				},
				"function.taint": {
					"tokens": [
						"taint"
					],
					"id": "function.taint",
					"name": "taint",
					"description": "Taint a string"
				},
				"function.untaint": {
					"tokens": [
						"untaint"
					],
					"id": "function.untaint",
					"name": "untaint",
					"description": "Untaint strings"
				},
				"chdb.construct": {
					"tokens": [
						"chdb::__construct",
						"chdb::_construct",
						"__construct",
						"::__construct"
					],
					"id": "chdb.construct",
					"name": "chdb::__construct",
					"description": "Creates a chdb instance"
				},
				"chdb.get": {
					"tokens": [
						"chdb::get",
						"get",
						"::get"
					],
					"id": "chdb.get",
					"name": "chdb::get",
					"description": "Gets the value associated with a key"
				},
				"function.chdb-create": {
					"tokens": [
						"chdb_create",
						"chdbcreate"
					],
					"id": "function.chdb-create",
					"name": "chdb_create",
					"description": "Creates a chdb file"
				},
				"function.curl-close": {
					"tokens": [
						"curl_close",
						"curlclose"
					],
					"id": "function.curl-close",
					"name": "curl_close",
					"description": "Close a cURL session"
				},
				"function.curl-copy-handle": {
					"tokens": [
						"curl_copy_handle",
						"curlcopy_handle"
					],
					"id": "function.curl-copy-handle",
					"name": "curl_copy_handle",
					"description": "Copy a cURL handle along with all of its preferences"
				},
				"function.curl-errno": {
					"tokens": [
						"curl_errno",
						"curlerrno"
					],
					"id": "function.curl-errno",
					"name": "curl_errno",
					"description": "Return the last error number"
				},
				"function.curl-error": {
					"tokens": [
						"curl_error",
						"curlerror"
					],
					"id": "function.curl-error",
					"name": "curl_error",
					"description": "Return a string containing the last error for the current session"
				},
				"function.curl-escape": {
					"tokens": [
						"curl_escape",
						"curlescape"
					],
					"id": "function.curl-escape",
					"name": "curl_escape",
					"description": "URL encodes the given string"
				},
				"function.curl-exec": {
					"tokens": [
						"curl_exec",
						"curlexec"
					],
					"id": "function.curl-exec",
					"name": "curl_exec",
					"description": "Perform a cURL session"
				},
				"function.curl-file-create": {
					"tokens": [
						"curl_file_create",
						"curlfile_create"
					],
					"id": "function.curl-file-create",
					"name": "curl_file_create",
					"description": "Create a CURLFile object"
				},
				"function.curl-getinfo": {
					"tokens": [
						"curl_getinfo",
						"curlgetinfo"
					],
					"id": "function.curl-getinfo",
					"name": "curl_getinfo",
					"description": "Get information regarding a specific transfer"
				},
				"function.curl-init": {
					"tokens": [
						"curl_init",
						"curlinit"
					],
					"id": "function.curl-init",
					"name": "curl_init",
					"description": "Initialize a cURL session"
				},
				"function.curl-multi-add-handle": {
					"tokens": [
						"curl_multi_add_handle",
						"curlmulti_add_handle"
					],
					"id": "function.curl-multi-add-handle",
					"name": "curl_multi_add_handle",
					"description": "Add a normal cURL handle to a cURL multi handle"
				},
				"function.curl-multi-close": {
					"tokens": [
						"curl_multi_close",
						"curlmulti_close"
					],
					"id": "function.curl-multi-close",
					"name": "curl_multi_close",
					"description": "Close a set of cURL handles"
				},
				"function.curl-multi-exec": {
					"tokens": [
						"curl_multi_exec",
						"curlmulti_exec"
					],
					"id": "function.curl-multi-exec",
					"name": "curl_multi_exec",
					"description": "Run the sub-connections of the current cURL handle"
				},
				"function.curl-multi-getcontent": {
					"tokens": [
						"curl_multi_getcontent",
						"curlmulti_getcontent"
					],
					"id": "function.curl-multi-getcontent",
					"name": "curl_multi_getcontent",
					"description": "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set"
				},
				"function.curl-multi-info-read": {
					"tokens": [
						"curl_multi_info_read",
						"curlmulti_info_read"
					],
					"id": "function.curl-multi-info-read",
					"name": "curl_multi_info_read",
					"description": "Get information about the current transfers"
				},
				"function.curl-multi-init": {
					"tokens": [
						"curl_multi_init",
						"curlmulti_init"
					],
					"id": "function.curl-multi-init",
					"name": "curl_multi_init",
					"description": "Returns a new cURL multi handle"
				},
				"function.curl-multi-remove-handle": {
					"tokens": [
						"curl_multi_remove_handle",
						"curlmulti_remove_handle"
					],
					"id": "function.curl-multi-remove-handle",
					"name": "curl_multi_remove_handle",
					"description": "Remove a multi handle from a set of cURL handles"
				},
				"function.curl-multi-select": {
					"tokens": [
						"curl_multi_select",
						"curlmulti_select"
					],
					"id": "function.curl-multi-select",
					"name": "curl_multi_select",
					"description": "Wait for activity on any curl_multi connection"
				},
				"function.curl-multi-setopt": {
					"tokens": [
						"curl_multi_setopt",
						"curlmulti_setopt"
					],
					"id": "function.curl-multi-setopt",
					"name": "curl_multi_setopt",
					"description": "Set an option for the cURL multi handle"
				},
				"function.curl-multi-strerror": {
					"tokens": [
						"curl_multi_strerror",
						"curlmulti_strerror"
					],
					"id": "function.curl-multi-strerror",
					"name": "curl_multi_strerror",
					"description": "Return string describing error code"
				},
				"function.curl-pause": {
					"tokens": [
						"curl_pause",
						"curlpause"
					],
					"id": "function.curl-pause",
					"name": "curl_pause",
					"description": "Pause and unpause a connection"
				},
				"function.curl-reset": {
					"tokens": [
						"curl_reset",
						"curlreset"
					],
					"id": "function.curl-reset",
					"name": "curl_reset",
					"description": "Reset all options of a libcurl session handle"
				},
				"function.curl-setopt-array": {
					"tokens": [
						"curl_setopt_array",
						"curlsetopt_array"
					],
					"id": "function.curl-setopt-array",
					"name": "curl_setopt_array",
					"description": "Set multiple options for a cURL transfer"
				},
				"function.curl-setopt": {
					"tokens": [
						"curl_setopt",
						"curlsetopt"
					],
					"id": "function.curl-setopt",
					"name": "curl_setopt",
					"description": "Set an option for a cURL transfer"
				},
				"function.curl-share-close": {
					"tokens": [
						"curl_share_close",
						"curlshare_close"
					],
					"id": "function.curl-share-close",
					"name": "curl_share_close",
					"description": "Close a cURL share handle"
				},
				"function.curl-share-init": {
					"tokens": [
						"curl_share_init",
						"curlshare_init"
					],
					"id": "function.curl-share-init",
					"name": "curl_share_init",
					"description": "Initialize a cURL share handle"
				},
				"function.curl-share-setopt": {
					"tokens": [
						"curl_share_setopt",
						"curlshare_setopt"
					],
					"id": "function.curl-share-setopt",
					"name": "curl_share_setopt",
					"description": "Set an option for a cURL share handle."
				},
				"function.curl-strerror": {
					"tokens": [
						"curl_strerror",
						"curlstrerror"
					],
					"id": "function.curl-strerror",
					"name": "curl_strerror",
					"description": "Return string describing the given error code"
				},
				"function.curl-unescape": {
					"tokens": [
						"curl_unescape",
						"curlunescape"
					],
					"id": "function.curl-unescape",
					"name": "curl_unescape",
					"description": "Decodes the given URL encoded string"
				},
				"function.curl-version": {
					"tokens": [
						"curl_version",
						"curlversion"
					],
					"id": "function.curl-version",
					"name": "curl_version",
					"description": "Gets cURL version information"
				},
				"curlfile.construct": {
					"tokens": [
						"CURLFile::__construct",
						"CURLFile::_construct",
						"__construct",
						"::__construct"
					],
					"id": "curlfile.construct",
					"name": "CURLFile::__construct",
					"description": "Create a CURLFile object"
				},
				"curlfile.getfilename": {
					"tokens": [
						"CURLFile::getFilename",
						"getFilename",
						"::getFilename"
					],
					"id": "curlfile.getfilename",
					"name": "CURLFile::getFilename",
					"description": "Get file name"
				},
				"curlfile.getmimetype": {
					"tokens": [
						"CURLFile::getMimeType",
						"getMimeType",
						"::getMimeType"
					],
					"id": "curlfile.getmimetype",
					"name": "CURLFile::getMimeType",
					"description": "Get MIME type"
				},
				"curlfile.getpostfilename": {
					"tokens": [
						"CURLFile::getPostFilename",
						"getPostFilename",
						"::getPostFilename"
					],
					"id": "curlfile.getpostfilename",
					"name": "CURLFile::getPostFilename",
					"description": "Get file name for POST"
				},
				"curlfile.setmimetype": {
					"tokens": [
						"CURLFile::setMimeType",
						"setMimeType",
						"::setMimeType"
					],
					"id": "curlfile.setmimetype",
					"name": "CURLFile::setMimeType",
					"description": "Set MIME type"
				},
				"curlfile.setpostfilename": {
					"tokens": [
						"CURLFile::setPostFilename",
						"setPostFilename",
						"::setPostFilename"
					],
					"id": "curlfile.setpostfilename",
					"name": "CURLFile::setPostFilename",
					"description": "Set file name for POST"
				},
				"curlfile.wakeup": {
					"tokens": [
						"CURLFile::__wakeup",
						"CURLFile::_wakeup",
						"__wakeup",
						"::__wakeup"
					],
					"id": "curlfile.wakeup",
					"name": "CURLFile::__wakeup",
					"description": "Unserialization handler"
				},
				"event.add": {
					"tokens": [
						"Event::add",
						"add",
						"::add"
					],
					"id": "event.add",
					"name": "Event::add",
					"description": "Makes event pending"
				},
				"event.addsignal": {
					"tokens": [
						"Event::addSignal",
						"addSignal",
						"::addSignal"
					],
					"id": "event.addsignal",
					"name": "Event::addSignal",
					"description": "Makes signal event pending"
				},
				"event.addtimer": {
					"tokens": [
						"Event::addTimer",
						"addTimer",
						"::addTimer"
					],
					"id": "event.addtimer",
					"name": "Event::addTimer",
					"description": "Makes timer event pending"
				},
				"event.construct": {
					"tokens": [
						"Event::__construct",
						"Event::_construct",
						"__construct",
						"::__construct"
					],
					"id": "event.construct",
					"name": "Event::__construct",
					"description": "Constructs Event object"
				},
				"event.del": {
					"tokens": [
						"Event::del",
						"del",
						"::del"
					],
					"id": "event.del",
					"name": "Event::del",
					"description": "Makes event non-pending"
				},
				"event.delsignal": {
					"tokens": [
						"Event::delSignal",
						"delSignal",
						"::delSignal"
					],
					"id": "event.delsignal",
					"name": "Event::delSignal",
					"description": "Makes signal event non-pending"
				},
				"event.deltimer": {
					"tokens": [
						"Event::delTimer",
						"delTimer",
						"::delTimer"
					],
					"id": "event.deltimer",
					"name": "Event::delTimer",
					"description": "Makes timer event non-pending"
				},
				"event.free": {
					"tokens": [
						"Event::free",
						"free",
						"::free"
					],
					"id": "event.free",
					"name": "Event::free",
					"description": "Make event non-pending and free resources allocated for this\n  event."
				},
				"event.getsupportedmethods": {
					"tokens": [
						"Event::getSupportedMethods",
						"getSupportedMethods",
						"::getSupportedMethods"
					],
					"id": "event.getsupportedmethods",
					"name": "Event::getSupportedMethods",
					"description": "Returns array with of the names of the methods supported in this version of Libevent"
				},
				"event.pending": {
					"tokens": [
						"Event::pending",
						"pending",
						"::pending"
					],
					"id": "event.pending",
					"name": "Event::pending",
					"description": "Detects whether event is pending or scheduled"
				},
				"event.set": {
					"tokens": [
						"Event::set",
						"set",
						"::set"
					],
					"id": "event.set",
					"name": "Event::set",
					"description": "Re-configures event"
				},
				"event.setpriority": {
					"tokens": [
						"Event::setPriority",
						"setPriority",
						"::setPriority"
					],
					"id": "event.setpriority",
					"name": "Event::setPriority",
					"description": "Set event priority"
				},
				"event.settimer": {
					"tokens": [
						"Event::setTimer",
						"setTimer",
						"::setTimer"
					],
					"id": "event.settimer",
					"name": "Event::setTimer",
					"description": "Re-configures timer event"
				},
				"event.signal": {
					"tokens": [
						"Event::signal",
						"signal",
						"::signal"
					],
					"id": "event.signal",
					"name": "Event::signal",
					"description": "Constructs signal event object"
				},
				"event.timer": {
					"tokens": [
						"Event::timer",
						"timer",
						"::timer"
					],
					"id": "event.timer",
					"name": "Event::timer",
					"description": "Constructs timer event object"
				},
				"eventbase.construct": {
					"tokens": [
						"EventBase::__construct",
						"EventBase::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventbase.construct",
					"name": "EventBase::__construct",
					"description": "Constructs EventBase object"
				},
				"eventbase.dispatch": {
					"tokens": [
						"EventBase::dispatch",
						"dispatch",
						"::dispatch"
					],
					"id": "eventbase.dispatch",
					"name": "EventBase::dispatch",
					"description": "Dispatch pending events"
				},
				"eventbase.exit": {
					"tokens": [
						"EventBase::exit",
						"exit",
						"::exit"
					],
					"id": "eventbase.exit",
					"name": "EventBase::exit",
					"description": "Stop dispatching events"
				},
				"eventbase.free": {
					"tokens": [
						"EventBase::free",
						"free",
						"::free"
					],
					"id": "eventbase.free",
					"name": "EventBase::free",
					"description": "Free resources allocated for this event base"
				},
				"eventbase.getfeatures": {
					"tokens": [
						"EventBase::getFeatures",
						"getFeatures",
						"::getFeatures"
					],
					"id": "eventbase.getfeatures",
					"name": "EventBase::getFeatures",
					"description": "Returns bitmask of features supported"
				},
				"eventbase.getmethod": {
					"tokens": [
						"EventBase::getMethod",
						"getMethod",
						"::getMethod"
					],
					"id": "eventbase.getmethod",
					"name": "EventBase::getMethod",
					"description": "Returns event method in use"
				},
				"eventbase.gettimeofdaycached": {
					"tokens": [
						"EventBase::getTimeOfDayCached",
						"getTimeOfDayCached",
						"::getTimeOfDayCached"
					],
					"id": "eventbase.gettimeofdaycached",
					"name": "EventBase::getTimeOfDayCached",
					"description": "Returns the current event base time"
				},
				"eventbase.gotexit": {
					"tokens": [
						"EventBase::gotExit",
						"gotExit",
						"::gotExit"
					],
					"id": "eventbase.gotexit",
					"name": "EventBase::gotExit",
					"description": "Checks if the event loop was told to exit"
				},
				"eventbase.gotstop": {
					"tokens": [
						"EventBase::gotStop",
						"gotStop",
						"::gotStop"
					],
					"id": "eventbase.gotstop",
					"name": "EventBase::gotStop",
					"description": "Checks if the event loop was told to exit"
				},
				"eventbase.loop": {
					"tokens": [
						"EventBase::loop",
						"loop",
						"::loop"
					],
					"id": "eventbase.loop",
					"name": "EventBase::loop",
					"description": "Dispatch pending events"
				},
				"eventbase.priorityinit": {
					"tokens": [
						"EventBase::priorityInit",
						"priorityInit",
						"::priorityInit"
					],
					"id": "eventbase.priorityinit",
					"name": "EventBase::priorityInit",
					"description": "Sets number of priorities per event base"
				},
				"eventbase.reinit": {
					"tokens": [
						"EventBase::reInit",
						"reInit",
						"::reInit"
					],
					"id": "eventbase.reinit",
					"name": "EventBase::reInit",
					"description": "Re-initialize event base(after a fork)."
				},
				"eventbase.stop": {
					"tokens": [
						"EventBase::stop",
						"stop",
						"::stop"
					],
					"id": "eventbase.stop",
					"name": "EventBase::stop",
					"description": "Tells event_base to stop dispatching events"
				},
				"eventbuffer.add": {
					"tokens": [
						"EventBuffer::add",
						"add",
						"::add"
					],
					"id": "eventbuffer.add",
					"name": "EventBuffer::add",
					"description": "Append data to the end of an event buffer"
				},
				"eventbuffer.addbuffer": {
					"tokens": [
						"EventBuffer::addBuffer",
						"addBuffer",
						"::addBuffer"
					],
					"id": "eventbuffer.addbuffer",
					"name": "EventBuffer::addBuffer",
					"description": "Move all data from a buffer provided to the current instance of EventBuffer"
				},
				"eventbuffer.appendfrom": {
					"tokens": [
						"EventBuffer::appendFrom",
						"appendFrom",
						"::appendFrom"
					],
					"id": "eventbuffer.appendfrom",
					"name": "EventBuffer::appendFrom",
					"description": "Moves the specified number of bytes from a source buffer to the\n  end of the current buffer"
				},
				"eventbuffer.construct": {
					"tokens": [
						"EventBuffer::__construct",
						"EventBuffer::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventbuffer.construct",
					"name": "EventBuffer::__construct",
					"description": "Constructs EventBuffer object"
				},
				"eventbuffer.copyout": {
					"tokens": [
						"EventBuffer::copyout",
						"copyout",
						"::copyout"
					],
					"id": "eventbuffer.copyout",
					"name": "EventBuffer::copyout",
					"description": "Copies out specified number of bytes from the front of the buffer"
				},
				"eventbuffer.drain": {
					"tokens": [
						"EventBuffer::drain",
						"drain",
						"::drain"
					],
					"id": "eventbuffer.drain",
					"name": "EventBuffer::drain",
					"description": "Removes specified number of bytes from the front of the buffer\n  without copying it anywhere"
				},
				"eventbuffer.enablelocking": {
					"tokens": [
						"EventBuffer::enableLocking",
						"enableLocking",
						"::enableLocking"
					],
					"id": "eventbuffer.enablelocking",
					"name": "EventBuffer::enableLocking",
					"description": "Description"
				},
				"eventbuffer.expand": {
					"tokens": [
						"EventBuffer::expand",
						"expand",
						"::expand"
					],
					"id": "eventbuffer.expand",
					"name": "EventBuffer::expand",
					"description": "Reserves space in buffer"
				},
				"eventbuffer.freeze": {
					"tokens": [
						"EventBuffer::freeze",
						"freeze",
						"::freeze"
					],
					"id": "eventbuffer.freeze",
					"name": "EventBuffer::freeze",
					"description": "Prevent calls that modify an event buffer from succeeding"
				},
				"eventbuffer.lock": {
					"tokens": [
						"EventBuffer::lock",
						"lock",
						"::lock"
					],
					"id": "eventbuffer.lock",
					"name": "EventBuffer::lock",
					"description": "Acquires a lock on buffer"
				},
				"eventbuffer.prepend": {
					"tokens": [
						"EventBuffer::prepend",
						"prepend",
						"::prepend"
					],
					"id": "eventbuffer.prepend",
					"name": "EventBuffer::prepend",
					"description": "Prepend data to the front of the buffer"
				},
				"eventbuffer.prependbuffer": {
					"tokens": [
						"EventBuffer::prependBuffer",
						"prependBuffer",
						"::prependBuffer"
					],
					"id": "eventbuffer.prependbuffer",
					"name": "EventBuffer::prependBuffer",
					"description": "Moves all data from source buffer to the front of current buffer"
				},
				"eventbuffer.pullup": {
					"tokens": [
						"EventBuffer::pullup",
						"pullup",
						"::pullup"
					],
					"id": "eventbuffer.pullup",
					"name": "EventBuffer::pullup",
					"description": "Linearizes data within buffer\n  and returns it's contents as a string"
				},
				"eventbuffer.read": {
					"tokens": [
						"EventBuffer::read",
						"read",
						"::read"
					],
					"id": "eventbuffer.read",
					"name": "EventBuffer::read",
					"description": "Read data from an evbuffer and drain the bytes read"
				},
				"eventbuffer.readfrom": {
					"tokens": [
						"EventBuffer::readFrom",
						"readFrom",
						"::readFrom"
					],
					"id": "eventbuffer.readfrom",
					"name": "EventBuffer::readFrom",
					"description": "Read data from a file onto the end of the buffer"
				},
				"eventbuffer.readline": {
					"tokens": [
						"EventBuffer::readLine",
						"readLine",
						"::readLine"
					],
					"id": "eventbuffer.readline",
					"name": "EventBuffer::readLine",
					"description": "Extracts a line from the front of the buffer"
				},
				"eventbuffer.search": {
					"tokens": [
						"EventBuffer::search",
						"search",
						"::search"
					],
					"id": "eventbuffer.search",
					"name": "EventBuffer::search",
					"description": "Scans the buffer for an occurrence of a string"
				},
				"eventbuffer.searcheol": {
					"tokens": [
						"EventBuffer::searchEol",
						"searchEol",
						"::searchEol"
					],
					"id": "eventbuffer.searcheol",
					"name": "EventBuffer::searchEol",
					"description": "Scans the buffer for an occurrence of an end of line"
				},
				"eventbuffer.substr": {
					"tokens": [
						"EventBuffer::substr",
						"substr",
						"::substr"
					],
					"id": "eventbuffer.substr",
					"name": "EventBuffer::substr",
					"description": "Substracts a portion of the buffer data"
				},
				"eventbuffer.unfreeze": {
					"tokens": [
						"EventBuffer::unfreeze",
						"unfreeze",
						"::unfreeze"
					],
					"id": "eventbuffer.unfreeze",
					"name": "EventBuffer::unfreeze",
					"description": "Re-enable calls that modify an event buffer"
				},
				"eventbuffer.unlock": {
					"tokens": [
						"EventBuffer::unlock",
						"unlock",
						"::unlock"
					],
					"id": "eventbuffer.unlock",
					"name": "EventBuffer::unlock",
					"description": "Releases lock acquired by EventBuffer::lock"
				},
				"eventbuffer.write": {
					"tokens": [
						"EventBuffer::write",
						"write",
						"::write"
					],
					"id": "eventbuffer.write",
					"name": "EventBuffer::write",
					"description": "Write contents of the buffer to a file or socket"
				},
				"eventbufferevent.close": {
					"tokens": [
						"EventBufferEvent::close",
						"close",
						"::close"
					],
					"id": "eventbufferevent.close",
					"name": "EventBufferEvent::close",
					"description": "Closes file descriptor associated with the current buffer event"
				},
				"eventbufferevent.connect": {
					"tokens": [
						"EventBufferEvent::connect",
						"connect",
						"::connect"
					],
					"id": "eventbufferevent.connect",
					"name": "EventBufferEvent::connect",
					"description": "Connect buffer event's file descriptor to given address or\n  UNIX socket"
				},
				"eventbufferevent.connecthost": {
					"tokens": [
						"EventBufferEvent::connectHost",
						"connectHost",
						"::connectHost"
					],
					"id": "eventbufferevent.connecthost",
					"name": "EventBufferEvent::connectHost",
					"description": "Connects to a hostname with optionally asyncronous DNS resolving"
				},
				"eventbufferevent.construct": {
					"tokens": [
						"EventBufferEvent::__construct",
						"EventBufferEvent::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventbufferevent.construct",
					"name": "EventBufferEvent::__construct",
					"description": "Constructs EventBufferEvent object"
				},
				"eventbufferevent.createpair": {
					"tokens": [
						"EventBufferEvent::createPair",
						"createPair",
						"::createPair"
					],
					"id": "eventbufferevent.createpair",
					"name": "EventBufferEvent::createPair",
					"description": "Creates two buffer events connected to each other"
				},
				"eventbufferevent.disable": {
					"tokens": [
						"EventBufferEvent::disable",
						"disable",
						"::disable"
					],
					"id": "eventbufferevent.disable",
					"name": "EventBufferEvent::disable",
					"description": "Disable events read, write, or both on a buffer event."
				},
				"eventbufferevent.enable": {
					"tokens": [
						"EventBufferEvent::enable",
						"enable",
						"::enable"
					],
					"id": "eventbufferevent.enable",
					"name": "EventBufferEvent::enable",
					"description": "Enable events read, write, or both on a buffer event."
				},
				"eventbufferevent.free": {
					"tokens": [
						"EventBufferEvent::free",
						"free",
						"::free"
					],
					"id": "eventbufferevent.free",
					"name": "EventBufferEvent::free",
					"description": "Free a buffer event"
				},
				"eventbufferevent.getdnserrorstring": {
					"tokens": [
						"EventBufferEvent::getDnsErrorString",
						"getDnsErrorString",
						"::getDnsErrorString"
					],
					"id": "eventbufferevent.getdnserrorstring",
					"name": "EventBufferEvent::getDnsErrorString",
					"description": "Returns string describing the last failed DNS lookup attempt"
				},
				"eventbufferevent.getenabled": {
					"tokens": [
						"EventBufferEvent::getEnabled",
						"getEnabled",
						"::getEnabled"
					],
					"id": "eventbufferevent.getenabled",
					"name": "EventBufferEvent::getEnabled",
					"description": "Returns bitmask of events currently enabled on the buffer event"
				},
				"eventbufferevent.getinput": {
					"tokens": [
						"EventBufferEvent::getInput",
						"getInput",
						"::getInput"
					],
					"id": "eventbufferevent.getinput",
					"name": "EventBufferEvent::getInput",
					"description": "Returns underlying input buffer associated with current buffer\n  event"
				},
				"eventbufferevent.getoutput": {
					"tokens": [
						"EventBufferEvent::getOutput",
						"getOutput",
						"::getOutput"
					],
					"id": "eventbufferevent.getoutput",
					"name": "EventBufferEvent::getOutput",
					"description": "Returns underlying output buffer associated with current buffer\n  event"
				},
				"eventbufferevent.read": {
					"tokens": [
						"EventBufferEvent::read",
						"read",
						"::read"
					],
					"id": "eventbufferevent.read",
					"name": "EventBufferEvent::read",
					"description": "Read buffer's data"
				},
				"eventbufferevent.readbuffer": {
					"tokens": [
						"EventBufferEvent::readBuffer",
						"readBuffer",
						"::readBuffer"
					],
					"id": "eventbufferevent.readbuffer",
					"name": "EventBufferEvent::readBuffer",
					"description": "Drains the entire contents of the input buffer and places them into buf"
				},
				"eventbufferevent.setcallbacks": {
					"tokens": [
						"EventBufferEvent::setCallbacks",
						"setCallbacks",
						"::setCallbacks"
					],
					"id": "eventbufferevent.setcallbacks",
					"name": "EventBufferEvent::setCallbacks",
					"description": "Assigns read, write and event(status) callbacks"
				},
				"eventbufferevent.setpriority": {
					"tokens": [
						"EventBufferEvent::setPriority",
						"setPriority",
						"::setPriority"
					],
					"id": "eventbufferevent.setpriority",
					"name": "EventBufferEvent::setPriority",
					"description": "Assign a priority to a bufferevent"
				},
				"eventbufferevent.settimeouts": {
					"tokens": [
						"EventBufferEvent::setTimeouts",
						"setTimeouts",
						"::setTimeouts"
					],
					"id": "eventbufferevent.settimeouts",
					"name": "EventBufferEvent::setTimeouts",
					"description": "Set the read and write timeout for a buffer event"
				},
				"eventbufferevent.setwatermark": {
					"tokens": [
						"EventBufferEvent::setWatermark",
						"setWatermark",
						"::setWatermark"
					],
					"id": "eventbufferevent.setwatermark",
					"name": "EventBufferEvent::setWatermark",
					"description": "Adjusts read and/or write watermarks"
				},
				"eventbufferevent.sslerror": {
					"tokens": [
						"EventBufferEvent::sslError",
						"sslError",
						"::sslError"
					],
					"id": "eventbufferevent.sslerror",
					"name": "EventBufferEvent::sslError",
					"description": "Returns most recent OpenSSL error reported on the buffer event"
				},
				"eventbufferevent.sslfilter": {
					"tokens": [
						"EventBufferEvent::sslFilter",
						"sslFilter",
						"::sslFilter"
					],
					"id": "eventbufferevent.sslfilter",
					"name": "EventBufferEvent::sslFilter",
					"description": "Create a new SSL buffer event to send its data over another buffer event"
				},
				"eventbufferevent.sslgetcipherinfo": {
					"tokens": [
						"EventBufferEvent::sslGetCipherInfo",
						"sslGetCipherInfo",
						"::sslGetCipherInfo"
					],
					"id": "eventbufferevent.sslgetcipherinfo",
					"name": "EventBufferEvent::sslGetCipherInfo",
					"description": "Returns a textual description of the cipher."
				},
				"eventbufferevent.sslgetciphername": {
					"tokens": [
						"EventBufferEvent::sslGetCipherName",
						"sslGetCipherName",
						"::sslGetCipherName"
					],
					"id": "eventbufferevent.sslgetciphername",
					"name": "EventBufferEvent::sslGetCipherName",
					"description": "Returns the current cipher name of the SSL connection."
				},
				"eventbufferevent.sslgetcipherversion": {
					"tokens": [
						"EventBufferEvent::sslGetCipherVersion",
						"sslGetCipherVersion",
						"::sslGetCipherVersion"
					],
					"id": "eventbufferevent.sslgetcipherversion",
					"name": "EventBufferEvent::sslGetCipherVersion",
					"description": "Returns version of cipher used by current SSL connection."
				},
				"eventbufferevent.sslgetprotocol": {
					"tokens": [
						"EventBufferEvent::sslGetProtocol",
						"sslGetProtocol",
						"::sslGetProtocol"
					],
					"id": "eventbufferevent.sslgetprotocol",
					"name": "EventBufferEvent::sslGetProtocol",
					"description": "Returns the name of the protocol used for current SSL connection."
				},
				"eventbufferevent.sslrenegotiate": {
					"tokens": [
						"EventBufferEvent::sslRenegotiate",
						"sslRenegotiate",
						"::sslRenegotiate"
					],
					"id": "eventbufferevent.sslrenegotiate",
					"name": "EventBufferEvent::sslRenegotiate",
					"description": "Tells a bufferevent to begin SSL renegotiation."
				},
				"eventbufferevent.sslsocket": {
					"tokens": [
						"EventBufferEvent::sslSocket",
						"sslSocket",
						"::sslSocket"
					],
					"id": "eventbufferevent.sslsocket",
					"name": "EventBufferEvent::sslSocket",
					"description": "Creates a new SSL buffer event to send its data over an SSL on a socket"
				},
				"eventbufferevent.write": {
					"tokens": [
						"EventBufferEvent::write",
						"write",
						"::write"
					],
					"id": "eventbufferevent.write",
					"name": "EventBufferEvent::write",
					"description": "Adds data to a buffer event's output buffer"
				},
				"eventbufferevent.writebuffer": {
					"tokens": [
						"EventBufferEvent::writeBuffer",
						"writeBuffer",
						"::writeBuffer"
					],
					"id": "eventbufferevent.writebuffer",
					"name": "EventBufferEvent::writeBuffer",
					"description": "Adds contents of the entire buffer to a buffer event's output\n  buffer"
				},
				"eventconfig.avoidmethod": {
					"tokens": [
						"EventConfig::avoidMethod",
						"avoidMethod",
						"::avoidMethod"
					],
					"id": "eventconfig.avoidmethod",
					"name": "EventConfig::avoidMethod",
					"description": "Tells libevent to avoid specific event method"
				},
				"eventconfig.construct": {
					"tokens": [
						"EventConfig::__construct",
						"EventConfig::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventconfig.construct",
					"name": "EventConfig::__construct",
					"description": "Constructs EventConfig object"
				},
				"eventconfig.requirefeatures": {
					"tokens": [
						"EventConfig::requireFeatures",
						"requireFeatures",
						"::requireFeatures"
					],
					"id": "eventconfig.requirefeatures",
					"name": "EventConfig::requireFeatures",
					"description": "Enters a required event method feature that the application demands"
				},
				"eventconfig.setmaxdispatchinterval": {
					"tokens": [
						"EventConfig::setMaxDispatchInterval",
						"setMaxDispatchInterval",
						"::setMaxDispatchInterval"
					],
					"id": "eventconfig.setmaxdispatchinterval",
					"name": "EventConfig::setMaxDispatchInterval",
					"description": "Prevents priority inversion"
				},
				"eventdnsbase.addnameserverip": {
					"tokens": [
						"EventDnsBase::addNameserverIp",
						"addNameserverIp",
						"::addNameserverIp"
					],
					"id": "eventdnsbase.addnameserverip",
					"name": "EventDnsBase::addNameserverIp",
					"description": "Adds a nameserver to the DNS base"
				},
				"eventdnsbase.addsearch": {
					"tokens": [
						"EventDnsBase::addSearch",
						"addSearch",
						"::addSearch"
					],
					"id": "eventdnsbase.addsearch",
					"name": "EventDnsBase::addSearch",
					"description": "Adds a domain to the list of search domains"
				},
				"eventdnsbase.clearsearch": {
					"tokens": [
						"EventDnsBase::clearSearch",
						"clearSearch",
						"::clearSearch"
					],
					"id": "eventdnsbase.clearsearch",
					"name": "EventDnsBase::clearSearch",
					"description": "Removes all current search suffixes"
				},
				"eventdnsbase.construct": {
					"tokens": [
						"EventDnsBase::__construct",
						"EventDnsBase::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventdnsbase.construct",
					"name": "EventDnsBase::__construct",
					"description": "Constructs EventDnsBase object"
				},
				"eventdnsbase.countnameservers": {
					"tokens": [
						"EventDnsBase::countNameservers",
						"countNameservers",
						"::countNameservers"
					],
					"id": "eventdnsbase.countnameservers",
					"name": "EventDnsBase::countNameservers",
					"description": "Gets the number of configured nameservers"
				},
				"eventdnsbase.loadhosts": {
					"tokens": [
						"EventDnsBase::loadHosts",
						"loadHosts",
						"::loadHosts"
					],
					"id": "eventdnsbase.loadhosts",
					"name": "EventDnsBase::loadHosts",
					"description": "Loads a hosts file (in the same format as /etc/hosts) from hosts file"
				},
				"eventdnsbase.parseresolvconf": {
					"tokens": [
						"EventDnsBase::parseResolvConf",
						"parseResolvConf",
						"::parseResolvConf"
					],
					"id": "eventdnsbase.parseresolvconf",
					"name": "EventDnsBase::parseResolvConf",
					"description": "Scans the resolv.conf-formatted file"
				},
				"eventdnsbase.setoption": {
					"tokens": [
						"EventDnsBase::setOption",
						"setOption",
						"::setOption"
					],
					"id": "eventdnsbase.setoption",
					"name": "EventDnsBase::setOption",
					"description": "Set the value of a configuration option"
				},
				"eventdnsbase.setsearchndots": {
					"tokens": [
						"EventDnsBase::setSearchNdots",
						"setSearchNdots",
						"::setSearchNdots"
					],
					"id": "eventdnsbase.setsearchndots",
					"name": "EventDnsBase::setSearchNdots",
					"description": "Set the 'ndots' parameter for searches"
				},
				"eventhttp.accept": {
					"tokens": [
						"EventHttp::accept",
						"accept",
						"::accept"
					],
					"id": "eventhttp.accept",
					"name": "EventHttp::accept",
					"description": "Makes an HTTP server accept connections on the specified socket stream or resource"
				},
				"eventhttp.addserveralias": {
					"tokens": [
						"EventHttp::addServerAlias",
						"addServerAlias",
						"::addServerAlias"
					],
					"id": "eventhttp.addserveralias",
					"name": "EventHttp::addServerAlias",
					"description": "Adds a server alias to the HTTP server object"
				},
				"eventhttp.bind": {
					"tokens": [
						"EventHttp::bind",
						"bind",
						"::bind"
					],
					"id": "eventhttp.bind",
					"name": "EventHttp::bind",
					"description": "Binds an HTTP server on the specified address and port"
				},
				"eventhttp.construct": {
					"tokens": [
						"EventHttp::__construct",
						"EventHttp::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventhttp.construct",
					"name": "EventHttp::__construct",
					"description": "Constructs EventHttp object(the HTTP server)"
				},
				"eventhttp.removeserveralias": {
					"tokens": [
						"EventHttp::removeServerAlias",
						"removeServerAlias",
						"::removeServerAlias"
					],
					"id": "eventhttp.removeserveralias",
					"name": "EventHttp::removeServerAlias",
					"description": "Removes server alias"
				},
				"eventhttp.setallowedmethods": {
					"tokens": [
						"EventHttp::setAllowedMethods",
						"setAllowedMethods",
						"::setAllowedMethods"
					],
					"id": "eventhttp.setallowedmethods",
					"name": "EventHttp::setAllowedMethods",
					"description": "Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks"
				},
				"eventhttp.setcallback": {
					"tokens": [
						"EventHttp::setCallback",
						"setCallback",
						"::setCallback"
					],
					"id": "eventhttp.setcallback",
					"name": "EventHttp::setCallback",
					"description": "Sets a callback for specified URI"
				},
				"eventhttp.setdefaultcallback": {
					"tokens": [
						"EventHttp::setDefaultCallback",
						"setDefaultCallback",
						"::setDefaultCallback"
					],
					"id": "eventhttp.setdefaultcallback",
					"name": "EventHttp::setDefaultCallback",
					"description": "Sets default callback to handle requests that are not caught by specific callbacks"
				},
				"eventhttp.setmaxbodysize": {
					"tokens": [
						"EventHttp::setMaxBodySize",
						"setMaxBodySize",
						"::setMaxBodySize"
					],
					"id": "eventhttp.setmaxbodysize",
					"name": "EventHttp::setMaxBodySize",
					"description": "Sets maximum request body size"
				},
				"eventhttp.setmaxheaderssize": {
					"tokens": [
						"EventHttp::setMaxHeadersSize",
						"setMaxHeadersSize",
						"::setMaxHeadersSize"
					],
					"id": "eventhttp.setmaxheaderssize",
					"name": "EventHttp::setMaxHeadersSize",
					"description": "Sets maximum HTTP header size"
				},
				"eventhttp.settimeout": {
					"tokens": [
						"EventHttp::setTimeout",
						"setTimeout",
						"::setTimeout"
					],
					"id": "eventhttp.settimeout",
					"name": "EventHttp::setTimeout",
					"description": "Sets the timeout for an HTTP request"
				},
				"eventhttpconnection.construct": {
					"tokens": [
						"EventHttpConnection::__construct",
						"EventHttpConnection::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventhttpconnection.construct",
					"name": "EventHttpConnection::__construct",
					"description": "Constructs EventHttpConnection object"
				},
				"eventhttpconnection.getbase": {
					"tokens": [
						"EventHttpConnection::getBase",
						"getBase",
						"::getBase"
					],
					"id": "eventhttpconnection.getbase",
					"name": "EventHttpConnection::getBase",
					"description": "Returns event base associated with the connection"
				},
				"eventhttpconnection.getpeer": {
					"tokens": [
						"EventHttpConnection::getPeer",
						"getPeer",
						"::getPeer"
					],
					"id": "eventhttpconnection.getpeer",
					"name": "EventHttpConnection::getPeer",
					"description": "Gets the remote address and port associated with the connection"
				},
				"eventhttpconnection.makerequest": {
					"tokens": [
						"EventHttpConnection::makeRequest",
						"makeRequest",
						"::makeRequest"
					],
					"id": "eventhttpconnection.makerequest",
					"name": "EventHttpConnection::makeRequest",
					"description": "Makes an HTTP request over the specified connection"
				},
				"eventhttpconnection.setclosecallback": {
					"tokens": [
						"EventHttpConnection::setCloseCallback",
						"setCloseCallback",
						"::setCloseCallback"
					],
					"id": "eventhttpconnection.setclosecallback",
					"name": "EventHttpConnection::setCloseCallback",
					"description": "Set callback for connection close"
				},
				"eventhttpconnection.setlocaladdress": {
					"tokens": [
						"EventHttpConnection::setLocalAddress",
						"setLocalAddress",
						"::setLocalAddress"
					],
					"id": "eventhttpconnection.setlocaladdress",
					"name": "EventHttpConnection::setLocalAddress",
					"description": "Sets the IP address from which HTTP connections are made"
				},
				"eventhttpconnection.setlocalport": {
					"tokens": [
						"EventHttpConnection::setLocalPort",
						"setLocalPort",
						"::setLocalPort"
					],
					"id": "eventhttpconnection.setlocalport",
					"name": "EventHttpConnection::setLocalPort",
					"description": "Sets the local port from which connections are made"
				},
				"eventhttpconnection.setmaxbodysize": {
					"tokens": [
						"EventHttpConnection::setMaxBodySize",
						"setMaxBodySize",
						"::setMaxBodySize"
					],
					"id": "eventhttpconnection.setmaxbodysize",
					"name": "EventHttpConnection::setMaxBodySize",
					"description": "Sets maximum body size for the connection"
				},
				"eventhttpconnection.setmaxheaderssize": {
					"tokens": [
						"EventHttpConnection::setMaxHeadersSize",
						"setMaxHeadersSize",
						"::setMaxHeadersSize"
					],
					"id": "eventhttpconnection.setmaxheaderssize",
					"name": "EventHttpConnection::setMaxHeadersSize",
					"description": "Sets maximum header size"
				},
				"eventhttpconnection.setretries": {
					"tokens": [
						"EventHttpConnection::setRetries",
						"setRetries",
						"::setRetries"
					],
					"id": "eventhttpconnection.setretries",
					"name": "EventHttpConnection::setRetries",
					"description": "Sets the retry limit for the connection"
				},
				"eventhttpconnection.settimeout": {
					"tokens": [
						"EventHttpConnection::setTimeout",
						"setTimeout",
						"::setTimeout"
					],
					"id": "eventhttpconnection.settimeout",
					"name": "EventHttpConnection::setTimeout",
					"description": "Sets the timeout for the connection"
				},
				"eventhttprequest.addheader": {
					"tokens": [
						"EventHttpRequest::addHeader",
						"addHeader",
						"::addHeader"
					],
					"id": "eventhttprequest.addheader",
					"name": "EventHttpRequest::addHeader",
					"description": "Adds an HTTP header to the headers of the request"
				},
				"eventhttprequest.cancel": {
					"tokens": [
						"EventHttpRequest::cancel",
						"cancel",
						"::cancel"
					],
					"id": "eventhttprequest.cancel",
					"name": "EventHttpRequest::cancel",
					"description": "Cancels a pending HTTP request"
				},
				"eventhttprequest.clearheaders": {
					"tokens": [
						"EventHttpRequest::clearHeaders",
						"clearHeaders",
						"::clearHeaders"
					],
					"id": "eventhttprequest.clearheaders",
					"name": "EventHttpRequest::clearHeaders",
					"description": "Removes all output headers from the header list of the request"
				},
				"eventhttprequest.closeconnection": {
					"tokens": [
						"EventHttpRequest::closeConnection",
						"closeConnection",
						"::closeConnection"
					],
					"id": "eventhttprequest.closeconnection",
					"name": "EventHttpRequest::closeConnection",
					"description": "Closes associated HTTP connection"
				},
				"eventhttprequest.construct": {
					"tokens": [
						"EventHttpRequest::__construct",
						"EventHttpRequest::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventhttprequest.construct",
					"name": "EventHttpRequest::__construct",
					"description": "Constructs EventHttpRequest object"
				},
				"eventhttprequest.findheader": {
					"tokens": [
						"EventHttpRequest::findHeader",
						"findHeader",
						"::findHeader"
					],
					"id": "eventhttprequest.findheader",
					"name": "EventHttpRequest::findHeader",
					"description": "Finds the value belonging a header"
				},
				"eventhttprequest.free": {
					"tokens": [
						"EventHttpRequest::free",
						"free",
						"::free"
					],
					"id": "eventhttprequest.free",
					"name": "EventHttpRequest::free",
					"description": "Frees the object and removes associated events"
				},
				"eventhttprequest.getbufferevent": {
					"tokens": [
						"EventHttpRequest::getBufferEvent",
						"getBufferEvent",
						"::getBufferEvent"
					],
					"id": "eventhttprequest.getbufferevent",
					"name": "EventHttpRequest::getBufferEvent",
					"description": "Returns EventBufferEvent object"
				},
				"eventhttprequest.getcommand": {
					"tokens": [
						"EventHttpRequest::getCommand",
						"getCommand",
						"::getCommand"
					],
					"id": "eventhttprequest.getcommand",
					"name": "EventHttpRequest::getCommand",
					"description": "Returns the request command(method)"
				},
				"eventhttprequest.getconnection": {
					"tokens": [
						"EventHttpRequest::getConnection",
						"getConnection",
						"::getConnection"
					],
					"id": "eventhttprequest.getconnection",
					"name": "EventHttpRequest::getConnection",
					"description": "Returns EventHttpConnection object"
				},
				"eventhttprequest.gethost": {
					"tokens": [
						"EventHttpRequest::getHost",
						"getHost",
						"::getHost"
					],
					"id": "eventhttprequest.gethost",
					"name": "EventHttpRequest::getHost",
					"description": "Returns the request host"
				},
				"eventhttprequest.getinputbuffer": {
					"tokens": [
						"EventHttpRequest::getInputBuffer",
						"getInputBuffer",
						"::getInputBuffer"
					],
					"id": "eventhttprequest.getinputbuffer",
					"name": "EventHttpRequest::getInputBuffer",
					"description": "Returns the input buffer"
				},
				"eventhttprequest.getinputheaders": {
					"tokens": [
						"EventHttpRequest::getInputHeaders",
						"getInputHeaders",
						"::getInputHeaders"
					],
					"id": "eventhttprequest.getinputheaders",
					"name": "EventHttpRequest::getInputHeaders",
					"description": "Returns associative array of the input headers"
				},
				"eventhttprequest.getoutputbuffer": {
					"tokens": [
						"EventHttpRequest::getOutputBuffer",
						"getOutputBuffer",
						"::getOutputBuffer"
					],
					"id": "eventhttprequest.getoutputbuffer",
					"name": "EventHttpRequest::getOutputBuffer",
					"description": "Returns the output buffer of the request"
				},
				"eventhttprequest.getoutputheaders": {
					"tokens": [
						"EventHttpRequest::getOutputHeaders",
						"getOutputHeaders",
						"::getOutputHeaders"
					],
					"id": "eventhttprequest.getoutputheaders",
					"name": "EventHttpRequest::getOutputHeaders",
					"description": "Returns associative array of the output headers"
				},
				"eventhttprequest.getresponsecode": {
					"tokens": [
						"EventHttpRequest::getResponseCode",
						"getResponseCode",
						"::getResponseCode"
					],
					"id": "eventhttprequest.getresponsecode",
					"name": "EventHttpRequest::getResponseCode",
					"description": "Returns the response code"
				},
				"eventhttprequest.geturi": {
					"tokens": [
						"EventHttpRequest::getUri",
						"getUri",
						"::getUri"
					],
					"id": "eventhttprequest.geturi",
					"name": "EventHttpRequest::getUri",
					"description": "Returns the request URI"
				},
				"eventhttprequest.removeheader": {
					"tokens": [
						"EventHttpRequest::removeHeader",
						"removeHeader",
						"::removeHeader"
					],
					"id": "eventhttprequest.removeheader",
					"name": "EventHttpRequest::removeHeader",
					"description": "Removes an HTTP header from the headers of the request"
				},
				"eventhttprequest.senderror": {
					"tokens": [
						"EventHttpRequest::sendError",
						"sendError",
						"::sendError"
					],
					"id": "eventhttprequest.senderror",
					"name": "EventHttpRequest::sendError",
					"description": "Send an HTML error message to the client"
				},
				"eventhttprequest.sendreply": {
					"tokens": [
						"EventHttpRequest::sendReply",
						"sendReply",
						"::sendReply"
					],
					"id": "eventhttprequest.sendreply",
					"name": "EventHttpRequest::sendReply",
					"description": "Send an HTML reply to the client"
				},
				"eventhttprequest.sendreplychunk": {
					"tokens": [
						"EventHttpRequest::sendReplyChunk",
						"sendReplyChunk",
						"::sendReplyChunk"
					],
					"id": "eventhttprequest.sendreplychunk",
					"name": "EventHttpRequest::sendReplyChunk",
					"description": "Send another data chunk as part of an ongoing chunked reply"
				},
				"eventhttprequest.sendreplyend": {
					"tokens": [
						"EventHttpRequest::sendReplyEnd",
						"sendReplyEnd",
						"::sendReplyEnd"
					],
					"id": "eventhttprequest.sendreplyend",
					"name": "EventHttpRequest::sendReplyEnd",
					"description": "Complete a chunked reply, freeing the request as appropriate"
				},
				"eventhttprequest.sendreplystart": {
					"tokens": [
						"EventHttpRequest::sendReplyStart",
						"sendReplyStart",
						"::sendReplyStart"
					],
					"id": "eventhttprequest.sendreplystart",
					"name": "EventHttpRequest::sendReplyStart",
					"description": "Initiate a chunked reply"
				},
				"eventlistener.construct": {
					"tokens": [
						"EventListener::__construct",
						"EventListener::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventlistener.construct",
					"name": "EventListener::__construct",
					"description": "Creates new connection listener associated with an event base"
				},
				"eventlistener.disable": {
					"tokens": [
						"EventListener::disable",
						"disable",
						"::disable"
					],
					"id": "eventlistener.disable",
					"name": "EventListener::disable",
					"description": "Disables an event connect listener object"
				},
				"eventlistener.enable": {
					"tokens": [
						"EventListener::enable",
						"enable",
						"::enable"
					],
					"id": "eventlistener.enable",
					"name": "EventListener::enable",
					"description": "Enables an event connect listener object"
				},
				"eventlistener.getbase": {
					"tokens": [
						"EventListener::getBase",
						"getBase",
						"::getBase"
					],
					"id": "eventlistener.getbase",
					"name": "EventListener::getBase",
					"description": "Returns event base associated with the event listener"
				},
				"eventlistener.getsocketname": {
					"tokens": [
						"EventListener::getSocketName",
						"getSocketName",
						"::getSocketName"
					],
					"id": "eventlistener.getsocketname",
					"name": "EventListener::getSocketName",
					"description": "Retreives the current address to which the\n  listener's socket is bound."
				},
				"eventlistener.setcallback": {
					"tokens": [
						"EventListener::setCallback",
						"setCallback",
						"::setCallback"
					],
					"id": "eventlistener.setcallback",
					"name": "EventListener::setCallback",
					"description": "The setCallback purpose"
				},
				"eventlistener.seterrorcallback": {
					"tokens": [
						"EventListener::setErrorCallback",
						"setErrorCallback",
						"::setErrorCallback"
					],
					"id": "eventlistener.seterrorcallback",
					"name": "EventListener::setErrorCallback",
					"description": "Set event listener's error callback"
				},
				"eventsslcontext.construct": {
					"tokens": [
						"EventSslContext::__construct",
						"EventSslContext::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventsslcontext.construct",
					"name": "EventSslContext::__construct",
					"description": "Constructs an OpenSSL context for use with Event classes"
				},
				"eventutil.construct": {
					"tokens": [
						"EventUtil::__construct",
						"EventUtil::_construct",
						"__construct",
						"::__construct"
					],
					"id": "eventutil.construct",
					"name": "EventUtil::__construct",
					"description": "The abstract constructor"
				},
				"eventutil.getlastsocketerrno": {
					"tokens": [
						"EventUtil::getLastSocketErrno",
						"getLastSocketErrno",
						"::getLastSocketErrno"
					],
					"id": "eventutil.getlastsocketerrno",
					"name": "EventUtil::getLastSocketErrno",
					"description": "Returns the most recent socket error number"
				},
				"eventutil.getlastsocketerror": {
					"tokens": [
						"EventUtil::getLastSocketError",
						"getLastSocketError",
						"::getLastSocketError"
					],
					"id": "eventutil.getlastsocketerror",
					"name": "EventUtil::getLastSocketError",
					"description": "Returns the most recent socket error"
				},
				"eventutil.getsocketfd": {
					"tokens": [
						"EventUtil::getSocketFd",
						"getSocketFd",
						"::getSocketFd"
					],
					"id": "eventutil.getsocketfd",
					"name": "EventUtil::getSocketFd",
					"description": "Returns numeric file descriptor of a socket, or stream"
				},
				"eventutil.getsocketname": {
					"tokens": [
						"EventUtil::getSocketName",
						"getSocketName",
						"::getSocketName"
					],
					"id": "eventutil.getsocketname",
					"name": "EventUtil::getSocketName",
					"description": "Retreives the current address to which the\n  socket is bound."
				},
				"eventutil.setsocketoption": {
					"tokens": [
						"EventUtil::setSocketOption",
						"setSocketOption",
						"::setSocketOption"
					],
					"id": "eventutil.setsocketoption",
					"name": "EventUtil::setSocketOption",
					"description": "Sets socket options"
				},
				"eventutil.sslrandpoll": {
					"tokens": [
						"EventUtil::sslRandPoll",
						"sslRandPoll",
						"::sslRandPoll"
					],
					"id": "eventutil.sslrandpoll",
					"name": "EventUtil::sslRandPoll",
					"description": "Generates entropy by means of OpenSSL's RAND_poll()"
				},
				"function.fam-cancel-monitor": {
					"tokens": [
						"fam_cancel_monitor",
						"famcancel_monitor"
					],
					"id": "function.fam-cancel-monitor",
					"name": "fam_cancel_monitor",
					"description": "Terminate monitoring"
				},
				"function.fam-close": {
					"tokens": [
						"fam_close",
						"famclose"
					],
					"id": "function.fam-close",
					"name": "fam_close",
					"description": "Close FAM connection"
				},
				"function.fam-monitor-collection": {
					"tokens": [
						"fam_monitor_collection",
						"fammonitor_collection"
					],
					"id": "function.fam-monitor-collection",
					"name": "fam_monitor_collection",
					"description": "Monitor a collection of files in a directory for changes"
				},
				"function.fam-monitor-directory": {
					"tokens": [
						"fam_monitor_directory",
						"fammonitor_directory"
					],
					"id": "function.fam-monitor-directory",
					"name": "fam_monitor_directory",
					"description": "Monitor a directory for changes"
				},
				"function.fam-monitor-file": {
					"tokens": [
						"fam_monitor_file",
						"fammonitor_file"
					],
					"id": "function.fam-monitor-file",
					"name": "fam_monitor_file",
					"description": "Monitor a regular file for changes"
				},
				"function.fam-next-event": {
					"tokens": [
						"fam_next_event",
						"famnext_event"
					],
					"id": "function.fam-next-event",
					"name": "fam_next_event",
					"description": "Get next pending FAM event"
				},
				"function.fam-open": {
					"tokens": [
						"fam_open",
						"famopen"
					],
					"id": "function.fam-open",
					"name": "fam_open",
					"description": "Open connection to FAM daemon"
				},
				"function.fam-pending": {
					"tokens": [
						"fam_pending",
						"fampending"
					],
					"id": "function.fam-pending",
					"name": "fam_pending",
					"description": "Check for pending FAM events"
				},
				"function.fam-resume-monitor": {
					"tokens": [
						"fam_resume_monitor",
						"famresume_monitor"
					],
					"id": "function.fam-resume-monitor",
					"name": "fam_resume_monitor",
					"description": "Resume suspended monitoring"
				},
				"function.fam-suspend-monitor": {
					"tokens": [
						"fam_suspend_monitor",
						"famsuspend_monitor"
					],
					"id": "function.fam-suspend-monitor",
					"name": "fam_suspend_monitor",
					"description": "Temporarily suspend monitoring"
				},
				"function.ftp-alloc": {
					"tokens": [
						"ftp_alloc",
						"ftpalloc"
					],
					"id": "function.ftp-alloc",
					"name": "ftp_alloc",
					"description": "Allocates space for a file to be uploaded"
				},
				"function.ftp-cdup": {
					"tokens": [
						"ftp_cdup",
						"ftpcdup"
					],
					"id": "function.ftp-cdup",
					"name": "ftp_cdup",
					"description": "Changes to the parent directory"
				},
				"function.ftp-chdir": {
					"tokens": [
						"ftp_chdir",
						"ftpchdir"
					],
					"id": "function.ftp-chdir",
					"name": "ftp_chdir",
					"description": "Changes the current directory on a FTP server"
				},
				"function.ftp-chmod": {
					"tokens": [
						"ftp_chmod",
						"ftpchmod"
					],
					"id": "function.ftp-chmod",
					"name": "ftp_chmod",
					"description": "Set permissions on a file via FTP"
				},
				"function.ftp-close": {
					"tokens": [
						"ftp_close",
						"ftpclose"
					],
					"id": "function.ftp-close",
					"name": "ftp_close",
					"description": "Closes an FTP connection"
				},
				"function.ftp-connect": {
					"tokens": [
						"ftp_connect",
						"ftpconnect"
					],
					"id": "function.ftp-connect",
					"name": "ftp_connect",
					"description": "Opens an FTP connection"
				},
				"function.ftp-delete": {
					"tokens": [
						"ftp_delete",
						"ftpdelete"
					],
					"id": "function.ftp-delete",
					"name": "ftp_delete",
					"description": "Deletes a file on the FTP server"
				},
				"function.ftp-exec": {
					"tokens": [
						"ftp_exec",
						"ftpexec"
					],
					"id": "function.ftp-exec",
					"name": "ftp_exec",
					"description": "Requests execution of a command on the FTP server"
				},
				"function.ftp-fget": {
					"tokens": [
						"ftp_fget",
						"ftpfget"
					],
					"id": "function.ftp-fget",
					"name": "ftp_fget",
					"description": "Downloads a file from the FTP server and saves to an open file"
				},
				"function.ftp-fput": {
					"tokens": [
						"ftp_fput",
						"ftpfput"
					],
					"id": "function.ftp-fput",
					"name": "ftp_fput",
					"description": "Uploads from an open file to the FTP server"
				},
				"function.ftp-get-option": {
					"tokens": [
						"ftp_get_option",
						"ftpget_option"
					],
					"id": "function.ftp-get-option",
					"name": "ftp_get_option",
					"description": "Retrieves various runtime behaviours of the current FTP stream"
				},
				"function.ftp-get": {
					"tokens": [
						"ftp_get",
						"ftpget"
					],
					"id": "function.ftp-get",
					"name": "ftp_get",
					"description": "Downloads a file from the FTP server"
				},
				"function.ftp-login": {
					"tokens": [
						"ftp_login",
						"ftplogin"
					],
					"id": "function.ftp-login",
					"name": "ftp_login",
					"description": "Logs in to an FTP connection"
				},
				"function.ftp-mdtm": {
					"tokens": [
						"ftp_mdtm",
						"ftpmdtm"
					],
					"id": "function.ftp-mdtm",
					"name": "ftp_mdtm",
					"description": "Returns the last modified time of the given file"
				},
				"function.ftp-mkdir": {
					"tokens": [
						"ftp_mkdir",
						"ftpmkdir"
					],
					"id": "function.ftp-mkdir",
					"name": "ftp_mkdir",
					"description": "Creates a directory"
				},
				"function.ftp-nb-continue": {
					"tokens": [
						"ftp_nb_continue",
						"ftpnb_continue"
					],
					"id": "function.ftp-nb-continue",
					"name": "ftp_nb_continue",
					"description": "Continues retrieving/sending a file (non-blocking)"
				},
				"function.ftp-nb-fget": {
					"tokens": [
						"ftp_nb_fget",
						"ftpnb_fget"
					],
					"id": "function.ftp-nb-fget",
					"name": "ftp_nb_fget",
					"description": "Retrieves a file from the FTP server and writes it to an open file (non-blocking)"
				},
				"function.ftp-nb-fput": {
					"tokens": [
						"ftp_nb_fput",
						"ftpnb_fput"
					],
					"id": "function.ftp-nb-fput",
					"name": "ftp_nb_fput",
					"description": "Stores a file from an open file to the FTP server (non-blocking)"
				},
				"function.ftp-nb-get": {
					"tokens": [
						"ftp_nb_get",
						"ftpnb_get"
					],
					"id": "function.ftp-nb-get",
					"name": "ftp_nb_get",
					"description": "Retrieves a file from the FTP server and writes it to a local file (non-blocking)"
				},
				"function.ftp-nb-put": {
					"tokens": [
						"ftp_nb_put",
						"ftpnb_put"
					],
					"id": "function.ftp-nb-put",
					"name": "ftp_nb_put",
					"description": "Stores a file on the FTP server (non-blocking)"
				},
				"function.ftp-nlist": {
					"tokens": [
						"ftp_nlist",
						"ftpnlist"
					],
					"id": "function.ftp-nlist",
					"name": "ftp_nlist",
					"description": "Returns a list of files in the given directory"
				},
				"function.ftp-pasv": {
					"tokens": [
						"ftp_pasv",
						"ftppasv"
					],
					"id": "function.ftp-pasv",
					"name": "ftp_pasv",
					"description": "Turns passive mode on or off"
				},
				"function.ftp-put": {
					"tokens": [
						"ftp_put",
						"ftpput"
					],
					"id": "function.ftp-put",
					"name": "ftp_put",
					"description": "Uploads a file to the FTP server"
				},
				"function.ftp-pwd": {
					"tokens": [
						"ftp_pwd",
						"ftppwd"
					],
					"id": "function.ftp-pwd",
					"name": "ftp_pwd",
					"description": "Returns the current directory name"
				},
				"function.ftp-quit": {
					"tokens": [
						"ftp_quit",
						"ftpquit"
					],
					"id": "function.ftp-quit",
					"name": "ftp_quit",
					"description": "Alias of ftp_close"
				},
				"function.ftp-raw": {
					"tokens": [
						"ftp_raw",
						"ftpraw"
					],
					"id": "function.ftp-raw",
					"name": "ftp_raw",
					"description": "Sends an arbitrary command to an FTP server"
				},
				"function.ftp-rawlist": {
					"tokens": [
						"ftp_rawlist",
						"ftprawlist"
					],
					"id": "function.ftp-rawlist",
					"name": "ftp_rawlist",
					"description": "Returns a detailed list of files in the given directory"
				},
				"function.ftp-rename": {
					"tokens": [
						"ftp_rename",
						"ftprename"
					],
					"id": "function.ftp-rename",
					"name": "ftp_rename",
					"description": "Renames a file or a directory on the FTP server"
				},
				"function.ftp-rmdir": {
					"tokens": [
						"ftp_rmdir",
						"ftprmdir"
					],
					"id": "function.ftp-rmdir",
					"name": "ftp_rmdir",
					"description": "Removes a directory"
				},
				"function.ftp-set-option": {
					"tokens": [
						"ftp_set_option",
						"ftpset_option"
					],
					"id": "function.ftp-set-option",
					"name": "ftp_set_option",
					"description": "Set miscellaneous runtime FTP options"
				},
				"function.ftp-site": {
					"tokens": [
						"ftp_site",
						"ftpsite"
					],
					"id": "function.ftp-site",
					"name": "ftp_site",
					"description": "Sends a SITE command to the server"
				},
				"function.ftp-size": {
					"tokens": [
						"ftp_size",
						"ftpsize"
					],
					"id": "function.ftp-size",
					"name": "ftp_size",
					"description": "Returns the size of the given file"
				},
				"function.ftp-ssl-connect": {
					"tokens": [
						"ftp_ssl_connect",
						"ftpssl_connect"
					],
					"id": "function.ftp-ssl-connect",
					"name": "ftp_ssl_connect",
					"description": "Opens an Secure SSL-FTP connection"
				},
				"function.ftp-systype": {
					"tokens": [
						"ftp_systype",
						"ftpsystype"
					],
					"id": "function.ftp-systype",
					"name": "ftp_systype",
					"description": "Returns the system type identifier of the remote FTP server"
				},
				"gearmanclient.addoptions": {
					"tokens": [
						"GearmanClient::addOptions",
						"addOptions",
						"::addOptions"
					],
					"id": "gearmanclient.addoptions",
					"name": "GearmanClient::addOptions",
					"description": "Add client options"
				},
				"gearmanclient.addserver": {
					"tokens": [
						"GearmanClient::addServer",
						"addServer",
						"::addServer"
					],
					"id": "gearmanclient.addserver",
					"name": "GearmanClient::addServer",
					"description": "Add a job server to the client"
				},
				"gearmanclient.addservers": {
					"tokens": [
						"GearmanClient::addServers",
						"addServers",
						"::addServers"
					],
					"id": "gearmanclient.addservers",
					"name": "GearmanClient::addServers",
					"description": "Add a list of job servers to the client"
				},
				"gearmanclient.addtask": {
					"tokens": [
						"GearmanClient::addTask",
						"addTask",
						"::addTask"
					],
					"id": "gearmanclient.addtask",
					"name": "GearmanClient::addTask",
					"description": "Add a task to be run in parallel"
				},
				"gearmanclient.addtaskbackground": {
					"tokens": [
						"GearmanClient::addTaskBackground",
						"addTaskBackground",
						"::addTaskBackground"
					],
					"id": "gearmanclient.addtaskbackground",
					"name": "GearmanClient::addTaskBackground",
					"description": "Add a background task to be run in parallel"
				},
				"gearmanclient.addtaskhigh": {
					"tokens": [
						"GearmanClient::addTaskHigh",
						"addTaskHigh",
						"::addTaskHigh"
					],
					"id": "gearmanclient.addtaskhigh",
					"name": "GearmanClient::addTaskHigh",
					"description": "Add a high priority task to run in parallel"
				},
				"gearmanclient.addtaskhighbackground": {
					"tokens": [
						"GearmanClient::addTaskHighBackground",
						"addTaskHighBackground",
						"::addTaskHighBackground"
					],
					"id": "gearmanclient.addtaskhighbackground",
					"name": "GearmanClient::addTaskHighBackground",
					"description": "Add a high priority background task to be run in parallel"
				},
				"gearmanclient.addtasklow": {
					"tokens": [
						"GearmanClient::addTaskLow",
						"addTaskLow",
						"::addTaskLow"
					],
					"id": "gearmanclient.addtasklow",
					"name": "GearmanClient::addTaskLow",
					"description": "Add a low priority task to run in parallel"
				},
				"gearmanclient.addtasklowbackground": {
					"tokens": [
						"GearmanClient::addTaskLowBackground",
						"addTaskLowBackground",
						"::addTaskLowBackground"
					],
					"id": "gearmanclient.addtasklowbackground",
					"name": "GearmanClient::addTaskLowBackground",
					"description": "Add a low priority background task to be run in parallel"
				},
				"gearmanclient.addtaskstatus": {
					"tokens": [
						"GearmanClient::addTaskStatus",
						"addTaskStatus",
						"::addTaskStatus"
					],
					"id": "gearmanclient.addtaskstatus",
					"name": "GearmanClient::addTaskStatus",
					"description": "Add a task to get status"
				},
				"gearmanclient.clearcallbacks": {
					"tokens": [
						"GearmanClient::clearCallbacks",
						"clearCallbacks",
						"::clearCallbacks"
					],
					"id": "gearmanclient.clearcallbacks",
					"name": "GearmanClient::clearCallbacks",
					"description": "Clear all task callback functions"
				},
				"gearmanclient.clone": {
					"tokens": [
						"GearmanClient::clone",
						"clone",
						"::clone"
					],
					"id": "gearmanclient.clone",
					"name": "GearmanClient::clone",
					"description": "Create a copy of a GearmanClient object"
				},
				"gearmanclient.construct": {
					"tokens": [
						"GearmanClient::__construct",
						"GearmanClient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gearmanclient.construct",
					"name": "GearmanClient::__construct",
					"description": "Create a GearmanClient instance"
				},
				"gearmanclient.context": {
					"tokens": [
						"GearmanClient::context",
						"context",
						"::context"
					],
					"id": "gearmanclient.context",
					"name": "GearmanClient::context",
					"description": "Get the application context"
				},
				"gearmanclient.data": {
					"tokens": [
						"GearmanClient::data",
						"data",
						"::data"
					],
					"id": "gearmanclient.data",
					"name": "GearmanClient::data",
					"description": "Get the application data (deprecated)"
				},
				"gearmanclient.do": {
					"tokens": [
						"GearmanClient::do",
						"do",
						"::do"
					],
					"id": "gearmanclient.do",
					"name": "GearmanClient::do",
					"description": "Run a single task and return a result [deprecated]"
				},
				"gearmanclient.dobackground": {
					"tokens": [
						"GearmanClient::doBackground",
						"doBackground",
						"::doBackground"
					],
					"id": "gearmanclient.dobackground",
					"name": "GearmanClient::doBackground",
					"description": "Run a task in the background"
				},
				"gearmanclient.dohigh": {
					"tokens": [
						"GearmanClient::doHigh",
						"doHigh",
						"::doHigh"
					],
					"id": "gearmanclient.dohigh",
					"name": "GearmanClient::doHigh",
					"description": "Run a single high priority task"
				},
				"gearmanclient.dohighbackground": {
					"tokens": [
						"GearmanClient::doHighBackground",
						"doHighBackground",
						"::doHighBackground"
					],
					"id": "gearmanclient.dohighbackground",
					"name": "GearmanClient::doHighBackground",
					"description": "Run a high priority task in the background"
				},
				"gearmanclient.dojobhandle": {
					"tokens": [
						"GearmanClient::doJobHandle",
						"doJobHandle",
						"::doJobHandle"
					],
					"id": "gearmanclient.dojobhandle",
					"name": "GearmanClient::doJobHandle",
					"description": "Get the job handle for the running task"
				},
				"gearmanclient.dolow": {
					"tokens": [
						"GearmanClient::doLow",
						"doLow",
						"::doLow"
					],
					"id": "gearmanclient.dolow",
					"name": "GearmanClient::doLow",
					"description": "Run a single low priority task"
				},
				"gearmanclient.dolowbackground": {
					"tokens": [
						"GearmanClient::doLowBackground",
						"doLowBackground",
						"::doLowBackground"
					],
					"id": "gearmanclient.dolowbackground",
					"name": "GearmanClient::doLowBackground",
					"description": "Run a low priority task in the background"
				},
				"gearmanclient.donormal": {
					"tokens": [
						"GearmanClient::doNormal",
						"doNormal",
						"::doNormal"
					],
					"id": "gearmanclient.donormal",
					"name": "GearmanClient::doNormal",
					"description": "Run a single task and return a result"
				},
				"gearmanclient.dostatus": {
					"tokens": [
						"GearmanClient::doStatus",
						"doStatus",
						"::doStatus"
					],
					"id": "gearmanclient.dostatus",
					"name": "GearmanClient::doStatus",
					"description": "Get the status for the running task"
				},
				"gearmanclient.echo": {
					"tokens": [
						"GearmanClient::echo",
						"echo",
						"::echo"
					],
					"id": "gearmanclient.echo",
					"name": "GearmanClient::echo",
					"description": "Send data to all job servers to see if they echo it back [deprecated]"
				},
				"gearmanclient.error": {
					"tokens": [
						"GearmanClient::error",
						"error",
						"::error"
					],
					"id": "gearmanclient.error",
					"name": "GearmanClient::error",
					"description": "Returns an error string for the last error encountered."
				},
				"gearmanclient.geterrno": {
					"tokens": [
						"GearmanClient::getErrno",
						"getErrno",
						"::getErrno"
					],
					"id": "gearmanclient.geterrno",
					"name": "GearmanClient::getErrno",
					"description": "Get an errno value"
				},
				"gearmanclient.jobstatus": {
					"tokens": [
						"GearmanClient::jobStatus",
						"jobStatus",
						"::jobStatus"
					],
					"id": "gearmanclient.jobstatus",
					"name": "GearmanClient::jobStatus",
					"description": "Get the status of a background job"
				},
				"gearmanclient.ping": {
					"tokens": [
						"GearmanClient::ping",
						"ping",
						"::ping"
					],
					"id": "gearmanclient.ping",
					"name": "GearmanClient::ping",
					"description": "Send data to all job servers to see if they echo it back"
				},
				"gearmanclient.removeoptions": {
					"tokens": [
						"GearmanClient::removeOptions",
						"removeOptions",
						"::removeOptions"
					],
					"id": "gearmanclient.removeoptions",
					"name": "GearmanClient::removeOptions",
					"description": "Remove client options"
				},
				"gearmanclient.returncode": {
					"tokens": [
						"GearmanClient::returnCode",
						"returnCode",
						"::returnCode"
					],
					"id": "gearmanclient.returncode",
					"name": "GearmanClient::returnCode",
					"description": "Get the last Gearman return code"
				},
				"gearmanclient.runtasks": {
					"tokens": [
						"GearmanClient::runTasks",
						"runTasks",
						"::runTasks"
					],
					"id": "gearmanclient.runtasks",
					"name": "GearmanClient::runTasks",
					"description": "Run a list of tasks in parallel"
				},
				"gearmanclient.setclientcallback": {
					"tokens": [
						"GearmanClient::setClientCallback",
						"setClientCallback",
						"::setClientCallback"
					],
					"id": "gearmanclient.setclientcallback",
					"name": "GearmanClient::setClientCallback",
					"description": "Callback function when there is a data packet for a task (deprecated)"
				},
				"gearmanclient.setcompletecallback": {
					"tokens": [
						"GearmanClient::setCompleteCallback",
						"setCompleteCallback",
						"::setCompleteCallback"
					],
					"id": "gearmanclient.setcompletecallback",
					"name": "GearmanClient::setCompleteCallback",
					"description": "Set a function to be called on task completion"
				},
				"gearmanclient.setcontext": {
					"tokens": [
						"GearmanClient::setContext",
						"setContext",
						"::setContext"
					],
					"id": "gearmanclient.setcontext",
					"name": "GearmanClient::setContext",
					"description": "Set application context"
				},
				"gearmanclient.setcreatedcallback": {
					"tokens": [
						"GearmanClient::setCreatedCallback",
						"setCreatedCallback",
						"::setCreatedCallback"
					],
					"id": "gearmanclient.setcreatedcallback",
					"name": "GearmanClient::setCreatedCallback",
					"description": "Set a callback for when a task is queued"
				},
				"gearmanclient.setdata": {
					"tokens": [
						"GearmanClient::setData",
						"setData",
						"::setData"
					],
					"id": "gearmanclient.setdata",
					"name": "GearmanClient::setData",
					"description": "Set application data (deprecated)"
				},
				"gearmanclient.setdatacallback": {
					"tokens": [
						"GearmanClient::setDataCallback",
						"setDataCallback",
						"::setDataCallback"
					],
					"id": "gearmanclient.setdatacallback",
					"name": "GearmanClient::setDataCallback",
					"description": "Callback function when there is a data packet for a task"
				},
				"gearmanclient.setexceptioncallback": {
					"tokens": [
						"GearmanClient::setExceptionCallback",
						"setExceptionCallback",
						"::setExceptionCallback"
					],
					"id": "gearmanclient.setexceptioncallback",
					"name": "GearmanClient::setExceptionCallback",
					"description": "Set a callback for worker exceptions"
				},
				"gearmanclient.setfailcallback": {
					"tokens": [
						"GearmanClient::setFailCallback",
						"setFailCallback",
						"::setFailCallback"
					],
					"id": "gearmanclient.setfailcallback",
					"name": "GearmanClient::setFailCallback",
					"description": "Set callback for job failure"
				},
				"gearmanclient.setoptions": {
					"tokens": [
						"GearmanClient::setOptions",
						"setOptions",
						"::setOptions"
					],
					"id": "gearmanclient.setoptions",
					"name": "GearmanClient::setOptions",
					"description": "Set client options"
				},
				"gearmanclient.setstatuscallback": {
					"tokens": [
						"GearmanClient::setStatusCallback",
						"setStatusCallback",
						"::setStatusCallback"
					],
					"id": "gearmanclient.setstatuscallback",
					"name": "GearmanClient::setStatusCallback",
					"description": "Set a callback for collecting task status"
				},
				"gearmanclient.settimeout": {
					"tokens": [
						"GearmanClient::setTimeout",
						"setTimeout",
						"::setTimeout"
					],
					"id": "gearmanclient.settimeout",
					"name": "GearmanClient::setTimeout",
					"description": "Set socket I/O activity timeout"
				},
				"gearmanclient.setwarningcallback": {
					"tokens": [
						"GearmanClient::setWarningCallback",
						"setWarningCallback",
						"::setWarningCallback"
					],
					"id": "gearmanclient.setwarningcallback",
					"name": "GearmanClient::setWarningCallback",
					"description": "Set a callback for worker warnings"
				},
				"gearmanclient.setworkloadcallback": {
					"tokens": [
						"GearmanClient::setWorkloadCallback",
						"setWorkloadCallback",
						"::setWorkloadCallback"
					],
					"id": "gearmanclient.setworkloadcallback",
					"name": "GearmanClient::setWorkloadCallback",
					"description": "Set a callback for accepting incremental data updates"
				},
				"gearmanclient.timeout": {
					"tokens": [
						"GearmanClient::timeout",
						"timeout",
						"::timeout"
					],
					"id": "gearmanclient.timeout",
					"name": "GearmanClient::timeout",
					"description": "Get current socket I/O activity timeout value"
				},
				"gearmanjob.complete": {
					"tokens": [
						"GearmanJob::complete",
						"complete",
						"::complete"
					],
					"id": "gearmanjob.complete",
					"name": "GearmanJob::complete",
					"description": "Send the result and complete status (deprecated)"
				},
				"gearmanjob.construct": {
					"tokens": [
						"GearmanJob::__construct",
						"GearmanJob::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gearmanjob.construct",
					"name": "GearmanJob::__construct",
					"description": "Create a GearmanJob instance"
				},
				"gearmanjob.data": {
					"tokens": [
						"GearmanJob::data",
						"data",
						"::data"
					],
					"id": "gearmanjob.data",
					"name": "GearmanJob::data",
					"description": "Send data for a running job (deprecated)"
				},
				"gearmanjob.exception": {
					"tokens": [
						"GearmanJob::exception",
						"exception",
						"::exception"
					],
					"id": "gearmanjob.exception",
					"name": "GearmanJob::exception",
					"description": "Send exception for running job (deprecated)"
				},
				"gearmanjob.fail": {
					"tokens": [
						"GearmanJob::fail",
						"fail",
						"::fail"
					],
					"id": "gearmanjob.fail",
					"name": "GearmanJob::fail",
					"description": "Send fail status (deprecated)"
				},
				"gearmanjob.functionname": {
					"tokens": [
						"GearmanJob::functionName",
						"functionName",
						"::functionName"
					],
					"id": "gearmanjob.functionname",
					"name": "GearmanJob::functionName",
					"description": "Get function name"
				},
				"gearmanjob.handle": {
					"tokens": [
						"GearmanJob::handle",
						"handle",
						"::handle"
					],
					"id": "gearmanjob.handle",
					"name": "GearmanJob::handle",
					"description": "Get the job handle"
				},
				"gearmanjob.returncode": {
					"tokens": [
						"GearmanJob::returnCode",
						"returnCode",
						"::returnCode"
					],
					"id": "gearmanjob.returncode",
					"name": "GearmanJob::returnCode",
					"description": "Get last return code"
				},
				"gearmanjob.sendcomplete": {
					"tokens": [
						"GearmanJob::sendComplete",
						"sendComplete",
						"::sendComplete"
					],
					"id": "gearmanjob.sendcomplete",
					"name": "GearmanJob::sendComplete",
					"description": "Send the result and complete status"
				},
				"gearmanjob.senddata": {
					"tokens": [
						"GearmanJob::sendData",
						"sendData",
						"::sendData"
					],
					"id": "gearmanjob.senddata",
					"name": "GearmanJob::sendData",
					"description": "Send data for a running job"
				},
				"gearmanjob.sendexception": {
					"tokens": [
						"GearmanJob::sendException",
						"sendException",
						"::sendException"
					],
					"id": "gearmanjob.sendexception",
					"name": "GearmanJob::sendException",
					"description": "Send exception for running job (exception)"
				},
				"gearmanjob.sendfail": {
					"tokens": [
						"GearmanJob::sendFail",
						"sendFail",
						"::sendFail"
					],
					"id": "gearmanjob.sendfail",
					"name": "GearmanJob::sendFail",
					"description": "Send fail status"
				},
				"gearmanjob.sendstatus": {
					"tokens": [
						"GearmanJob::sendStatus",
						"sendStatus",
						"::sendStatus"
					],
					"id": "gearmanjob.sendstatus",
					"name": "GearmanJob::sendStatus",
					"description": "Send status"
				},
				"gearmanjob.sendwarning": {
					"tokens": [
						"GearmanJob::sendWarning",
						"sendWarning",
						"::sendWarning"
					],
					"id": "gearmanjob.sendwarning",
					"name": "GearmanJob::sendWarning",
					"description": "Send a warning"
				},
				"gearmanjob.setreturn": {
					"tokens": [
						"GearmanJob::setReturn",
						"setReturn",
						"::setReturn"
					],
					"id": "gearmanjob.setreturn",
					"name": "GearmanJob::setReturn",
					"description": "Set a return value"
				},
				"gearmanjob.status": {
					"tokens": [
						"GearmanJob::status",
						"status",
						"::status"
					],
					"id": "gearmanjob.status",
					"name": "GearmanJob::status",
					"description": "Send status (deprecated)"
				},
				"gearmanjob.unique": {
					"tokens": [
						"GearmanJob::unique",
						"unique",
						"::unique"
					],
					"id": "gearmanjob.unique",
					"name": "GearmanJob::unique",
					"description": "Get the unique identifier"
				},
				"gearmanjob.warning": {
					"tokens": [
						"GearmanJob::warning",
						"warning",
						"::warning"
					],
					"id": "gearmanjob.warning",
					"name": "GearmanJob::warning",
					"description": "Send a warning (deprecated)"
				},
				"gearmanjob.workload": {
					"tokens": [
						"GearmanJob::workload",
						"workload",
						"::workload"
					],
					"id": "gearmanjob.workload",
					"name": "GearmanJob::workload",
					"description": "Get workload"
				},
				"gearmanjob.workloadsize": {
					"tokens": [
						"GearmanJob::workloadSize",
						"workloadSize",
						"::workloadSize"
					],
					"id": "gearmanjob.workloadsize",
					"name": "GearmanJob::workloadSize",
					"description": "Get size of work load"
				},
				"gearmantask.construct": {
					"tokens": [
						"GearmanTask::__construct",
						"GearmanTask::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gearmantask.construct",
					"name": "GearmanTask::__construct",
					"description": "Create a GearmanTask instance"
				},
				"gearmantask.create": {
					"tokens": [
						"GearmanTask::create",
						"create",
						"::create"
					],
					"id": "gearmantask.create",
					"name": "GearmanTask::create",
					"description": "Create a task (deprecated)"
				},
				"gearmantask.data": {
					"tokens": [
						"GearmanTask::data",
						"data",
						"::data"
					],
					"id": "gearmantask.data",
					"name": "GearmanTask::data",
					"description": "Get data returned for a task"
				},
				"gearmantask.datasize": {
					"tokens": [
						"GearmanTask::dataSize",
						"dataSize",
						"::dataSize"
					],
					"id": "gearmantask.datasize",
					"name": "GearmanTask::dataSize",
					"description": "Get the size of returned data"
				},
				"gearmantask.function": {
					"tokens": [
						"GearmanTask::function",
						"function",
						"::function"
					],
					"id": "gearmantask.function",
					"name": "GearmanTask::function",
					"description": "Get associated function name (deprecated)"
				},
				"gearmantask.functionname": {
					"tokens": [
						"GearmanTask::functionName",
						"functionName",
						"::functionName"
					],
					"id": "gearmantask.functionname",
					"name": "GearmanTask::functionName",
					"description": "Get associated function name"
				},
				"gearmantask.isknown": {
					"tokens": [
						"GearmanTask::isKnown",
						"isKnown",
						"::isKnown"
					],
					"id": "gearmantask.isknown",
					"name": "GearmanTask::isKnown",
					"description": "Determine if task is known"
				},
				"gearmantask.isrunning": {
					"tokens": [
						"GearmanTask::isRunning",
						"isRunning",
						"::isRunning"
					],
					"id": "gearmantask.isrunning",
					"name": "GearmanTask::isRunning",
					"description": "Test whether the task is currently running"
				},
				"gearmantask.jobhandle": {
					"tokens": [
						"GearmanTask::jobHandle",
						"jobHandle",
						"::jobHandle"
					],
					"id": "gearmantask.jobhandle",
					"name": "GearmanTask::jobHandle",
					"description": "Get the job handle"
				},
				"gearmantask.recvdata": {
					"tokens": [
						"GearmanTask::recvData",
						"recvData",
						"::recvData"
					],
					"id": "gearmantask.recvdata",
					"name": "GearmanTask::recvData",
					"description": "Read work or result data into a buffer for a task"
				},
				"gearmantask.returncode": {
					"tokens": [
						"GearmanTask::returnCode",
						"returnCode",
						"::returnCode"
					],
					"id": "gearmantask.returncode",
					"name": "GearmanTask::returnCode",
					"description": "Get the last return code"
				},
				"gearmantask.senddata": {
					"tokens": [
						"GearmanTask::sendData",
						"sendData",
						"::sendData"
					],
					"id": "gearmantask.senddata",
					"name": "GearmanTask::sendData",
					"description": "Send data for a task (deprecated)"
				},
				"gearmantask.sendworkload": {
					"tokens": [
						"GearmanTask::sendWorkload",
						"sendWorkload",
						"::sendWorkload"
					],
					"id": "gearmantask.sendworkload",
					"name": "GearmanTask::sendWorkload",
					"description": "Send data for a task"
				},
				"gearmantask.taskdenominator": {
					"tokens": [
						"GearmanTask::taskDenominator",
						"taskDenominator",
						"::taskDenominator"
					],
					"id": "gearmantask.taskdenominator",
					"name": "GearmanTask::taskDenominator",
					"description": "Get completion percentage denominator"
				},
				"gearmantask.tasknumerator": {
					"tokens": [
						"GearmanTask::taskNumerator",
						"taskNumerator",
						"::taskNumerator"
					],
					"id": "gearmantask.tasknumerator",
					"name": "GearmanTask::taskNumerator",
					"description": "Get completion percentage numerator"
				},
				"gearmantask.unique": {
					"tokens": [
						"GearmanTask::unique",
						"unique",
						"::unique"
					],
					"id": "gearmantask.unique",
					"name": "GearmanTask::unique",
					"description": "Get the unique identifier for a task"
				},
				"gearmantask.uuid": {
					"tokens": [
						"GearmanTask::uuid",
						"uuid",
						"::uuid"
					],
					"id": "gearmantask.uuid",
					"name": "GearmanTask::uuid",
					"description": "Get the unique identifier for a task (deprecated)"
				},
				"gearmanworker.addfunction": {
					"tokens": [
						"GearmanWorker::addFunction",
						"addFunction",
						"::addFunction"
					],
					"id": "gearmanworker.addfunction",
					"name": "GearmanWorker::addFunction",
					"description": "Register and add callback function"
				},
				"gearmanworker.addoptions": {
					"tokens": [
						"GearmanWorker::addOptions",
						"addOptions",
						"::addOptions"
					],
					"id": "gearmanworker.addoptions",
					"name": "GearmanWorker::addOptions",
					"description": "Add worker options"
				},
				"gearmanworker.addserver": {
					"tokens": [
						"GearmanWorker::addServer",
						"addServer",
						"::addServer"
					],
					"id": "gearmanworker.addserver",
					"name": "GearmanWorker::addServer",
					"description": "Add a job server"
				},
				"gearmanworker.addservers": {
					"tokens": [
						"GearmanWorker::addServers",
						"addServers",
						"::addServers"
					],
					"id": "gearmanworker.addservers",
					"name": "GearmanWorker::addServers",
					"description": "Add job servers"
				},
				"gearmanworker.clone": {
					"tokens": [
						"GearmanWorker::clone",
						"clone",
						"::clone"
					],
					"id": "gearmanworker.clone",
					"name": "GearmanWorker::clone",
					"description": "Create a copy of the worker"
				},
				"gearmanworker.construct": {
					"tokens": [
						"GearmanWorker::__construct",
						"GearmanWorker::_construct",
						"__construct",
						"::__construct"
					],
					"id": "gearmanworker.construct",
					"name": "GearmanWorker::__construct",
					"description": "Create a GearmanWorker instance"
				},
				"gearmanworker.echo": {
					"tokens": [
						"GearmanWorker::echo",
						"echo",
						"::echo"
					],
					"id": "gearmanworker.echo",
					"name": "GearmanWorker::echo",
					"description": "Test job server response"
				},
				"gearmanworker.error": {
					"tokens": [
						"GearmanWorker::error",
						"error",
						"::error"
					],
					"id": "gearmanworker.error",
					"name": "GearmanWorker::error",
					"description": "Get the last error encountered"
				},
				"gearmanworker.geterrno": {
					"tokens": [
						"GearmanWorker::getErrno",
						"getErrno",
						"::getErrno"
					],
					"id": "gearmanworker.geterrno",
					"name": "GearmanWorker::getErrno",
					"description": "Get errno"
				},
				"gearmanworker.options": {
					"tokens": [
						"GearmanWorker::options",
						"options",
						"::options"
					],
					"id": "gearmanworker.options",
					"name": "GearmanWorker::options",
					"description": "Get worker options"
				},
				"gearmanworker.register": {
					"tokens": [
						"GearmanWorker::register",
						"register",
						"::register"
					],
					"id": "gearmanworker.register",
					"name": "GearmanWorker::register",
					"description": "Register a function with the job server"
				},
				"gearmanworker.removeoptions": {
					"tokens": [
						"GearmanWorker::removeOptions",
						"removeOptions",
						"::removeOptions"
					],
					"id": "gearmanworker.removeoptions",
					"name": "GearmanWorker::removeOptions",
					"description": "Remove worker options"
				},
				"gearmanworker.returncode": {
					"tokens": [
						"GearmanWorker::returnCode",
						"returnCode",
						"::returnCode"
					],
					"id": "gearmanworker.returncode",
					"name": "GearmanWorker::returnCode",
					"description": "Get last Gearman return code"
				},
				"gearmanworker.setid": {
					"tokens": [
						"GearmanWorker::setId",
						"setId",
						"::setId"
					],
					"id": "gearmanworker.setid",
					"name": "GearmanWorker::setId",
					"description": "Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers."
				},
				"gearmanworker.setoptions": {
					"tokens": [
						"GearmanWorker::setOptions",
						"setOptions",
						"::setOptions"
					],
					"id": "gearmanworker.setoptions",
					"name": "GearmanWorker::setOptions",
					"description": "Set worker options"
				},
				"gearmanworker.settimeout": {
					"tokens": [
						"GearmanWorker::setTimeout",
						"setTimeout",
						"::setTimeout"
					],
					"id": "gearmanworker.settimeout",
					"name": "GearmanWorker::setTimeout",
					"description": "Set socket I/O activity timeout"
				},
				"gearmanworker.timeout": {
					"tokens": [
						"GearmanWorker::timeout",
						"timeout",
						"::timeout"
					],
					"id": "gearmanworker.timeout",
					"name": "GearmanWorker::timeout",
					"description": "Get socket I/O activity timeout"
				},
				"gearmanworker.unregister": {
					"tokens": [
						"GearmanWorker::unregister",
						"unregister",
						"::unregister"
					],
					"id": "gearmanworker.unregister",
					"name": "GearmanWorker::unregister",
					"description": "Unregister a function name with the job servers"
				},
				"gearmanworker.unregisterall": {
					"tokens": [
						"GearmanWorker::unregisterAll",
						"unregisterAll",
						"::unregisterAll"
					],
					"id": "gearmanworker.unregisterall",
					"name": "GearmanWorker::unregisterAll",
					"description": "Unregister all function names with the job servers"
				},
				"gearmanworker.wait": {
					"tokens": [
						"GearmanWorker::wait",
						"wait",
						"::wait"
					],
					"id": "gearmanworker.wait",
					"name": "GearmanWorker::wait",
					"description": "Wait for activity from one of the job servers"
				},
				"gearmanworker.work": {
					"tokens": [
						"GearmanWorker::work",
						"work",
						"::work"
					],
					"id": "gearmanworker.work",
					"name": "GearmanWorker::work",
					"description": "Wait for and perform jobs"
				},
				"function.gopher-parsedir": {
					"tokens": [
						"gopher_parsedir",
						"gopherparsedir"
					],
					"id": "function.gopher-parsedir",
					"name": "gopher_parsedir",
					"description": "Translate a gopher formatted directory entry into an associative array."
				},
				"function.gupnp-context-get-host-ip": {
					"tokens": [
						"gupnp_context_get_host_ip",
						"gupnpcontext_get_host_ip"
					],
					"id": "function.gupnp-context-get-host-ip",
					"name": "gupnp_context_get_host_ip",
					"description": "Get the IP address"
				},
				"function.gupnp-context-get-port": {
					"tokens": [
						"gupnp_context_get_port",
						"gupnpcontext_get_port"
					],
					"id": "function.gupnp-context-get-port",
					"name": "gupnp_context_get_port",
					"description": "Get the port"
				},
				"function.gupnp-context-get-subscription-timeout": {
					"tokens": [
						"gupnp_context_get_subscription_timeout",
						"gupnpcontext_get_subscription_timeout"
					],
					"id": "function.gupnp-context-get-subscription-timeout",
					"name": "gupnp_context_get_subscription_timeout",
					"description": "Get the event subscription timeout"
				},
				"function.gupnp-context-host-path": {
					"tokens": [
						"gupnp_context_host_path",
						"gupnpcontext_host_path"
					],
					"id": "function.gupnp-context-host-path",
					"name": "gupnp_context_host_path",
					"description": "Start hosting"
				},
				"function.gupnp-context-new": {
					"tokens": [
						"gupnp_context_new",
						"gupnpcontext_new"
					],
					"id": "function.gupnp-context-new",
					"name": "gupnp_context_new",
					"description": "Create a new context"
				},
				"function.gupnp-context-set-subscription-timeout": {
					"tokens": [
						"gupnp_context_set_subscription_timeout",
						"gupnpcontext_set_subscription_timeout"
					],
					"id": "function.gupnp-context-set-subscription-timeout",
					"name": "gupnp_context_set_subscription_timeout",
					"description": "Sets the event subscription timeout"
				},
				"function.gupnp-context-timeout-add": {
					"tokens": [
						"gupnp_context_timeout_add",
						"gupnpcontext_timeout_add"
					],
					"id": "function.gupnp-context-timeout-add",
					"name": "gupnp_context_timeout_add",
					"description": "Sets a function to be called at regular intervals"
				},
				"function.gupnp-context-unhost-path": {
					"tokens": [
						"gupnp_context_unhost_path",
						"gupnpcontext_unhost_path"
					],
					"id": "function.gupnp-context-unhost-path",
					"name": "gupnp_context_unhost_path",
					"description": "Stop hosting"
				},
				"function.gupnp-control-point-browse-start": {
					"tokens": [
						"gupnp_control_point_browse_start",
						"gupnpcontrol_point_browse_start"
					],
					"id": "function.gupnp-control-point-browse-start",
					"name": "gupnp_control_point_browse_start",
					"description": "Start browsing"
				},
				"function.gupnp-control-point-browse-stop": {
					"tokens": [
						"gupnp_control_point_browse_stop",
						"gupnpcontrol_point_browse_stop"
					],
					"id": "function.gupnp-control-point-browse-stop",
					"name": "gupnp_control_point_browse_stop",
					"description": "Stop browsing"
				},
				"function.gupnp-control-point-callback-set": {
					"tokens": [
						"gupnp_control_point_callback_set",
						"gupnpcontrol_point_callback_set"
					],
					"id": "function.gupnp-control-point-callback-set",
					"name": "gupnp_control_point_callback_set",
					"description": "Set control point callback"
				},
				"function.gupnp-control-point-new": {
					"tokens": [
						"gupnp_control_point_new",
						"gupnpcontrol_point_new"
					],
					"id": "function.gupnp-control-point-new",
					"name": "gupnp_control_point_new",
					"description": "Create a new control point"
				},
				"function.gupnp-device-action-callback-set": {
					"tokens": [
						"gupnp_device_action_callback_set",
						"gupnpdevice_action_callback_set"
					],
					"id": "function.gupnp-device-action-callback-set",
					"name": "gupnp_device_action_callback_set",
					"description": "Set device callback function"
				},
				"function.gupnp-device-info-get-service": {
					"tokens": [
						"gupnp_device_info_get_service",
						"gupnpdevice_info_get_service"
					],
					"id": "function.gupnp-device-info-get-service",
					"name": "gupnp_device_info_get_service",
					"description": "Get the service with type"
				},
				"function.gupnp-device-info-get": {
					"tokens": [
						"gupnp_device_info_get",
						"gupnpdevice_info_get"
					],
					"id": "function.gupnp-device-info-get",
					"name": "gupnp_device_info_get",
					"description": "Get info of root device"
				},
				"function.gupnp-root-device-get-available": {
					"tokens": [
						"gupnp_root_device_get_available",
						"gupnproot_device_get_available"
					],
					"id": "function.gupnp-root-device-get-available",
					"name": "gupnp_root_device_get_available",
					"description": "Check whether root device is available"
				},
				"function.gupnp-root-device-get-relative-location": {
					"tokens": [
						"gupnp_root_device_get_relative_location",
						"gupnproot_device_get_relative_location"
					],
					"id": "function.gupnp-root-device-get-relative-location",
					"name": "gupnp_root_device_get_relative_location",
					"description": "Get the relative location of root device."
				},
				"function.gupnp-root-device-new": {
					"tokens": [
						"gupnp_root_device_new",
						"gupnproot_device_new"
					],
					"id": "function.gupnp-root-device-new",
					"name": "gupnp_root_device_new",
					"description": "Create a new root device"
				},
				"function.gupnp-root-device-set-available": {
					"tokens": [
						"gupnp_root_device_set_available",
						"gupnproot_device_set_available"
					],
					"id": "function.gupnp-root-device-set-available",
					"name": "gupnp_root_device_set_available",
					"description": "Set whether or not root_device is available"
				},
				"function.gupnp-root-device-start": {
					"tokens": [
						"gupnp_root_device_start",
						"gupnproot_device_start"
					],
					"id": "function.gupnp-root-device-start",
					"name": "gupnp_root_device_start",
					"description": "Start main loop"
				},
				"function.gupnp-root-device-stop": {
					"tokens": [
						"gupnp_root_device_stop",
						"gupnproot_device_stop"
					],
					"id": "function.gupnp-root-device-stop",
					"name": "gupnp_root_device_stop",
					"description": "Stop main loop"
				},
				"function.gupnp-service-action-get": {
					"tokens": [
						"gupnp_service_action_get",
						"gupnpservice_action_get"
					],
					"id": "function.gupnp-service-action-get",
					"name": "gupnp_service_action_get",
					"description": "Retrieves the specified action arguments"
				},
				"function.gupnp-service-action-return-error": {
					"tokens": [
						"gupnp_service_action_return_error",
						"gupnpservice_action_return_error"
					],
					"id": "function.gupnp-service-action-return-error",
					"name": "gupnp_service_action_return_error",
					"description": "Return error code"
				},
				"function.gupnp-service-action-return": {
					"tokens": [
						"gupnp_service_action_return",
						"gupnpservice_action_return"
					],
					"id": "function.gupnp-service-action-return",
					"name": "gupnp_service_action_return",
					"description": "Return successfully"
				},
				"function.gupnp-service-action-set": {
					"tokens": [
						"gupnp_service_action_set",
						"gupnpservice_action_set"
					],
					"id": "function.gupnp-service-action-set",
					"name": "gupnp_service_action_set",
					"description": "Sets the specified action return values"
				},
				"function.gupnp-service-freeze-notify": {
					"tokens": [
						"gupnp_service_freeze_notify",
						"gupnpservice_freeze_notify"
					],
					"id": "function.gupnp-service-freeze-notify",
					"name": "gupnp_service_freeze_notify",
					"description": "Freeze new notifications"
				},
				"function.gupnp-service-info-get-introspection": {
					"tokens": [
						"gupnp_service_info_get_introspection",
						"gupnpservice_info_get_introspection"
					],
					"id": "function.gupnp-service-info-get-introspection",
					"name": "gupnp_service_info_get_introspection",
					"description": "Get resource introspection of service"
				},
				"function.gupnp-service-info-get": {
					"tokens": [
						"gupnp_service_info_get",
						"gupnpservice_info_get"
					],
					"id": "function.gupnp-service-info-get",
					"name": "gupnp_service_info_get",
					"description": "Get full info of service"
				},
				"function.gupnp-service-introspection-get-state-variable": {
					"tokens": [
						"gupnp_service_introspection_get_state_variable",
						"gupnpservice_introspection_get_state_variable"
					],
					"id": "function.gupnp-service-introspection-get-state-variable",
					"name": "gupnp_service_introspection_get_state_variable",
					"description": "Returns the state variable data"
				},
				"function.gupnp-service-notify": {
					"tokens": [
						"gupnp_service_notify",
						"gupnpservice_notify"
					],
					"id": "function.gupnp-service-notify",
					"name": "gupnp_service_notify",
					"description": "Notifies listening clients"
				},
				"function.gupnp-service-proxy-action-get": {
					"tokens": [
						"gupnp_service_proxy_action_get",
						"gupnpservice_proxy_action_get"
					],
					"id": "function.gupnp-service-proxy-action-get",
					"name": "gupnp_service_proxy_action_get",
					"description": "Send action to the service and get value"
				},
				"function.gupnp-service-proxy-action-set": {
					"tokens": [
						"gupnp_service_proxy_action_set",
						"gupnpservice_proxy_action_set"
					],
					"id": "function.gupnp-service-proxy-action-set",
					"name": "gupnp_service_proxy_action_set",
					"description": "Send action to the service and set value"
				},
				"function.gupnp-service-proxy-add-notify": {
					"tokens": [
						"gupnp_service_proxy_add_notify",
						"gupnpservice_proxy_add_notify"
					],
					"id": "function.gupnp-service-proxy-add-notify",
					"name": "gupnp_service_proxy_add_notify",
					"description": "Sets up callback for variable change notification"
				},
				"function.gupnp-service-proxy-callback-set": {
					"tokens": [
						"gupnp_service_proxy_callback_set",
						"gupnpservice_proxy_callback_set"
					],
					"id": "function.gupnp-service-proxy-callback-set",
					"name": "gupnp_service_proxy_callback_set",
					"description": "Set service proxy callback for signal"
				},
				"function.gupnp-service-proxy-get-subscribed": {
					"tokens": [
						"gupnp_service_proxy_get_subscribed",
						"gupnpservice_proxy_get_subscribed"
					],
					"id": "function.gupnp-service-proxy-get-subscribed",
					"name": "gupnp_service_proxy_get_subscribed",
					"description": "Check whether subscription is valid to the service"
				},
				"function.gupnp-service-proxy-remove-notify": {
					"tokens": [
						"gupnp_service_proxy_remove_notify",
						"gupnpservice_proxy_remove_notify"
					],
					"id": "function.gupnp-service-proxy-remove-notify",
					"name": "gupnp_service_proxy_remove_notify",
					"description": "Cancels the variable change notification"
				},
				"gupnp-service-proxy-send-action": {
					"tokens": [
						"gupnp_service_proxy_send_action",
						"gupnpservice_proxy_send_action"
					],
					"id": "gupnp-service-proxy-send-action",
					"name": "gupnp_service_proxy_send_action",
					"description": "Send action with multiple parameters synchronously"
				},
				"function.gupnp-service-proxy-set-subscribed": {
					"tokens": [
						"gupnp_service_proxy_set_subscribed",
						"gupnpservice_proxy_set_subscribed"
					],
					"id": "function.gupnp-service-proxy-set-subscribed",
					"name": "gupnp_service_proxy_set_subscribed",
					"description": "(Un)subscribes to the service."
				},
				"function.gupnp-service-thaw-notify": {
					"tokens": [
						"gupnp_service_thaw_notify",
						"gupnpservice_thaw_notify"
					],
					"id": "function.gupnp-service-thaw-notify",
					"name": "gupnp_service_thaw_notify",
					"description": "Sends out any pending notifications and stops queuing of new ones."
				},
				"hwapi.checkin": {
					"tokens": [
						"hw_api::checkin",
						"hwapi::checkin",
						"checkin",
						"::checkin"
					],
					"id": "hwapi.checkin",
					"name": "hw_api::checkin",
					"description": "Checks in an object"
				},
				"hwapi.checkout": {
					"tokens": [
						"hw_api::checkout",
						"hwapi::checkout",
						"checkout",
						"::checkout"
					],
					"id": "hwapi.checkout",
					"name": "hw_api::checkout",
					"description": "Checks out an object"
				},
				"hwapi.children": {
					"tokens": [
						"hw_api::children",
						"hwapi::children",
						"children",
						"::children"
					],
					"id": "hwapi.children",
					"name": "hw_api::children",
					"description": "Returns children of an object"
				},
				"hwapi.content": {
					"tokens": [
						"hw_api::content",
						"hwapi::content",
						"content",
						"::content"
					],
					"id": "hwapi.content",
					"name": "hw_api::content",
					"description": "Returns content of an object"
				},
				"hwapi.copy": {
					"tokens": [
						"hw_api::copy",
						"hwapi::copy",
						"copy",
						"::copy"
					],
					"id": "hwapi.copy",
					"name": "hw_api::copy",
					"description": "Copies physically"
				},
				"hwapi.dbstat": {
					"tokens": [
						"hw_api::dbstat",
						"hwapi::dbstat",
						"dbstat",
						"::dbstat"
					],
					"id": "hwapi.dbstat",
					"name": "hw_api::dbstat",
					"description": "Returns statistics about database server"
				},
				"hwapi.dcstat": {
					"tokens": [
						"hw_api::dcstat",
						"hwapi::dcstat",
						"dcstat",
						"::dcstat"
					],
					"id": "hwapi.dcstat",
					"name": "hw_api::dcstat",
					"description": "Returns statistics about document cache server"
				},
				"hwapi.dstanchors": {
					"tokens": [
						"hw_api::dstanchors",
						"hwapi::dstanchors",
						"dstanchors",
						"::dstanchors"
					],
					"id": "hwapi.dstanchors",
					"name": "hw_api::dstanchors",
					"description": "Returns a list of all destination anchors"
				},
				"hwapi.dstofsrcanchor": {
					"tokens": [
						"hw_api::dstofsrcanchor",
						"hwapi::dstofsrcanchor",
						"dstofsrcanchor",
						"::dstofsrcanchor"
					],
					"id": "hwapi.dstofsrcanchor",
					"name": "hw_api::dstofsrcanchor",
					"description": "Returns destination of a source anchor"
				},
				"hwapi.find": {
					"tokens": [
						"hw_api::find",
						"hwapi::find",
						"find",
						"::find"
					],
					"id": "hwapi.find",
					"name": "hw_api::find",
					"description": "Search for objects"
				},
				"hwapi.ftstat": {
					"tokens": [
						"hw_api::ftstat",
						"hwapi::ftstat",
						"ftstat",
						"::ftstat"
					],
					"id": "hwapi.ftstat",
					"name": "hw_api::ftstat",
					"description": "Returns statistics about fulltext server"
				},
				"hwapi.hwstat": {
					"tokens": [
						"hw_api::hwstat",
						"hwapi::hwstat",
						"hwstat",
						"::hwstat"
					],
					"id": "hwapi.hwstat",
					"name": "hw_api::hwstat",
					"description": "Returns statistics about Hyperwave server"
				},
				"hwapi.identify": {
					"tokens": [
						"hw_api::identify",
						"hwapi::identify",
						"identify",
						"::identify"
					],
					"id": "hwapi.identify",
					"name": "hw_api::identify",
					"description": "Log into Hyperwave Server"
				},
				"hwapi.info": {
					"tokens": [
						"hw_api::info",
						"hwapi::info",
						"info",
						"::info"
					],
					"id": "hwapi.info",
					"name": "hw_api::info",
					"description": "Returns information about server configuration"
				},
				"hwapi.insert": {
					"tokens": [
						"hw_api::insert",
						"hwapi::insert",
						"insert",
						"::insert"
					],
					"id": "hwapi.insert",
					"name": "hw_api::insert",
					"description": "Inserts a new object"
				},
				"hwapi.insertanchor": {
					"tokens": [
						"hw_api::insertanchor",
						"hwapi::insertanchor",
						"insertanchor",
						"::insertanchor"
					],
					"id": "hwapi.insertanchor",
					"name": "hw_api::insertanchor",
					"description": "Inserts a new object of type anchor"
				},
				"hwapi.insertcollection": {
					"tokens": [
						"hw_api::insertcollection",
						"hwapi::insertcollection",
						"insertcollection",
						"::insertcollection"
					],
					"id": "hwapi.insertcollection",
					"name": "hw_api::insertcollection",
					"description": "Inserts a new object of type collection"
				},
				"hwapi.insertdocument": {
					"tokens": [
						"hw_api::insertdocument",
						"hwapi::insertdocument",
						"insertdocument",
						"::insertdocument"
					],
					"id": "hwapi.insertdocument",
					"name": "hw_api::insertdocument",
					"description": "Inserts a new object of type document"
				},
				"hwapi.link": {
					"tokens": [
						"hw_api::link",
						"hwapi::link",
						"link",
						"::link"
					],
					"id": "hwapi.link",
					"name": "hw_api::link",
					"description": "Creates a link to an object"
				},
				"hwapi.lock": {
					"tokens": [
						"hw_api::lock",
						"hwapi::lock",
						"lock",
						"::lock"
					],
					"id": "hwapi.lock",
					"name": "hw_api::lock",
					"description": "Locks an object"
				},
				"hwapi.move": {
					"tokens": [
						"hw_api::move",
						"hwapi::move",
						"move",
						"::move"
					],
					"id": "hwapi.move",
					"name": "hw_api::move",
					"description": "Moves object between collections"
				},
				"hwapi.object": {
					"tokens": [
						"hw_api::object",
						"hwapi::object",
						"object",
						"::object"
					],
					"id": "hwapi.object",
					"name": "hw_api::object",
					"description": "Retrieve attribute information"
				},
				"hwapi.objectbyanchor": {
					"tokens": [
						"hw_api::objectbyanchor",
						"hwapi::objectbyanchor",
						"objectbyanchor",
						"::objectbyanchor"
					],
					"id": "hwapi.objectbyanchor",
					"name": "hw_api::objectbyanchor",
					"description": "Returns the object an anchor belongs to"
				},
				"hwapi.parents": {
					"tokens": [
						"hw_api::parents",
						"hwapi::parents",
						"parents",
						"::parents"
					],
					"id": "hwapi.parents",
					"name": "hw_api::parents",
					"description": "Returns parents of an object"
				},
				"hwapi.remove": {
					"tokens": [
						"hw_api::remove",
						"hwapi::remove",
						"remove",
						"::remove"
					],
					"id": "hwapi.remove",
					"name": "hw_api::remove",
					"description": "Delete an object"
				},
				"hwapi.replace": {
					"tokens": [
						"hw_api::replace",
						"hwapi::replace",
						"replace",
						"::replace"
					],
					"id": "hwapi.replace",
					"name": "hw_api::replace",
					"description": "Replaces an object"
				},
				"hwapi.setcommittedversion": {
					"tokens": [
						"hw_api::setcommittedversion",
						"hwapi::setcommittedversion",
						"setcommittedversion",
						"::setcommittedversion"
					],
					"id": "hwapi.setcommittedversion",
					"name": "hw_api::setcommittedversion",
					"description": "Commits version other than last version"
				},
				"hwapi.srcanchors": {
					"tokens": [
						"hw_api::srcanchors",
						"hwapi::srcanchors",
						"srcanchors",
						"::srcanchors"
					],
					"id": "hwapi.srcanchors",
					"name": "hw_api::srcanchors",
					"description": "Returns a list of all source anchors"
				},
				"hwapi.srcsofdst": {
					"tokens": [
						"hw_api::srcsofdst",
						"hwapi::srcsofdst",
						"srcsofdst",
						"::srcsofdst"
					],
					"id": "hwapi.srcsofdst",
					"name": "hw_api::srcsofdst",
					"description": "Returns source of a destination object"
				},
				"hwapi.unlock": {
					"tokens": [
						"hw_api::unlock",
						"hwapi::unlock",
						"unlock",
						"::unlock"
					],
					"id": "hwapi.unlock",
					"name": "hw_api::unlock",
					"description": "Unlocks a locked object"
				},
				"hwapi.user": {
					"tokens": [
						"hw_api::user",
						"hwapi::user",
						"user",
						"::user"
					],
					"id": "hwapi.user",
					"name": "hw_api::user",
					"description": "Returns the own user object"
				},
				"hwapi.userlist": {
					"tokens": [
						"hw_api::userlist",
						"hwapi::userlist",
						"userlist",
						"::userlist"
					],
					"id": "hwapi.userlist",
					"name": "hw_api::userlist",
					"description": "Returns a list of all logged in users"
				},
				"hwapi.attribute-key": {
					"tokens": [
						"hw_api_attribute::key",
						"hwapi_attribute::key",
						"key",
						"::key"
					],
					"id": "hwapi.attribute-key",
					"name": "hw_api_attribute::key",
					"description": "Returns key of the attribute"
				},
				"hwapi.attribute-langdepvalue": {
					"tokens": [
						"hw_api_attribute::langdepvalue",
						"hwapi_attribute::langdepvalue",
						"langdepvalue",
						"::langdepvalue"
					],
					"id": "hwapi.attribute-langdepvalue",
					"name": "hw_api_attribute::langdepvalue",
					"description": "Returns value for a given language"
				},
				"hwapi.attribute-value": {
					"tokens": [
						"hw_api_attribute::value",
						"hwapi_attribute::value",
						"value",
						"::value"
					],
					"id": "hwapi.attribute-value",
					"name": "hw_api_attribute::value",
					"description": "Returns value of the attribute"
				},
				"hwapi.attribute-values": {
					"tokens": [
						"hw_api_attribute::values",
						"hwapi_attribute::values",
						"values",
						"::values"
					],
					"id": "hwapi.attribute-values",
					"name": "hw_api_attribute::values",
					"description": "Returns all values of the attribute"
				},
				"hwapi.content-mimetype": {
					"tokens": [
						"hw_api_content::mimetype",
						"hwapi_content::mimetype",
						"mimetype",
						"::mimetype"
					],
					"id": "hwapi.content-mimetype",
					"name": "hw_api_content::mimetype",
					"description": "Returns mimetype"
				},
				"hwapi.content-read": {
					"tokens": [
						"hw_api_content::read",
						"hwapi_content::read",
						"read",
						"::read"
					],
					"id": "hwapi.content-read",
					"name": "hw_api_content::read",
					"description": "Read content"
				},
				"hwapi.error-count": {
					"tokens": [
						"hw_api_error::count",
						"hwapi_error::count",
						"count",
						"::count"
					],
					"id": "hwapi.error-count",
					"name": "hw_api_error::count",
					"description": "Returns number of reasons"
				},
				"hwapi.error-reason": {
					"tokens": [
						"hw_api_error::reason",
						"hwapi_error::reason",
						"reason",
						"::reason"
					],
					"id": "hwapi.error-reason",
					"name": "hw_api_error::reason",
					"description": "Returns reason of error"
				},
				"hwapi.object-assign": {
					"tokens": [
						"hw_api_object::assign",
						"hwapi_object::assign",
						"assign",
						"::assign"
					],
					"id": "hwapi.object-assign",
					"name": "hw_api_object::assign",
					"description": "Clones object"
				},
				"hwapi.object-attreditable": {
					"tokens": [
						"hw_api_object::attreditable",
						"hwapi_object::attreditable",
						"attreditable",
						"::attreditable"
					],
					"id": "hwapi.object-attreditable",
					"name": "hw_api_object::attreditable",
					"description": "Checks whether an attribute is editable"
				},
				"hwapi.object-count": {
					"tokens": [
						"hw_api_object::count",
						"hwapi_object::count",
						"count",
						"::count"
					],
					"id": "hwapi.object-count",
					"name": "hw_api_object::count",
					"description": "Returns number of attributes"
				},
				"hwapi.object-insert": {
					"tokens": [
						"hw_api_object::insert",
						"hwapi_object::insert",
						"insert",
						"::insert"
					],
					"id": "hwapi.object-insert",
					"name": "hw_api_object::insert",
					"description": "Inserts new attribute"
				},
				"hwapi.object-remove": {
					"tokens": [
						"hw_api_object::remove",
						"hwapi_object::remove",
						"remove",
						"::remove"
					],
					"id": "hwapi.object-remove",
					"name": "hw_api_object::remove",
					"description": "Removes attribute"
				},
				"hwapi.object-title": {
					"tokens": [
						"hw_api_object::title",
						"hwapi_object::title",
						"title",
						"::title"
					],
					"id": "hwapi.object-title",
					"name": "hw_api_object::title",
					"description": "Returns the title attribute"
				},
				"hwapi.object-value": {
					"tokens": [
						"hw_api_object::value",
						"hwapi_object::value",
						"value",
						"::value"
					],
					"id": "hwapi.object-value",
					"name": "hw_api_object::value",
					"description": "Returns value of attribute"
				},
				"hwapi.reason-description": {
					"tokens": [
						"hw_api_reason::description",
						"hwapi_reason::description",
						"description",
						"::description"
					],
					"id": "hwapi.reason-description",
					"name": "hw_api_reason::description",
					"description": "Returns description of reason"
				},
				"hwapi.reason-type": {
					"tokens": [
						"hw_api_reason::type",
						"hwapi_reason::type",
						"type",
						"::type"
					],
					"id": "hwapi.reason-type",
					"name": "hw_api_reason::type",
					"description": "Returns type of reason"
				},
				"function.hwapi-attribute-new": {
					"tokens": [
						"hwapi_attribute_new",
						"hwapiattribute_new"
					],
					"id": "function.hwapi-attribute-new",
					"name": "hwapi_attribute_new",
					"description": "Creates instance of class hw_api_attribute"
				},
				"function.hwapi-content-new": {
					"tokens": [
						"hwapi_content_new",
						"hwapicontent_new"
					],
					"id": "function.hwapi-content-new",
					"name": "hwapi_content_new",
					"description": "Create new instance of class hw_api_content"
				},
				"function.hwapi-hgcsp": {
					"tokens": [
						"hwapi_hgcsp",
						"hwapihgcsp"
					],
					"id": "function.hwapi-hgcsp",
					"name": "hwapi_hgcsp",
					"description": "Returns object of class hw_api"
				},
				"function.hwapi-object-new": {
					"tokens": [
						"hwapi_object_new",
						"hwapiobject_new"
					],
					"id": "function.hwapi-object-new",
					"name": "hwapi_object_new",
					"description": "Creates a new instance of class hwapi_object_new"
				},
				"function.ldap-8859-to-t61": {
					"tokens": [
						"ldap_8859_to_t61",
						"ldap8859_to_t61"
					],
					"id": "function.ldap-8859-to-t61",
					"name": "ldap_8859_to_t61",
					"description": "Translate 8859 characters to t61 characters"
				},
				"function.ldap-add": {
					"tokens": [
						"ldap_add",
						"ldapadd"
					],
					"id": "function.ldap-add",
					"name": "ldap_add",
					"description": "Add entries to LDAP directory"
				},
				"function.ldap-bind": {
					"tokens": [
						"ldap_bind",
						"ldapbind"
					],
					"id": "function.ldap-bind",
					"name": "ldap_bind",
					"description": "Bind to LDAP directory"
				},
				"function.ldap-close": {
					"tokens": [
						"ldap_close",
						"ldapclose"
					],
					"id": "function.ldap-close",
					"name": "ldap_close",
					"description": "Alias of ldap_unbind"
				},
				"function.ldap-compare": {
					"tokens": [
						"ldap_compare",
						"ldapcompare"
					],
					"id": "function.ldap-compare",
					"name": "ldap_compare",
					"description": "Compare value of attribute found in entry specified with DN"
				},
				"function.ldap-connect": {
					"tokens": [
						"ldap_connect",
						"ldapconnect"
					],
					"id": "function.ldap-connect",
					"name": "ldap_connect",
					"description": "Connect to an LDAP server"
				},
				"function.ldap-control-paged-result-response": {
					"tokens": [
						"ldap_control_paged_result_response",
						"ldapcontrol_paged_result_response"
					],
					"id": "function.ldap-control-paged-result-response",
					"name": "ldap_control_paged_result_response",
					"description": "Retrieve the LDAP pagination cookie"
				},
				"function.ldap-control-paged-result": {
					"tokens": [
						"ldap_control_paged_result",
						"ldapcontrol_paged_result"
					],
					"id": "function.ldap-control-paged-result",
					"name": "ldap_control_paged_result",
					"description": "Send LDAP pagination control"
				},
				"function.ldap-count-entries": {
					"tokens": [
						"ldap_count_entries",
						"ldapcount_entries"
					],
					"id": "function.ldap-count-entries",
					"name": "ldap_count_entries",
					"description": "Count the number of entries in a search"
				},
				"function.ldap-delete": {
					"tokens": [
						"ldap_delete",
						"ldapdelete"
					],
					"id": "function.ldap-delete",
					"name": "ldap_delete",
					"description": "Delete an entry from a directory"
				},
				"function.ldap-dn2ufn": {
					"tokens": [
						"ldap_dn2ufn",
						"ldapdn2ufn"
					],
					"id": "function.ldap-dn2ufn",
					"name": "ldap_dn2ufn",
					"description": "Convert DN to User Friendly Naming format"
				},
				"function.ldap-err2str": {
					"tokens": [
						"ldap_err2str",
						"ldaperr2str"
					],
					"id": "function.ldap-err2str",
					"name": "ldap_err2str",
					"description": "Convert LDAP error number into string error message"
				},
				"function.ldap-errno": {
					"tokens": [
						"ldap_errno",
						"ldaperrno"
					],
					"id": "function.ldap-errno",
					"name": "ldap_errno",
					"description": "Return the LDAP error number of the last LDAP command"
				},
				"function.ldap-error": {
					"tokens": [
						"ldap_error",
						"ldaperror"
					],
					"id": "function.ldap-error",
					"name": "ldap_error",
					"description": "Return the LDAP error message of the last LDAP command"
				},
				"function.ldap-escape": {
					"tokens": [
						"ldap_escape",
						"ldapescape"
					],
					"id": "function.ldap-escape",
					"name": "ldap_escape",
					"description": "Escape a string for use in an LDAP filter or DN"
				},
				"function.ldap-explode-dn": {
					"tokens": [
						"ldap_explode_dn",
						"ldapexplode_dn"
					],
					"id": "function.ldap-explode-dn",
					"name": "ldap_explode_dn",
					"description": "Splits DN into its component parts"
				},
				"function.ldap-first-attribute": {
					"tokens": [
						"ldap_first_attribute",
						"ldapfirst_attribute"
					],
					"id": "function.ldap-first-attribute",
					"name": "ldap_first_attribute",
					"description": "Return first attribute"
				},
				"function.ldap-first-entry": {
					"tokens": [
						"ldap_first_entry",
						"ldapfirst_entry"
					],
					"id": "function.ldap-first-entry",
					"name": "ldap_first_entry",
					"description": "Return first result id"
				},
				"function.ldap-first-reference": {
					"tokens": [
						"ldap_first_reference",
						"ldapfirst_reference"
					],
					"id": "function.ldap-first-reference",
					"name": "ldap_first_reference",
					"description": "Return first reference"
				},
				"function.ldap-free-result": {
					"tokens": [
						"ldap_free_result",
						"ldapfree_result"
					],
					"id": "function.ldap-free-result",
					"name": "ldap_free_result",
					"description": "Free result memory"
				},
				"function.ldap-get-attributes": {
					"tokens": [
						"ldap_get_attributes",
						"ldapget_attributes"
					],
					"id": "function.ldap-get-attributes",
					"name": "ldap_get_attributes",
					"description": "Get attributes from a search result entry"
				},
				"function.ldap-get-dn": {
					"tokens": [
						"ldap_get_dn",
						"ldapget_dn"
					],
					"id": "function.ldap-get-dn",
					"name": "ldap_get_dn",
					"description": "Get the DN of a result entry"
				},
				"function.ldap-get-entries": {
					"tokens": [
						"ldap_get_entries",
						"ldapget_entries"
					],
					"id": "function.ldap-get-entries",
					"name": "ldap_get_entries",
					"description": "Get all result entries"
				},
				"function.ldap-get-option": {
					"tokens": [
						"ldap_get_option",
						"ldapget_option"
					],
					"id": "function.ldap-get-option",
					"name": "ldap_get_option",
					"description": "Get the current value for given option"
				},
				"function.ldap-get-values-len": {
					"tokens": [
						"ldap_get_values_len",
						"ldapget_values_len"
					],
					"id": "function.ldap-get-values-len",
					"name": "ldap_get_values_len",
					"description": "Get all binary values from a result entry"
				},
				"function.ldap-get-values": {
					"tokens": [
						"ldap_get_values",
						"ldapget_values"
					],
					"id": "function.ldap-get-values",
					"name": "ldap_get_values",
					"description": "Get all values from a result entry"
				},
				"function.ldap-list": {
					"tokens": [
						"ldap_list",
						"ldaplist"
					],
					"id": "function.ldap-list",
					"name": "ldap_list",
					"description": "Single-level search"
				},
				"function.ldap-mod-add": {
					"tokens": [
						"ldap_mod_add",
						"ldapmod_add"
					],
					"id": "function.ldap-mod-add",
					"name": "ldap_mod_add",
					"description": "Add attribute values to current attributes"
				},
				"function.ldap-mod-del": {
					"tokens": [
						"ldap_mod_del",
						"ldapmod_del"
					],
					"id": "function.ldap-mod-del",
					"name": "ldap_mod_del",
					"description": "Delete attribute values from current attributes"
				},
				"function.ldap-mod-replace": {
					"tokens": [
						"ldap_mod_replace",
						"ldapmod_replace"
					],
					"id": "function.ldap-mod-replace",
					"name": "ldap_mod_replace",
					"description": "Replace attribute values with new ones"
				},
				"function.ldap-modify-batch": {
					"tokens": [
						"ldap_modify_batch",
						"ldapmodify_batch"
					],
					"id": "function.ldap-modify-batch",
					"name": "ldap_modify_batch",
					"description": "Batch and execute modifications on an LDAP entry"
				},
				"function.ldap-modify": {
					"tokens": [
						"ldap_modify",
						"ldapmodify"
					],
					"id": "function.ldap-modify",
					"name": "ldap_modify",
					"description": "Modify an LDAP entry"
				},
				"function.ldap-next-attribute": {
					"tokens": [
						"ldap_next_attribute",
						"ldapnext_attribute"
					],
					"id": "function.ldap-next-attribute",
					"name": "ldap_next_attribute",
					"description": "Get the next attribute in result"
				},
				"function.ldap-next-entry": {
					"tokens": [
						"ldap_next_entry",
						"ldapnext_entry"
					],
					"id": "function.ldap-next-entry",
					"name": "ldap_next_entry",
					"description": "Get next result entry"
				},
				"function.ldap-next-reference": {
					"tokens": [
						"ldap_next_reference",
						"ldapnext_reference"
					],
					"id": "function.ldap-next-reference",
					"name": "ldap_next_reference",
					"description": "Get next reference"
				},
				"function.ldap-parse-reference": {
					"tokens": [
						"ldap_parse_reference",
						"ldapparse_reference"
					],
					"id": "function.ldap-parse-reference",
					"name": "ldap_parse_reference",
					"description": "Extract information from reference entry"
				},
				"function.ldap-parse-result": {
					"tokens": [
						"ldap_parse_result",
						"ldapparse_result"
					],
					"id": "function.ldap-parse-result",
					"name": "ldap_parse_result",
					"description": "Extract information from result"
				},
				"function.ldap-read": {
					"tokens": [
						"ldap_read",
						"ldapread"
					],
					"id": "function.ldap-read",
					"name": "ldap_read",
					"description": "Read an entry"
				},
				"function.ldap-rename": {
					"tokens": [
						"ldap_rename",
						"ldaprename"
					],
					"id": "function.ldap-rename",
					"name": "ldap_rename",
					"description": "Modify the name of an entry"
				},
				"function.ldap-sasl-bind": {
					"tokens": [
						"ldap_sasl_bind",
						"ldapsasl_bind"
					],
					"id": "function.ldap-sasl-bind",
					"name": "ldap_sasl_bind",
					"description": "Bind to LDAP directory using SASL"
				},
				"function.ldap-search": {
					"tokens": [
						"ldap_search",
						"ldapsearch"
					],
					"id": "function.ldap-search",
					"name": "ldap_search",
					"description": "Search LDAP tree"
				},
				"function.ldap-set-option": {
					"tokens": [
						"ldap_set_option",
						"ldapset_option"
					],
					"id": "function.ldap-set-option",
					"name": "ldap_set_option",
					"description": "Set the value of the given option"
				},
				"function.ldap-set-rebind-proc": {
					"tokens": [
						"ldap_set_rebind_proc",
						"ldapset_rebind_proc"
					],
					"id": "function.ldap-set-rebind-proc",
					"name": "ldap_set_rebind_proc",
					"description": "Set a callback function to do re-binds on referral chasing"
				},
				"function.ldap-sort": {
					"tokens": [
						"ldap_sort",
						"ldapsort"
					],
					"id": "function.ldap-sort",
					"name": "ldap_sort",
					"description": "Sort LDAP result entries on the client side"
				},
				"function.ldap-start-tls": {
					"tokens": [
						"ldap_start_tls",
						"ldapstart_tls"
					],
					"id": "function.ldap-start-tls",
					"name": "ldap_start_tls",
					"description": "Start TLS"
				},
				"function.ldap-t61-to-8859": {
					"tokens": [
						"ldap_t61_to_8859",
						"ldapt61_to_8859"
					],
					"id": "function.ldap-t61-to-8859",
					"name": "ldap_t61_to_8859",
					"description": "Translate t61 characters to 8859 characters"
				},
				"function.ldap-unbind": {
					"tokens": [
						"ldap_unbind",
						"ldapunbind"
					],
					"id": "function.ldap-unbind",
					"name": "ldap_unbind",
					"description": "Unbind from LDAP directory"
				},
				"memcache.add": {
					"tokens": [
						"Memcache::add",
						"add",
						"::add"
					],
					"id": "memcache.add",
					"name": "Memcache::add",
					"description": "Add an item to the server"
				},
				"memcache.addserver": {
					"tokens": [
						"Memcache::addServer",
						"addServer",
						"::addServer"
					],
					"id": "memcache.addserver",
					"name": "Memcache::addServer",
					"description": "Add a memcached server to connection pool"
				},
				"memcache.close": {
					"tokens": [
						"Memcache::close",
						"close",
						"::close"
					],
					"id": "memcache.close",
					"name": "Memcache::close",
					"description": "Close memcached server connection"
				},
				"memcache.connect": {
					"tokens": [
						"Memcache::connect",
						"connect",
						"::connect"
					],
					"id": "memcache.connect",
					"name": "Memcache::connect",
					"description": "Open memcached server connection"
				},
				"memcache.decrement": {
					"tokens": [
						"Memcache::decrement",
						"decrement",
						"::decrement"
					],
					"id": "memcache.decrement",
					"name": "Memcache::decrement",
					"description": "Decrement item's value"
				},
				"memcache.delete": {
					"tokens": [
						"Memcache::delete",
						"delete",
						"::delete"
					],
					"id": "memcache.delete",
					"name": "Memcache::delete",
					"description": "Delete item from the server"
				},
				"memcache.flush": {
					"tokens": [
						"Memcache::flush",
						"flush",
						"::flush"
					],
					"id": "memcache.flush",
					"name": "Memcache::flush",
					"description": "Flush all existing items at the server"
				},
				"memcache.get": {
					"tokens": [
						"Memcache::get",
						"get",
						"::get"
					],
					"id": "memcache.get",
					"name": "Memcache::get",
					"description": "Retrieve item from the server"
				},
				"memcache.getextendedstats": {
					"tokens": [
						"Memcache::getExtendedStats",
						"getExtendedStats",
						"::getExtendedStats"
					],
					"id": "memcache.getextendedstats",
					"name": "Memcache::getExtendedStats",
					"description": "Get statistics from all servers in pool"
				},
				"memcache.getserverstatus": {
					"tokens": [
						"Memcache::getServerStatus",
						"getServerStatus",
						"::getServerStatus"
					],
					"id": "memcache.getserverstatus",
					"name": "Memcache::getServerStatus",
					"description": "Returns server status"
				},
				"memcache.getstats": {
					"tokens": [
						"Memcache::getStats",
						"getStats",
						"::getStats"
					],
					"id": "memcache.getstats",
					"name": "Memcache::getStats",
					"description": "Get statistics of the server"
				},
				"memcache.getversion": {
					"tokens": [
						"Memcache::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "memcache.getversion",
					"name": "Memcache::getVersion",
					"description": "Return version of the server"
				},
				"memcache.increment": {
					"tokens": [
						"Memcache::increment",
						"increment",
						"::increment"
					],
					"id": "memcache.increment",
					"name": "Memcache::increment",
					"description": "Increment item's value"
				},
				"memcache.pconnect": {
					"tokens": [
						"Memcache::pconnect",
						"pconnect",
						"::pconnect"
					],
					"id": "memcache.pconnect",
					"name": "Memcache::pconnect",
					"description": "Open memcached server persistent connection"
				},
				"memcache.replace": {
					"tokens": [
						"Memcache::replace",
						"replace",
						"::replace"
					],
					"id": "memcache.replace",
					"name": "Memcache::replace",
					"description": "Replace value of the existing item"
				},
				"memcache.set": {
					"tokens": [
						"Memcache::set",
						"set",
						"::set"
					],
					"id": "memcache.set",
					"name": "Memcache::set",
					"description": "Store data at the server"
				},
				"memcache.setcompressthreshold": {
					"tokens": [
						"Memcache::setCompressThreshold",
						"setCompressThreshold",
						"::setCompressThreshold"
					],
					"id": "memcache.setcompressthreshold",
					"name": "Memcache::setCompressThreshold",
					"description": "Enable automatic compression of large values"
				},
				"memcache.setserverparams": {
					"tokens": [
						"Memcache::setServerParams",
						"setServerParams",
						"::setServerParams"
					],
					"id": "memcache.setserverparams",
					"name": "Memcache::setServerParams",
					"description": "Changes server parameters and status at runtime"
				},
				"function.memcache-debug": {
					"tokens": [
						"memcache_debug",
						"memcachedebug"
					],
					"id": "function.memcache-debug",
					"name": "memcache_debug",
					"description": "Turn debug output on/off"
				},
				"memcached.add": {
					"tokens": [
						"Memcached::add",
						"add",
						"::add"
					],
					"id": "memcached.add",
					"name": "Memcached::add",
					"description": "Add an item under a new key"
				},
				"memcached.addbykey": {
					"tokens": [
						"Memcached::addByKey",
						"addByKey",
						"::addByKey"
					],
					"id": "memcached.addbykey",
					"name": "Memcached::addByKey",
					"description": "Add an item under a new key on a specific server"
				},
				"memcached.addserver": {
					"tokens": [
						"Memcached::addServer",
						"addServer",
						"::addServer"
					],
					"id": "memcached.addserver",
					"name": "Memcached::addServer",
					"description": "Add a server to the server pool"
				},
				"memcached.addservers": {
					"tokens": [
						"Memcached::addServers",
						"addServers",
						"::addServers"
					],
					"id": "memcached.addservers",
					"name": "Memcached::addServers",
					"description": "Add multiple servers to the server pool"
				},
				"memcached.append": {
					"tokens": [
						"Memcached::append",
						"append",
						"::append"
					],
					"id": "memcached.append",
					"name": "Memcached::append",
					"description": "Append data to an existing item"
				},
				"memcached.appendbykey": {
					"tokens": [
						"Memcached::appendByKey",
						"appendByKey",
						"::appendByKey"
					],
					"id": "memcached.appendbykey",
					"name": "Memcached::appendByKey",
					"description": "Append data to an existing item on a specific server"
				},
				"memcached.cas": {
					"tokens": [
						"Memcached::cas",
						"cas",
						"::cas"
					],
					"id": "memcached.cas",
					"name": "Memcached::cas",
					"description": "Compare and swap an item"
				},
				"memcached.casbykey": {
					"tokens": [
						"Memcached::casByKey",
						"casByKey",
						"::casByKey"
					],
					"id": "memcached.casbykey",
					"name": "Memcached::casByKey",
					"description": "Compare and swap an item on a specific server"
				},
				"memcached.construct": {
					"tokens": [
						"Memcached::__construct",
						"Memcached::_construct",
						"__construct",
						"::__construct"
					],
					"id": "memcached.construct",
					"name": "Memcached::__construct",
					"description": "Create a Memcached instance"
				},
				"memcached.decrement": {
					"tokens": [
						"Memcached::decrement",
						"decrement",
						"::decrement"
					],
					"id": "memcached.decrement",
					"name": "Memcached::decrement",
					"description": "Decrement numeric item's value"
				},
				"memcached.decrementbykey": {
					"tokens": [
						"Memcached::decrementByKey",
						"decrementByKey",
						"::decrementByKey"
					],
					"id": "memcached.decrementbykey",
					"name": "Memcached::decrementByKey",
					"description": "Decrement numeric item's value, stored on a specific server"
				},
				"memcached.delete": {
					"tokens": [
						"Memcached::delete",
						"delete",
						"::delete"
					],
					"id": "memcached.delete",
					"name": "Memcached::delete",
					"description": "Delete an item"
				},
				"memcached.deletebykey": {
					"tokens": [
						"Memcached::deleteByKey",
						"deleteByKey",
						"::deleteByKey"
					],
					"id": "memcached.deletebykey",
					"name": "Memcached::deleteByKey",
					"description": "Delete an item from a specific server"
				},
				"memcached.deletemulti": {
					"tokens": [
						"Memcached::deleteMulti",
						"deleteMulti",
						"::deleteMulti"
					],
					"id": "memcached.deletemulti",
					"name": "Memcached::deleteMulti",
					"description": "Delete multiple items"
				},
				"memcached.deletemultibykey": {
					"tokens": [
						"Memcached::deleteMultiByKey",
						"deleteMultiByKey",
						"::deleteMultiByKey"
					],
					"id": "memcached.deletemultibykey",
					"name": "Memcached::deleteMultiByKey",
					"description": "Delete multiple items from a specific server"
				},
				"memcached.fetch": {
					"tokens": [
						"Memcached::fetch",
						"fetch",
						"::fetch"
					],
					"id": "memcached.fetch",
					"name": "Memcached::fetch",
					"description": "Fetch the next result"
				},
				"memcached.fetchall": {
					"tokens": [
						"Memcached::fetchAll",
						"fetchAll",
						"::fetchAll"
					],
					"id": "memcached.fetchall",
					"name": "Memcached::fetchAll",
					"description": "Fetch all the remaining results"
				},
				"memcached.flush": {
					"tokens": [
						"Memcached::flush",
						"flush",
						"::flush"
					],
					"id": "memcached.flush",
					"name": "Memcached::flush",
					"description": "Invalidate all items in the cache"
				},
				"memcached.get": {
					"tokens": [
						"Memcached::get",
						"get",
						"::get"
					],
					"id": "memcached.get",
					"name": "Memcached::get",
					"description": "Retrieve an item"
				},
				"memcached.getallkeys": {
					"tokens": [
						"Memcached::getAllKeys",
						"getAllKeys",
						"::getAllKeys"
					],
					"id": "memcached.getallkeys",
					"name": "Memcached::getAllKeys",
					"description": "Gets the keys stored on all the servers"
				},
				"memcached.getbykey": {
					"tokens": [
						"Memcached::getByKey",
						"getByKey",
						"::getByKey"
					],
					"id": "memcached.getbykey",
					"name": "Memcached::getByKey",
					"description": "Retrieve an item from a specific server"
				},
				"memcached.getdelayed": {
					"tokens": [
						"Memcached::getDelayed",
						"getDelayed",
						"::getDelayed"
					],
					"id": "memcached.getdelayed",
					"name": "Memcached::getDelayed",
					"description": "Request multiple items"
				},
				"memcached.getdelayedbykey": {
					"tokens": [
						"Memcached::getDelayedByKey",
						"getDelayedByKey",
						"::getDelayedByKey"
					],
					"id": "memcached.getdelayedbykey",
					"name": "Memcached::getDelayedByKey",
					"description": "Request multiple items from a specific server"
				},
				"memcached.getmulti": {
					"tokens": [
						"Memcached::getMulti",
						"getMulti",
						"::getMulti"
					],
					"id": "memcached.getmulti",
					"name": "Memcached::getMulti",
					"description": "Retrieve multiple items"
				},
				"memcached.getmultibykey": {
					"tokens": [
						"Memcached::getMultiByKey",
						"getMultiByKey",
						"::getMultiByKey"
					],
					"id": "memcached.getmultibykey",
					"name": "Memcached::getMultiByKey",
					"description": "Retrieve multiple items from a specific server"
				},
				"memcached.getoption": {
					"tokens": [
						"Memcached::getOption",
						"getOption",
						"::getOption"
					],
					"id": "memcached.getoption",
					"name": "Memcached::getOption",
					"description": "Retrieve a Memcached option value"
				},
				"memcached.getresultcode": {
					"tokens": [
						"Memcached::getResultCode",
						"getResultCode",
						"::getResultCode"
					],
					"id": "memcached.getresultcode",
					"name": "Memcached::getResultCode",
					"description": "Return the result code of the last operation"
				},
				"memcached.getresultmessage": {
					"tokens": [
						"Memcached::getResultMessage",
						"getResultMessage",
						"::getResultMessage"
					],
					"id": "memcached.getresultmessage",
					"name": "Memcached::getResultMessage",
					"description": "Return the message describing the result of the last operation"
				},
				"memcached.getserverbykey": {
					"tokens": [
						"Memcached::getServerByKey",
						"getServerByKey",
						"::getServerByKey"
					],
					"id": "memcached.getserverbykey",
					"name": "Memcached::getServerByKey",
					"description": "Map a key to a server"
				},
				"memcached.getserverlist": {
					"tokens": [
						"Memcached::getServerList",
						"getServerList",
						"::getServerList"
					],
					"id": "memcached.getserverlist",
					"name": "Memcached::getServerList",
					"description": "Get the list of the servers in the pool"
				},
				"memcached.getstats": {
					"tokens": [
						"Memcached::getStats",
						"getStats",
						"::getStats"
					],
					"id": "memcached.getstats",
					"name": "Memcached::getStats",
					"description": "Get server pool statistics"
				},
				"memcached.getversion": {
					"tokens": [
						"Memcached::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "memcached.getversion",
					"name": "Memcached::getVersion",
					"description": "Get server pool version info"
				},
				"memcached.increment": {
					"tokens": [
						"Memcached::increment",
						"increment",
						"::increment"
					],
					"id": "memcached.increment",
					"name": "Memcached::increment",
					"description": "Increment numeric item's value"
				},
				"memcached.incrementbykey": {
					"tokens": [
						"Memcached::incrementByKey",
						"incrementByKey",
						"::incrementByKey"
					],
					"id": "memcached.incrementbykey",
					"name": "Memcached::incrementByKey",
					"description": "Increment numeric item's value, stored on a specific server"
				},
				"memcached.ispersistent": {
					"tokens": [
						"Memcached::isPersistent",
						"isPersistent",
						"::isPersistent"
					],
					"id": "memcached.ispersistent",
					"name": "Memcached::isPersistent",
					"description": "Check if a persitent connection to memcache is being used"
				},
				"memcached.ispristine": {
					"tokens": [
						"Memcached::isPristine",
						"isPristine",
						"::isPristine"
					],
					"id": "memcached.ispristine",
					"name": "Memcached::isPristine",
					"description": "Check if the instance was recently created"
				},
				"memcached.prepend": {
					"tokens": [
						"Memcached::prepend",
						"prepend",
						"::prepend"
					],
					"id": "memcached.prepend",
					"name": "Memcached::prepend",
					"description": "Prepend data to an existing item"
				},
				"memcached.prependbykey": {
					"tokens": [
						"Memcached::prependByKey",
						"prependByKey",
						"::prependByKey"
					],
					"id": "memcached.prependbykey",
					"name": "Memcached::prependByKey",
					"description": "Prepend data to an existing item on a specific server"
				},
				"memcached.quit": {
					"tokens": [
						"Memcached::quit",
						"quit",
						"::quit"
					],
					"id": "memcached.quit",
					"name": "Memcached::quit",
					"description": "Close any open connections"
				},
				"memcached.replace": {
					"tokens": [
						"Memcached::replace",
						"replace",
						"::replace"
					],
					"id": "memcached.replace",
					"name": "Memcached::replace",
					"description": "Replace the item under an existing key"
				},
				"memcached.replacebykey": {
					"tokens": [
						"Memcached::replaceByKey",
						"replaceByKey",
						"::replaceByKey"
					],
					"id": "memcached.replacebykey",
					"name": "Memcached::replaceByKey",
					"description": "Replace the item under an existing key on a specific server"
				},
				"memcached.resetserverlist": {
					"tokens": [
						"Memcached::resetServerList",
						"resetServerList",
						"::resetServerList"
					],
					"id": "memcached.resetserverlist",
					"name": "Memcached::resetServerList",
					"description": "Clears all servers from the server list"
				},
				"memcached.set": {
					"tokens": [
						"Memcached::set",
						"set",
						"::set"
					],
					"id": "memcached.set",
					"name": "Memcached::set",
					"description": "Store an item"
				},
				"memcached.setbykey": {
					"tokens": [
						"Memcached::setByKey",
						"setByKey",
						"::setByKey"
					],
					"id": "memcached.setbykey",
					"name": "Memcached::setByKey",
					"description": "Store an item on a specific server"
				},
				"memcached.setmulti": {
					"tokens": [
						"Memcached::setMulti",
						"setMulti",
						"::setMulti"
					],
					"id": "memcached.setmulti",
					"name": "Memcached::setMulti",
					"description": "Store multiple items"
				},
				"memcached.setmultibykey": {
					"tokens": [
						"Memcached::setMultiByKey",
						"setMultiByKey",
						"::setMultiByKey"
					],
					"id": "memcached.setmultibykey",
					"name": "Memcached::setMultiByKey",
					"description": "Store multiple items on a specific server"
				},
				"memcached.setoption": {
					"tokens": [
						"Memcached::setOption",
						"setOption",
						"::setOption"
					],
					"id": "memcached.setoption",
					"name": "Memcached::setOption",
					"description": "Set a Memcached option"
				},
				"memcached.setoptions": {
					"tokens": [
						"Memcached::setOptions",
						"setOptions",
						"::setOptions"
					],
					"id": "memcached.setoptions",
					"name": "Memcached::setOptions",
					"description": "Set Memcached options"
				},
				"memcached.setsaslauthdata": {
					"tokens": [
						"Memcached::setSaslAuthData",
						"setSaslAuthData",
						"::setSaslAuthData"
					],
					"id": "memcached.setsaslauthdata",
					"name": "Memcached::setSaslAuthData",
					"description": "Set the credentials to use for authentication"
				},
				"memcached.touch": {
					"tokens": [
						"Memcached::touch",
						"touch",
						"::touch"
					],
					"id": "memcached.touch",
					"name": "Memcached::touch",
					"description": "Set a new expiration on an item"
				},
				"memcached.touchbykey": {
					"tokens": [
						"Memcached::touchByKey",
						"touchByKey",
						"::touchByKey"
					],
					"id": "memcached.touchbykey",
					"name": "Memcached::touchByKey",
					"description": "Set a new expiration on an item on a specific server"
				},
				"function.mqseries-back": {
					"tokens": [
						"mqseries_back",
						"mqseriesback"
					],
					"id": "function.mqseries-back",
					"name": "mqseries_back",
					"description": "MQSeries MQBACK"
				},
				"function.mqseries-begin": {
					"tokens": [
						"mqseries_begin",
						"mqseriesbegin"
					],
					"id": "function.mqseries-begin",
					"name": "mqseries_begin",
					"description": "MQseries MQBEGIN"
				},
				"function.mqseries-close": {
					"tokens": [
						"mqseries_close",
						"mqseriesclose"
					],
					"id": "function.mqseries-close",
					"name": "mqseries_close",
					"description": "MQSeries MQCLOSE"
				},
				"function.mqseries-cmit": {
					"tokens": [
						"mqseries_cmit",
						"mqseriescmit"
					],
					"id": "function.mqseries-cmit",
					"name": "mqseries_cmit",
					"description": "MQSeries MQCMIT"
				},
				"function.mqseries-conn": {
					"tokens": [
						"mqseries_conn",
						"mqseriesconn"
					],
					"id": "function.mqseries-conn",
					"name": "mqseries_conn",
					"description": "MQSeries MQCONN"
				},
				"function.mqseries-connx": {
					"tokens": [
						"mqseries_connx",
						"mqseriesconnx"
					],
					"id": "function.mqseries-connx",
					"name": "mqseries_connx",
					"description": "MQSeries MQCONNX"
				},
				"function.mqseries-disc": {
					"tokens": [
						"mqseries_disc",
						"mqseriesdisc"
					],
					"id": "function.mqseries-disc",
					"name": "mqseries_disc",
					"description": "MQSeries MQDISC"
				},
				"function.mqseries-get": {
					"tokens": [
						"mqseries_get",
						"mqseriesget"
					],
					"id": "function.mqseries-get",
					"name": "mqseries_get",
					"description": "MQSeries MQGET"
				},
				"function.mqseries-inq": {
					"tokens": [
						"mqseries_inq",
						"mqseriesinq"
					],
					"id": "function.mqseries-inq",
					"name": "mqseries_inq",
					"description": "MQSeries MQINQ"
				},
				"function.mqseries-open": {
					"tokens": [
						"mqseries_open",
						"mqseriesopen"
					],
					"id": "function.mqseries-open",
					"name": "mqseries_open",
					"description": "MQSeries MQOPEN"
				},
				"function.mqseries-put1": {
					"tokens": [
						"mqseries_put1",
						"mqseriesput1"
					],
					"id": "function.mqseries-put1",
					"name": "mqseries_put1",
					"description": "MQSeries MQPUT1"
				},
				"function.mqseries-put": {
					"tokens": [
						"mqseries_put",
						"mqseriesput"
					],
					"id": "function.mqseries-put",
					"name": "mqseries_put",
					"description": "MQSeries MQPUT"
				},
				"function.mqseries-set": {
					"tokens": [
						"mqseries_set",
						"mqseriesset"
					],
					"id": "function.mqseries-set",
					"name": "mqseries_set",
					"description": "MQSeries MQSET"
				},
				"function.mqseries-strerror": {
					"tokens": [
						"mqseries_strerror",
						"mqseriesstrerror"
					],
					"id": "function.mqseries-strerror",
					"name": "mqseries_strerror",
					"description": "Returns the error message corresponding to a result code (MQRC)."
				},
				"function.checkdnsrr": {
					"tokens": [
						"checkdnsrr"
					],
					"id": "function.checkdnsrr",
					"name": "checkdnsrr",
					"description": "Check DNS records corresponding to a given Internet host name or IP address"
				},
				"function.closelog": {
					"tokens": [
						"closelog"
					],
					"id": "function.closelog",
					"name": "closelog",
					"description": "Close connection to system logger"
				},
				"function.define-syslog-variables": {
					"tokens": [
						"define_syslog_variables",
						"definesyslog_variables"
					],
					"id": "function.define-syslog-variables",
					"name": "define_syslog_variables",
					"description": "Initializes all syslog related variables"
				},
				"function.dns-check-record": {
					"tokens": [
						"dns_check_record",
						"dnscheck_record"
					],
					"id": "function.dns-check-record",
					"name": "dns_check_record",
					"description": "Alias of checkdnsrr"
				},
				"function.dns-get-mx": {
					"tokens": [
						"dns_get_mx",
						"dnsget_mx"
					],
					"id": "function.dns-get-mx",
					"name": "dns_get_mx",
					"description": "Alias of getmxrr"
				},
				"function.dns-get-record": {
					"tokens": [
						"dns_get_record",
						"dnsget_record"
					],
					"id": "function.dns-get-record",
					"name": "dns_get_record",
					"description": "Fetch DNS Resource Records associated with a hostname"
				},
				"function.fsockopen": {
					"tokens": [
						"fsockopen"
					],
					"id": "function.fsockopen",
					"name": "fsockopen",
					"description": "Open Internet or Unix domain socket connection"
				},
				"function.gethostbyaddr": {
					"tokens": [
						"gethostbyaddr"
					],
					"id": "function.gethostbyaddr",
					"name": "gethostbyaddr",
					"description": "Get the Internet host name corresponding to a given IP address"
				},
				"function.gethostbyname": {
					"tokens": [
						"gethostbyname"
					],
					"id": "function.gethostbyname",
					"name": "gethostbyname",
					"description": "Get the IPv4 address corresponding to a given Internet host name"
				},
				"function.gethostbynamel": {
					"tokens": [
						"gethostbynamel"
					],
					"id": "function.gethostbynamel",
					"name": "gethostbynamel",
					"description": "Get a list of IPv4 addresses corresponding to a given Internet host\n   name"
				},
				"function.gethostname": {
					"tokens": [
						"gethostname"
					],
					"id": "function.gethostname",
					"name": "gethostname",
					"description": "Gets the host name"
				},
				"function.getmxrr": {
					"tokens": [
						"getmxrr"
					],
					"id": "function.getmxrr",
					"name": "getmxrr",
					"description": "Get MX records corresponding to a given Internet host name"
				},
				"function.getprotobyname": {
					"tokens": [
						"getprotobyname"
					],
					"id": "function.getprotobyname",
					"name": "getprotobyname",
					"description": "Get protocol number associated with protocol name"
				},
				"function.getprotobynumber": {
					"tokens": [
						"getprotobynumber"
					],
					"id": "function.getprotobynumber",
					"name": "getprotobynumber",
					"description": "Get protocol name associated with protocol number"
				},
				"function.getservbyname": {
					"tokens": [
						"getservbyname"
					],
					"id": "function.getservbyname",
					"name": "getservbyname",
					"description": "Get port number associated with an Internet service and protocol"
				},
				"function.getservbyport": {
					"tokens": [
						"getservbyport"
					],
					"id": "function.getservbyport",
					"name": "getservbyport",
					"description": "Get Internet service which corresponds to port and protocol"
				},
				"function.header-register-callback": {
					"tokens": [
						"header_register_callback",
						"headerregister_callback"
					],
					"id": "function.header-register-callback",
					"name": "header_register_callback",
					"description": "Call a header function"
				},
				"function.header-remove": {
					"tokens": [
						"header_remove",
						"headerremove"
					],
					"id": "function.header-remove",
					"name": "header_remove",
					"description": "Remove previously set headers"
				},
				"function.header": {
					"tokens": [
						"header"
					],
					"id": "function.header",
					"name": "header",
					"description": "Send a raw HTTP header"
				},
				"function.headers-list": {
					"tokens": [
						"headers_list",
						"headerslist"
					],
					"id": "function.headers-list",
					"name": "headers_list",
					"description": "Returns a list of response headers sent (or ready to send)"
				},
				"function.headers-sent": {
					"tokens": [
						"headers_sent",
						"headerssent"
					],
					"id": "function.headers-sent",
					"name": "headers_sent",
					"description": "Checks if or where headers have been sent"
				},
				"function.http-response-code": {
					"tokens": [
						"http_response_code",
						"httpresponse_code"
					],
					"id": "function.http-response-code",
					"name": "http_response_code",
					"description": "Get or Set the HTTP response code"
				},
				"function.inet-ntop": {
					"tokens": [
						"inet_ntop",
						"inetntop"
					],
					"id": "function.inet-ntop",
					"name": "inet_ntop",
					"description": "Converts a packed internet address to a human readable representation"
				},
				"function.inet-pton": {
					"tokens": [
						"inet_pton",
						"inetpton"
					],
					"id": "function.inet-pton",
					"name": "inet_pton",
					"description": "Converts a human readable IP address to its packed in_addr representation"
				},
				"function.ip2long": {
					"tokens": [
						"ip2long"
					],
					"id": "function.ip2long",
					"name": "ip2long",
					"description": "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer"
				},
				"function.long2ip": {
					"tokens": [
						"long2ip"
					],
					"id": "function.long2ip",
					"name": "long2ip",
					"description": "Converts an long integer address into a string in (IPv4) Internet standard dotted format"
				},
				"function.openlog": {
					"tokens": [
						"openlog"
					],
					"id": "function.openlog",
					"name": "openlog",
					"description": "Open connection to system logger"
				},
				"function.pfsockopen": {
					"tokens": [
						"pfsockopen"
					],
					"id": "function.pfsockopen",
					"name": "pfsockopen",
					"description": "Open persistent Internet or Unix domain socket connection"
				},
				"function.setcookie": {
					"tokens": [
						"setcookie"
					],
					"id": "function.setcookie",
					"name": "setcookie",
					"description": "Send a cookie"
				},
				"function.setrawcookie": {
					"tokens": [
						"setrawcookie"
					],
					"id": "function.setrawcookie",
					"name": "setrawcookie",
					"description": "Send a cookie without urlencoding the cookie value"
				},
				"function.socket-get-status": {
					"tokens": [
						"socket_get_status",
						"socketget_status"
					],
					"id": "function.socket-get-status",
					"name": "socket_get_status",
					"description": "Alias of stream_get_meta_data"
				},
				"function.socket-set-blocking": {
					"tokens": [
						"socket_set_blocking",
						"socketset_blocking"
					],
					"id": "function.socket-set-blocking",
					"name": "socket_set_blocking",
					"description": "Alias of stream_set_blocking"
				},
				"function.socket-set-timeout": {
					"tokens": [
						"socket_set_timeout",
						"socketset_timeout"
					],
					"id": "function.socket-set-timeout",
					"name": "socket_set_timeout",
					"description": "Alias of stream_set_timeout"
				},
				"function.syslog": {
					"tokens": [
						"syslog"
					],
					"id": "function.syslog",
					"name": "syslog",
					"description": "Generate a system log message"
				},
				"function.rrd-create": {
					"tokens": [
						"rrd_create",
						"rrdcreate"
					],
					"id": "function.rrd-create",
					"name": "rrd_create",
					"description": "Creates rrd database file"
				},
				"function.rrd-error": {
					"tokens": [
						"rrd_error",
						"rrderror"
					],
					"id": "function.rrd-error",
					"name": "rrd_error",
					"description": "Gets latest error message."
				},
				"function.rrd-fetch": {
					"tokens": [
						"rrd_fetch",
						"rrdfetch"
					],
					"id": "function.rrd-fetch",
					"name": "rrd_fetch",
					"description": "Fetch the data for graph as array."
				},
				"function.rrd-first": {
					"tokens": [
						"rrd_first",
						"rrdfirst"
					],
					"id": "function.rrd-first",
					"name": "rrd_first",
					"description": "Gets the timestamp of the first sample from rrd file."
				},
				"function.rrd-graph": {
					"tokens": [
						"rrd_graph",
						"rrdgraph"
					],
					"id": "function.rrd-graph",
					"name": "rrd_graph",
					"description": "Creates image from a data."
				},
				"function.rrd-info": {
					"tokens": [
						"rrd_info",
						"rrdinfo"
					],
					"id": "function.rrd-info",
					"name": "rrd_info",
					"description": "Gets information about rrd file"
				},
				"function.rrd-last": {
					"tokens": [
						"rrd_last",
						"rrdlast"
					],
					"id": "function.rrd-last",
					"name": "rrd_last",
					"description": "Gets unix timestamp of the last sample."
				},
				"function.rrd-lastupdate": {
					"tokens": [
						"rrd_lastupdate",
						"rrdlastupdate"
					],
					"id": "function.rrd-lastupdate",
					"name": "rrd_lastupdate",
					"description": "Gets information about last updated data."
				},
				"function.rrd-restore": {
					"tokens": [
						"rrd_restore",
						"rrdrestore"
					],
					"id": "function.rrd-restore",
					"name": "rrd_restore",
					"description": "Restores the RRD file from XML dump."
				},
				"function.rrd-tune": {
					"tokens": [
						"rrd_tune",
						"rrdtune"
					],
					"id": "function.rrd-tune",
					"name": "rrd_tune",
					"description": "Tunes some RRD database file header options."
				},
				"function.rrd-update": {
					"tokens": [
						"rrd_update",
						"rrdupdate"
					],
					"id": "function.rrd-update",
					"name": "rrd_update",
					"description": "Updates the RRD database."
				},
				"function.rrd-version": {
					"tokens": [
						"rrd_version",
						"rrdversion"
					],
					"id": "function.rrd-version",
					"name": "rrd_version",
					"description": "Gets information about underlying rrdtool library"
				},
				"function.rrd-xport": {
					"tokens": [
						"rrd_xport",
						"rrdxport"
					],
					"id": "function.rrd-xport",
					"name": "rrd_xport",
					"description": "Exports the information about RRD database."
				},
				"function.rrdc-disconnect": {
					"tokens": [
						"rrdc_disconnect",
						"rrdcdisconnect"
					],
					"id": "function.rrdc-disconnect",
					"name": "rrdc_disconnect",
					"description": "Close any outstanding connection to rrd caching daemon"
				},
				"rrdcreator.addarchive": {
					"tokens": [
						"RRDCreator::addArchive",
						"addArchive",
						"::addArchive"
					],
					"id": "rrdcreator.addarchive",
					"name": "RRDCreator::addArchive",
					"description": "Adds RRA - archive of data values for each data source."
				},
				"rrdcreator.adddatasource": {
					"tokens": [
						"RRDCreator::addDataSource",
						"addDataSource",
						"::addDataSource"
					],
					"id": "rrdcreator.adddatasource",
					"name": "RRDCreator::addDataSource",
					"description": "Adds data source definition for RRD database."
				},
				"rrdcreator.construct": {
					"tokens": [
						"RRDCreator::__construct",
						"RRDCreator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "rrdcreator.construct",
					"name": "RRDCreator::__construct",
					"description": "Creates new RRDCreator instance"
				},
				"rrdcreator.save": {
					"tokens": [
						"RRDCreator::save",
						"save",
						"::save"
					],
					"id": "rrdcreator.save",
					"name": "RRDCreator::save",
					"description": "Saves the RRD database to a file"
				},
				"rrdgraph.construct": {
					"tokens": [
						"RRDGraph::__construct",
						"RRDGraph::_construct",
						"__construct",
						"::__construct"
					],
					"id": "rrdgraph.construct",
					"name": "RRDGraph::__construct",
					"description": "Creates new RRDGraph instance"
				},
				"rrdgraph.save": {
					"tokens": [
						"RRDGraph::save",
						"save",
						"::save"
					],
					"id": "rrdgraph.save",
					"name": "RRDGraph::save",
					"description": "Saves the result of query into image"
				},
				"rrdgraph.saveverbose": {
					"tokens": [
						"RRDGraph::saveVerbose",
						"saveVerbose",
						"::saveVerbose"
					],
					"id": "rrdgraph.saveverbose",
					"name": "RRDGraph::saveVerbose",
					"description": "Saves the RRD database query into image and returns the verbose\n   information about generated graph."
				},
				"rrdgraph.setoptions": {
					"tokens": [
						"RRDGraph::setOptions",
						"setOptions",
						"::setOptions"
					],
					"id": "rrdgraph.setoptions",
					"name": "RRDGraph::setOptions",
					"description": "Sets the options for rrd graph export"
				},
				"rrdupdater.construct": {
					"tokens": [
						"RRDUpdater::__construct",
						"RRDUpdater::_construct",
						"__construct",
						"::__construct"
					],
					"id": "rrdupdater.construct",
					"name": "RRDUpdater::__construct",
					"description": "Creates new RRDUpdater instance"
				},
				"rrdupdater.update": {
					"tokens": [
						"RRDUpdater::update",
						"update",
						"::update"
					],
					"id": "rrdupdater.update",
					"name": "RRDUpdater::update",
					"description": "Update the RRD database file"
				},
				"samconnection.commit": {
					"tokens": [
						"SAMConnection::commit",
						"commit",
						"::commit"
					],
					"id": "samconnection.commit",
					"name": "SAMConnection::commit",
					"description": "Commits (completes) the current unit of work."
				},
				"samconnection.connect": {
					"tokens": [
						"SAMConnection::connect",
						"connect",
						"::connect"
					],
					"id": "samconnection.connect",
					"name": "SAMConnection::connect",
					"description": "Establishes a connection to a Messaging Server"
				},
				"samconnection.construct": {
					"tokens": [
						"SAMConnection::__construct",
						"SAMConnection::_construct",
						"__construct",
						"::__construct"
					],
					"id": "samconnection.construct",
					"name": "SAMConnection::__construct",
					"description": "Creates a new connection to a Messaging Server"
				},
				"samconnection.disconnect": {
					"tokens": [
						"SAMConnection::disconnect",
						"disconnect",
						"::disconnect"
					],
					"id": "samconnection.disconnect",
					"name": "SAMConnection::disconnect",
					"description": "Disconnects from a Messaging Server"
				},
				"samconnection.errno": {
					"tokens": [
						"SAMConnection::errno",
						"errno",
						"::errno"
					],
					"id": "samconnection.errno",
					"name": "SAMConnection::errno",
					"description": "Contains the unique numeric error code of the last executed SAM operation."
				},
				"samconnection.error": {
					"tokens": [
						"SAMConnection::error",
						"error",
						"::error"
					],
					"id": "samconnection.error",
					"name": "SAMConnection::error",
					"description": "Contains the text description of the last failed SAM operation."
				},
				"samconnection.isconnected": {
					"tokens": [
						"SAMConnection::isConnected",
						"isConnected",
						"::isConnected"
					],
					"id": "samconnection.isconnected",
					"name": "SAMConnection::isConnected",
					"description": "Queries whether a connection is established to a Messaging Server"
				},
				"samconnection.peek": {
					"tokens": [
						"SAMConnection::peek",
						"peek",
						"::peek"
					],
					"id": "samconnection.peek",
					"name": "SAMConnection::peek",
					"description": "Read a message from a queue without removing it from the queue."
				},
				"samconnection.peekall": {
					"tokens": [
						"SAMConnection::peekAll",
						"peekAll",
						"::peekAll"
					],
					"id": "samconnection.peekall",
					"name": "SAMConnection::peekAll",
					"description": "Read one or more messages from a queue without removing it from the queue."
				},
				"samconnection.receive": {
					"tokens": [
						"SAMConnection::receive",
						"receive",
						"::receive"
					],
					"id": "samconnection.receive",
					"name": "SAMConnection::receive",
					"description": "Receive a message from a queue or subscription."
				},
				"samconnection.remove": {
					"tokens": [
						"SAMConnection::remove",
						"remove",
						"::remove"
					],
					"id": "samconnection.remove",
					"name": "SAMConnection::remove",
					"description": "Remove a message from a queue."
				},
				"samconnection.rollback": {
					"tokens": [
						"SAMConnection::rollback",
						"rollback",
						"::rollback"
					],
					"id": "samconnection.rollback",
					"name": "SAMConnection::rollback",
					"description": "Cancels (rolls back) an in-flight unit of work."
				},
				"samconnection.send": {
					"tokens": [
						"SAMConnection::send",
						"send",
						"::send"
					],
					"id": "samconnection.send",
					"name": "SAMConnection::send",
					"description": "Send a message to a queue or publish an item to a topic."
				},
				"samconnection.setdebug": {
					"tokens": [
						"SAMConnection::setDebug",
						"setDebug",
						"::setDebug"
					],
					"id": "samconnection.setdebug",
					"name": "SAMConnection::setDebug",
					"description": "Turn on or off additional debugging output."
				},
				"samconnection.subscribe": {
					"tokens": [
						"SAMConnection::subscribe",
						"subscribe",
						"::subscribe"
					],
					"id": "samconnection.subscribe",
					"name": "SAMConnection::subscribe",
					"description": "Create a subscription to a specified topic."
				},
				"samconnection.unsubscribe": {
					"tokens": [
						"SAMConnection::unsubscribe",
						"unsubscribe",
						"::unsubscribe"
					],
					"id": "samconnection.unsubscribe",
					"name": "SAMConnection::unsubscribe",
					"description": "Cancel a subscription to a specified topic."
				},
				"sammessage.body": {
					"tokens": [
						"SAMMessage::body",
						"body",
						"::body"
					],
					"id": "sammessage.body",
					"name": "SAMMessage::body",
					"description": "The body of the message."
				},
				"sammessage.construct": {
					"tokens": [
						"SAMMessage::__construct",
						"SAMMessage::_construct",
						"__construct",
						"::__construct"
					],
					"id": "sammessage.construct",
					"name": "SAMMessage::__construct",
					"description": "Creates a new Message object"
				},
				"sammessage.header": {
					"tokens": [
						"SAMMessage::header",
						"header",
						"::header"
					],
					"id": "sammessage.header",
					"name": "SAMMessage::header",
					"description": "The header properties of the message."
				},
				"function.snmp-get-quick-print": {
					"tokens": [
						"snmp_get_quick_print",
						"snmpget_quick_print"
					],
					"id": "function.snmp-get-quick-print",
					"name": "snmp_get_quick_print",
					"description": "Fetches the current value of the UCD library's quick_print setting"
				},
				"function.snmp-get-valueretrieval": {
					"tokens": [
						"snmp_get_valueretrieval",
						"snmpget_valueretrieval"
					],
					"id": "function.snmp-get-valueretrieval",
					"name": "snmp_get_valueretrieval",
					"description": "Return the method how the SNMP values will be returned"
				},
				"function.snmp-read-mib": {
					"tokens": [
						"snmp_read_mib",
						"snmpread_mib"
					],
					"id": "function.snmp-read-mib",
					"name": "snmp_read_mib",
					"description": "Reads and parses a MIB file into the active MIB tree"
				},
				"function.snmp-set-enum-print": {
					"tokens": [
						"snmp_set_enum_print",
						"snmpset_enum_print"
					],
					"id": "function.snmp-set-enum-print",
					"name": "snmp_set_enum_print",
					"description": "Return all values that are enums with their enum value instead of the raw integer"
				},
				"function.snmp-set-oid-numeric-print": {
					"tokens": [
						"snmp_set_oid_numeric_print",
						"snmpset_oid_numeric_print"
					],
					"id": "function.snmp-set-oid-numeric-print",
					"name": "snmp_set_oid_numeric_print",
					"description": "Set the OID output format"
				},
				"function.snmp-set-oid-output-format": {
					"tokens": [
						"snmp_set_oid_output_format",
						"snmpset_oid_output_format"
					],
					"id": "function.snmp-set-oid-output-format",
					"name": "snmp_set_oid_output_format",
					"description": "Set the OID output format"
				},
				"function.snmp-set-quick-print": {
					"tokens": [
						"snmp_set_quick_print",
						"snmpset_quick_print"
					],
					"id": "function.snmp-set-quick-print",
					"name": "snmp_set_quick_print",
					"description": "Set the value of quick_print within the UCD SNMP library"
				},
				"function.snmp-set-valueretrieval": {
					"tokens": [
						"snmp_set_valueretrieval",
						"snmpset_valueretrieval"
					],
					"id": "function.snmp-set-valueretrieval",
					"name": "snmp_set_valueretrieval",
					"description": "Specify the method how the SNMP values will be returned"
				},
				"function.snmp2-get": {
					"tokens": [
						"snmp2_get",
						"snmp2get"
					],
					"id": "function.snmp2-get",
					"name": "snmp2_get",
					"description": "Fetch an SNMP object"
				},
				"function.snmp2-getnext": {
					"tokens": [
						"snmp2_getnext",
						"snmp2getnext"
					],
					"id": "function.snmp2-getnext",
					"name": "snmp2_getnext",
					"description": "Fetch the SNMP object which follows the given object id"
				},
				"function.snmp2-real-walk": {
					"tokens": [
						"snmp2_real_walk",
						"snmp2real_walk"
					],
					"id": "function.snmp2-real-walk",
					"name": "snmp2_real_walk",
					"description": "Return all objects including their respective object ID within the specified one"
				},
				"function.snmp2-set": {
					"tokens": [
						"snmp2_set",
						"snmp2set"
					],
					"id": "function.snmp2-set",
					"name": "snmp2_set",
					"description": "Set the value of an SNMP object"
				},
				"function.snmp2-walk": {
					"tokens": [
						"snmp2_walk",
						"snmp2walk"
					],
					"id": "function.snmp2-walk",
					"name": "snmp2_walk",
					"description": "Fetch all the SNMP objects from an agent"
				},
				"function.snmp3-get": {
					"tokens": [
						"snmp3_get",
						"snmp3get"
					],
					"id": "function.snmp3-get",
					"name": "snmp3_get",
					"description": "Fetch an SNMP object"
				},
				"function.snmp3-getnext": {
					"tokens": [
						"snmp3_getnext",
						"snmp3getnext"
					],
					"id": "function.snmp3-getnext",
					"name": "snmp3_getnext",
					"description": "Fetch the SNMP object which follows the given object id"
				},
				"function.snmp3-real-walk": {
					"tokens": [
						"snmp3_real_walk",
						"snmp3real_walk"
					],
					"id": "function.snmp3-real-walk",
					"name": "snmp3_real_walk",
					"description": "Return all objects including their respective object ID within the specified one"
				},
				"function.snmp3-set": {
					"tokens": [
						"snmp3_set",
						"snmp3set"
					],
					"id": "function.snmp3-set",
					"name": "snmp3_set",
					"description": "Set the value of an SNMP object"
				},
				"function.snmp3-walk": {
					"tokens": [
						"snmp3_walk",
						"snmp3walk"
					],
					"id": "function.snmp3-walk",
					"name": "snmp3_walk",
					"description": "Fetch all the SNMP objects from an agent"
				},
				"function.snmpget": {
					"tokens": [
						"snmpget"
					],
					"id": "function.snmpget",
					"name": "snmpget",
					"description": "Fetch an SNMP object"
				},
				"function.snmpgetnext": {
					"tokens": [
						"snmpgetnext"
					],
					"id": "function.snmpgetnext",
					"name": "snmpgetnext",
					"description": "Fetch the SNMP object which follows the given object id"
				},
				"function.snmprealwalk": {
					"tokens": [
						"snmprealwalk"
					],
					"id": "function.snmprealwalk",
					"name": "snmprealwalk",
					"description": "Return all objects including their respective object ID within the specified one"
				},
				"function.snmpset": {
					"tokens": [
						"snmpset"
					],
					"id": "function.snmpset",
					"name": "snmpset",
					"description": "Set the value of an SNMP object"
				},
				"function.snmpwalk": {
					"tokens": [
						"snmpwalk"
					],
					"id": "function.snmpwalk",
					"name": "snmpwalk",
					"description": "Fetch all the SNMP objects from an agent"
				},
				"function.snmpwalkoid": {
					"tokens": [
						"snmpwalkoid"
					],
					"id": "function.snmpwalkoid",
					"name": "snmpwalkoid",
					"description": "Query for a tree of information about a network entity"
				},
				"snmp.close": {
					"tokens": [
						"SNMP::close",
						"close",
						"::close"
					],
					"id": "snmp.close",
					"name": "SNMP::close",
					"description": "Close SNMP session"
				},
				"snmp.construct": {
					"tokens": [
						"SNMP::__construct",
						"SNMP::_construct",
						"__construct",
						"::__construct"
					],
					"id": "snmp.construct",
					"name": "SNMP::__construct",
					"description": "Creates SNMP instance representing session to remote SNMP agent"
				},
				"snmp.get": {
					"tokens": [
						"SNMP::get",
						"get",
						"::get"
					],
					"id": "snmp.get",
					"name": "SNMP::get",
					"description": "Fetch an SNMP object"
				},
				"snmp.geterrno": {
					"tokens": [
						"SNMP::getErrno",
						"getErrno",
						"::getErrno"
					],
					"id": "snmp.geterrno",
					"name": "SNMP::getErrno",
					"description": "Get last error code"
				},
				"snmp.geterror": {
					"tokens": [
						"SNMP::getError",
						"getError",
						"::getError"
					],
					"id": "snmp.geterror",
					"name": "SNMP::getError",
					"description": "Get last error message"
				},
				"snmp.getnext": {
					"tokens": [
						"SNMP::getnext",
						"getnext",
						"::getnext"
					],
					"id": "snmp.getnext",
					"name": "SNMP::getnext",
					"description": "Fetch an SNMP object which\n  follows the given object id"
				},
				"snmp.set": {
					"tokens": [
						"SNMP::set",
						"set",
						"::set"
					],
					"id": "snmp.set",
					"name": "SNMP::set",
					"description": "Set the value of an SNMP object"
				},
				"snmp.setsecurity": {
					"tokens": [
						"SNMP::setSecurity",
						"setSecurity",
						"::setSecurity"
					],
					"id": "snmp.setsecurity",
					"name": "SNMP::setSecurity",
					"description": "Configures security-related SNMPv3 session parameters"
				},
				"snmp.walk": {
					"tokens": [
						"SNMP::walk",
						"walk",
						"::walk"
					],
					"id": "snmp.walk",
					"name": "SNMP::walk",
					"description": "Fetch SNMP object subtree"
				},
				"function.socket-accept": {
					"tokens": [
						"socket_accept",
						"socketaccept"
					],
					"id": "function.socket-accept",
					"name": "socket_accept",
					"description": "Accepts a connection on a socket"
				},
				"function.socket-bind": {
					"tokens": [
						"socket_bind",
						"socketbind"
					],
					"id": "function.socket-bind",
					"name": "socket_bind",
					"description": "Binds a name to a socket"
				},
				"function.socket-clear-error": {
					"tokens": [
						"socket_clear_error",
						"socketclear_error"
					],
					"id": "function.socket-clear-error",
					"name": "socket_clear_error",
					"description": "Clears the error on the socket or the last error code"
				},
				"function.socket-close": {
					"tokens": [
						"socket_close",
						"socketclose"
					],
					"id": "function.socket-close",
					"name": "socket_close",
					"description": "Closes a socket resource"
				},
				"function.socket-cmsg-space": {
					"tokens": [
						"socket_cmsg_space",
						"socketcmsg_space"
					],
					"id": "function.socket-cmsg-space",
					"name": "socket_cmsg_space",
					"description": "Calculate message buffer size"
				},
				"function.socket-connect": {
					"tokens": [
						"socket_connect",
						"socketconnect"
					],
					"id": "function.socket-connect",
					"name": "socket_connect",
					"description": "Initiates a connection on a socket"
				},
				"function.socket-create-listen": {
					"tokens": [
						"socket_create_listen",
						"socketcreate_listen"
					],
					"id": "function.socket-create-listen",
					"name": "socket_create_listen",
					"description": "Opens a socket on port to accept connections"
				},
				"function.socket-create-pair": {
					"tokens": [
						"socket_create_pair",
						"socketcreate_pair"
					],
					"id": "function.socket-create-pair",
					"name": "socket_create_pair",
					"description": "Creates a pair of indistinguishable sockets and stores them in an array"
				},
				"function.socket-create": {
					"tokens": [
						"socket_create",
						"socketcreate"
					],
					"id": "function.socket-create",
					"name": "socket_create",
					"description": "Create a socket (endpoint for communication)"
				},
				"function.socket-get-option": {
					"tokens": [
						"socket_get_option",
						"socketget_option"
					],
					"id": "function.socket-get-option",
					"name": "socket_get_option",
					"description": "Gets socket options for the socket"
				},
				"function.socket-getopt": {
					"tokens": [
						"socket_getopt",
						"socketgetopt"
					],
					"id": "function.socket-getopt",
					"name": "socket_getopt",
					"description": "Alias of socket_get_option"
				},
				"function.socket-getpeername": {
					"tokens": [
						"socket_getpeername",
						"socketgetpeername"
					],
					"id": "function.socket-getpeername",
					"name": "socket_getpeername",
					"description": "Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type"
				},
				"function.socket-getsockname": {
					"tokens": [
						"socket_getsockname",
						"socketgetsockname"
					],
					"id": "function.socket-getsockname",
					"name": "socket_getsockname",
					"description": "Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type"
				},
				"function.socket-import-stream": {
					"tokens": [
						"socket_import_stream",
						"socketimport_stream"
					],
					"id": "function.socket-import-stream",
					"name": "socket_import_stream",
					"description": "Import a stream"
				},
				"function.socket-last-error": {
					"tokens": [
						"socket_last_error",
						"socketlast_error"
					],
					"id": "function.socket-last-error",
					"name": "socket_last_error",
					"description": "Returns the last error on the socket"
				},
				"function.socket-listen": {
					"tokens": [
						"socket_listen",
						"socketlisten"
					],
					"id": "function.socket-listen",
					"name": "socket_listen",
					"description": "Listens for a connection on a socket"
				},
				"function.socket-read": {
					"tokens": [
						"socket_read",
						"socketread"
					],
					"id": "function.socket-read",
					"name": "socket_read",
					"description": "Reads a maximum of length bytes from a socket"
				},
				"function.socket-recv": {
					"tokens": [
						"socket_recv",
						"socketrecv"
					],
					"id": "function.socket-recv",
					"name": "socket_recv",
					"description": "Receives data from a connected socket"
				},
				"function.socket-recvfrom": {
					"tokens": [
						"socket_recvfrom",
						"socketrecvfrom"
					],
					"id": "function.socket-recvfrom",
					"name": "socket_recvfrom",
					"description": "Receives data from a socket whether or not it is connection-oriented"
				},
				"function.socket-recvmsg": {
					"tokens": [
						"socket_recvmsg",
						"socketrecvmsg"
					],
					"id": "function.socket-recvmsg",
					"name": "socket_recvmsg",
					"description": "Read a message"
				},
				"function.socket-select": {
					"tokens": [
						"socket_select",
						"socketselect"
					],
					"id": "function.socket-select",
					"name": "socket_select",
					"description": "Runs the select() system call on the given arrays of sockets with a specified timeout"
				},
				"function.socket-send": {
					"tokens": [
						"socket_send",
						"socketsend"
					],
					"id": "function.socket-send",
					"name": "socket_send",
					"description": "Sends data to a connected socket"
				},
				"function.socket-sendmsg": {
					"tokens": [
						"socket_sendmsg",
						"socketsendmsg"
					],
					"id": "function.socket-sendmsg",
					"name": "socket_sendmsg",
					"description": "Send a message"
				},
				"function.socket-sendto": {
					"tokens": [
						"socket_sendto",
						"socketsendto"
					],
					"id": "function.socket-sendto",
					"name": "socket_sendto",
					"description": "Sends a message to a socket, whether it is connected or not"
				},
				"function.socket-set-block": {
					"tokens": [
						"socket_set_block",
						"socketset_block"
					],
					"id": "function.socket-set-block",
					"name": "socket_set_block",
					"description": "Sets blocking mode on a socket resource"
				},
				"function.socket-set-nonblock": {
					"tokens": [
						"socket_set_nonblock",
						"socketset_nonblock"
					],
					"id": "function.socket-set-nonblock",
					"name": "socket_set_nonblock",
					"description": "Sets nonblocking mode for file descriptor fd"
				},
				"function.socket-set-option": {
					"tokens": [
						"socket_set_option",
						"socketset_option"
					],
					"id": "function.socket-set-option",
					"name": "socket_set_option",
					"description": "Sets socket options for the socket"
				},
				"function.socket-setopt": {
					"tokens": [
						"socket_setopt",
						"socketsetopt"
					],
					"id": "function.socket-setopt",
					"name": "socket_setopt",
					"description": "Alias of socket_set_option"
				},
				"function.socket-shutdown": {
					"tokens": [
						"socket_shutdown",
						"socketshutdown"
					],
					"id": "function.socket-shutdown",
					"name": "socket_shutdown",
					"description": "Shuts down a socket for receiving, sending, or both"
				},
				"function.socket-strerror": {
					"tokens": [
						"socket_strerror",
						"socketstrerror"
					],
					"id": "function.socket-strerror",
					"name": "socket_strerror",
					"description": "Return a string describing a socket error"
				},
				"function.socket-write": {
					"tokens": [
						"socket_write",
						"socketwrite"
					],
					"id": "function.socket-write",
					"name": "socket_write",
					"description": "Write to a socket"
				},
				"function.ssh2-auth-agent": {
					"tokens": [
						"ssh2_auth_agent",
						"ssh2auth_agent"
					],
					"id": "function.ssh2-auth-agent",
					"name": "ssh2_auth_agent",
					"description": "Authenticate over SSH using the ssh agent"
				},
				"function.ssh2-auth-hostbased-file": {
					"tokens": [
						"ssh2_auth_hostbased_file",
						"ssh2auth_hostbased_file"
					],
					"id": "function.ssh2-auth-hostbased-file",
					"name": "ssh2_auth_hostbased_file",
					"description": "Authenticate using a public hostkey"
				},
				"function.ssh2-auth-none": {
					"tokens": [
						"ssh2_auth_none",
						"ssh2auth_none"
					],
					"id": "function.ssh2-auth-none",
					"name": "ssh2_auth_none",
					"description": "Authenticate as &quot;none&quot;"
				},
				"function.ssh2-auth-password": {
					"tokens": [
						"ssh2_auth_password",
						"ssh2auth_password"
					],
					"id": "function.ssh2-auth-password",
					"name": "ssh2_auth_password",
					"description": "Authenticate over SSH using a plain password"
				},
				"function.ssh2-auth-pubkey-file": {
					"tokens": [
						"ssh2_auth_pubkey_file",
						"ssh2auth_pubkey_file"
					],
					"id": "function.ssh2-auth-pubkey-file",
					"name": "ssh2_auth_pubkey_file",
					"description": "Authenticate using a public key"
				},
				"function.ssh2-connect": {
					"tokens": [
						"ssh2_connect",
						"ssh2connect"
					],
					"id": "function.ssh2-connect",
					"name": "ssh2_connect",
					"description": "Connect to an SSH server"
				},
				"function.ssh2-exec": {
					"tokens": [
						"ssh2_exec",
						"ssh2exec"
					],
					"id": "function.ssh2-exec",
					"name": "ssh2_exec",
					"description": "Execute a command on a remote server"
				},
				"function.ssh2-fetch-stream": {
					"tokens": [
						"ssh2_fetch_stream",
						"ssh2fetch_stream"
					],
					"id": "function.ssh2-fetch-stream",
					"name": "ssh2_fetch_stream",
					"description": "Fetch an extended data stream"
				},
				"function.ssh2-fingerprint": {
					"tokens": [
						"ssh2_fingerprint",
						"ssh2fingerprint"
					],
					"id": "function.ssh2-fingerprint",
					"name": "ssh2_fingerprint",
					"description": "Retrieve fingerprint of remote server"
				},
				"function.ssh2-methods-negotiated": {
					"tokens": [
						"ssh2_methods_negotiated",
						"ssh2methods_negotiated"
					],
					"id": "function.ssh2-methods-negotiated",
					"name": "ssh2_methods_negotiated",
					"description": "Return list of negotiated methods"
				},
				"function.ssh2-publickey-add": {
					"tokens": [
						"ssh2_publickey_add",
						"ssh2publickey_add"
					],
					"id": "function.ssh2-publickey-add",
					"name": "ssh2_publickey_add",
					"description": "Add an authorized publickey"
				},
				"function.ssh2-publickey-init": {
					"tokens": [
						"ssh2_publickey_init",
						"ssh2publickey_init"
					],
					"id": "function.ssh2-publickey-init",
					"name": "ssh2_publickey_init",
					"description": "Initialize Publickey subsystem"
				},
				"function.ssh2-publickey-list": {
					"tokens": [
						"ssh2_publickey_list",
						"ssh2publickey_list"
					],
					"id": "function.ssh2-publickey-list",
					"name": "ssh2_publickey_list",
					"description": "List currently authorized publickeys"
				},
				"function.ssh2-publickey-remove": {
					"tokens": [
						"ssh2_publickey_remove",
						"ssh2publickey_remove"
					],
					"id": "function.ssh2-publickey-remove",
					"name": "ssh2_publickey_remove",
					"description": "Remove an authorized publickey"
				},
				"function.ssh2-scp-recv": {
					"tokens": [
						"ssh2_scp_recv",
						"ssh2scp_recv"
					],
					"id": "function.ssh2-scp-recv",
					"name": "ssh2_scp_recv",
					"description": "Request a file via SCP"
				},
				"function.ssh2-scp-send": {
					"tokens": [
						"ssh2_scp_send",
						"ssh2scp_send"
					],
					"id": "function.ssh2-scp-send",
					"name": "ssh2_scp_send",
					"description": "Send a file via SCP"
				},
				"function.ssh2-sftp-chmod": {
					"tokens": [
						"ssh2_sftp_chmod",
						"ssh2sftp_chmod"
					],
					"id": "function.ssh2-sftp-chmod",
					"name": "ssh2_sftp_chmod",
					"description": "Changes file mode"
				},
				"function.ssh2-sftp-lstat": {
					"tokens": [
						"ssh2_sftp_lstat",
						"ssh2sftp_lstat"
					],
					"id": "function.ssh2-sftp-lstat",
					"name": "ssh2_sftp_lstat",
					"description": "Stat a symbolic link"
				},
				"function.ssh2-sftp-mkdir": {
					"tokens": [
						"ssh2_sftp_mkdir",
						"ssh2sftp_mkdir"
					],
					"id": "function.ssh2-sftp-mkdir",
					"name": "ssh2_sftp_mkdir",
					"description": "Create a directory"
				},
				"function.ssh2-sftp-readlink": {
					"tokens": [
						"ssh2_sftp_readlink",
						"ssh2sftp_readlink"
					],
					"id": "function.ssh2-sftp-readlink",
					"name": "ssh2_sftp_readlink",
					"description": "Return the target of a symbolic link"
				},
				"function.ssh2-sftp-realpath": {
					"tokens": [
						"ssh2_sftp_realpath",
						"ssh2sftp_realpath"
					],
					"id": "function.ssh2-sftp-realpath",
					"name": "ssh2_sftp_realpath",
					"description": "Resolve the realpath of a provided path string"
				},
				"function.ssh2-sftp-rename": {
					"tokens": [
						"ssh2_sftp_rename",
						"ssh2sftp_rename"
					],
					"id": "function.ssh2-sftp-rename",
					"name": "ssh2_sftp_rename",
					"description": "Rename a remote file"
				},
				"function.ssh2-sftp-rmdir": {
					"tokens": [
						"ssh2_sftp_rmdir",
						"ssh2sftp_rmdir"
					],
					"id": "function.ssh2-sftp-rmdir",
					"name": "ssh2_sftp_rmdir",
					"description": "Remove a directory"
				},
				"function.ssh2-sftp-stat": {
					"tokens": [
						"ssh2_sftp_stat",
						"ssh2sftp_stat"
					],
					"id": "function.ssh2-sftp-stat",
					"name": "ssh2_sftp_stat",
					"description": "Stat a file on a remote filesystem"
				},
				"function.ssh2-sftp-symlink": {
					"tokens": [
						"ssh2_sftp_symlink",
						"ssh2sftp_symlink"
					],
					"id": "function.ssh2-sftp-symlink",
					"name": "ssh2_sftp_symlink",
					"description": "Create a symlink"
				},
				"function.ssh2-sftp-unlink": {
					"tokens": [
						"ssh2_sftp_unlink",
						"ssh2sftp_unlink"
					],
					"id": "function.ssh2-sftp-unlink",
					"name": "ssh2_sftp_unlink",
					"description": "Delete a file"
				},
				"function.ssh2-sftp": {
					"tokens": [
						"ssh2_sftp",
						"ssh2sftp"
					],
					"id": "function.ssh2-sftp",
					"name": "ssh2_sftp",
					"description": "Initialize SFTP subsystem"
				},
				"function.ssh2-shell": {
					"tokens": [
						"ssh2_shell",
						"ssh2shell"
					],
					"id": "function.ssh2-shell",
					"name": "ssh2_shell",
					"description": "Request an interactive shell"
				},
				"function.ssh2-tunnel": {
					"tokens": [
						"ssh2_tunnel",
						"ssh2tunnel"
					],
					"id": "function.ssh2-tunnel",
					"name": "ssh2_tunnel",
					"description": "Open a tunnel through a remote server"
				},
				"function.stomp-connect-error": {
					"tokens": [
						"stomp_connect_error",
						"stompconnect_error"
					],
					"id": "function.stomp-connect-error",
					"name": "stomp_connect_error",
					"description": "Returns a string description of the last connect error"
				},
				"function.stomp-version": {
					"tokens": [
						"stomp_version",
						"stompversion"
					],
					"id": "function.stomp-version",
					"name": "stomp_version",
					"description": "Gets the current stomp extension version"
				},
				"stomp.abort": {
					"tokens": [
						"Stomp::abort",
						"abort",
						"::abort"
					],
					"id": "stomp.abort",
					"name": "Stomp::abort",
					"description": "Rolls back a transaction in progress"
				},
				"stomp.ack": {
					"tokens": [
						"Stomp::ack",
						"ack",
						"::ack"
					],
					"id": "stomp.ack",
					"name": "Stomp::ack",
					"description": "Acknowledges consumption of a message"
				},
				"stomp.begin": {
					"tokens": [
						"Stomp::begin",
						"begin",
						"::begin"
					],
					"id": "stomp.begin",
					"name": "Stomp::begin",
					"description": "Starts a transaction"
				},
				"stomp.commit": {
					"tokens": [
						"Stomp::commit",
						"commit",
						"::commit"
					],
					"id": "stomp.commit",
					"name": "Stomp::commit",
					"description": "Commits a transaction in progress"
				},
				"stomp.construct": {
					"tokens": [
						"Stomp::__construct",
						"Stomp::_construct",
						"__construct",
						"::__construct"
					],
					"id": "stomp.construct",
					"name": "Stomp::__construct",
					"description": "Opens a connection"
				},
				"stomp.destruct": {
					"tokens": [
						"Stomp::__destruct",
						"Stomp::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "stomp.destruct",
					"name": "Stomp::__destruct",
					"description": "Closes stomp connection"
				},
				"stomp.error": {
					"tokens": [
						"Stomp::error",
						"error",
						"::error"
					],
					"id": "stomp.error",
					"name": "Stomp::error",
					"description": "Gets the last stomp error"
				},
				"stomp.getreadtimeout": {
					"tokens": [
						"Stomp::getReadTimeout",
						"getReadTimeout",
						"::getReadTimeout"
					],
					"id": "stomp.getreadtimeout",
					"name": "Stomp::getReadTimeout",
					"description": "Gets read timeout"
				},
				"stomp.getsessionid": {
					"tokens": [
						"Stomp::getSessionId",
						"getSessionId",
						"::getSessionId"
					],
					"id": "stomp.getsessionid",
					"name": "Stomp::getSessionId",
					"description": "Gets the current stomp session ID"
				},
				"stomp.hasframe": {
					"tokens": [
						"Stomp::hasFrame",
						"hasFrame",
						"::hasFrame"
					],
					"id": "stomp.hasframe",
					"name": "Stomp::hasFrame",
					"description": "Indicates whether or not there is a frame ready to read"
				},
				"stomp.readframe": {
					"tokens": [
						"Stomp::readFrame",
						"readFrame",
						"::readFrame"
					],
					"id": "stomp.readframe",
					"name": "Stomp::readFrame",
					"description": "Reads the next frame"
				},
				"stomp.send": {
					"tokens": [
						"Stomp::send",
						"send",
						"::send"
					],
					"id": "stomp.send",
					"name": "Stomp::send",
					"description": "Sends a message"
				},
				"stomp.setreadtimeout": {
					"tokens": [
						"Stomp::setReadTimeout",
						"setReadTimeout",
						"::setReadTimeout"
					],
					"id": "stomp.setreadtimeout",
					"name": "Stomp::setReadTimeout",
					"description": "Sets read timeout"
				},
				"stomp.subscribe": {
					"tokens": [
						"Stomp::subscribe",
						"subscribe",
						"::subscribe"
					],
					"id": "stomp.subscribe",
					"name": "Stomp::subscribe",
					"description": "Registers to listen to a given destination"
				},
				"stomp.unsubscribe": {
					"tokens": [
						"Stomp::unsubscribe",
						"unsubscribe",
						"::unsubscribe"
					],
					"id": "stomp.unsubscribe",
					"name": "Stomp::unsubscribe",
					"description": "Removes an existing subscription"
				},
				"stompframe.construct": {
					"tokens": [
						"StompFrame::__construct",
						"StompFrame::_construct",
						"__construct",
						"::__construct"
					],
					"id": "stompframe.construct",
					"name": "StompFrame::__construct",
					"description": "Constructor"
				},
				"stomp.getdetails": {
					"tokens": [
						"StompException::getDetails",
						"getDetails",
						"::getDetails"
					],
					"id": "stomp.getdetails",
					"name": "StompException::getDetails",
					"description": "Get exception details"
				},
				"svm.construct": {
					"tokens": [
						"SVM::__construct",
						"SVM::_construct",
						"__construct",
						"::__construct"
					],
					"id": "svm.construct",
					"name": "SVM::__construct",
					"description": "Construct a new SVM object"
				},
				"svm.crossvalidate": {
					"tokens": [
						"SVM::crossvalidate",
						"crossvalidate",
						"::crossvalidate"
					],
					"id": "svm.crossvalidate",
					"name": "SVM::crossvalidate",
					"description": "Test training params on subsets of the training data."
				},
				"svm.getoptions": {
					"tokens": [
						"SVM::getOptions",
						"getOptions",
						"::getOptions"
					],
					"id": "svm.getoptions",
					"name": "SVM::getOptions",
					"description": "Return the current training parameters"
				},
				"svm.setoptions": {
					"tokens": [
						"SVM::setOptions",
						"setOptions",
						"::setOptions"
					],
					"id": "svm.setoptions",
					"name": "SVM::setOptions",
					"description": "Set training parameters"
				},
				"svm.train": {
					"tokens": [
						"SVM::train",
						"train",
						"::train"
					],
					"id": "svm.train",
					"name": "SVM::train",
					"description": "Create a SVMModel based on training data"
				},
				"svmmodel.checkprobabilitymodel": {
					"tokens": [
						"SVMModel::checkProbabilityModel",
						"checkProbabilityModel",
						"::checkProbabilityModel"
					],
					"id": "svmmodel.checkprobabilitymodel",
					"name": "SVMModel::checkProbabilityModel",
					"description": "Returns true if the model has probability information"
				},
				"svmmodel.construct": {
					"tokens": [
						"SVMModel::__construct",
						"SVMModel::_construct",
						"__construct",
						"::__construct"
					],
					"id": "svmmodel.construct",
					"name": "SVMModel::__construct",
					"description": "Construct a new SVMModel"
				},
				"svmmodel.getlabels": {
					"tokens": [
						"SVMModel::getLabels",
						"getLabels",
						"::getLabels"
					],
					"id": "svmmodel.getlabels",
					"name": "SVMModel::getLabels",
					"description": "Get the labels the model was trained on"
				},
				"svmmodel.getnrclass": {
					"tokens": [
						"SVMModel::getNrClass",
						"getNrClass",
						"::getNrClass"
					],
					"id": "svmmodel.getnrclass",
					"name": "SVMModel::getNrClass",
					"description": "Returns the number of classes the model was trained with"
				},
				"svmmodel.getsvmtype": {
					"tokens": [
						"SVMModel::getSvmType",
						"getSvmType",
						"::getSvmType"
					],
					"id": "svmmodel.getsvmtype",
					"name": "SVMModel::getSvmType",
					"description": "Get the SVM type the model was trained with"
				},
				"svmmodel.getsvrprobability": {
					"tokens": [
						"SVMModel::getSvrProbability",
						"getSvrProbability",
						"::getSvrProbability"
					],
					"id": "svmmodel.getsvrprobability",
					"name": "SVMModel::getSvrProbability",
					"description": "Get the sigma value for regression types"
				},
				"svmmodel.load": {
					"tokens": [
						"SVMModel::load",
						"load",
						"::load"
					],
					"id": "svmmodel.load",
					"name": "SVMModel::load",
					"description": "Load a saved SVM Model"
				},
				"svmmodel.predict-probability": {
					"tokens": [
						"SVMModel::predict_probability",
						"SVMModel::predictprobability",
						"predict_probability",
						"::predict_probability"
					],
					"id": "svmmodel.predict-probability",
					"name": "SVMModel::predict_probability",
					"description": "Return class probabilities for previous unseen data"
				},
				"svmmodel.predict": {
					"tokens": [
						"SVMModel::predict",
						"predict",
						"::predict"
					],
					"id": "svmmodel.predict",
					"name": "SVMModel::predict",
					"description": "Predict a value for previously unseen data"
				},
				"svmmodel.save": {
					"tokens": [
						"SVMModel::save",
						"save",
						"::save"
					],
					"id": "svmmodel.save",
					"name": "SVMModel::save",
					"description": "Save a model to a file"
				},
				"function.svn-add": {
					"tokens": [
						"svn_add",
						"svnadd"
					],
					"id": "function.svn-add",
					"name": "svn_add",
					"description": "Schedules the addition of an item in a working directory"
				},
				"function.svn-auth-get-parameter": {
					"tokens": [
						"svn_auth_get_parameter",
						"svnauth_get_parameter"
					],
					"id": "function.svn-auth-get-parameter",
					"name": "svn_auth_get_parameter",
					"description": "Retrieves authentication parameter"
				},
				"function.svn-auth-set-parameter": {
					"tokens": [
						"svn_auth_set_parameter",
						"svnauth_set_parameter"
					],
					"id": "function.svn-auth-set-parameter",
					"name": "svn_auth_set_parameter",
					"description": "Sets an authentication parameter"
				},
				"function.svn-blame": {
					"tokens": [
						"svn_blame",
						"svnblame"
					],
					"id": "function.svn-blame",
					"name": "svn_blame",
					"description": "Get the SVN blame for a file"
				},
				"function.svn-cat": {
					"tokens": [
						"svn_cat",
						"svncat"
					],
					"id": "function.svn-cat",
					"name": "svn_cat",
					"description": "Returns the contents of a file in a repository"
				},
				"function.svn-checkout": {
					"tokens": [
						"svn_checkout",
						"svncheckout"
					],
					"id": "function.svn-checkout",
					"name": "svn_checkout",
					"description": "Checks out a working copy from the repository"
				},
				"function.svn-cleanup": {
					"tokens": [
						"svn_cleanup",
						"svncleanup"
					],
					"id": "function.svn-cleanup",
					"name": "svn_cleanup",
					"description": "Recursively cleanup a working copy directory, finishing incomplete operations and removing locks"
				},
				"function.svn-client-version": {
					"tokens": [
						"svn_client_version",
						"svnclient_version"
					],
					"id": "function.svn-client-version",
					"name": "svn_client_version",
					"description": "Returns the version of the SVN client libraries"
				},
				"function.svn-commit": {
					"tokens": [
						"svn_commit",
						"svncommit"
					],
					"id": "function.svn-commit",
					"name": "svn_commit",
					"description": "Sends changes from the local working copy to the repository"
				},
				"function.svn-delete": {
					"tokens": [
						"svn_delete",
						"svndelete"
					],
					"id": "function.svn-delete",
					"name": "svn_delete",
					"description": "Delete items from a working copy or repository."
				},
				"function.svn-diff": {
					"tokens": [
						"svn_diff",
						"svndiff"
					],
					"id": "function.svn-diff",
					"name": "svn_diff",
					"description": "Recursively diffs two paths"
				},
				"function.svn-export": {
					"tokens": [
						"svn_export",
						"svnexport"
					],
					"id": "function.svn-export",
					"name": "svn_export",
					"description": "Export the contents of a SVN directory"
				},
				"function.svn-fs-abort-txn": {
					"tokens": [
						"svn_fs_abort_txn",
						"svnfs_abort_txn"
					],
					"id": "function.svn-fs-abort-txn",
					"name": "svn_fs_abort_txn",
					"description": "Abort a transaction, returns true if everything is okay, false otherwise"
				},
				"function.svn-fs-apply-text": {
					"tokens": [
						"svn_fs_apply_text",
						"svnfs_apply_text"
					],
					"id": "function.svn-fs-apply-text",
					"name": "svn_fs_apply_text",
					"description": "Creates and returns a stream that will be used to replace"
				},
				"function.svn-fs-begin-txn2": {
					"tokens": [
						"svn_fs_begin_txn2",
						"svnfs_begin_txn2"
					],
					"id": "function.svn-fs-begin-txn2",
					"name": "svn_fs_begin_txn2",
					"description": "Create a new transaction"
				},
				"function.svn-fs-change-node-prop": {
					"tokens": [
						"svn_fs_change_node_prop",
						"svnfs_change_node_prop"
					],
					"id": "function.svn-fs-change-node-prop",
					"name": "svn_fs_change_node_prop",
					"description": "Return true if everything is ok, false otherwise"
				},
				"function.svn-fs-check-path": {
					"tokens": [
						"svn_fs_check_path",
						"svnfs_check_path"
					],
					"id": "function.svn-fs-check-path",
					"name": "svn_fs_check_path",
					"description": "Determines what kind of item lives at path in a given repository fsroot"
				},
				"function.svn-fs-contents-changed": {
					"tokens": [
						"svn_fs_contents_changed",
						"svnfs_contents_changed"
					],
					"id": "function.svn-fs-contents-changed",
					"name": "svn_fs_contents_changed",
					"description": "Return true if content is different, false otherwise"
				},
				"function.svn-fs-copy": {
					"tokens": [
						"svn_fs_copy",
						"svnfs_copy"
					],
					"id": "function.svn-fs-copy",
					"name": "svn_fs_copy",
					"description": "Copies a file or a directory, returns true if all is ok, false otherwise"
				},
				"function.svn-fs-delete": {
					"tokens": [
						"svn_fs_delete",
						"svnfs_delete"
					],
					"id": "function.svn-fs-delete",
					"name": "svn_fs_delete",
					"description": "Deletes a file or a directory, return true if all is ok, false otherwise"
				},
				"function.svn-fs-dir-entries": {
					"tokens": [
						"svn_fs_dir_entries",
						"svnfs_dir_entries"
					],
					"id": "function.svn-fs-dir-entries",
					"name": "svn_fs_dir_entries",
					"description": "Enumerates the directory entries under path; returns a hash of dir names to file type"
				},
				"function.svn-fs-file-contents": {
					"tokens": [
						"svn_fs_file_contents",
						"svnfs_file_contents"
					],
					"id": "function.svn-fs-file-contents",
					"name": "svn_fs_file_contents",
					"description": "Returns a stream to access the contents of a file from a given version of the fs"
				},
				"function.svn-fs-file-length": {
					"tokens": [
						"svn_fs_file_length",
						"svnfs_file_length"
					],
					"id": "function.svn-fs-file-length",
					"name": "svn_fs_file_length",
					"description": "Returns the length of a file from a given version of the fs"
				},
				"function.svn-fs-is-dir": {
					"tokens": [
						"svn_fs_is_dir",
						"svnfs_is_dir"
					],
					"id": "function.svn-fs-is-dir",
					"name": "svn_fs_is_dir",
					"description": "Return true if the path points to a directory, false otherwise"
				},
				"function.svn-fs-is-file": {
					"tokens": [
						"svn_fs_is_file",
						"svnfs_is_file"
					],
					"id": "function.svn-fs-is-file",
					"name": "svn_fs_is_file",
					"description": "Return true if the path points to a file, false otherwise"
				},
				"function.svn-fs-make-dir": {
					"tokens": [
						"svn_fs_make_dir",
						"svnfs_make_dir"
					],
					"id": "function.svn-fs-make-dir",
					"name": "svn_fs_make_dir",
					"description": "Creates a new empty directory, returns true if all is ok, false otherwise"
				},
				"function.svn-fs-make-file": {
					"tokens": [
						"svn_fs_make_file",
						"svnfs_make_file"
					],
					"id": "function.svn-fs-make-file",
					"name": "svn_fs_make_file",
					"description": "Creates a new empty file, returns true if all is ok, false otherwise"
				},
				"function.svn-fs-node-created-rev": {
					"tokens": [
						"svn_fs_node_created_rev",
						"svnfs_node_created_rev"
					],
					"id": "function.svn-fs-node-created-rev",
					"name": "svn_fs_node_created_rev",
					"description": "Returns the revision in which path under fsroot was created"
				},
				"function.svn-fs-node-prop": {
					"tokens": [
						"svn_fs_node_prop",
						"svnfs_node_prop"
					],
					"id": "function.svn-fs-node-prop",
					"name": "svn_fs_node_prop",
					"description": "Returns the value of a property for a node"
				},
				"function.svn-fs-props-changed": {
					"tokens": [
						"svn_fs_props_changed",
						"svnfs_props_changed"
					],
					"id": "function.svn-fs-props-changed",
					"name": "svn_fs_props_changed",
					"description": "Return true if props are different, false otherwise"
				},
				"function.svn-fs-revision-prop": {
					"tokens": [
						"svn_fs_revision_prop",
						"svnfs_revision_prop"
					],
					"id": "function.svn-fs-revision-prop",
					"name": "svn_fs_revision_prop",
					"description": "Fetches the value of a named property"
				},
				"function.svn-fs-revision-root": {
					"tokens": [
						"svn_fs_revision_root",
						"svnfs_revision_root"
					],
					"id": "function.svn-fs-revision-root",
					"name": "svn_fs_revision_root",
					"description": "Get a handle on a specific version of the repository root"
				},
				"function.svn-fs-txn-root": {
					"tokens": [
						"svn_fs_txn_root",
						"svnfs_txn_root"
					],
					"id": "function.svn-fs-txn-root",
					"name": "svn_fs_txn_root",
					"description": "Creates and returns a transaction root"
				},
				"function.svn-fs-youngest-rev": {
					"tokens": [
						"svn_fs_youngest_rev",
						"svnfs_youngest_rev"
					],
					"id": "function.svn-fs-youngest-rev",
					"name": "svn_fs_youngest_rev",
					"description": "Returns the number of the youngest revision in the filesystem"
				},
				"function.svn-import": {
					"tokens": [
						"svn_import",
						"svnimport"
					],
					"id": "function.svn-import",
					"name": "svn_import",
					"description": "Imports an unversioned path into a repository"
				},
				"function.svn-log": {
					"tokens": [
						"svn_log",
						"svnlog"
					],
					"id": "function.svn-log",
					"name": "svn_log",
					"description": "Returns the commit log messages of a repository URL"
				},
				"function.svn-ls": {
					"tokens": [
						"svn_ls",
						"svnls"
					],
					"id": "function.svn-ls",
					"name": "svn_ls",
					"description": "Returns list of directory contents in repository URL, optionally at revision number"
				},
				"function.svn-mkdir": {
					"tokens": [
						"svn_mkdir",
						"svnmkdir"
					],
					"id": "function.svn-mkdir",
					"name": "svn_mkdir",
					"description": "Creates a directory in a working copy or repository"
				},
				"function.svn-repos-create": {
					"tokens": [
						"svn_repos_create",
						"svnrepos_create"
					],
					"id": "function.svn-repos-create",
					"name": "svn_repos_create",
					"description": "Create a new subversion repository at path"
				},
				"function.svn-repos-fs-begin-txn-for-commit": {
					"tokens": [
						"svn_repos_fs_begin_txn_for_commit",
						"svnrepos_fs_begin_txn_for_commit"
					],
					"id": "function.svn-repos-fs-begin-txn-for-commit",
					"name": "svn_repos_fs_begin_txn_for_commit",
					"description": "Create a new transaction"
				},
				"function.svn-repos-fs-commit-txn": {
					"tokens": [
						"svn_repos_fs_commit_txn",
						"svnrepos_fs_commit_txn"
					],
					"id": "function.svn-repos-fs-commit-txn",
					"name": "svn_repos_fs_commit_txn",
					"description": "Commits a transaction and returns the new revision"
				},
				"function.svn-repos-fs": {
					"tokens": [
						"svn_repos_fs",
						"svnrepos_fs"
					],
					"id": "function.svn-repos-fs",
					"name": "svn_repos_fs",
					"description": "Gets a handle on the filesystem for a repository"
				},
				"function.svn-repos-hotcopy": {
					"tokens": [
						"svn_repos_hotcopy",
						"svnrepos_hotcopy"
					],
					"id": "function.svn-repos-hotcopy",
					"name": "svn_repos_hotcopy",
					"description": "Make a hot-copy of the repos at repospath; copy it to destpath"
				},
				"function.svn-repos-open": {
					"tokens": [
						"svn_repos_open",
						"svnrepos_open"
					],
					"id": "function.svn-repos-open",
					"name": "svn_repos_open",
					"description": "Open a shared lock on a repository."
				},
				"function.svn-repos-recover": {
					"tokens": [
						"svn_repos_recover",
						"svnrepos_recover"
					],
					"id": "function.svn-repos-recover",
					"name": "svn_repos_recover",
					"description": "Run recovery procedures on the repository located at path."
				},
				"function.svn-revert": {
					"tokens": [
						"svn_revert",
						"svnrevert"
					],
					"id": "function.svn-revert",
					"name": "svn_revert",
					"description": "Revert changes to the working copy"
				},
				"function.svn-status": {
					"tokens": [
						"svn_status",
						"svnstatus"
					],
					"id": "function.svn-status",
					"name": "svn_status",
					"description": "Returns the status of working copy files and directories"
				},
				"function.svn-update": {
					"tokens": [
						"svn_update",
						"svnupdate"
					],
					"id": "function.svn-update",
					"name": "svn_update",
					"description": "Update working copy"
				},
				"function.tcpwrap-check": {
					"tokens": [
						"tcpwrap_check",
						"tcpwrapcheck"
					],
					"id": "function.tcpwrap-check",
					"name": "tcpwrap_check",
					"description": "Performs a tcpwrap check"
				},
				"varnishadmin.auth": {
					"tokens": [
						"VarnishAdmin::auth",
						"auth",
						"::auth"
					],
					"id": "varnishadmin.auth",
					"name": "VarnishAdmin::auth",
					"description": "Authenticate on a varnish instance"
				},
				"varnishadmin.ban": {
					"tokens": [
						"VarnishAdmin::ban",
						"ban",
						"::ban"
					],
					"id": "varnishadmin.ban",
					"name": "VarnishAdmin::ban",
					"description": "Ban URLs using a VCL expression"
				},
				"varnishadmin.banurl": {
					"tokens": [
						"VarnishAdmin::banUrl",
						"banUrl",
						"::banUrl"
					],
					"id": "varnishadmin.banurl",
					"name": "VarnishAdmin::banUrl",
					"description": "Ban an URL using a VCL expression"
				},
				"varnishadmin.clearpanic": {
					"tokens": [
						"VarnishAdmin::clearPanic",
						"clearPanic",
						"::clearPanic"
					],
					"id": "varnishadmin.clearpanic",
					"name": "VarnishAdmin::clearPanic",
					"description": "Clear varnish instance panic messages"
				},
				"varnishadmin.connect": {
					"tokens": [
						"VarnishAdmin::connect",
						"connect",
						"::connect"
					],
					"id": "varnishadmin.connect",
					"name": "VarnishAdmin::connect",
					"description": "Connect to a varnish instance administration interface"
				},
				"varnishadmin.construct": {
					"tokens": [
						"VarnishAdmin::__construct",
						"VarnishAdmin::_construct",
						"__construct",
						"::__construct"
					],
					"id": "varnishadmin.construct",
					"name": "VarnishAdmin::__construct",
					"description": "VarnishAdmin constructor"
				},
				"varnishadmin.disconnect": {
					"tokens": [
						"VarnishAdmin::disconnect",
						"disconnect",
						"::disconnect"
					],
					"id": "varnishadmin.disconnect",
					"name": "VarnishAdmin::disconnect",
					"description": "Disconnect from a varnish instance administration interface"
				},
				"varnishadmin.getpanic": {
					"tokens": [
						"VarnishAdmin::getPanic",
						"getPanic",
						"::getPanic"
					],
					"id": "varnishadmin.getpanic",
					"name": "VarnishAdmin::getPanic",
					"description": "Get the last panic message on a varnish instance"
				},
				"varnishadmin.getparams": {
					"tokens": [
						"VarnishAdmin::getParams",
						"getParams",
						"::getParams"
					],
					"id": "varnishadmin.getparams",
					"name": "VarnishAdmin::getParams",
					"description": "Fetch current varnish instance configuration parameters"
				},
				"varnishadmin.isrunning": {
					"tokens": [
						"VarnishAdmin::isRunning",
						"isRunning",
						"::isRunning"
					],
					"id": "varnishadmin.isrunning",
					"name": "VarnishAdmin::isRunning",
					"description": "Check if the varnish slave process is currently running"
				},
				"varnishadmin.setcompat": {
					"tokens": [
						"VarnishAdmin::setCompat",
						"setCompat",
						"::setCompat"
					],
					"id": "varnishadmin.setcompat",
					"name": "VarnishAdmin::setCompat",
					"description": "Set the class compat configuration param"
				},
				"varnishadmin.sethost": {
					"tokens": [
						"VarnishAdmin::setHost",
						"setHost",
						"::setHost"
					],
					"id": "varnishadmin.sethost",
					"name": "VarnishAdmin::setHost",
					"description": "Set the class host configuration param"
				},
				"varnishadmin.setident": {
					"tokens": [
						"VarnishAdmin::setIdent",
						"setIdent",
						"::setIdent"
					],
					"id": "varnishadmin.setident",
					"name": "VarnishAdmin::setIdent",
					"description": "Set the class ident configuration param"
				},
				"varnishadmin.setparam": {
					"tokens": [
						"VarnishAdmin::setParam",
						"setParam",
						"::setParam"
					],
					"id": "varnishadmin.setparam",
					"name": "VarnishAdmin::setParam",
					"description": "Set configuration param on the current varnish instance"
				},
				"varnishadmin.setport": {
					"tokens": [
						"VarnishAdmin::setPort",
						"setPort",
						"::setPort"
					],
					"id": "varnishadmin.setport",
					"name": "VarnishAdmin::setPort",
					"description": "Set the class port configuration param"
				},
				"varnishadmin.setsecret": {
					"tokens": [
						"VarnishAdmin::setSecret",
						"setSecret",
						"::setSecret"
					],
					"id": "varnishadmin.setsecret",
					"name": "VarnishAdmin::setSecret",
					"description": "Set the class secret configuration param"
				},
				"varnishadmin.settimeout": {
					"tokens": [
						"VarnishAdmin::setTimeout",
						"setTimeout",
						"::setTimeout"
					],
					"id": "varnishadmin.settimeout",
					"name": "VarnishAdmin::setTimeout",
					"description": "Set the class timeout configuration param"
				},
				"varnishadmin.start": {
					"tokens": [
						"VarnishAdmin::start",
						"start",
						"::start"
					],
					"id": "varnishadmin.start",
					"name": "VarnishAdmin::start",
					"description": "Start varnish worker process"
				},
				"varnishadmin.stop": {
					"tokens": [
						"VarnishAdmin::stop",
						"stop",
						"::stop"
					],
					"id": "varnishadmin.stop",
					"name": "VarnishAdmin::stop",
					"description": "Stop varnish worker process"
				},
				"varnishstat.construct": {
					"tokens": [
						"VarnishStat::__construct",
						"VarnishStat::_construct",
						"__construct",
						"::__construct"
					],
					"id": "varnishstat.construct",
					"name": "VarnishStat::__construct",
					"description": "VarnishStat constructor"
				},
				"varnishstat.getsnapshot": {
					"tokens": [
						"VarnishStat::getSnapshot",
						"getSnapshot",
						"::getSnapshot"
					],
					"id": "varnishstat.getsnapshot",
					"name": "VarnishStat::getSnapshot",
					"description": "Get the current varnish instance statistics snapshot"
				},
				"varnishlog.construct": {
					"tokens": [
						"VarnishLog::__construct",
						"VarnishLog::_construct",
						"__construct",
						"::__construct"
					],
					"id": "varnishlog.construct",
					"name": "VarnishLog::__construct",
					"description": "Varnishlog constructor"
				},
				"varnishlog.getline": {
					"tokens": [
						"VarnishLog::getLine",
						"getLine",
						"::getLine"
					],
					"id": "varnishlog.getline",
					"name": "VarnishLog::getLine",
					"description": "Get next log line"
				},
				"varnishlog.gettagname": {
					"tokens": [
						"VarnishLog::getTagName",
						"getTagName",
						"::getTagName"
					],
					"id": "varnishlog.gettagname",
					"name": "VarnishLog::getTagName",
					"description": "Get the log tag string representation by its index"
				},
				"function.yaz-addinfo": {
					"tokens": [
						"yaz_addinfo",
						"yazaddinfo"
					],
					"id": "function.yaz-addinfo",
					"name": "yaz_addinfo",
					"description": "Returns additional error information"
				},
				"function.yaz-ccl-conf": {
					"tokens": [
						"yaz_ccl_conf",
						"yazccl_conf"
					],
					"id": "function.yaz-ccl-conf",
					"name": "yaz_ccl_conf",
					"description": "Configure CCL parser"
				},
				"function.yaz-ccl-parse": {
					"tokens": [
						"yaz_ccl_parse",
						"yazccl_parse"
					],
					"id": "function.yaz-ccl-parse",
					"name": "yaz_ccl_parse",
					"description": "Invoke CCL Parser"
				},
				"function.yaz-close": {
					"tokens": [
						"yaz_close",
						"yazclose"
					],
					"id": "function.yaz-close",
					"name": "yaz_close",
					"description": "Close YAZ connection"
				},
				"function.yaz-connect": {
					"tokens": [
						"yaz_connect",
						"yazconnect"
					],
					"id": "function.yaz-connect",
					"name": "yaz_connect",
					"description": "Prepares for a connection to a Z39.50 server"
				},
				"function.yaz-database": {
					"tokens": [
						"yaz_database",
						"yazdatabase"
					],
					"id": "function.yaz-database",
					"name": "yaz_database",
					"description": "Specifies the databases within a session"
				},
				"function.yaz-element": {
					"tokens": [
						"yaz_element",
						"yazelement"
					],
					"id": "function.yaz-element",
					"name": "yaz_element",
					"description": "Specifies Element-Set Name for retrieval"
				},
				"function.yaz-errno": {
					"tokens": [
						"yaz_errno",
						"yazerrno"
					],
					"id": "function.yaz-errno",
					"name": "yaz_errno",
					"description": "Returns error number"
				},
				"function.yaz-error": {
					"tokens": [
						"yaz_error",
						"yazerror"
					],
					"id": "function.yaz-error",
					"name": "yaz_error",
					"description": "Returns error description"
				},
				"function.yaz-es-result": {
					"tokens": [
						"yaz_es_result",
						"yazes_result"
					],
					"id": "function.yaz-es-result",
					"name": "yaz_es_result",
					"description": "Inspects Extended Services Result"
				},
				"function.yaz-es": {
					"tokens": [
						"yaz_es",
						"yazes"
					],
					"id": "function.yaz-es",
					"name": "yaz_es",
					"description": "Prepares for an Extended Service Request"
				},
				"function.yaz-get-option": {
					"tokens": [
						"yaz_get_option",
						"yazget_option"
					],
					"id": "function.yaz-get-option",
					"name": "yaz_get_option",
					"description": "Returns value of option for connection"
				},
				"function.yaz-hits": {
					"tokens": [
						"yaz_hits",
						"yazhits"
					],
					"id": "function.yaz-hits",
					"name": "yaz_hits",
					"description": "Returns number of hits for last search"
				},
				"function.yaz-itemorder": {
					"tokens": [
						"yaz_itemorder",
						"yazitemorder"
					],
					"id": "function.yaz-itemorder",
					"name": "yaz_itemorder",
					"description": "Prepares for Z39.50 Item Order with an ILL-Request package"
				},
				"function.yaz-present": {
					"tokens": [
						"yaz_present",
						"yazpresent"
					],
					"id": "function.yaz-present",
					"name": "yaz_present",
					"description": "Prepares for retrieval (Z39.50 present)"
				},
				"function.yaz-range": {
					"tokens": [
						"yaz_range",
						"yazrange"
					],
					"id": "function.yaz-range",
					"name": "yaz_range",
					"description": "Specifies a range of records to retrieve"
				},
				"function.yaz-record": {
					"tokens": [
						"yaz_record",
						"yazrecord"
					],
					"id": "function.yaz-record",
					"name": "yaz_record",
					"description": "Returns a record"
				},
				"function.yaz-scan-result": {
					"tokens": [
						"yaz_scan_result",
						"yazscan_result"
					],
					"id": "function.yaz-scan-result",
					"name": "yaz_scan_result",
					"description": "Returns Scan Response result"
				},
				"function.yaz-scan": {
					"tokens": [
						"yaz_scan",
						"yazscan"
					],
					"id": "function.yaz-scan",
					"name": "yaz_scan",
					"description": "Prepares for a scan"
				},
				"function.yaz-schema": {
					"tokens": [
						"yaz_schema",
						"yazschema"
					],
					"id": "function.yaz-schema",
					"name": "yaz_schema",
					"description": "Specifies schema for retrieval"
				},
				"function.yaz-search": {
					"tokens": [
						"yaz_search",
						"yazsearch"
					],
					"id": "function.yaz-search",
					"name": "yaz_search",
					"description": "Prepares for a search"
				},
				"function.yaz-set-option": {
					"tokens": [
						"yaz_set_option",
						"yazset_option"
					],
					"id": "function.yaz-set-option",
					"name": "yaz_set_option",
					"description": "Sets one or more options for connection"
				},
				"function.yaz-sort": {
					"tokens": [
						"yaz_sort",
						"yazsort"
					],
					"id": "function.yaz-sort",
					"name": "yaz_sort",
					"description": "Sets sorting criteria"
				},
				"function.yaz-syntax": {
					"tokens": [
						"yaz_syntax",
						"yazsyntax"
					],
					"id": "function.yaz-syntax",
					"name": "yaz_syntax",
					"description": "Specifies the preferred record syntax for retrieval"
				},
				"function.yaz-wait": {
					"tokens": [
						"yaz_wait",
						"yazwait"
					],
					"id": "function.yaz-wait",
					"name": "yaz_wait",
					"description": "Wait for Z39.50 requests to complete"
				},
				"function.yp-all": {
					"tokens": [
						"yp_all",
						"ypall"
					],
					"id": "function.yp-all",
					"name": "yp_all",
					"description": "Traverse the map and call a function on each entry"
				},
				"function.yp-cat": {
					"tokens": [
						"yp_cat",
						"ypcat"
					],
					"id": "function.yp-cat",
					"name": "yp_cat",
					"description": "Return an array containing the entire map"
				},
				"function.yp-err-string": {
					"tokens": [
						"yp_err_string",
						"yperr_string"
					],
					"id": "function.yp-err-string",
					"name": "yp_err_string",
					"description": "Returns the error string associated with the given error code"
				},
				"function.yp-errno": {
					"tokens": [
						"yp_errno",
						"yperrno"
					],
					"id": "function.yp-errno",
					"name": "yp_errno",
					"description": "Returns the error code of the previous operation"
				},
				"function.yp-first": {
					"tokens": [
						"yp_first",
						"ypfirst"
					],
					"id": "function.yp-first",
					"name": "yp_first",
					"description": "Returns the first key-value pair from the named map"
				},
				"function.yp-get-default-domain": {
					"tokens": [
						"yp_get_default_domain",
						"ypget_default_domain"
					],
					"id": "function.yp-get-default-domain",
					"name": "yp_get_default_domain",
					"description": "Fetches the machine's default NIS domain"
				},
				"function.yp-master": {
					"tokens": [
						"yp_master",
						"ypmaster"
					],
					"id": "function.yp-master",
					"name": "yp_master",
					"description": "Returns the machine name of the master NIS server for a map"
				},
				"function.yp-match": {
					"tokens": [
						"yp_match",
						"ypmatch"
					],
					"id": "function.yp-match",
					"name": "yp_match",
					"description": "Returns the matched line"
				},
				"function.yp-next": {
					"tokens": [
						"yp_next",
						"ypnext"
					],
					"id": "function.yp-next",
					"name": "yp_next",
					"description": "Returns the next key-value pair in the named map"
				},
				"function.yp-order": {
					"tokens": [
						"yp_order",
						"yporder"
					],
					"id": "function.yp-order",
					"name": "yp_order",
					"description": "Returns the order number for a map"
				},
				"zmq.construct": {
					"tokens": [
						"ZMQ::__construct",
						"ZMQ::_construct",
						"__construct",
						"::__construct"
					],
					"id": "zmq.construct",
					"name": "ZMQ::__construct",
					"description": "ZMQ constructor"
				},
				"zmqcontext.construct": {
					"tokens": [
						"ZMQContext::__construct",
						"ZMQContext::_construct",
						"__construct",
						"::__construct"
					],
					"id": "zmqcontext.construct",
					"name": "ZMQContext::__construct",
					"description": "Construct a new ZMQContext object"
				},
				"zmqcontext.getopt": {
					"tokens": [
						"ZMQContext::getOpt",
						"getOpt",
						"::getOpt"
					],
					"id": "zmqcontext.getopt",
					"name": "ZMQContext::getOpt",
					"description": "Get context option"
				},
				"zmqcontext.getsocket": {
					"tokens": [
						"ZMQContext::getSocket",
						"getSocket",
						"::getSocket"
					],
					"id": "zmqcontext.getsocket",
					"name": "ZMQContext::getSocket",
					"description": "Create a new socket"
				},
				"zmqcontext.ispersistent": {
					"tokens": [
						"ZMQContext::isPersistent",
						"isPersistent",
						"::isPersistent"
					],
					"id": "zmqcontext.ispersistent",
					"name": "ZMQContext::isPersistent",
					"description": "Whether the context is persistent"
				},
				"zmqcontext.setopt": {
					"tokens": [
						"ZMQContext::setOpt",
						"setOpt",
						"::setOpt"
					],
					"id": "zmqcontext.setopt",
					"name": "ZMQContext::setOpt",
					"description": "Set a socket option"
				},
				"zmqsocket.bind": {
					"tokens": [
						"ZMQSocket::bind",
						"bind",
						"::bind"
					],
					"id": "zmqsocket.bind",
					"name": "ZMQSocket::bind",
					"description": "Bind the socket"
				},
				"zmqsocket.connect": {
					"tokens": [
						"ZMQSocket::connect",
						"connect",
						"::connect"
					],
					"id": "zmqsocket.connect",
					"name": "ZMQSocket::connect",
					"description": "Connect the socket"
				},
				"zmqsocket.construct": {
					"tokens": [
						"ZMQSocket::__construct",
						"ZMQSocket::_construct",
						"__construct",
						"::__construct"
					],
					"id": "zmqsocket.construct",
					"name": "ZMQSocket::__construct",
					"description": "Construct a new ZMQSocket"
				},
				"zmqsocket.disconnect": {
					"tokens": [
						"ZMQSocket::disconnect",
						"disconnect",
						"::disconnect"
					],
					"id": "zmqsocket.disconnect",
					"name": "ZMQSocket::disconnect",
					"description": "Disconnect a socket"
				},
				"zmqsocket.getendpoints": {
					"tokens": [
						"ZMQSocket::getEndpoints",
						"getEndpoints",
						"::getEndpoints"
					],
					"id": "zmqsocket.getendpoints",
					"name": "ZMQSocket::getEndpoints",
					"description": "Get list of endpoints"
				},
				"zmqsocket.getpersistentid": {
					"tokens": [
						"ZMQSocket::getPersistentId",
						"getPersistentId",
						"::getPersistentId"
					],
					"id": "zmqsocket.getpersistentid",
					"name": "ZMQSocket::getPersistentId",
					"description": "Get the persistent id"
				},
				"zmqsocket.getsockettype": {
					"tokens": [
						"ZMQSocket::getSocketType",
						"getSocketType",
						"::getSocketType"
					],
					"id": "zmqsocket.getsockettype",
					"name": "ZMQSocket::getSocketType",
					"description": "Get the socket type"
				},
				"zmqsocket.getsockopt": {
					"tokens": [
						"ZMQSocket::getSockOpt",
						"getSockOpt",
						"::getSockOpt"
					],
					"id": "zmqsocket.getsockopt",
					"name": "ZMQSocket::getSockOpt",
					"description": "Get socket option"
				},
				"zmqsocket.ispersistent": {
					"tokens": [
						"ZMQSocket::isPersistent",
						"isPersistent",
						"::isPersistent"
					],
					"id": "zmqsocket.ispersistent",
					"name": "ZMQSocket::isPersistent",
					"description": "Whether the socket is persistent"
				},
				"zmqsocket.recv": {
					"tokens": [
						"ZMQSocket::recv",
						"recv",
						"::recv"
					],
					"id": "zmqsocket.recv",
					"name": "ZMQSocket::recv",
					"description": "Receives a message"
				},
				"zmqsocket.recvmulti": {
					"tokens": [
						"ZMQSocket::recvMulti",
						"recvMulti",
						"::recvMulti"
					],
					"id": "zmqsocket.recvmulti",
					"name": "ZMQSocket::recvMulti",
					"description": "Receives a multipart message"
				},
				"zmqsocket.send": {
					"tokens": [
						"ZMQSocket::send",
						"send",
						"::send"
					],
					"id": "zmqsocket.send",
					"name": "ZMQSocket::send",
					"description": "Sends a message"
				},
				"zmqsocket.sendmulti": {
					"tokens": [
						"ZMQSocket::sendmulti",
						"sendmulti",
						"::sendmulti"
					],
					"id": "zmqsocket.sendmulti",
					"name": "ZMQSocket::sendmulti",
					"description": "Sends a multipart message"
				},
				"zmqsocket.setsockopt": {
					"tokens": [
						"ZMQSocket::setSockOpt",
						"setSockOpt",
						"::setSockOpt"
					],
					"id": "zmqsocket.setsockopt",
					"name": "ZMQSocket::setSockOpt",
					"description": "Set a socket option"
				},
				"zmqsocket.unbind": {
					"tokens": [
						"ZMQSocket::unbind",
						"unbind",
						"::unbind"
					],
					"id": "zmqsocket.unbind",
					"name": "ZMQSocket::unbind",
					"description": "Unbind the socket"
				},
				"zmqpoll.add": {
					"tokens": [
						"ZMQPoll::add",
						"add",
						"::add"
					],
					"id": "zmqpoll.add",
					"name": "ZMQPoll::add",
					"description": "Add item to the poll set"
				},
				"zmqpoll.clear": {
					"tokens": [
						"ZMQPoll::clear",
						"clear",
						"::clear"
					],
					"id": "zmqpoll.clear",
					"name": "ZMQPoll::clear",
					"description": "Clear the poll set"
				},
				"zmqpoll.count": {
					"tokens": [
						"ZMQPoll::count",
						"count",
						"::count"
					],
					"id": "zmqpoll.count",
					"name": "ZMQPoll::count",
					"description": "Count items in the poll set"
				},
				"zmqpoll.getlasterrors": {
					"tokens": [
						"ZMQPoll::getLastErrors",
						"getLastErrors",
						"::getLastErrors"
					],
					"id": "zmqpoll.getlasterrors",
					"name": "ZMQPoll::getLastErrors",
					"description": "Get poll errors"
				},
				"zmqpoll.poll": {
					"tokens": [
						"ZMQPoll::poll",
						"poll",
						"::poll"
					],
					"id": "zmqpoll.poll",
					"name": "ZMQPoll::poll",
					"description": "Poll the items"
				},
				"zmqpoll.remove": {
					"tokens": [
						"ZMQPoll::remove",
						"remove",
						"::remove"
					],
					"id": "zmqpoll.remove",
					"name": "ZMQPoll::remove",
					"description": "Remove item from poll set"
				},
				"zmqdevice.construct": {
					"tokens": [
						"ZMQDevice::__construct",
						"ZMQDevice::_construct",
						"__construct",
						"::__construct"
					],
					"id": "zmqdevice.construct",
					"name": "ZMQDevice::__construct",
					"description": "Construct a new device"
				},
				"zmqdevice.getidletimeout": {
					"tokens": [
						"ZMQDevice::getIdleTimeout",
						"getIdleTimeout",
						"::getIdleTimeout"
					],
					"id": "zmqdevice.getidletimeout",
					"name": "ZMQDevice::getIdleTimeout",
					"description": "Get the idle timeout"
				},
				"zmqdevice.gettimertimeout": {
					"tokens": [
						"ZMQDevice::getTimerTimeout",
						"getTimerTimeout",
						"::getTimerTimeout"
					],
					"id": "zmqdevice.gettimertimeout",
					"name": "ZMQDevice::getTimerTimeout",
					"description": "Get the timer timeout"
				},
				"zmqdevice.run": {
					"tokens": [
						"ZMQDevice::run",
						"run",
						"::run"
					],
					"id": "zmqdevice.run",
					"name": "ZMQDevice::run",
					"description": "Run the new device"
				},
				"zmqdevice.setidlecallback": {
					"tokens": [
						"ZMQDevice::setIdleCallback",
						"setIdleCallback",
						"::setIdleCallback"
					],
					"id": "zmqdevice.setidlecallback",
					"name": "ZMQDevice::setIdleCallback",
					"description": "Set the idle callback function"
				},
				"zmqdevice.setidletimeout": {
					"tokens": [
						"ZMQDevice::setIdleTimeout",
						"setIdleTimeout",
						"::setIdleTimeout"
					],
					"id": "zmqdevice.setidletimeout",
					"name": "ZMQDevice::setIdleTimeout",
					"description": "Set the idle timeout"
				},
				"zmqdevice.settimercallback": {
					"tokens": [
						"ZMQDevice::setTimerCallback",
						"setTimerCallback",
						"::setTimerCallback"
					],
					"id": "zmqdevice.settimercallback",
					"name": "ZMQDevice::setTimerCallback",
					"description": "Set the timer callback function"
				},
				"zmqdevice.settimertimeout": {
					"tokens": [
						"ZMQDevice::setTimerTimeout",
						"setTimerTimeout",
						"::setTimerTimeout"
					],
					"id": "zmqdevice.settimertimeout",
					"name": "ZMQDevice::setTimerTimeout",
					"description": "Set the timer timeout"
				},
				"function.udm-add-search-limit": {
					"tokens": [
						"udm_add_search_limit",
						"udmadd_search_limit"
					],
					"id": "function.udm-add-search-limit",
					"name": "udm_add_search_limit",
					"description": "Add various search limits"
				},
				"function.udm-alloc-agent-array": {
					"tokens": [
						"udm_alloc_agent_array",
						"udmalloc_agent_array"
					],
					"id": "function.udm-alloc-agent-array",
					"name": "udm_alloc_agent_array",
					"description": "Allocate mnoGoSearch session"
				},
				"function.udm-alloc-agent": {
					"tokens": [
						"udm_alloc_agent",
						"udmalloc_agent"
					],
					"id": "function.udm-alloc-agent",
					"name": "udm_alloc_agent",
					"description": "Allocate mnoGoSearch session"
				},
				"function.udm-api-version": {
					"tokens": [
						"udm_api_version",
						"udmapi_version"
					],
					"id": "function.udm-api-version",
					"name": "udm_api_version",
					"description": "Get mnoGoSearch API version"
				},
				"function.udm-cat-list": {
					"tokens": [
						"udm_cat_list",
						"udmcat_list"
					],
					"id": "function.udm-cat-list",
					"name": "udm_cat_list",
					"description": "Get all the categories on the same level with the current one"
				},
				"function.udm-cat-path": {
					"tokens": [
						"udm_cat_path",
						"udmcat_path"
					],
					"id": "function.udm-cat-path",
					"name": "udm_cat_path",
					"description": "Get the path to the current category"
				},
				"function.udm-check-charset": {
					"tokens": [
						"udm_check_charset",
						"udmcheck_charset"
					],
					"id": "function.udm-check-charset",
					"name": "udm_check_charset",
					"description": "Check if the given charset is known to mnogosearch"
				},
				"function.udm-clear-search-limits": {
					"tokens": [
						"udm_clear_search_limits",
						"udmclear_search_limits"
					],
					"id": "function.udm-clear-search-limits",
					"name": "udm_clear_search_limits",
					"description": "Clear all mnoGoSearch search restrictions"
				},
				"function.udm-crc32": {
					"tokens": [
						"udm_crc32",
						"udmcrc32"
					],
					"id": "function.udm-crc32",
					"name": "udm_crc32",
					"description": "Return CRC32 checksum of given string"
				},
				"function.udm-errno": {
					"tokens": [
						"udm_errno",
						"udmerrno"
					],
					"id": "function.udm-errno",
					"name": "udm_errno",
					"description": "Get mnoGoSearch error number"
				},
				"function.udm-error": {
					"tokens": [
						"udm_error",
						"udmerror"
					],
					"id": "function.udm-error",
					"name": "udm_error",
					"description": "Get mnoGoSearch error message"
				},
				"function.udm-find": {
					"tokens": [
						"udm_find",
						"udmfind"
					],
					"id": "function.udm-find",
					"name": "udm_find",
					"description": "Perform search"
				},
				"function.udm-free-agent": {
					"tokens": [
						"udm_free_agent",
						"udmfree_agent"
					],
					"id": "function.udm-free-agent",
					"name": "udm_free_agent",
					"description": "Free mnoGoSearch session"
				},
				"function.udm-free-ispell-data": {
					"tokens": [
						"udm_free_ispell_data",
						"udmfree_ispell_data"
					],
					"id": "function.udm-free-ispell-data",
					"name": "udm_free_ispell_data",
					"description": "Free memory allocated for ispell data"
				},
				"function.udm-free-res": {
					"tokens": [
						"udm_free_res",
						"udmfree_res"
					],
					"id": "function.udm-free-res",
					"name": "udm_free_res",
					"description": "Free mnoGoSearch result"
				},
				"function.udm-get-doc-count": {
					"tokens": [
						"udm_get_doc_count",
						"udmget_doc_count"
					],
					"id": "function.udm-get-doc-count",
					"name": "udm_get_doc_count",
					"description": "Get total number of documents in database"
				},
				"function.udm-get-res-field": {
					"tokens": [
						"udm_get_res_field",
						"udmget_res_field"
					],
					"id": "function.udm-get-res-field",
					"name": "udm_get_res_field",
					"description": "Fetch a result field"
				},
				"function.udm-get-res-param": {
					"tokens": [
						"udm_get_res_param",
						"udmget_res_param"
					],
					"id": "function.udm-get-res-param",
					"name": "udm_get_res_param",
					"description": "Get mnoGoSearch result parameters"
				},
				"function.udm-hash32": {
					"tokens": [
						"udm_hash32",
						"udmhash32"
					],
					"id": "function.udm-hash32",
					"name": "udm_hash32",
					"description": "Return Hash32 checksum of given string"
				},
				"function.udm-load-ispell-data": {
					"tokens": [
						"udm_load_ispell_data",
						"udmload_ispell_data"
					],
					"id": "function.udm-load-ispell-data",
					"name": "udm_load_ispell_data",
					"description": "Load ispell data"
				},
				"function.udm-set-agent-param": {
					"tokens": [
						"udm_set_agent_param",
						"udmset_agent_param"
					],
					"id": "function.udm-set-agent-param",
					"name": "udm_set_agent_param",
					"description": "Set mnoGoSearch agent session parameters"
				},
				"function.solr-get-version": {
					"tokens": [
						"solr_get_version",
						"solrget_version"
					],
					"id": "function.solr-get-version",
					"name": "solr_get_version",
					"description": "Returns the current version of the Apache Solr extension"
				},
				"solrutils.digestxmlresponse": {
					"tokens": [
						"SolrUtils::digestXmlResponse",
						"digestXmlResponse",
						"::digestXmlResponse"
					],
					"id": "solrutils.digestxmlresponse",
					"name": "SolrUtils::digestXmlResponse",
					"description": "Parses an response XML string into a SolrObject"
				},
				"solrutils.escapequerychars": {
					"tokens": [
						"SolrUtils::escapeQueryChars",
						"escapeQueryChars",
						"::escapeQueryChars"
					],
					"id": "solrutils.escapequerychars",
					"name": "SolrUtils::escapeQueryChars",
					"description": "Escapes a lucene query string"
				},
				"solrutils.getsolrversion": {
					"tokens": [
						"SolrUtils::getSolrVersion",
						"getSolrVersion",
						"::getSolrVersion"
					],
					"id": "solrutils.getsolrversion",
					"name": "SolrUtils::getSolrVersion",
					"description": "Returns the current version of the Solr extension"
				},
				"solrutils.queryphrase": {
					"tokens": [
						"SolrUtils::queryPhrase",
						"queryPhrase",
						"::queryPhrase"
					],
					"id": "solrutils.queryphrase",
					"name": "SolrUtils::queryPhrase",
					"description": "Prepares a phrase from an unescaped lucene string"
				},
				"solrinputdocument.addfield": {
					"tokens": [
						"SolrInputDocument::addField",
						"addField",
						"::addField"
					],
					"id": "solrinputdocument.addfield",
					"name": "SolrInputDocument::addField",
					"description": "Adds a field to the document"
				},
				"solrinputdocument.clear": {
					"tokens": [
						"SolrInputDocument::clear",
						"clear",
						"::clear"
					],
					"id": "solrinputdocument.clear",
					"name": "SolrInputDocument::clear",
					"description": "Resets the input document"
				},
				"solrinputdocument.clone": {
					"tokens": [
						"SolrInputDocument::__clone",
						"SolrInputDocument::_clone",
						"__clone",
						"::__clone"
					],
					"id": "solrinputdocument.clone",
					"name": "SolrInputDocument::__clone",
					"description": "Creates a copy of a SolrDocument"
				},
				"solrinputdocument.construct": {
					"tokens": [
						"SolrInputDocument::__construct",
						"SolrInputDocument::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrinputdocument.construct",
					"name": "SolrInputDocument::__construct",
					"description": "Constructor"
				},
				"solrinputdocument.deletefield": {
					"tokens": [
						"SolrInputDocument::deleteField",
						"deleteField",
						"::deleteField"
					],
					"id": "solrinputdocument.deletefield",
					"name": "SolrInputDocument::deleteField",
					"description": "Removes a field from the document"
				},
				"solrinputdocument.destruct": {
					"tokens": [
						"SolrInputDocument::__destruct",
						"SolrInputDocument::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrinputdocument.destruct",
					"name": "SolrInputDocument::__destruct",
					"description": "Destructor"
				},
				"solrinputdocument.fieldexists": {
					"tokens": [
						"SolrInputDocument::fieldExists",
						"fieldExists",
						"::fieldExists"
					],
					"id": "solrinputdocument.fieldexists",
					"name": "SolrInputDocument::fieldExists",
					"description": "Checks if a field exists"
				},
				"solrinputdocument.getboost": {
					"tokens": [
						"SolrInputDocument::getBoost",
						"getBoost",
						"::getBoost"
					],
					"id": "solrinputdocument.getboost",
					"name": "SolrInputDocument::getBoost",
					"description": "Retrieves the current boost value for the document"
				},
				"solrinputdocument.getfield": {
					"tokens": [
						"SolrInputDocument::getField",
						"getField",
						"::getField"
					],
					"id": "solrinputdocument.getfield",
					"name": "SolrInputDocument::getField",
					"description": "Retrieves a field by name"
				},
				"solrinputdocument.getfieldboost": {
					"tokens": [
						"SolrInputDocument::getFieldBoost",
						"getFieldBoost",
						"::getFieldBoost"
					],
					"id": "solrinputdocument.getfieldboost",
					"name": "SolrInputDocument::getFieldBoost",
					"description": "Retrieves the boost value for a particular field"
				},
				"solrinputdocument.getfieldcount": {
					"tokens": [
						"SolrInputDocument::getFieldCount",
						"getFieldCount",
						"::getFieldCount"
					],
					"id": "solrinputdocument.getfieldcount",
					"name": "SolrInputDocument::getFieldCount",
					"description": "Returns the number of fields in the document"
				},
				"solrinputdocument.getfieldnames": {
					"tokens": [
						"SolrInputDocument::getFieldNames",
						"getFieldNames",
						"::getFieldNames"
					],
					"id": "solrinputdocument.getfieldnames",
					"name": "SolrInputDocument::getFieldNames",
					"description": "Returns an array containing all the fields in the document"
				},
				"solrinputdocument.merge": {
					"tokens": [
						"SolrInputDocument::merge",
						"merge",
						"::merge"
					],
					"id": "solrinputdocument.merge",
					"name": "SolrInputDocument::merge",
					"description": "Merges one input document into another"
				},
				"solrinputdocument.reset": {
					"tokens": [
						"SolrInputDocument::reset",
						"reset",
						"::reset"
					],
					"id": "solrinputdocument.reset",
					"name": "SolrInputDocument::reset",
					"description": "This is an alias of SolrInputDocument::clear"
				},
				"solrinputdocument.setboost": {
					"tokens": [
						"SolrInputDocument::setBoost",
						"setBoost",
						"::setBoost"
					],
					"id": "solrinputdocument.setboost",
					"name": "SolrInputDocument::setBoost",
					"description": "Sets the boost value for this document"
				},
				"solrinputdocument.setfieldboost": {
					"tokens": [
						"SolrInputDocument::setFieldBoost",
						"setFieldBoost",
						"::setFieldBoost"
					],
					"id": "solrinputdocument.setfieldboost",
					"name": "SolrInputDocument::setFieldBoost",
					"description": "Sets the index-time boost value for a field"
				},
				"solrinputdocument.sort": {
					"tokens": [
						"SolrInputDocument::sort",
						"sort",
						"::sort"
					],
					"id": "solrinputdocument.sort",
					"name": "SolrInputDocument::sort",
					"description": "Sorts the fields within the document"
				},
				"solrinputdocument.toarray": {
					"tokens": [
						"SolrInputDocument::toArray",
						"toArray",
						"::toArray"
					],
					"id": "solrinputdocument.toarray",
					"name": "SolrInputDocument::toArray",
					"description": "Returns an array representation of the input document"
				},
				"solrdocument.addfield": {
					"tokens": [
						"SolrDocument::addField",
						"addField",
						"::addField"
					],
					"id": "solrdocument.addfield",
					"name": "SolrDocument::addField",
					"description": "Adds a field to the document"
				},
				"solrdocument.clear": {
					"tokens": [
						"SolrDocument::clear",
						"clear",
						"::clear"
					],
					"id": "solrdocument.clear",
					"name": "SolrDocument::clear",
					"description": "Drops all the fields in the document"
				},
				"solrdocument.clone": {
					"tokens": [
						"SolrDocument::__clone",
						"SolrDocument::_clone",
						"__clone",
						"::__clone"
					],
					"id": "solrdocument.clone",
					"name": "SolrDocument::__clone",
					"description": "Creates a copy of a SolrDocument object"
				},
				"solrdocument.construct": {
					"tokens": [
						"SolrDocument::__construct",
						"SolrDocument::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrdocument.construct",
					"name": "SolrDocument::__construct",
					"description": "Constructor"
				},
				"solrdocument.current": {
					"tokens": [
						"SolrDocument::current",
						"current",
						"::current"
					],
					"id": "solrdocument.current",
					"name": "SolrDocument::current",
					"description": "Retrieves the current field"
				},
				"solrdocument.deletefield": {
					"tokens": [
						"SolrDocument::deleteField",
						"deleteField",
						"::deleteField"
					],
					"id": "solrdocument.deletefield",
					"name": "SolrDocument::deleteField",
					"description": "Removes a field from the document"
				},
				"solrdocument.destruct": {
					"tokens": [
						"SolrDocument::__destruct",
						"SolrDocument::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrdocument.destruct",
					"name": "SolrDocument::__destruct",
					"description": "Destructor"
				},
				"solrdocument.fieldexists": {
					"tokens": [
						"SolrDocument::fieldExists",
						"fieldExists",
						"::fieldExists"
					],
					"id": "solrdocument.fieldexists",
					"name": "SolrDocument::fieldExists",
					"description": "Checks if a field exists in the document"
				},
				"solrdocument.get": {
					"tokens": [
						"SolrDocument::__get",
						"SolrDocument::_get",
						"__get",
						"::__get"
					],
					"id": "solrdocument.get",
					"name": "SolrDocument::__get",
					"description": "Access the field as a property"
				},
				"solrdocument.getfield": {
					"tokens": [
						"SolrDocument::getField",
						"getField",
						"::getField"
					],
					"id": "solrdocument.getfield",
					"name": "SolrDocument::getField",
					"description": "Retrieves a field by name"
				},
				"solrdocument.getfieldcount": {
					"tokens": [
						"SolrDocument::getFieldCount",
						"getFieldCount",
						"::getFieldCount"
					],
					"id": "solrdocument.getfieldcount",
					"name": "SolrDocument::getFieldCount",
					"description": "Returns the number of fields in this document"
				},
				"solrdocument.getfieldnames": {
					"tokens": [
						"SolrDocument::getFieldNames",
						"getFieldNames",
						"::getFieldNames"
					],
					"id": "solrdocument.getfieldnames",
					"name": "SolrDocument::getFieldNames",
					"description": "Returns an array of fields names in the document"
				},
				"solrdocument.getinputdocument": {
					"tokens": [
						"SolrDocument::getInputDocument",
						"getInputDocument",
						"::getInputDocument"
					],
					"id": "solrdocument.getinputdocument",
					"name": "SolrDocument::getInputDocument",
					"description": "Returns a SolrInputDocument equivalent of the object"
				},
				"solrdocument.isset": {
					"tokens": [
						"SolrDocument::__isset",
						"SolrDocument::_isset",
						"__isset",
						"::__isset"
					],
					"id": "solrdocument.isset",
					"name": "SolrDocument::__isset",
					"description": "Checks if a field exists"
				},
				"solrdocument.key": {
					"tokens": [
						"SolrDocument::key",
						"key",
						"::key"
					],
					"id": "solrdocument.key",
					"name": "SolrDocument::key",
					"description": "Retrieves the current key"
				},
				"solrdocument.merge": {
					"tokens": [
						"SolrDocument::merge",
						"merge",
						"::merge"
					],
					"id": "solrdocument.merge",
					"name": "SolrDocument::merge",
					"description": "Merges source to the current SolrDocument"
				},
				"solrdocument.next": {
					"tokens": [
						"SolrDocument::next",
						"next",
						"::next"
					],
					"id": "solrdocument.next",
					"name": "SolrDocument::next",
					"description": "Moves the internal pointer to the next field"
				},
				"solrdocument.offsetexists": {
					"tokens": [
						"SolrDocument::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "solrdocument.offsetexists",
					"name": "SolrDocument::offsetExists",
					"description": "Checks if a particular field exists"
				},
				"solrdocument.offsetget": {
					"tokens": [
						"SolrDocument::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "solrdocument.offsetget",
					"name": "SolrDocument::offsetGet",
					"description": "Retrieves a field"
				},
				"solrdocument.offsetset": {
					"tokens": [
						"SolrDocument::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "solrdocument.offsetset",
					"name": "SolrDocument::offsetSet",
					"description": "Adds a field to the document"
				},
				"solrdocument.offsetunset": {
					"tokens": [
						"SolrDocument::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "solrdocument.offsetunset",
					"name": "SolrDocument::offsetUnset",
					"description": "Removes a field"
				},
				"solrdocument.reset": {
					"tokens": [
						"SolrDocument::reset",
						"reset",
						"::reset"
					],
					"id": "solrdocument.reset",
					"name": "SolrDocument::reset",
					"description": "This is an alias to SolrDocument::clear()"
				},
				"solrdocument.rewind": {
					"tokens": [
						"SolrDocument::rewind",
						"rewind",
						"::rewind"
					],
					"id": "solrdocument.rewind",
					"name": "SolrDocument::rewind",
					"description": "Resets the internal pointer to the beginning"
				},
				"solrdocument.serialize": {
					"tokens": [
						"SolrDocument::serialize",
						"serialize",
						"::serialize"
					],
					"id": "solrdocument.serialize",
					"name": "SolrDocument::serialize",
					"description": "Used for custom serialization"
				},
				"solrdocument.set": {
					"tokens": [
						"SolrDocument::__set",
						"SolrDocument::_set",
						"__set",
						"::__set"
					],
					"id": "solrdocument.set",
					"name": "SolrDocument::__set",
					"description": "Adds another field to the document"
				},
				"solrdocument.sort": {
					"tokens": [
						"SolrDocument::sort",
						"sort",
						"::sort"
					],
					"id": "solrdocument.sort",
					"name": "SolrDocument::sort",
					"description": "Sorts the fields in the document"
				},
				"solrdocument.toarray": {
					"tokens": [
						"SolrDocument::toArray",
						"toArray",
						"::toArray"
					],
					"id": "solrdocument.toarray",
					"name": "SolrDocument::toArray",
					"description": "Returns an array representation of the document"
				},
				"solrdocument.unserialize": {
					"tokens": [
						"SolrDocument::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "solrdocument.unserialize",
					"name": "SolrDocument::unserialize",
					"description": "Custom serialization of SolrDocument objects"
				},
				"solrdocument.unset": {
					"tokens": [
						"SolrDocument::__unset",
						"SolrDocument::_unset",
						"__unset",
						"::__unset"
					],
					"id": "solrdocument.unset",
					"name": "SolrDocument::__unset",
					"description": "Removes a field from the document"
				},
				"solrdocument.valid": {
					"tokens": [
						"SolrDocument::valid",
						"valid",
						"::valid"
					],
					"id": "solrdocument.valid",
					"name": "SolrDocument::valid",
					"description": "Checks if the current position internally is still valid"
				},
				"solrdocumentfield.construct": {
					"tokens": [
						"SolrDocumentField::__construct",
						"SolrDocumentField::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrdocumentfield.construct",
					"name": "SolrDocumentField::__construct",
					"description": "Constructor"
				},
				"solrdocumentfield.destruct": {
					"tokens": [
						"SolrDocumentField::__destruct",
						"SolrDocumentField::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrdocumentfield.destruct",
					"name": "SolrDocumentField::__destruct",
					"description": "Destructor"
				},
				"solrobject.construct": {
					"tokens": [
						"SolrObject::__construct",
						"SolrObject::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrobject.construct",
					"name": "SolrObject::__construct",
					"description": "Creates Solr object"
				},
				"solrobject.destruct": {
					"tokens": [
						"SolrObject::__destruct",
						"SolrObject::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrobject.destruct",
					"name": "SolrObject::__destruct",
					"description": "Destructor"
				},
				"solrobject.getpropertynames": {
					"tokens": [
						"SolrObject::getPropertyNames",
						"getPropertyNames",
						"::getPropertyNames"
					],
					"id": "solrobject.getpropertynames",
					"name": "SolrObject::getPropertyNames",
					"description": "Returns an array of all the names of the properties"
				},
				"solrobject.offsetexists": {
					"tokens": [
						"SolrObject::offsetExists",
						"offsetExists",
						"::offsetExists"
					],
					"id": "solrobject.offsetexists",
					"name": "SolrObject::offsetExists",
					"description": "Checks if the property exists"
				},
				"solrobject.offsetget": {
					"tokens": [
						"SolrObject::offsetGet",
						"offsetGet",
						"::offsetGet"
					],
					"id": "solrobject.offsetget",
					"name": "SolrObject::offsetGet",
					"description": "Used to retrieve a property"
				},
				"solrobject.offsetset": {
					"tokens": [
						"SolrObject::offsetSet",
						"offsetSet",
						"::offsetSet"
					],
					"id": "solrobject.offsetset",
					"name": "SolrObject::offsetSet",
					"description": "Sets the value for a property"
				},
				"solrobject.offsetunset": {
					"tokens": [
						"SolrObject::offsetUnset",
						"offsetUnset",
						"::offsetUnset"
					],
					"id": "solrobject.offsetunset",
					"name": "SolrObject::offsetUnset",
					"description": "Unsets the value for the property"
				},
				"solrclient.adddocument": {
					"tokens": [
						"SolrClient::addDocument",
						"addDocument",
						"::addDocument"
					],
					"id": "solrclient.adddocument",
					"name": "SolrClient::addDocument",
					"description": "Adds a document to the index"
				},
				"solrclient.adddocuments": {
					"tokens": [
						"SolrClient::addDocuments",
						"addDocuments",
						"::addDocuments"
					],
					"id": "solrclient.adddocuments",
					"name": "SolrClient::addDocuments",
					"description": "Adds a collection of SolrInputDocument instances to the index"
				},
				"solrclient.commit": {
					"tokens": [
						"SolrClient::commit",
						"commit",
						"::commit"
					],
					"id": "solrclient.commit",
					"name": "SolrClient::commit",
					"description": "Finalizes all add/deletes made to the index"
				},
				"solrclient.construct": {
					"tokens": [
						"SolrClient::__construct",
						"SolrClient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrclient.construct",
					"name": "SolrClient::__construct",
					"description": "Constructor for the SolrClient object"
				},
				"solrclient.deletebyid": {
					"tokens": [
						"SolrClient::deleteById",
						"deleteById",
						"::deleteById"
					],
					"id": "solrclient.deletebyid",
					"name": "SolrClient::deleteById",
					"description": "Delete by Id"
				},
				"solrclient.deletebyids": {
					"tokens": [
						"SolrClient::deleteByIds",
						"deleteByIds",
						"::deleteByIds"
					],
					"id": "solrclient.deletebyids",
					"name": "SolrClient::deleteByIds",
					"description": "Deletes by Ids"
				},
				"solrclient.deletebyqueries": {
					"tokens": [
						"SolrClient::deleteByQueries",
						"deleteByQueries",
						"::deleteByQueries"
					],
					"id": "solrclient.deletebyqueries",
					"name": "SolrClient::deleteByQueries",
					"description": "Removes all documents matching any of the queries"
				},
				"solrclient.deletebyquery": {
					"tokens": [
						"SolrClient::deleteByQuery",
						"deleteByQuery",
						"::deleteByQuery"
					],
					"id": "solrclient.deletebyquery",
					"name": "SolrClient::deleteByQuery",
					"description": "Deletes all documents matching the given query"
				},
				"solrclient.destruct": {
					"tokens": [
						"SolrClient::__destruct",
						"SolrClient::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrclient.destruct",
					"name": "SolrClient::__destruct",
					"description": "Destructor for SolrClient"
				},
				"solrclient.getbyid": {
					"tokens": [
						"SolrClient::getById",
						"getById",
						"::getById"
					],
					"id": "solrclient.getbyid",
					"name": "SolrClient::getById",
					"description": "Get Document By Id. Utilizes Solr Realtime Get (RTG)."
				},
				"solrclient.getbyids": {
					"tokens": [
						"SolrClient::getByIds",
						"getByIds",
						"::getByIds"
					],
					"id": "solrclient.getbyids",
					"name": "SolrClient::getByIds",
					"description": "Get Documents by their Ids. Utilizes Solr Realtime Get (RTG)."
				},
				"solrclient.getdebug": {
					"tokens": [
						"SolrClient::getDebug",
						"getDebug",
						"::getDebug"
					],
					"id": "solrclient.getdebug",
					"name": "SolrClient::getDebug",
					"description": "Returns the debug data for the last connection attempt"
				},
				"solrclient.getoptions": {
					"tokens": [
						"SolrClient::getOptions",
						"getOptions",
						"::getOptions"
					],
					"id": "solrclient.getoptions",
					"name": "SolrClient::getOptions",
					"description": "Returns the client options set internally"
				},
				"solrclient.optimize": {
					"tokens": [
						"SolrClient::optimize",
						"optimize",
						"::optimize"
					],
					"id": "solrclient.optimize",
					"name": "SolrClient::optimize",
					"description": "Defragments the index"
				},
				"solrclient.ping": {
					"tokens": [
						"SolrClient::ping",
						"ping",
						"::ping"
					],
					"id": "solrclient.ping",
					"name": "SolrClient::ping",
					"description": "Checks if Solr server is still up"
				},
				"solrclient.query": {
					"tokens": [
						"SolrClient::query",
						"query",
						"::query"
					],
					"id": "solrclient.query",
					"name": "SolrClient::query",
					"description": "Sends a query to the server"
				},
				"solrclient.request": {
					"tokens": [
						"SolrClient::request",
						"request",
						"::request"
					],
					"id": "solrclient.request",
					"name": "SolrClient::request",
					"description": "Sends a raw update request"
				},
				"solrclient.rollback": {
					"tokens": [
						"SolrClient::rollback",
						"rollback",
						"::rollback"
					],
					"id": "solrclient.rollback",
					"name": "SolrClient::rollback",
					"description": "Rollbacks all add/deletes made to the index since the last commit"
				},
				"solrclient.setresponsewriter": {
					"tokens": [
						"SolrClient::setResponseWriter",
						"setResponseWriter",
						"::setResponseWriter"
					],
					"id": "solrclient.setresponsewriter",
					"name": "SolrClient::setResponseWriter",
					"description": "Sets the response writer used to prepare the response from Solr"
				},
				"solrclient.setservlet": {
					"tokens": [
						"SolrClient::setServlet",
						"setServlet",
						"::setServlet"
					],
					"id": "solrclient.setservlet",
					"name": "SolrClient::setServlet",
					"description": "Changes the specified servlet type to a new value"
				},
				"solrclient.system": {
					"tokens": [
						"SolrClient::system",
						"system",
						"::system"
					],
					"id": "solrclient.system",
					"name": "SolrClient::system",
					"description": "Retrieve Solr Server information"
				},
				"solrclient.threads": {
					"tokens": [
						"SolrClient::threads",
						"threads",
						"::threads"
					],
					"id": "solrclient.threads",
					"name": "SolrClient::threads",
					"description": "Checks the threads status"
				},
				"solrresponse.getdigestedresponse": {
					"tokens": [
						"SolrResponse::getDigestedResponse",
						"getDigestedResponse",
						"::getDigestedResponse"
					],
					"id": "solrresponse.getdigestedresponse",
					"name": "SolrResponse::getDigestedResponse",
					"description": "Returns the XML response as serialized PHP data"
				},
				"solrresponse.gethttpstatus": {
					"tokens": [
						"SolrResponse::getHttpStatus",
						"getHttpStatus",
						"::getHttpStatus"
					],
					"id": "solrresponse.gethttpstatus",
					"name": "SolrResponse::getHttpStatus",
					"description": "Returns the HTTP status of the response"
				},
				"solrresponse.gethttpstatusmessage": {
					"tokens": [
						"SolrResponse::getHttpStatusMessage",
						"getHttpStatusMessage",
						"::getHttpStatusMessage"
					],
					"id": "solrresponse.gethttpstatusmessage",
					"name": "SolrResponse::getHttpStatusMessage",
					"description": "Returns more details on the HTTP status"
				},
				"solrresponse.getrawrequest": {
					"tokens": [
						"SolrResponse::getRawRequest",
						"getRawRequest",
						"::getRawRequest"
					],
					"id": "solrresponse.getrawrequest",
					"name": "SolrResponse::getRawRequest",
					"description": "Returns the raw request sent to the Solr server"
				},
				"solrresponse.getrawrequestheaders": {
					"tokens": [
						"SolrResponse::getRawRequestHeaders",
						"getRawRequestHeaders",
						"::getRawRequestHeaders"
					],
					"id": "solrresponse.getrawrequestheaders",
					"name": "SolrResponse::getRawRequestHeaders",
					"description": "Returns the raw request headers sent to the Solr server"
				},
				"solrresponse.getrawresponse": {
					"tokens": [
						"SolrResponse::getRawResponse",
						"getRawResponse",
						"::getRawResponse"
					],
					"id": "solrresponse.getrawresponse",
					"name": "SolrResponse::getRawResponse",
					"description": "Returns the raw response from the server"
				},
				"solrresponse.getrawresponseheaders": {
					"tokens": [
						"SolrResponse::getRawResponseHeaders",
						"getRawResponseHeaders",
						"::getRawResponseHeaders"
					],
					"id": "solrresponse.getrawresponseheaders",
					"name": "SolrResponse::getRawResponseHeaders",
					"description": "Returns the raw response headers from the server"
				},
				"solrresponse.getrequesturl": {
					"tokens": [
						"SolrResponse::getRequestUrl",
						"getRequestUrl",
						"::getRequestUrl"
					],
					"id": "solrresponse.getrequesturl",
					"name": "SolrResponse::getRequestUrl",
					"description": "Returns the full URL the request was sent to"
				},
				"solrresponse.getresponse": {
					"tokens": [
						"SolrResponse::getResponse",
						"getResponse",
						"::getResponse"
					],
					"id": "solrresponse.getresponse",
					"name": "SolrResponse::getResponse",
					"description": "Returns a SolrObject representing the XML response from the server"
				},
				"solrresponse.setparsemode": {
					"tokens": [
						"SolrResponse::setParseMode",
						"setParseMode",
						"::setParseMode"
					],
					"id": "solrresponse.setparsemode",
					"name": "SolrResponse::setParseMode",
					"description": "Sets the parse mode"
				},
				"solrresponse.success": {
					"tokens": [
						"SolrResponse::success",
						"success",
						"::success"
					],
					"id": "solrresponse.success",
					"name": "SolrResponse::success",
					"description": "Was the request a success"
				},
				"solrqueryresponse.construct": {
					"tokens": [
						"SolrQueryResponse::__construct",
						"SolrQueryResponse::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrqueryresponse.construct",
					"name": "SolrQueryResponse::__construct",
					"description": "Constructor"
				},
				"solrqueryresponse.destruct": {
					"tokens": [
						"SolrQueryResponse::__destruct",
						"SolrQueryResponse::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrqueryresponse.destruct",
					"name": "SolrQueryResponse::__destruct",
					"description": "Destructor"
				},
				"solrupdateresponse.construct": {
					"tokens": [
						"SolrUpdateResponse::__construct",
						"SolrUpdateResponse::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrupdateresponse.construct",
					"name": "SolrUpdateResponse::__construct",
					"description": "Constructor"
				},
				"solrupdateresponse.destruct": {
					"tokens": [
						"SolrUpdateResponse::__destruct",
						"SolrUpdateResponse::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrupdateresponse.destruct",
					"name": "SolrUpdateResponse::__destruct",
					"description": "Destructor"
				},
				"solrpingresponse.construct": {
					"tokens": [
						"SolrPingResponse::__construct",
						"SolrPingResponse::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrpingresponse.construct",
					"name": "SolrPingResponse::__construct",
					"description": "Constructor"
				},
				"solrpingresponse.destruct": {
					"tokens": [
						"SolrPingResponse::__destruct",
						"SolrPingResponse::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrpingresponse.destruct",
					"name": "SolrPingResponse::__destruct",
					"description": "Destructor"
				},
				"solrpingresponse.getresponse": {
					"tokens": [
						"SolrPingResponse::getResponse",
						"getResponse",
						"::getResponse"
					],
					"id": "solrpingresponse.getresponse",
					"name": "SolrPingResponse::getResponse",
					"description": "Returns the response from the server"
				},
				"solrgenericresponse.construct": {
					"tokens": [
						"SolrGenericResponse::__construct",
						"SolrGenericResponse::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrgenericresponse.construct",
					"name": "SolrGenericResponse::__construct",
					"description": "Constructor"
				},
				"solrgenericresponse.destruct": {
					"tokens": [
						"SolrGenericResponse::__destruct",
						"SolrGenericResponse::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrgenericresponse.destruct",
					"name": "SolrGenericResponse::__destruct",
					"description": "Destructor"
				},
				"solrparams.add": {
					"tokens": [
						"SolrParams::add",
						"add",
						"::add"
					],
					"id": "solrparams.add",
					"name": "SolrParams::add",
					"description": "This is an alias for SolrParams::addParam"
				},
				"solrparams.addparam": {
					"tokens": [
						"SolrParams::addParam",
						"addParam",
						"::addParam"
					],
					"id": "solrparams.addparam",
					"name": "SolrParams::addParam",
					"description": "Adds a parameter to the object"
				},
				"solrparams.get": {
					"tokens": [
						"SolrParams::get",
						"get",
						"::get"
					],
					"id": "solrparams.get",
					"name": "SolrParams::get",
					"description": "This is an alias for SolrParams::getParam"
				},
				"solrparams.getparam": {
					"tokens": [
						"SolrParams::getParam",
						"getParam",
						"::getParam"
					],
					"id": "solrparams.getparam",
					"name": "SolrParams::getParam",
					"description": "Returns a parameter value"
				},
				"solrparams.getparams": {
					"tokens": [
						"SolrParams::getParams",
						"getParams",
						"::getParams"
					],
					"id": "solrparams.getparams",
					"name": "SolrParams::getParams",
					"description": "Returns an array of non URL-encoded parameters"
				},
				"solrparams.getpreparedparams": {
					"tokens": [
						"SolrParams::getPreparedParams",
						"getPreparedParams",
						"::getPreparedParams"
					],
					"id": "solrparams.getpreparedparams",
					"name": "SolrParams::getPreparedParams",
					"description": "Returns an array of URL-encoded parameters"
				},
				"solrparams.serialize": {
					"tokens": [
						"SolrParams::serialize",
						"serialize",
						"::serialize"
					],
					"id": "solrparams.serialize",
					"name": "SolrParams::serialize",
					"description": "Used for custom serialization"
				},
				"solrparams.set": {
					"tokens": [
						"SolrParams::set",
						"set",
						"::set"
					],
					"id": "solrparams.set",
					"name": "SolrParams::set",
					"description": "An alias of SolrParams::setParam"
				},
				"solrparams.setparam": {
					"tokens": [
						"SolrParams::setParam",
						"setParam",
						"::setParam"
					],
					"id": "solrparams.setparam",
					"name": "SolrParams::setParam",
					"description": "Sets the parameter to the specified value"
				},
				"solrparams.tostring": {
					"tokens": [
						"SolrParams::toString",
						"toString",
						"::toString"
					],
					"id": "solrparams.tostring",
					"name": "SolrParams::toString",
					"description": "Returns all the name-value pair parameters in the object"
				},
				"solrparams.unserialize": {
					"tokens": [
						"SolrParams::unserialize",
						"unserialize",
						"::unserialize"
					],
					"id": "solrparams.unserialize",
					"name": "SolrParams::unserialize",
					"description": "Used for custom serialization"
				},
				"solrmodifiableparams.construct": {
					"tokens": [
						"SolrModifiableParams::__construct",
						"SolrModifiableParams::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrmodifiableparams.construct",
					"name": "SolrModifiableParams::__construct",
					"description": "Constructor"
				},
				"solrmodifiableparams.destruct": {
					"tokens": [
						"SolrModifiableParams::__destruct",
						"SolrModifiableParams::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrmodifiableparams.destruct",
					"name": "SolrModifiableParams::__destruct",
					"description": "Destructor"
				},
				"solrquery.addexpandfilterquery": {
					"tokens": [
						"SolrQuery::addExpandFilterQuery",
						"addExpandFilterQuery",
						"::addExpandFilterQuery"
					],
					"id": "solrquery.addexpandfilterquery",
					"name": "SolrQuery::addExpandFilterQuery",
					"description": "Overrides main filter query, determines which documents to include in the main group."
				},
				"solrquery.addexpandsortfield": {
					"tokens": [
						"SolrQuery::addExpandSortField",
						"addExpandSortField",
						"::addExpandSortField"
					],
					"id": "solrquery.addexpandsortfield",
					"name": "SolrQuery::addExpandSortField",
					"description": "Orders the documents within the expanded groups (expand.sort parameter)."
				},
				"solrquery.addfacetdatefield": {
					"tokens": [
						"SolrQuery::addFacetDateField",
						"addFacetDateField",
						"::addFacetDateField"
					],
					"id": "solrquery.addfacetdatefield",
					"name": "SolrQuery::addFacetDateField",
					"description": "Maps to facet.date"
				},
				"solrquery.addfacetdateother": {
					"tokens": [
						"SolrQuery::addFacetDateOther",
						"addFacetDateOther",
						"::addFacetDateOther"
					],
					"id": "solrquery.addfacetdateother",
					"name": "SolrQuery::addFacetDateOther",
					"description": "Adds another facet.date.other parameter"
				},
				"solrquery.addfacetfield": {
					"tokens": [
						"SolrQuery::addFacetField",
						"addFacetField",
						"::addFacetField"
					],
					"id": "solrquery.addfacetfield",
					"name": "SolrQuery::addFacetField",
					"description": "Adds another field to the facet"
				},
				"solrquery.addfacetquery": {
					"tokens": [
						"SolrQuery::addFacetQuery",
						"addFacetQuery",
						"::addFacetQuery"
					],
					"id": "solrquery.addfacetquery",
					"name": "SolrQuery::addFacetQuery",
					"description": "Adds a facet query"
				},
				"solrquery.addfield": {
					"tokens": [
						"SolrQuery::addField",
						"addField",
						"::addField"
					],
					"id": "solrquery.addfield",
					"name": "SolrQuery::addField",
					"description": "Specifies which fields to return in the result"
				},
				"solrquery.addfilterquery": {
					"tokens": [
						"SolrQuery::addFilterQuery",
						"addFilterQuery",
						"::addFilterQuery"
					],
					"id": "solrquery.addfilterquery",
					"name": "SolrQuery::addFilterQuery",
					"description": "Specifies a filter query"
				},
				"solrquery.addgroupfield": {
					"tokens": [
						"SolrQuery::addGroupField",
						"addGroupField",
						"::addGroupField"
					],
					"id": "solrquery.addgroupfield",
					"name": "SolrQuery::addGroupField",
					"description": "Add a field to be used to group results."
				},
				"solrquery.addgroupfunction": {
					"tokens": [
						"SolrQuery::addGroupFunction",
						"addGroupFunction",
						"::addGroupFunction"
					],
					"id": "solrquery.addgroupfunction",
					"name": "SolrQuery::addGroupFunction",
					"description": "Allows grouping results based on the unique values of a function query (group.func parameter)."
				},
				"solrquery.addgroupquery": {
					"tokens": [
						"SolrQuery::addGroupQuery",
						"addGroupQuery",
						"::addGroupQuery"
					],
					"id": "solrquery.addgroupquery",
					"name": "SolrQuery::addGroupQuery",
					"description": "Allows grouping of documents that match the given query."
				},
				"solrquery.addgroupsortfield": {
					"tokens": [
						"SolrQuery::addGroupSortField",
						"addGroupSortField",
						"::addGroupSortField"
					],
					"id": "solrquery.addgroupsortfield",
					"name": "SolrQuery::addGroupSortField",
					"description": "Add a group sort field (group.sort parameter)."
				},
				"solrquery.addhighlightfield": {
					"tokens": [
						"SolrQuery::addHighlightField",
						"addHighlightField",
						"::addHighlightField"
					],
					"id": "solrquery.addhighlightfield",
					"name": "SolrQuery::addHighlightField",
					"description": "Maps to hl.fl"
				},
				"solrquery.addmltfield": {
					"tokens": [
						"SolrQuery::addMltField",
						"addMltField",
						"::addMltField"
					],
					"id": "solrquery.addmltfield",
					"name": "SolrQuery::addMltField",
					"description": "Sets a field to use for similarity"
				},
				"solrquery.addmltqueryfield": {
					"tokens": [
						"SolrQuery::addMltQueryField",
						"addMltQueryField",
						"::addMltQueryField"
					],
					"id": "solrquery.addmltqueryfield",
					"name": "SolrQuery::addMltQueryField",
					"description": "Maps to mlt.qf"
				},
				"solrquery.addsortfield": {
					"tokens": [
						"SolrQuery::addSortField",
						"addSortField",
						"::addSortField"
					],
					"id": "solrquery.addsortfield",
					"name": "SolrQuery::addSortField",
					"description": "Used to control how the results should be sorted"
				},
				"solrquery.addstatsfacet": {
					"tokens": [
						"SolrQuery::addStatsFacet",
						"addStatsFacet",
						"::addStatsFacet"
					],
					"id": "solrquery.addstatsfacet",
					"name": "SolrQuery::addStatsFacet",
					"description": "Requests a return of sub results for values within the given facet"
				},
				"solrquery.addstatsfield": {
					"tokens": [
						"SolrQuery::addStatsField",
						"addStatsField",
						"::addStatsField"
					],
					"id": "solrquery.addstatsfield",
					"name": "SolrQuery::addStatsField",
					"description": "Maps to stats.field parameter"
				},
				"solrquery.collapse": {
					"tokens": [
						"SolrQuery::collapse",
						"collapse",
						"::collapse"
					],
					"id": "solrquery.collapse",
					"name": "SolrQuery::collapse",
					"description": "Collapses the result set to a single document per group"
				},
				"solrquery.construct": {
					"tokens": [
						"SolrQuery::__construct",
						"SolrQuery::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrquery.construct",
					"name": "SolrQuery::__construct",
					"description": "Constructor"
				},
				"solrquery.destruct": {
					"tokens": [
						"SolrQuery::__destruct",
						"SolrQuery::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "solrquery.destruct",
					"name": "SolrQuery::__destruct",
					"description": "Destructor"
				},
				"solrquery.getexpand": {
					"tokens": [
						"SolrQuery::getExpand",
						"getExpand",
						"::getExpand"
					],
					"id": "solrquery.getexpand",
					"name": "SolrQuery::getExpand",
					"description": "Returns true if group expanding is enabled"
				},
				"solrquery.getexpandfilterqueries": {
					"tokens": [
						"SolrQuery::getExpandFilterQueries",
						"getExpandFilterQueries",
						"::getExpandFilterQueries"
					],
					"id": "solrquery.getexpandfilterqueries",
					"name": "SolrQuery::getExpandFilterQueries",
					"description": "Returns the expand filter queries"
				},
				"solrquery.getexpandquery": {
					"tokens": [
						"SolrQuery::getExpandQuery",
						"getExpandQuery",
						"::getExpandQuery"
					],
					"id": "solrquery.getexpandquery",
					"name": "SolrQuery::getExpandQuery",
					"description": "Returns the expand query expand.q parameter"
				},
				"solrquery.getexpandrows": {
					"tokens": [
						"SolrQuery::getExpandRows",
						"getExpandRows",
						"::getExpandRows"
					],
					"id": "solrquery.getexpandrows",
					"name": "SolrQuery::getExpandRows",
					"description": "Returns The number of rows to display in each group (expand.rows)"
				},
				"solrquery.getexpandsortfields": {
					"tokens": [
						"SolrQuery::getExpandSortFields",
						"getExpandSortFields",
						"::getExpandSortFields"
					],
					"id": "solrquery.getexpandsortfields",
					"name": "SolrQuery::getExpandSortFields",
					"description": "Returns an array of fields"
				},
				"solrquery.getfacet": {
					"tokens": [
						"SolrQuery::getFacet",
						"getFacet",
						"::getFacet"
					],
					"id": "solrquery.getfacet",
					"name": "SolrQuery::getFacet",
					"description": "Returns the value of the facet parameter"
				},
				"solrquery.getfacetdateend": {
					"tokens": [
						"SolrQuery::getFacetDateEnd",
						"getFacetDateEnd",
						"::getFacetDateEnd"
					],
					"id": "solrquery.getfacetdateend",
					"name": "SolrQuery::getFacetDateEnd",
					"description": "Returns the value for the facet.date.end parameter"
				},
				"solrquery.getfacetdatefields": {
					"tokens": [
						"SolrQuery::getFacetDateFields",
						"getFacetDateFields",
						"::getFacetDateFields"
					],
					"id": "solrquery.getfacetdatefields",
					"name": "SolrQuery::getFacetDateFields",
					"description": "Returns all the facet.date fields"
				},
				"solrquery.getfacetdategap": {
					"tokens": [
						"SolrQuery::getFacetDateGap",
						"getFacetDateGap",
						"::getFacetDateGap"
					],
					"id": "solrquery.getfacetdategap",
					"name": "SolrQuery::getFacetDateGap",
					"description": "Returns the value of the facet.date.gap parameter"
				},
				"solrquery.getfacetdatehardend": {
					"tokens": [
						"SolrQuery::getFacetDateHardEnd",
						"getFacetDateHardEnd",
						"::getFacetDateHardEnd"
					],
					"id": "solrquery.getfacetdatehardend",
					"name": "SolrQuery::getFacetDateHardEnd",
					"description": "Returns the value of the facet.date.hardend parameter"
				},
				"solrquery.getfacetdateother": {
					"tokens": [
						"SolrQuery::getFacetDateOther",
						"getFacetDateOther",
						"::getFacetDateOther"
					],
					"id": "solrquery.getfacetdateother",
					"name": "SolrQuery::getFacetDateOther",
					"description": "Returns the value for the facet.date.other parameter"
				},
				"solrquery.getfacetdatestart": {
					"tokens": [
						"SolrQuery::getFacetDateStart",
						"getFacetDateStart",
						"::getFacetDateStart"
					],
					"id": "solrquery.getfacetdatestart",
					"name": "SolrQuery::getFacetDateStart",
					"description": "Returns the  lower bound for the first date range for all date faceting on this field"
				},
				"solrquery.getfacetfields": {
					"tokens": [
						"SolrQuery::getFacetFields",
						"getFacetFields",
						"::getFacetFields"
					],
					"id": "solrquery.getfacetfields",
					"name": "SolrQuery::getFacetFields",
					"description": "Returns all the facet fields"
				},
				"solrquery.getfacetlimit": {
					"tokens": [
						"SolrQuery::getFacetLimit",
						"getFacetLimit",
						"::getFacetLimit"
					],
					"id": "solrquery.getfacetlimit",
					"name": "SolrQuery::getFacetLimit",
					"description": "Returns the maximum number of constraint counts that should be returned for the facet fields"
				},
				"solrquery.getfacetmethod": {
					"tokens": [
						"SolrQuery::getFacetMethod",
						"getFacetMethod",
						"::getFacetMethod"
					],
					"id": "solrquery.getfacetmethod",
					"name": "SolrQuery::getFacetMethod",
					"description": "Returns the value of the facet.method parameter"
				},
				"solrquery.getfacetmincount": {
					"tokens": [
						"SolrQuery::getFacetMinCount",
						"getFacetMinCount",
						"::getFacetMinCount"
					],
					"id": "solrquery.getfacetmincount",
					"name": "SolrQuery::getFacetMinCount",
					"description": "Returns the minimum counts for facet fields should be included in the response"
				},
				"solrquery.getfacetmissing": {
					"tokens": [
						"SolrQuery::getFacetMissing",
						"getFacetMissing",
						"::getFacetMissing"
					],
					"id": "solrquery.getfacetmissing",
					"name": "SolrQuery::getFacetMissing",
					"description": "Returns the current state of the facet.missing parameter"
				},
				"solrquery.getfacetoffset": {
					"tokens": [
						"SolrQuery::getFacetOffset",
						"getFacetOffset",
						"::getFacetOffset"
					],
					"id": "solrquery.getfacetoffset",
					"name": "SolrQuery::getFacetOffset",
					"description": "Returns an offset into the list of constraints to be used for pagination"
				},
				"solrquery.getfacetprefix": {
					"tokens": [
						"SolrQuery::getFacetPrefix",
						"getFacetPrefix",
						"::getFacetPrefix"
					],
					"id": "solrquery.getfacetprefix",
					"name": "SolrQuery::getFacetPrefix",
					"description": "Returns the facet prefix"
				},
				"solrquery.getfacetqueries": {
					"tokens": [
						"SolrQuery::getFacetQueries",
						"getFacetQueries",
						"::getFacetQueries"
					],
					"id": "solrquery.getfacetqueries",
					"name": "SolrQuery::getFacetQueries",
					"description": "Returns all the facet queries"
				},
				"solrquery.getfacetsort": {
					"tokens": [
						"SolrQuery::getFacetSort",
						"getFacetSort",
						"::getFacetSort"
					],
					"id": "solrquery.getfacetsort",
					"name": "SolrQuery::getFacetSort",
					"description": "Returns the facet sort type"
				},
				"solrquery.getfields": {
					"tokens": [
						"SolrQuery::getFields",
						"getFields",
						"::getFields"
					],
					"id": "solrquery.getfields",
					"name": "SolrQuery::getFields",
					"description": "Returns the list of fields that will be returned in the response"
				},
				"solrquery.getfilterqueries": {
					"tokens": [
						"SolrQuery::getFilterQueries",
						"getFilterQueries",
						"::getFilterQueries"
					],
					"id": "solrquery.getfilterqueries",
					"name": "SolrQuery::getFilterQueries",
					"description": "Returns an array of filter queries"
				},
				"solrquery.getgroup": {
					"tokens": [
						"SolrQuery::getGroup",
						"getGroup",
						"::getGroup"
					],
					"id": "solrquery.getgroup",
					"name": "SolrQuery::getGroup",
					"description": "Returns true if grouping is enabled"
				},
				"solrquery.getgroupcachepercent": {
					"tokens": [
						"SolrQuery::getGroupCachePercent",
						"getGroupCachePercent",
						"::getGroupCachePercent"
					],
					"id": "solrquery.getgroupcachepercent",
					"name": "SolrQuery::getGroupCachePercent",
					"description": "Returns group cache percent value"
				},
				"solrquery.getgroupfacet": {
					"tokens": [
						"SolrQuery::getGroupFacet",
						"getGroupFacet",
						"::getGroupFacet"
					],
					"id": "solrquery.getgroupfacet",
					"name": "SolrQuery::getGroupFacet",
					"description": "Returns the group.facet parameter value"
				},
				"solrquery.getgroupfields": {
					"tokens": [
						"SolrQuery::getGroupFields",
						"getGroupFields",
						"::getGroupFields"
					],
					"id": "solrquery.getgroupfields",
					"name": "SolrQuery::getGroupFields",
					"description": "Returns group fields (group.field parameter values)"
				},
				"solrquery.getgroupformat": {
					"tokens": [
						"SolrQuery::getGroupFormat",
						"getGroupFormat",
						"::getGroupFormat"
					],
					"id": "solrquery.getgroupformat",
					"name": "SolrQuery::getGroupFormat",
					"description": "Returns the group.format value"
				},
				"solrquery.getgroupfunctions": {
					"tokens": [
						"SolrQuery::getGroupFunctions",
						"getGroupFunctions",
						"::getGroupFunctions"
					],
					"id": "solrquery.getgroupfunctions",
					"name": "SolrQuery::getGroupFunctions",
					"description": "Returns group functions (group.func parameter values)"
				},
				"solrquery.getgrouplimit": {
					"tokens": [
						"SolrQuery::getGroupLimit",
						"getGroupLimit",
						"::getGroupLimit"
					],
					"id": "solrquery.getgrouplimit",
					"name": "SolrQuery::getGroupLimit",
					"description": "Returns the group.limit value"
				},
				"solrquery.getgroupmain": {
					"tokens": [
						"SolrQuery::getGroupMain",
						"getGroupMain",
						"::getGroupMain"
					],
					"id": "solrquery.getgroupmain",
					"name": "SolrQuery::getGroupMain",
					"description": "Returns the group.main value"
				},
				"solrquery.getgroupngroups": {
					"tokens": [
						"SolrQuery::getGroupNGroups",
						"getGroupNGroups",
						"::getGroupNGroups"
					],
					"id": "solrquery.getgroupngroups",
					"name": "SolrQuery::getGroupNGroups",
					"description": "Returns the group.ngroups value"
				},
				"solrquery.getgroupoffset": {
					"tokens": [
						"SolrQuery::getGroupOffset",
						"getGroupOffset",
						"::getGroupOffset"
					],
					"id": "solrquery.getgroupoffset",
					"name": "SolrQuery::getGroupOffset",
					"description": "Returns the group.offset value"
				},
				"solrquery.getgroupqueries": {
					"tokens": [
						"SolrQuery::getGroupQueries",
						"getGroupQueries",
						"::getGroupQueries"
					],
					"id": "solrquery.getgroupqueries",
					"name": "SolrQuery::getGroupQueries",
					"description": "Returns all the group.query parameter values"
				},
				"solrquery.getgroupsortfields": {
					"tokens": [
						"SolrQuery::getGroupSortFields",
						"getGroupSortFields",
						"::getGroupSortFields"
					],
					"id": "solrquery.getgroupsortfields",
					"name": "SolrQuery::getGroupSortFields",
					"description": "Returns the group.sort value"
				},
				"solrquery.getgrouptruncate": {
					"tokens": [
						"SolrQuery::getGroupTruncate",
						"getGroupTruncate",
						"::getGroupTruncate"
					],
					"id": "solrquery.getgrouptruncate",
					"name": "SolrQuery::getGroupTruncate",
					"description": "Returns the group.truncate value"
				},
				"solrquery.gethighlight": {
					"tokens": [
						"SolrQuery::getHighlight",
						"getHighlight",
						"::getHighlight"
					],
					"id": "solrquery.gethighlight",
					"name": "SolrQuery::getHighlight",
					"description": "Returns the state of the hl parameter"
				},
				"solrquery.gethighlightalternatefield": {
					"tokens": [
						"SolrQuery::getHighlightAlternateField",
						"getHighlightAlternateField",
						"::getHighlightAlternateField"
					],
					"id": "solrquery.gethighlightalternatefield",
					"name": "SolrQuery::getHighlightAlternateField",
					"description": "Returns the highlight field to use as backup or default"
				},
				"solrquery.gethighlightfields": {
					"tokens": [
						"SolrQuery::getHighlightFields",
						"getHighlightFields",
						"::getHighlightFields"
					],
					"id": "solrquery.gethighlightfields",
					"name": "SolrQuery::getHighlightFields",
					"description": "Returns all the fields that Solr should generate highlighted snippets for"
				},
				"solrquery.gethighlightformatter": {
					"tokens": [
						"SolrQuery::getHighlightFormatter",
						"getHighlightFormatter",
						"::getHighlightFormatter"
					],
					"id": "solrquery.gethighlightformatter",
					"name": "SolrQuery::getHighlightFormatter",
					"description": "Returns the formatter for the highlighted output"
				},
				"solrquery.gethighlightfragmenter": {
					"tokens": [
						"SolrQuery::getHighlightFragmenter",
						"getHighlightFragmenter",
						"::getHighlightFragmenter"
					],
					"id": "solrquery.gethighlightfragmenter",
					"name": "SolrQuery::getHighlightFragmenter",
					"description": "Returns the text snippet generator for highlighted text"
				},
				"solrquery.gethighlightfragsize": {
					"tokens": [
						"SolrQuery::getHighlightFragsize",
						"getHighlightFragsize",
						"::getHighlightFragsize"
					],
					"id": "solrquery.gethighlightfragsize",
					"name": "SolrQuery::getHighlightFragsize",
					"description": "Returns the number of characters of fragments to consider for highlighting"
				},
				"solrquery.gethighlighthighlightmultiterm": {
					"tokens": [
						"SolrQuery::getHighlightHighlightMultiTerm",
						"getHighlightHighlightMultiTerm",
						"::getHighlightHighlightMultiTerm"
					],
					"id": "solrquery.gethighlighthighlightmultiterm",
					"name": "SolrQuery::getHighlightHighlightMultiTerm",
					"description": "Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries"
				},
				"solrquery.gethighlightmaxalternatefieldlength": {
					"tokens": [
						"SolrQuery::getHighlightMaxAlternateFieldLength",
						"getHighlightMaxAlternateFieldLength",
						"::getHighlightMaxAlternateFieldLength"
					],
					"id": "solrquery.gethighlightmaxalternatefieldlength",
					"name": "SolrQuery::getHighlightMaxAlternateFieldLength",
					"description": "Returns the maximum number of characters of the field to return"
				},
				"solrquery.gethighlightmaxanalyzedchars": {
					"tokens": [
						"SolrQuery::getHighlightMaxAnalyzedChars",
						"getHighlightMaxAnalyzedChars",
						"::getHighlightMaxAnalyzedChars"
					],
					"id": "solrquery.gethighlightmaxanalyzedchars",
					"name": "SolrQuery::getHighlightMaxAnalyzedChars",
					"description": "Returns the maximum number of characters into a document to look for suitable snippets"
				},
				"solrquery.gethighlightmergecontiguous": {
					"tokens": [
						"SolrQuery::getHighlightMergeContiguous",
						"getHighlightMergeContiguous",
						"::getHighlightMergeContiguous"
					],
					"id": "solrquery.gethighlightmergecontiguous",
					"name": "SolrQuery::getHighlightMergeContiguous",
					"description": "Returns whether or not the collapse contiguous fragments into a single fragment"
				},
				"solrquery.gethighlightregexmaxanalyzedchars": {
					"tokens": [
						"SolrQuery::getHighlightRegexMaxAnalyzedChars",
						"getHighlightRegexMaxAnalyzedChars",
						"::getHighlightRegexMaxAnalyzedChars"
					],
					"id": "solrquery.gethighlightregexmaxanalyzedchars",
					"name": "SolrQuery::getHighlightRegexMaxAnalyzedChars",
					"description": "Returns the maximum number of characters from a field when using the regex fragmenter"
				},
				"solrquery.gethighlightregexpattern": {
					"tokens": [
						"SolrQuery::getHighlightRegexPattern",
						"getHighlightRegexPattern",
						"::getHighlightRegexPattern"
					],
					"id": "solrquery.gethighlightregexpattern",
					"name": "SolrQuery::getHighlightRegexPattern",
					"description": "Returns the regular expression for fragmenting"
				},
				"solrquery.gethighlightregexslop": {
					"tokens": [
						"SolrQuery::getHighlightRegexSlop",
						"getHighlightRegexSlop",
						"::getHighlightRegexSlop"
					],
					"id": "solrquery.gethighlightregexslop",
					"name": "SolrQuery::getHighlightRegexSlop",
					"description": "Returns the deviation factor from the ideal fragment size"
				},
				"solrquery.gethighlightrequirefieldmatch": {
					"tokens": [
						"SolrQuery::getHighlightRequireFieldMatch",
						"getHighlightRequireFieldMatch",
						"::getHighlightRequireFieldMatch"
					],
					"id": "solrquery.gethighlightrequirefieldmatch",
					"name": "SolrQuery::getHighlightRequireFieldMatch",
					"description": "Returns if a field will only be highlighted if the query matched in this particular field"
				},
				"solrquery.gethighlightsimplepost": {
					"tokens": [
						"SolrQuery::getHighlightSimplePost",
						"getHighlightSimplePost",
						"::getHighlightSimplePost"
					],
					"id": "solrquery.gethighlightsimplepost",
					"name": "SolrQuery::getHighlightSimplePost",
					"description": "Returns the text which appears after a highlighted term"
				},
				"solrquery.gethighlightsimplepre": {
					"tokens": [
						"SolrQuery::getHighlightSimplePre",
						"getHighlightSimplePre",
						"::getHighlightSimplePre"
					],
					"id": "solrquery.gethighlightsimplepre",
					"name": "SolrQuery::getHighlightSimplePre",
					"description": "Returns the text which appears before a highlighted term"
				},
				"solrquery.gethighlightsnippets": {
					"tokens": [
						"SolrQuery::getHighlightSnippets",
						"getHighlightSnippets",
						"::getHighlightSnippets"
					],
					"id": "solrquery.gethighlightsnippets",
					"name": "SolrQuery::getHighlightSnippets",
					"description": "Returns the maximum number of highlighted snippets to generate per field"
				},
				"solrquery.gethighlightusephrasehighlighter": {
					"tokens": [
						"SolrQuery::getHighlightUsePhraseHighlighter",
						"getHighlightUsePhraseHighlighter",
						"::getHighlightUsePhraseHighlighter"
					],
					"id": "solrquery.gethighlightusephrasehighlighter",
					"name": "SolrQuery::getHighlightUsePhraseHighlighter",
					"description": "Returns the state of the hl.usePhraseHighlighter parameter"
				},
				"solrquery.getmlt": {
					"tokens": [
						"SolrQuery::getMlt",
						"getMlt",
						"::getMlt"
					],
					"id": "solrquery.getmlt",
					"name": "SolrQuery::getMlt",
					"description": "Returns whether or not MoreLikeThis results should be enabled"
				},
				"solrquery.getmltboost": {
					"tokens": [
						"SolrQuery::getMltBoost",
						"getMltBoost",
						"::getMltBoost"
					],
					"id": "solrquery.getmltboost",
					"name": "SolrQuery::getMltBoost",
					"description": "Returns whether or not the query will be boosted by the interesting term relevance"
				},
				"solrquery.getmltcount": {
					"tokens": [
						"SolrQuery::getMltCount",
						"getMltCount",
						"::getMltCount"
					],
					"id": "solrquery.getmltcount",
					"name": "SolrQuery::getMltCount",
					"description": "Returns the number of similar documents to return for each result"
				},
				"solrquery.getmltfields": {
					"tokens": [
						"SolrQuery::getMltFields",
						"getMltFields",
						"::getMltFields"
					],
					"id": "solrquery.getmltfields",
					"name": "SolrQuery::getMltFields",
					"description": "Returns all the fields to use for similarity"
				},
				"solrquery.getmltmaxnumqueryterms": {
					"tokens": [
						"SolrQuery::getMltMaxNumQueryTerms",
						"getMltMaxNumQueryTerms",
						"::getMltMaxNumQueryTerms"
					],
					"id": "solrquery.getmltmaxnumqueryterms",
					"name": "SolrQuery::getMltMaxNumQueryTerms",
					"description": "Returns the maximum number of query terms that will be included in any generated query"
				},
				"solrquery.getmltmaxnumtokens": {
					"tokens": [
						"SolrQuery::getMltMaxNumTokens",
						"getMltMaxNumTokens",
						"::getMltMaxNumTokens"
					],
					"id": "solrquery.getmltmaxnumtokens",
					"name": "SolrQuery::getMltMaxNumTokens",
					"description": "Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support"
				},
				"solrquery.getmltmaxwordlength": {
					"tokens": [
						"SolrQuery::getMltMaxWordLength",
						"getMltMaxWordLength",
						"::getMltMaxWordLength"
					],
					"id": "solrquery.getmltmaxwordlength",
					"name": "SolrQuery::getMltMaxWordLength",
					"description": "Returns the maximum word length above which words will be ignored"
				},
				"solrquery.getmltmindocfrequency": {
					"tokens": [
						"SolrQuery::getMltMinDocFrequency",
						"getMltMinDocFrequency",
						"::getMltMinDocFrequency"
					],
					"id": "solrquery.getmltmindocfrequency",
					"name": "SolrQuery::getMltMinDocFrequency",
					"description": "Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs"
				},
				"solrquery.getmltmintermfrequency": {
					"tokens": [
						"SolrQuery::getMltMinTermFrequency",
						"getMltMinTermFrequency",
						"::getMltMinTermFrequency"
					],
					"id": "solrquery.getmltmintermfrequency",
					"name": "SolrQuery::getMltMinTermFrequency",
					"description": "Returns the frequency below which terms will be ignored in the source document"
				},
				"solrquery.getmltminwordlength": {
					"tokens": [
						"SolrQuery::getMltMinWordLength",
						"getMltMinWordLength",
						"::getMltMinWordLength"
					],
					"id": "solrquery.getmltminwordlength",
					"name": "SolrQuery::getMltMinWordLength",
					"description": "Returns the minimum word length below which words will be ignored"
				},
				"solrquery.getmltqueryfields": {
					"tokens": [
						"SolrQuery::getMltQueryFields",
						"getMltQueryFields",
						"::getMltQueryFields"
					],
					"id": "solrquery.getmltqueryfields",
					"name": "SolrQuery::getMltQueryFields",
					"description": "Returns the query fields and their boosts"
				},
				"solrquery.getquery": {
					"tokens": [
						"SolrQuery::getQuery",
						"getQuery",
						"::getQuery"
					],
					"id": "solrquery.getquery",
					"name": "SolrQuery::getQuery",
					"description": "Returns the main query"
				},
				"solrquery.getrows": {
					"tokens": [
						"SolrQuery::getRows",
						"getRows",
						"::getRows"
					],
					"id": "solrquery.getrows",
					"name": "SolrQuery::getRows",
					"description": "Returns the maximum number of documents"
				},
				"solrquery.getsortfields": {
					"tokens": [
						"SolrQuery::getSortFields",
						"getSortFields",
						"::getSortFields"
					],
					"id": "solrquery.getsortfields",
					"name": "SolrQuery::getSortFields",
					"description": "Returns all the sort fields"
				},
				"solrquery.getstart": {
					"tokens": [
						"SolrQuery::getStart",
						"getStart",
						"::getStart"
					],
					"id": "solrquery.getstart",
					"name": "SolrQuery::getStart",
					"description": "Returns the offset in the complete result set"
				},
				"solrquery.getstats": {
					"tokens": [
						"SolrQuery::getStats",
						"getStats",
						"::getStats"
					],
					"id": "solrquery.getstats",
					"name": "SolrQuery::getStats",
					"description": "Returns whether or not stats is enabled"
				},
				"solrquery.getstatsfacets": {
					"tokens": [
						"SolrQuery::getStatsFacets",
						"getStatsFacets",
						"::getStatsFacets"
					],
					"id": "solrquery.getstatsfacets",
					"name": "SolrQuery::getStatsFacets",
					"description": "Returns all the stats facets that were set"
				},
				"solrquery.getstatsfields": {
					"tokens": [
						"SolrQuery::getStatsFields",
						"getStatsFields",
						"::getStatsFields"
					],
					"id": "solrquery.getstatsfields",
					"name": "SolrQuery::getStatsFields",
					"description": "Returns all the statistics fields"
				},
				"solrquery.getterms": {
					"tokens": [
						"SolrQuery::getTerms",
						"getTerms",
						"::getTerms"
					],
					"id": "solrquery.getterms",
					"name": "SolrQuery::getTerms",
					"description": "Returns whether or not the TermsComponent is enabled"
				},
				"solrquery.gettermsfield": {
					"tokens": [
						"SolrQuery::getTermsField",
						"getTermsField",
						"::getTermsField"
					],
					"id": "solrquery.gettermsfield",
					"name": "SolrQuery::getTermsField",
					"description": "Returns the field from which the terms are retrieved"
				},
				"solrquery.gettermsincludelowerbound": {
					"tokens": [
						"SolrQuery::getTermsIncludeLowerBound",
						"getTermsIncludeLowerBound",
						"::getTermsIncludeLowerBound"
					],
					"id": "solrquery.gettermsincludelowerbound",
					"name": "SolrQuery::getTermsIncludeLowerBound",
					"description": "Returns whether or not to include the lower bound in the result set"
				},
				"solrquery.gettermsincludeupperbound": {
					"tokens": [
						"SolrQuery::getTermsIncludeUpperBound",
						"getTermsIncludeUpperBound",
						"::getTermsIncludeUpperBound"
					],
					"id": "solrquery.gettermsincludeupperbound",
					"name": "SolrQuery::getTermsIncludeUpperBound",
					"description": "Returns whether or not to include the upper bound term in the result set"
				},
				"solrquery.gettermslimit": {
					"tokens": [
						"SolrQuery::getTermsLimit",
						"getTermsLimit",
						"::getTermsLimit"
					],
					"id": "solrquery.gettermslimit",
					"name": "SolrQuery::getTermsLimit",
					"description": "Returns the maximum number of terms Solr should return"
				},
				"solrquery.gettermslowerbound": {
					"tokens": [
						"SolrQuery::getTermsLowerBound",
						"getTermsLowerBound",
						"::getTermsLowerBound"
					],
					"id": "solrquery.gettermslowerbound",
					"name": "SolrQuery::getTermsLowerBound",
					"description": "Returns the term to start at"
				},
				"solrquery.gettermsmaxcount": {
					"tokens": [
						"SolrQuery::getTermsMaxCount",
						"getTermsMaxCount",
						"::getTermsMaxCount"
					],
					"id": "solrquery.gettermsmaxcount",
					"name": "SolrQuery::getTermsMaxCount",
					"description": "Returns the maximum document frequency"
				},
				"solrquery.gettermsmincount": {
					"tokens": [
						"SolrQuery::getTermsMinCount",
						"getTermsMinCount",
						"::getTermsMinCount"
					],
					"id": "solrquery.gettermsmincount",
					"name": "SolrQuery::getTermsMinCount",
					"description": "Returns the minimum document frequency to return in order to be included"
				},
				"solrquery.gettermsprefix": {
					"tokens": [
						"SolrQuery::getTermsPrefix",
						"getTermsPrefix",
						"::getTermsPrefix"
					],
					"id": "solrquery.gettermsprefix",
					"name": "SolrQuery::getTermsPrefix",
					"description": "Returns the term prefix"
				},
				"solrquery.gettermsreturnraw": {
					"tokens": [
						"SolrQuery::getTermsReturnRaw",
						"getTermsReturnRaw",
						"::getTermsReturnRaw"
					],
					"id": "solrquery.gettermsreturnraw",
					"name": "SolrQuery::getTermsReturnRaw",
					"description": "Whether or not to return raw characters"
				},
				"solrquery.gettermssort": {
					"tokens": [
						"SolrQuery::getTermsSort",
						"getTermsSort",
						"::getTermsSort"
					],
					"id": "solrquery.gettermssort",
					"name": "SolrQuery::getTermsSort",
					"description": "Returns an integer indicating how terms are sorted"
				},
				"solrquery.gettermsupperbound": {
					"tokens": [
						"SolrQuery::getTermsUpperBound",
						"getTermsUpperBound",
						"::getTermsUpperBound"
					],
					"id": "solrquery.gettermsupperbound",
					"name": "SolrQuery::getTermsUpperBound",
					"description": "Returns the term to stop at"
				},
				"solrquery.gettimeallowed": {
					"tokens": [
						"SolrQuery::getTimeAllowed",
						"getTimeAllowed",
						"::getTimeAllowed"
					],
					"id": "solrquery.gettimeallowed",
					"name": "SolrQuery::getTimeAllowed",
					"description": "Returns the time in milliseconds allowed for the query to finish"
				},
				"solrquery.removeexpandfilterquery": {
					"tokens": [
						"SolrQuery::removeExpandFilterQuery",
						"removeExpandFilterQuery",
						"::removeExpandFilterQuery"
					],
					"id": "solrquery.removeexpandfilterquery",
					"name": "SolrQuery::removeExpandFilterQuery",
					"description": "Removes an expand filter query"
				},
				"solrquery.removeexpandsortfield": {
					"tokens": [
						"SolrQuery::removeExpandSortField",
						"removeExpandSortField",
						"::removeExpandSortField"
					],
					"id": "solrquery.removeexpandsortfield",
					"name": "SolrQuery::removeExpandSortField",
					"description": "Removes an expand sort field from the expand.sort parameter."
				},
				"solrquery.removefacetdatefield": {
					"tokens": [
						"SolrQuery::removeFacetDateField",
						"removeFacetDateField",
						"::removeFacetDateField"
					],
					"id": "solrquery.removefacetdatefield",
					"name": "SolrQuery::removeFacetDateField",
					"description": "Removes one of the facet date fields"
				},
				"solrquery.removefacetdateother": {
					"tokens": [
						"SolrQuery::removeFacetDateOther",
						"removeFacetDateOther",
						"::removeFacetDateOther"
					],
					"id": "solrquery.removefacetdateother",
					"name": "SolrQuery::removeFacetDateOther",
					"description": "Removes one of the facet.date.other parameters"
				},
				"solrquery.removefacetfield": {
					"tokens": [
						"SolrQuery::removeFacetField",
						"removeFacetField",
						"::removeFacetField"
					],
					"id": "solrquery.removefacetfield",
					"name": "SolrQuery::removeFacetField",
					"description": "Removes one of the facet.date parameters"
				},
				"solrquery.removefacetquery": {
					"tokens": [
						"SolrQuery::removeFacetQuery",
						"removeFacetQuery",
						"::removeFacetQuery"
					],
					"id": "solrquery.removefacetquery",
					"name": "SolrQuery::removeFacetQuery",
					"description": "Removes one of the facet.query parameters"
				},
				"solrquery.removefield": {
					"tokens": [
						"SolrQuery::removeField",
						"removeField",
						"::removeField"
					],
					"id": "solrquery.removefield",
					"name": "SolrQuery::removeField",
					"description": "Removes a field from the list of fields"
				},
				"solrquery.removefilterquery": {
					"tokens": [
						"SolrQuery::removeFilterQuery",
						"removeFilterQuery",
						"::removeFilterQuery"
					],
					"id": "solrquery.removefilterquery",
					"name": "SolrQuery::removeFilterQuery",
					"description": "Removes a filter query"
				},
				"solrquery.removehighlightfield": {
					"tokens": [
						"SolrQuery::removeHighlightField",
						"removeHighlightField",
						"::removeHighlightField"
					],
					"id": "solrquery.removehighlightfield",
					"name": "SolrQuery::removeHighlightField",
					"description": "Removes one of the fields used for highlighting"
				},
				"solrquery.removemltfield": {
					"tokens": [
						"SolrQuery::removeMltField",
						"removeMltField",
						"::removeMltField"
					],
					"id": "solrquery.removemltfield",
					"name": "SolrQuery::removeMltField",
					"description": "Removes one of the moreLikeThis fields"
				},
				"solrquery.removemltqueryfield": {
					"tokens": [
						"SolrQuery::removeMltQueryField",
						"removeMltQueryField",
						"::removeMltQueryField"
					],
					"id": "solrquery.removemltqueryfield",
					"name": "SolrQuery::removeMltQueryField",
					"description": "Removes one of the moreLikeThis query fields"
				},
				"solrquery.removesortfield": {
					"tokens": [
						"SolrQuery::removeSortField",
						"removeSortField",
						"::removeSortField"
					],
					"id": "solrquery.removesortfield",
					"name": "SolrQuery::removeSortField",
					"description": "Removes one of the sort fields"
				},
				"solrquery.removestatsfacet": {
					"tokens": [
						"SolrQuery::removeStatsFacet",
						"removeStatsFacet",
						"::removeStatsFacet"
					],
					"id": "solrquery.removestatsfacet",
					"name": "SolrQuery::removeStatsFacet",
					"description": "Removes one of the stats.facet parameters"
				},
				"solrquery.removestatsfield": {
					"tokens": [
						"SolrQuery::removeStatsField",
						"removeStatsField",
						"::removeStatsField"
					],
					"id": "solrquery.removestatsfield",
					"name": "SolrQuery::removeStatsField",
					"description": "Removes one of the stats.field parameters"
				},
				"solrquery.setechohandler": {
					"tokens": [
						"SolrQuery::setEchoHandler",
						"setEchoHandler",
						"::setEchoHandler"
					],
					"id": "solrquery.setechohandler",
					"name": "SolrQuery::setEchoHandler",
					"description": "Toggles the echoHandler parameter"
				},
				"solrquery.setechoparams": {
					"tokens": [
						"SolrQuery::setEchoParams",
						"setEchoParams",
						"::setEchoParams"
					],
					"id": "solrquery.setechoparams",
					"name": "SolrQuery::setEchoParams",
					"description": "Determines what kind of parameters to include in the response"
				},
				"solrquery.setexpand": {
					"tokens": [
						"SolrQuery::setExpand",
						"setExpand",
						"::setExpand"
					],
					"id": "solrquery.setexpand",
					"name": "SolrQuery::setExpand",
					"description": "Enables/Disables the Expand Component"
				},
				"solrquery.setexpandquery": {
					"tokens": [
						"SolrQuery::setExpandQuery",
						"setExpandQuery",
						"::setExpandQuery"
					],
					"id": "solrquery.setexpandquery",
					"name": "SolrQuery::setExpandQuery",
					"description": "Sets the expand.q parameter"
				},
				"solrquery.setexpandrows": {
					"tokens": [
						"SolrQuery::setExpandRows",
						"setExpandRows",
						"::setExpandRows"
					],
					"id": "solrquery.setexpandrows",
					"name": "SolrQuery::setExpandRows",
					"description": "Sets the number of rows to display in each group (expand.rows). Server Default 5"
				},
				"solrquery.setexplainother": {
					"tokens": [
						"SolrQuery::setExplainOther",
						"setExplainOther",
						"::setExplainOther"
					],
					"id": "solrquery.setexplainother",
					"name": "SolrQuery::setExplainOther",
					"description": "Sets the explainOther common query parameter"
				},
				"solrquery.setfacet": {
					"tokens": [
						"SolrQuery::setFacet",
						"setFacet",
						"::setFacet"
					],
					"id": "solrquery.setfacet",
					"name": "SolrQuery::setFacet",
					"description": "Maps to the facet parameter. Enables or disables facetting"
				},
				"solrquery.setfacetdateend": {
					"tokens": [
						"SolrQuery::setFacetDateEnd",
						"setFacetDateEnd",
						"::setFacetDateEnd"
					],
					"id": "solrquery.setfacetdateend",
					"name": "SolrQuery::setFacetDateEnd",
					"description": "Maps to facet.date.end"
				},
				"solrquery.setfacetdategap": {
					"tokens": [
						"SolrQuery::setFacetDateGap",
						"setFacetDateGap",
						"::setFacetDateGap"
					],
					"id": "solrquery.setfacetdategap",
					"name": "SolrQuery::setFacetDateGap",
					"description": "Maps to facet.date.gap"
				},
				"solrquery.setfacetdatehardend": {
					"tokens": [
						"SolrQuery::setFacetDateHardEnd",
						"setFacetDateHardEnd",
						"::setFacetDateHardEnd"
					],
					"id": "solrquery.setfacetdatehardend",
					"name": "SolrQuery::setFacetDateHardEnd",
					"description": "Maps to facet.date.hardend"
				},
				"solrquery.setfacetdatestart": {
					"tokens": [
						"SolrQuery::setFacetDateStart",
						"setFacetDateStart",
						"::setFacetDateStart"
					],
					"id": "solrquery.setfacetdatestart",
					"name": "SolrQuery::setFacetDateStart",
					"description": "Maps to facet.date.start"
				},
				"solrquery.setfacetenumcachemindefaultfrequency": {
					"tokens": [
						"SolrQuery::setFacetEnumCacheMinDefaultFrequency",
						"setFacetEnumCacheMinDefaultFrequency",
						"::setFacetEnumCacheMinDefaultFrequency"
					],
					"id": "solrquery.setfacetenumcachemindefaultfrequency",
					"name": "SolrQuery::setFacetEnumCacheMinDefaultFrequency",
					"description": "Sets the minimum document frequency used for determining term count"
				},
				"solrquery.setfacetlimit": {
					"tokens": [
						"SolrQuery::setFacetLimit",
						"setFacetLimit",
						"::setFacetLimit"
					],
					"id": "solrquery.setfacetlimit",
					"name": "SolrQuery::setFacetLimit",
					"description": "Maps to facet.limit"
				},
				"solrquery.setfacetmethod": {
					"tokens": [
						"SolrQuery::setFacetMethod",
						"setFacetMethod",
						"::setFacetMethod"
					],
					"id": "solrquery.setfacetmethod",
					"name": "SolrQuery::setFacetMethod",
					"description": "Specifies the type of algorithm to use when faceting a field"
				},
				"solrquery.setfacetmincount": {
					"tokens": [
						"SolrQuery::setFacetMinCount",
						"setFacetMinCount",
						"::setFacetMinCount"
					],
					"id": "solrquery.setfacetmincount",
					"name": "SolrQuery::setFacetMinCount",
					"description": "Maps to facet.mincount"
				},
				"solrquery.setfacetmissing": {
					"tokens": [
						"SolrQuery::setFacetMissing",
						"setFacetMissing",
						"::setFacetMissing"
					],
					"id": "solrquery.setfacetmissing",
					"name": "SolrQuery::setFacetMissing",
					"description": "Maps to facet.missing"
				},
				"solrquery.setfacetoffset": {
					"tokens": [
						"SolrQuery::setFacetOffset",
						"setFacetOffset",
						"::setFacetOffset"
					],
					"id": "solrquery.setfacetoffset",
					"name": "SolrQuery::setFacetOffset",
					"description": "Sets the offset into the list of constraints to allow for pagination"
				},
				"solrquery.setfacetprefix": {
					"tokens": [
						"SolrQuery::setFacetPrefix",
						"setFacetPrefix",
						"::setFacetPrefix"
					],
					"id": "solrquery.setfacetprefix",
					"name": "SolrQuery::setFacetPrefix",
					"description": "Specifies a string prefix with which to limits the terms on which to facet"
				},
				"solrquery.setfacetsort": {
					"tokens": [
						"SolrQuery::setFacetSort",
						"setFacetSort",
						"::setFacetSort"
					],
					"id": "solrquery.setfacetsort",
					"name": "SolrQuery::setFacetSort",
					"description": "Determines the ordering of the facet field constraints"
				},
				"solrquery.setgroup": {
					"tokens": [
						"SolrQuery::setGroup",
						"setGroup",
						"::setGroup"
					],
					"id": "solrquery.setgroup",
					"name": "SolrQuery::setGroup",
					"description": "Enable/Disable result grouping (group parameter)"
				},
				"solrquery.setgroupcachepercent": {
					"tokens": [
						"SolrQuery::setGroupCachePercent",
						"setGroupCachePercent",
						"::setGroupCachePercent"
					],
					"id": "solrquery.setgroupcachepercent",
					"name": "SolrQuery::setGroupCachePercent",
					"description": "Enables caching for result grouping"
				},
				"solrquery.setgroupfacet": {
					"tokens": [
						"SolrQuery::setGroupFacet",
						"setGroupFacet",
						"::setGroupFacet"
					],
					"id": "solrquery.setgroupfacet",
					"name": "SolrQuery::setGroupFacet",
					"description": "Sets group.facet parameter"
				},
				"solrquery.setgroupformat": {
					"tokens": [
						"SolrQuery::setGroupFormat",
						"setGroupFormat",
						"::setGroupFormat"
					],
					"id": "solrquery.setgroupformat",
					"name": "SolrQuery::setGroupFormat",
					"description": "Sets the group format, result structure (group.format parameter)."
				},
				"solrquery.setgrouplimit": {
					"tokens": [
						"SolrQuery::setGroupLimit",
						"setGroupLimit",
						"::setGroupLimit"
					],
					"id": "solrquery.setgrouplimit",
					"name": "SolrQuery::setGroupLimit",
					"description": "Specifies the number of results to return for each group. The server default value is 1."
				},
				"solrquery.setgroupmain": {
					"tokens": [
						"SolrQuery::setGroupMain",
						"setGroupMain",
						"::setGroupMain"
					],
					"id": "solrquery.setgroupmain",
					"name": "SolrQuery::setGroupMain",
					"description": "If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple."
				},
				"solrquery.setgroupngroups": {
					"tokens": [
						"SolrQuery::setGroupNGroups",
						"setGroupNGroups",
						"::setGroupNGroups"
					],
					"id": "solrquery.setgroupngroups",
					"name": "SolrQuery::setGroupNGroups",
					"description": "If true, Solr includes the number of groups that have matched the query in the results."
				},
				"solrquery.setgroupoffset": {
					"tokens": [
						"SolrQuery::setGroupOffset",
						"setGroupOffset",
						"::setGroupOffset"
					],
					"id": "solrquery.setgroupoffset",
					"name": "SolrQuery::setGroupOffset",
					"description": "Sets the group.offset parameter."
				},
				"solrquery.setgrouptruncate": {
					"tokens": [
						"SolrQuery::setGroupTruncate",
						"setGroupTruncate",
						"::setGroupTruncate"
					],
					"id": "solrquery.setgrouptruncate",
					"name": "SolrQuery::setGroupTruncate",
					"description": "If true, facet counts are based on the most relevant document of each group matching the query."
				},
				"solrquery.sethighlight": {
					"tokens": [
						"SolrQuery::setHighlight",
						"setHighlight",
						"::setHighlight"
					],
					"id": "solrquery.sethighlight",
					"name": "SolrQuery::setHighlight",
					"description": "Enables or disables highlighting"
				},
				"solrquery.sethighlightalternatefield": {
					"tokens": [
						"SolrQuery::setHighlightAlternateField",
						"setHighlightAlternateField",
						"::setHighlightAlternateField"
					],
					"id": "solrquery.sethighlightalternatefield",
					"name": "SolrQuery::setHighlightAlternateField",
					"description": "Specifies the backup field to use"
				},
				"solrquery.sethighlightformatter": {
					"tokens": [
						"SolrQuery::setHighlightFormatter",
						"setHighlightFormatter",
						"::setHighlightFormatter"
					],
					"id": "solrquery.sethighlightformatter",
					"name": "SolrQuery::setHighlightFormatter",
					"description": "Specify a formatter for the highlight output"
				},
				"solrquery.sethighlightfragmenter": {
					"tokens": [
						"SolrQuery::setHighlightFragmenter",
						"setHighlightFragmenter",
						"::setHighlightFragmenter"
					],
					"id": "solrquery.sethighlightfragmenter",
					"name": "SolrQuery::setHighlightFragmenter",
					"description": "Sets a text snippet generator for highlighted text"
				},
				"solrquery.sethighlightfragsize": {
					"tokens": [
						"SolrQuery::setHighlightFragsize",
						"setHighlightFragsize",
						"::setHighlightFragsize"
					],
					"id": "solrquery.sethighlightfragsize",
					"name": "SolrQuery::setHighlightFragsize",
					"description": "The size of fragments to consider for highlighting"
				},
				"solrquery.sethighlighthighlightmultiterm": {
					"tokens": [
						"SolrQuery::setHighlightHighlightMultiTerm",
						"setHighlightHighlightMultiTerm",
						"::setHighlightHighlightMultiTerm"
					],
					"id": "solrquery.sethighlighthighlightmultiterm",
					"name": "SolrQuery::setHighlightHighlightMultiTerm",
					"description": "Use SpanScorer to highlight phrase terms"
				},
				"solrquery.sethighlightmaxalternatefieldlength": {
					"tokens": [
						"SolrQuery::setHighlightMaxAlternateFieldLength",
						"setHighlightMaxAlternateFieldLength",
						"::setHighlightMaxAlternateFieldLength"
					],
					"id": "solrquery.sethighlightmaxalternatefieldlength",
					"name": "SolrQuery::setHighlightMaxAlternateFieldLength",
					"description": "Sets the maximum number of characters of the field to return"
				},
				"solrquery.sethighlightmaxanalyzedchars": {
					"tokens": [
						"SolrQuery::setHighlightMaxAnalyzedChars",
						"setHighlightMaxAnalyzedChars",
						"::setHighlightMaxAnalyzedChars"
					],
					"id": "solrquery.sethighlightmaxanalyzedchars",
					"name": "SolrQuery::setHighlightMaxAnalyzedChars",
					"description": "Specifies the number of characters into a document to look for suitable snippets"
				},
				"solrquery.sethighlightmergecontiguous": {
					"tokens": [
						"SolrQuery::setHighlightMergeContiguous",
						"setHighlightMergeContiguous",
						"::setHighlightMergeContiguous"
					],
					"id": "solrquery.sethighlightmergecontiguous",
					"name": "SolrQuery::setHighlightMergeContiguous",
					"description": "Whether or not to collapse contiguous fragments into a single fragment"
				},
				"solrquery.sethighlightregexmaxanalyzedchars": {
					"tokens": [
						"SolrQuery::setHighlightRegexMaxAnalyzedChars",
						"setHighlightRegexMaxAnalyzedChars",
						"::setHighlightRegexMaxAnalyzedChars"
					],
					"id": "solrquery.sethighlightregexmaxanalyzedchars",
					"name": "SolrQuery::setHighlightRegexMaxAnalyzedChars",
					"description": "Specify the maximum number of characters to analyze"
				},
				"solrquery.sethighlightregexpattern": {
					"tokens": [
						"SolrQuery::setHighlightRegexPattern",
						"setHighlightRegexPattern",
						"::setHighlightRegexPattern"
					],
					"id": "solrquery.sethighlightregexpattern",
					"name": "SolrQuery::setHighlightRegexPattern",
					"description": "Specify the regular expression for fragmenting"
				},
				"solrquery.sethighlightregexslop": {
					"tokens": [
						"SolrQuery::setHighlightRegexSlop",
						"setHighlightRegexSlop",
						"::setHighlightRegexSlop"
					],
					"id": "solrquery.sethighlightregexslop",
					"name": "SolrQuery::setHighlightRegexSlop",
					"description": "Sets the factor by which the regex fragmenter can stray from the ideal fragment size"
				},
				"solrquery.sethighlightrequirefieldmatch": {
					"tokens": [
						"SolrQuery::setHighlightRequireFieldMatch",
						"setHighlightRequireFieldMatch",
						"::setHighlightRequireFieldMatch"
					],
					"id": "solrquery.sethighlightrequirefieldmatch",
					"name": "SolrQuery::setHighlightRequireFieldMatch",
					"description": "Require field matching during highlighting"
				},
				"solrquery.sethighlightsimplepost": {
					"tokens": [
						"SolrQuery::setHighlightSimplePost",
						"setHighlightSimplePost",
						"::setHighlightSimplePost"
					],
					"id": "solrquery.sethighlightsimplepost",
					"name": "SolrQuery::setHighlightSimplePost",
					"description": "Sets the text which appears after a highlighted term"
				},
				"solrquery.sethighlightsimplepre": {
					"tokens": [
						"SolrQuery::setHighlightSimplePre",
						"setHighlightSimplePre",
						"::setHighlightSimplePre"
					],
					"id": "solrquery.sethighlightsimplepre",
					"name": "SolrQuery::setHighlightSimplePre",
					"description": "Sets the text which appears before a highlighted term"
				},
				"solrquery.sethighlightsnippets": {
					"tokens": [
						"SolrQuery::setHighlightSnippets",
						"setHighlightSnippets",
						"::setHighlightSnippets"
					],
					"id": "solrquery.sethighlightsnippets",
					"name": "SolrQuery::setHighlightSnippets",
					"description": "Sets the maximum number of highlighted snippets to generate per field"
				},
				"solrquery.sethighlightusephrasehighlighter": {
					"tokens": [
						"SolrQuery::setHighlightUsePhraseHighlighter",
						"setHighlightUsePhraseHighlighter",
						"::setHighlightUsePhraseHighlighter"
					],
					"id": "solrquery.sethighlightusephrasehighlighter",
					"name": "SolrQuery::setHighlightUsePhraseHighlighter",
					"description": "Whether to highlight phrase terms only when they appear within the query phrase"
				},
				"solrquery.setmlt": {
					"tokens": [
						"SolrQuery::setMlt",
						"setMlt",
						"::setMlt"
					],
					"id": "solrquery.setmlt",
					"name": "SolrQuery::setMlt",
					"description": "Enables or disables moreLikeThis"
				},
				"solrquery.setmltboost": {
					"tokens": [
						"SolrQuery::setMltBoost",
						"setMltBoost",
						"::setMltBoost"
					],
					"id": "solrquery.setmltboost",
					"name": "SolrQuery::setMltBoost",
					"description": "Set if the query will be boosted by the interesting term relevance"
				},
				"solrquery.setmltcount": {
					"tokens": [
						"SolrQuery::setMltCount",
						"setMltCount",
						"::setMltCount"
					],
					"id": "solrquery.setmltcount",
					"name": "SolrQuery::setMltCount",
					"description": "Set the number of similar documents to return for each result"
				},
				"solrquery.setmltmaxnumqueryterms": {
					"tokens": [
						"SolrQuery::setMltMaxNumQueryTerms",
						"setMltMaxNumQueryTerms",
						"::setMltMaxNumQueryTerms"
					],
					"id": "solrquery.setmltmaxnumqueryterms",
					"name": "SolrQuery::setMltMaxNumQueryTerms",
					"description": "Sets the maximum number of query terms included"
				},
				"solrquery.setmltmaxnumtokens": {
					"tokens": [
						"SolrQuery::setMltMaxNumTokens",
						"setMltMaxNumTokens",
						"::setMltMaxNumTokens"
					],
					"id": "solrquery.setmltmaxnumtokens",
					"name": "SolrQuery::setMltMaxNumTokens",
					"description": "Specifies the maximum number of tokens to parse"
				},
				"solrquery.setmltmaxwordlength": {
					"tokens": [
						"SolrQuery::setMltMaxWordLength",
						"setMltMaxWordLength",
						"::setMltMaxWordLength"
					],
					"id": "solrquery.setmltmaxwordlength",
					"name": "SolrQuery::setMltMaxWordLength",
					"description": "Sets the maximum word length"
				},
				"solrquery.setmltmindocfrequency": {
					"tokens": [
						"SolrQuery::setMltMinDocFrequency",
						"setMltMinDocFrequency",
						"::setMltMinDocFrequency"
					],
					"id": "solrquery.setmltmindocfrequency",
					"name": "SolrQuery::setMltMinDocFrequency",
					"description": "Sets the mltMinDoc frequency"
				},
				"solrquery.setmltmintermfrequency": {
					"tokens": [
						"SolrQuery::setMltMinTermFrequency",
						"setMltMinTermFrequency",
						"::setMltMinTermFrequency"
					],
					"id": "solrquery.setmltmintermfrequency",
					"name": "SolrQuery::setMltMinTermFrequency",
					"description": "Sets the frequency below which terms will be ignored in the source docs"
				},
				"solrquery.setmltminwordlength": {
					"tokens": [
						"SolrQuery::setMltMinWordLength",
						"setMltMinWordLength",
						"::setMltMinWordLength"
					],
					"id": "solrquery.setmltminwordlength",
					"name": "SolrQuery::setMltMinWordLength",
					"description": "Sets the minimum word length"
				},
				"solrquery.setomitheader": {
					"tokens": [
						"SolrQuery::setOmitHeader",
						"setOmitHeader",
						"::setOmitHeader"
					],
					"id": "solrquery.setomitheader",
					"name": "SolrQuery::setOmitHeader",
					"description": "Exclude the header from the returned results"
				},
				"solrquery.setquery": {
					"tokens": [
						"SolrQuery::setQuery",
						"setQuery",
						"::setQuery"
					],
					"id": "solrquery.setquery",
					"name": "SolrQuery::setQuery",
					"description": "Sets the search query"
				},
				"solrquery.setrows": {
					"tokens": [
						"SolrQuery::setRows",
						"setRows",
						"::setRows"
					],
					"id": "solrquery.setrows",
					"name": "SolrQuery::setRows",
					"description": "Specifies the maximum number of rows to return in the result"
				},
				"solrquery.setshowdebuginfo": {
					"tokens": [
						"SolrQuery::setShowDebugInfo",
						"setShowDebugInfo",
						"::setShowDebugInfo"
					],
					"id": "solrquery.setshowdebuginfo",
					"name": "SolrQuery::setShowDebugInfo",
					"description": "Flag to show debug information"
				},
				"solrquery.setstart": {
					"tokens": [
						"SolrQuery::setStart",
						"setStart",
						"::setStart"
					],
					"id": "solrquery.setstart",
					"name": "SolrQuery::setStart",
					"description": "Specifies the number of rows to skip"
				},
				"solrquery.setstats": {
					"tokens": [
						"SolrQuery::setStats",
						"setStats",
						"::setStats"
					],
					"id": "solrquery.setstats",
					"name": "SolrQuery::setStats",
					"description": "Enables or disables the Stats component"
				},
				"solrquery.setterms": {
					"tokens": [
						"SolrQuery::setTerms",
						"setTerms",
						"::setTerms"
					],
					"id": "solrquery.setterms",
					"name": "SolrQuery::setTerms",
					"description": "Enables or disables the TermsComponent"
				},
				"solrquery.settermsfield": {
					"tokens": [
						"SolrQuery::setTermsField",
						"setTermsField",
						"::setTermsField"
					],
					"id": "solrquery.settermsfield",
					"name": "SolrQuery::setTermsField",
					"description": "Sets the name of the field to get the Terms from"
				},
				"solrquery.settermsincludelowerbound": {
					"tokens": [
						"SolrQuery::setTermsIncludeLowerBound",
						"setTermsIncludeLowerBound",
						"::setTermsIncludeLowerBound"
					],
					"id": "solrquery.settermsincludelowerbound",
					"name": "SolrQuery::setTermsIncludeLowerBound",
					"description": "Include the lower bound term in the result set"
				},
				"solrquery.settermsincludeupperbound": {
					"tokens": [
						"SolrQuery::setTermsIncludeUpperBound",
						"setTermsIncludeUpperBound",
						"::setTermsIncludeUpperBound"
					],
					"id": "solrquery.settermsincludeupperbound",
					"name": "SolrQuery::setTermsIncludeUpperBound",
					"description": "Include the upper bound term in the result set"
				},
				"solrquery.settermslimit": {
					"tokens": [
						"SolrQuery::setTermsLimit",
						"setTermsLimit",
						"::setTermsLimit"
					],
					"id": "solrquery.settermslimit",
					"name": "SolrQuery::setTermsLimit",
					"description": "Sets the maximum number of terms to return"
				},
				"solrquery.settermslowerbound": {
					"tokens": [
						"SolrQuery::setTermsLowerBound",
						"setTermsLowerBound",
						"::setTermsLowerBound"
					],
					"id": "solrquery.settermslowerbound",
					"name": "SolrQuery::setTermsLowerBound",
					"description": "Specifies the Term to start from"
				},
				"solrquery.settermsmaxcount": {
					"tokens": [
						"SolrQuery::setTermsMaxCount",
						"setTermsMaxCount",
						"::setTermsMaxCount"
					],
					"id": "solrquery.settermsmaxcount",
					"name": "SolrQuery::setTermsMaxCount",
					"description": "Sets the maximum document frequency"
				},
				"solrquery.settermsmincount": {
					"tokens": [
						"SolrQuery::setTermsMinCount",
						"setTermsMinCount",
						"::setTermsMinCount"
					],
					"id": "solrquery.settermsmincount",
					"name": "SolrQuery::setTermsMinCount",
					"description": "Sets the minimum document frequency"
				},
				"solrquery.settermsprefix": {
					"tokens": [
						"SolrQuery::setTermsPrefix",
						"setTermsPrefix",
						"::setTermsPrefix"
					],
					"id": "solrquery.settermsprefix",
					"name": "SolrQuery::setTermsPrefix",
					"description": "Restrict matches to terms that start with the prefix"
				},
				"solrquery.settermsreturnraw": {
					"tokens": [
						"SolrQuery::setTermsReturnRaw",
						"setTermsReturnRaw",
						"::setTermsReturnRaw"
					],
					"id": "solrquery.settermsreturnraw",
					"name": "SolrQuery::setTermsReturnRaw",
					"description": "Return the raw characters of the indexed term"
				},
				"solrquery.settermssort": {
					"tokens": [
						"SolrQuery::setTermsSort",
						"setTermsSort",
						"::setTermsSort"
					],
					"id": "solrquery.settermssort",
					"name": "SolrQuery::setTermsSort",
					"description": "Specifies how to sort the returned terms"
				},
				"solrquery.settermsupperbound": {
					"tokens": [
						"SolrQuery::setTermsUpperBound",
						"setTermsUpperBound",
						"::setTermsUpperBound"
					],
					"id": "solrquery.settermsupperbound",
					"name": "SolrQuery::setTermsUpperBound",
					"description": "Sets the term to stop at"
				},
				"solrquery.settimeallowed": {
					"tokens": [
						"SolrQuery::setTimeAllowed",
						"setTimeAllowed",
						"::setTimeAllowed"
					],
					"id": "solrquery.settimeallowed",
					"name": "SolrQuery::setTimeAllowed",
					"description": "The time allowed for search to finish"
				},
				"solrdismaxquery.addbigramphrasefield": {
					"tokens": [
						"SolrDisMaxQuery::addBigramPhraseField",
						"addBigramPhraseField",
						"::addBigramPhraseField"
					],
					"id": "solrdismaxquery.addbigramphrasefield",
					"name": "SolrDisMaxQuery::addBigramPhraseField",
					"description": "Adds a Phrase Bigram Field (pf2 parameter)"
				},
				"solrdismaxquery.addboostquery": {
					"tokens": [
						"SolrDisMaxQuery::addBoostQuery",
						"addBoostQuery",
						"::addBoostQuery"
					],
					"id": "solrdismaxquery.addboostquery",
					"name": "SolrDisMaxQuery::addBoostQuery",
					"description": "Adds a boost query field with value and optional boost (bq parameter)"
				},
				"solrdismaxquery.addphrasefield": {
					"tokens": [
						"SolrDisMaxQuery::addPhraseField",
						"addPhraseField",
						"::addPhraseField"
					],
					"id": "solrdismaxquery.addphrasefield",
					"name": "SolrDisMaxQuery::addPhraseField",
					"description": "Adds a Phrase Field (pf parameter)"
				},
				"solrdismaxquery.addqueryfield": {
					"tokens": [
						"SolrDisMaxQuery::addQueryField",
						"addQueryField",
						"::addQueryField"
					],
					"id": "solrdismaxquery.addqueryfield",
					"name": "SolrDisMaxQuery::addQueryField",
					"description": "Add a query field with optional boost (qf parameter)"
				},
				"solrdismaxquery.addtrigramphrasefield": {
					"tokens": [
						"SolrDisMaxQuery::addTrigramPhraseField",
						"addTrigramPhraseField",
						"::addTrigramPhraseField"
					],
					"id": "solrdismaxquery.addtrigramphrasefield",
					"name": "SolrDisMaxQuery::addTrigramPhraseField",
					"description": "Adds a Trigram Phrase Field (pf3 parameter)"
				},
				"solrdismaxquery.adduserfield": {
					"tokens": [
						"SolrDisMaxQuery::addUserField",
						"addUserField",
						"::addUserField"
					],
					"id": "solrdismaxquery.adduserfield",
					"name": "SolrDisMaxQuery::addUserField",
					"description": "Adds a field to User Fields Parameter (uf)"
				},
				"solrdismaxquery.construct": {
					"tokens": [
						"SolrDisMaxQuery::__construct",
						"SolrDisMaxQuery::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrdismaxquery.construct",
					"name": "SolrDisMaxQuery::__construct",
					"description": "Class Constructor"
				},
				"solrdismaxquery.removebigramphrasefield": {
					"tokens": [
						"SolrDisMaxQuery::removeBigramPhraseField",
						"removeBigramPhraseField",
						"::removeBigramPhraseField"
					],
					"id": "solrdismaxquery.removebigramphrasefield",
					"name": "SolrDisMaxQuery::removeBigramPhraseField",
					"description": "Removes phrase bigram field (pf2 parameter)"
				},
				"solrdismaxquery.removeboostquery": {
					"tokens": [
						"SolrDisMaxQuery::removeBoostQuery",
						"removeBoostQuery",
						"::removeBoostQuery"
					],
					"id": "solrdismaxquery.removeboostquery",
					"name": "SolrDisMaxQuery::removeBoostQuery",
					"description": "Removes a boost query partial by field name (bq)"
				},
				"solrdismaxquery.removephrasefield": {
					"tokens": [
						"SolrDisMaxQuery::removePhraseField",
						"removePhraseField",
						"::removePhraseField"
					],
					"id": "solrdismaxquery.removephrasefield",
					"name": "SolrDisMaxQuery::removePhraseField",
					"description": "Removes a Phrase Field (pf parameter)"
				},
				"solrdismaxquery.removequeryfield": {
					"tokens": [
						"SolrDisMaxQuery::removeQueryField",
						"removeQueryField",
						"::removeQueryField"
					],
					"id": "solrdismaxquery.removequeryfield",
					"name": "SolrDisMaxQuery::removeQueryField",
					"description": "Removes a Query Field (qf parameter)"
				},
				"solrdismaxquery.removetrigramphrasefield": {
					"tokens": [
						"SolrDisMaxQuery::removeTrigramPhraseField",
						"removeTrigramPhraseField",
						"::removeTrigramPhraseField"
					],
					"id": "solrdismaxquery.removetrigramphrasefield",
					"name": "SolrDisMaxQuery::removeTrigramPhraseField",
					"description": "Removes a Trigram Phrase Field (pf3 parameter)"
				},
				"solrdismaxquery.removeuserfield": {
					"tokens": [
						"SolrDisMaxQuery::removeUserField",
						"removeUserField",
						"::removeUserField"
					],
					"id": "solrdismaxquery.removeuserfield",
					"name": "SolrDisMaxQuery::removeUserField",
					"description": "Removes a field from The User Fields Parameter (uf)"
				},
				"solrdismaxquery.setbigramphrasefields": {
					"tokens": [
						"SolrDisMaxQuery::setBigramPhraseFields",
						"setBigramPhraseFields",
						"::setBigramPhraseFields"
					],
					"id": "solrdismaxquery.setbigramphrasefields",
					"name": "SolrDisMaxQuery::setBigramPhraseFields",
					"description": "Sets Bigram Phrase Fields and their boosts (and slops) using pf2 parameter"
				},
				"solrdismaxquery.setbigramphraseslop": {
					"tokens": [
						"SolrDisMaxQuery::setBigramPhraseSlop",
						"setBigramPhraseSlop",
						"::setBigramPhraseSlop"
					],
					"id": "solrdismaxquery.setbigramphraseslop",
					"name": "SolrDisMaxQuery::setBigramPhraseSlop",
					"description": "Sets Bigram Phrase Slop (ps2 parameter)"
				},
				"solrdismaxquery.setboostfunction": {
					"tokens": [
						"SolrDisMaxQuery::setBoostFunction",
						"setBoostFunction",
						"::setBoostFunction"
					],
					"id": "solrdismaxquery.setboostfunction",
					"name": "SolrDisMaxQuery::setBoostFunction",
					"description": "Sets a Boost Function (bf parameter)."
				},
				"solrdismaxquery.setboostquery": {
					"tokens": [
						"SolrDisMaxQuery::setBoostQuery",
						"setBoostQuery",
						"::setBoostQuery"
					],
					"id": "solrdismaxquery.setboostquery",
					"name": "SolrDisMaxQuery::setBoostQuery",
					"description": "Directly Sets Boost Query Parameter (bq)"
				},
				"solrdismaxquery.setminimummatch": {
					"tokens": [
						"SolrDisMaxQuery::setMinimumMatch",
						"setMinimumMatch",
						"::setMinimumMatch"
					],
					"id": "solrdismaxquery.setminimummatch",
					"name": "SolrDisMaxQuery::setMinimumMatch",
					"description": "Set Minimum &quot;Should&quot; Match (mm)"
				},
				"solrdismaxquery.setphrasefields": {
					"tokens": [
						"SolrDisMaxQuery::setPhraseFields",
						"setPhraseFields",
						"::setPhraseFields"
					],
					"id": "solrdismaxquery.setphrasefields",
					"name": "SolrDisMaxQuery::setPhraseFields",
					"description": "Sets  Phrase Fields and their boosts (and slops) using pf2 parameter"
				},
				"solrdismaxquery.setphraseslop": {
					"tokens": [
						"SolrDisMaxQuery::setPhraseSlop",
						"setPhraseSlop",
						"::setPhraseSlop"
					],
					"id": "solrdismaxquery.setphraseslop",
					"name": "SolrDisMaxQuery::setPhraseSlop",
					"description": "Sets the default slop on phrase queries (ps parameter)"
				},
				"solrdismaxquery.setqueryalt": {
					"tokens": [
						"SolrDisMaxQuery::setQueryAlt",
						"setQueryAlt",
						"::setQueryAlt"
					],
					"id": "solrdismaxquery.setqueryalt",
					"name": "SolrDisMaxQuery::setQueryAlt",
					"description": "Set Query Alternate (q.alt parameter)"
				},
				"solrdismaxquery.setqueryphraseslop": {
					"tokens": [
						"SolrDisMaxQuery::setQueryPhraseSlop",
						"setQueryPhraseSlop",
						"::setQueryPhraseSlop"
					],
					"id": "solrdismaxquery.setqueryphraseslop",
					"name": "SolrDisMaxQuery::setQueryPhraseSlop",
					"description": "specifies the amount of slop permitted on phrase queries explicitly included in the user's query string (qf parameter)"
				},
				"solrdismaxquery.settiebreaker": {
					"tokens": [
						"SolrDisMaxQuery::setTieBreaker",
						"setTieBreaker",
						"::setTieBreaker"
					],
					"id": "solrdismaxquery.settiebreaker",
					"name": "SolrDisMaxQuery::setTieBreaker",
					"description": "Sets Tie Breaker parameter (tie parameter)"
				},
				"solrdismaxquery.settrigramphrasefields": {
					"tokens": [
						"SolrDisMaxQuery::setTrigramPhraseFields",
						"setTrigramPhraseFields",
						"::setTrigramPhraseFields"
					],
					"id": "solrdismaxquery.settrigramphrasefields",
					"name": "SolrDisMaxQuery::setTrigramPhraseFields",
					"description": "Directly Sets Trigram Phrase Fields (pf3 parameter)"
				},
				"solrdismaxquery.settrigramphraseslop": {
					"tokens": [
						"SolrDisMaxQuery::setTrigramPhraseSlop",
						"setTrigramPhraseSlop",
						"::setTrigramPhraseSlop"
					],
					"id": "solrdismaxquery.settrigramphraseslop",
					"name": "SolrDisMaxQuery::setTrigramPhraseSlop",
					"description": "Sets Trigram Phrase Slop (ps3 parameter)"
				},
				"solrdismaxquery.setuserfields": {
					"tokens": [
						"SolrDisMaxQuery::setUserFields",
						"setUserFields",
						"::setUserFields"
					],
					"id": "solrdismaxquery.setuserfields",
					"name": "SolrDisMaxQuery::setUserFields",
					"description": "Sets User Fields parameter (uf)"
				},
				"solrdismaxquery.usedismaxqueryparser": {
					"tokens": [
						"SolrDisMaxQuery::useDisMaxQueryParser",
						"useDisMaxQueryParser",
						"::useDisMaxQueryParser"
					],
					"id": "solrdismaxquery.usedismaxqueryparser",
					"name": "SolrDisMaxQuery::useDisMaxQueryParser",
					"description": "Switch QueryParser to be DisMax Query Parser"
				},
				"solrdismaxquery.useedismaxqueryparser": {
					"tokens": [
						"SolrDisMaxQuery::useEDisMaxQueryParser",
						"useEDisMaxQueryParser",
						"::useEDisMaxQueryParser"
					],
					"id": "solrdismaxquery.useedismaxqueryparser",
					"name": "SolrDisMaxQuery::useEDisMaxQueryParser",
					"description": "Switch QueryParser to be EDisMax"
				},
				"solrcollapsefunction.construct": {
					"tokens": [
						"SolrCollapseFunction::__construct",
						"SolrCollapseFunction::_construct",
						"__construct",
						"::__construct"
					],
					"id": "solrcollapsefunction.construct",
					"name": "SolrCollapseFunction::__construct",
					"description": "Constructor"
				},
				"solrcollapsefunction.getfield": {
					"tokens": [
						"SolrCollapseFunction::getField",
						"getField",
						"::getField"
					],
					"id": "solrcollapsefunction.getfield",
					"name": "SolrCollapseFunction::getField",
					"description": "Returns the field that is being collapsed on."
				},
				"solrcollapsefunction.gethint": {
					"tokens": [
						"SolrCollapseFunction::getHint",
						"getHint",
						"::getHint"
					],
					"id": "solrcollapsefunction.gethint",
					"name": "SolrCollapseFunction::getHint",
					"description": "Returns collapse hint"
				},
				"solrcollapsefunction.getmax": {
					"tokens": [
						"SolrCollapseFunction::getMax",
						"getMax",
						"::getMax"
					],
					"id": "solrcollapsefunction.getmax",
					"name": "SolrCollapseFunction::getMax",
					"description": "Returns max parameter"
				},
				"solrcollapsefunction.getmin": {
					"tokens": [
						"SolrCollapseFunction::getMin",
						"getMin",
						"::getMin"
					],
					"id": "solrcollapsefunction.getmin",
					"name": "SolrCollapseFunction::getMin",
					"description": "Returns min parameter"
				},
				"solrcollapsefunction.getnullpolicy": {
					"tokens": [
						"SolrCollapseFunction::getNullPolicy",
						"getNullPolicy",
						"::getNullPolicy"
					],
					"id": "solrcollapsefunction.getnullpolicy",
					"name": "SolrCollapseFunction::getNullPolicy",
					"description": "Returns null policy"
				},
				"solrcollapsefunction.getsize": {
					"tokens": [
						"SolrCollapseFunction::getSize",
						"getSize",
						"::getSize"
					],
					"id": "solrcollapsefunction.getsize",
					"name": "SolrCollapseFunction::getSize",
					"description": "Returns size parameter"
				},
				"solrcollapsefunction.setfield": {
					"tokens": [
						"SolrCollapseFunction::setField",
						"setField",
						"::setField"
					],
					"id": "solrcollapsefunction.setfield",
					"name": "SolrCollapseFunction::setField",
					"description": "Sets the field to collapse on"
				},
				"solrcollapsefunction.sethint": {
					"tokens": [
						"SolrCollapseFunction::setHint",
						"setHint",
						"::setHint"
					],
					"id": "solrcollapsefunction.sethint",
					"name": "SolrCollapseFunction::setHint",
					"description": "Sets collapse hint"
				},
				"solrcollapsefunction.setmax": {
					"tokens": [
						"SolrCollapseFunction::setMax",
						"setMax",
						"::setMax"
					],
					"id": "solrcollapsefunction.setmax",
					"name": "SolrCollapseFunction::setMax",
					"description": "Selects the group heads by the max value of a numeric field or function query."
				},
				"solrcollapsefunction.setmin": {
					"tokens": [
						"SolrCollapseFunction::setMin",
						"setMin",
						"::setMin"
					],
					"id": "solrcollapsefunction.setmin",
					"name": "SolrCollapseFunction::setMin",
					"description": "Sets the initial size of the collapse data structures when collapsing on a numeric field only"
				},
				"solrcollapsefunction.setnullpolicy": {
					"tokens": [
						"SolrCollapseFunction::setNullPolicy",
						"setNullPolicy",
						"::setNullPolicy"
					],
					"id": "solrcollapsefunction.setnullpolicy",
					"name": "SolrCollapseFunction::setNullPolicy",
					"description": "Sets the NULL Policy"
				},
				"solrcollapsefunction.setsize": {
					"tokens": [
						"SolrCollapseFunction::setSize",
						"setSize",
						"::setSize"
					],
					"id": "solrcollapsefunction.setsize",
					"name": "SolrCollapseFunction::setSize",
					"description": "Sets the initial size of the collapse data structures when collapsing on a numeric field only."
				},
				"solrcollapsefunction.tostring": {
					"tokens": [
						"SolrCollapseFunction::__toString",
						"SolrCollapseFunction::_toString",
						"__toString",
						"::__toString"
					],
					"id": "solrcollapsefunction.tostring",
					"name": "SolrCollapseFunction::__toString",
					"description": "Returns a string representing the constructed collapse function"
				},
				"solrexception.getinternalinfo": {
					"tokens": [
						"SolrException::getInternalInfo",
						"getInternalInfo",
						"::getInternalInfo"
					],
					"id": "solrexception.getinternalinfo",
					"name": "SolrException::getInternalInfo",
					"description": "Returns internal information where the Exception was thrown"
				},
				"solrclientexception.getinternalinfo": {
					"tokens": [
						"SolrClientException::getInternalInfo",
						"getInternalInfo",
						"::getInternalInfo"
					],
					"id": "solrclientexception.getinternalinfo",
					"name": "SolrClientException::getInternalInfo",
					"description": "Returns internal information where the Exception was thrown"
				},
				"solrserverexception.getinternalinfo": {
					"tokens": [
						"SolrServerException::getInternalInfo",
						"getInternalInfo",
						"::getInternalInfo"
					],
					"id": "solrserverexception.getinternalinfo",
					"name": "SolrServerException::getInternalInfo",
					"description": "Returns internal information where the Exception was thrown"
				},
				"solrillegalargumentexception.getinternalinfo": {
					"tokens": [
						"SolrIllegalArgumentException::getInternalInfo",
						"getInternalInfo",
						"::getInternalInfo"
					],
					"id": "solrillegalargumentexception.getinternalinfo",
					"name": "SolrIllegalArgumentException::getInternalInfo",
					"description": "Returns internal information where the Exception was thrown"
				},
				"solrillegaloperationexception.getinternalinfo": {
					"tokens": [
						"SolrIllegalOperationException::getInternalInfo",
						"getInternalInfo",
						"::getInternalInfo"
					],
					"id": "solrillegaloperationexception.getinternalinfo",
					"name": "SolrIllegalOperationException::getInternalInfo",
					"description": "Returns internal information where the Exception was thrown"
				},
				"sphinxclient.addquery": {
					"tokens": [
						"SphinxClient::addQuery",
						"addQuery",
						"::addQuery"
					],
					"id": "sphinxclient.addquery",
					"name": "SphinxClient::addQuery",
					"description": "Add query to multi-query batch"
				},
				"sphinxclient.buildexcerpts": {
					"tokens": [
						"SphinxClient::buildExcerpts",
						"buildExcerpts",
						"::buildExcerpts"
					],
					"id": "sphinxclient.buildexcerpts",
					"name": "SphinxClient::buildExcerpts",
					"description": "Build text snippets"
				},
				"sphinxclient.buildkeywords": {
					"tokens": [
						"SphinxClient::buildKeywords",
						"buildKeywords",
						"::buildKeywords"
					],
					"id": "sphinxclient.buildkeywords",
					"name": "SphinxClient::buildKeywords",
					"description": "Extract keywords from query"
				},
				"sphinxclient.close": {
					"tokens": [
						"SphinxClient::close",
						"close",
						"::close"
					],
					"id": "sphinxclient.close",
					"name": "SphinxClient::close",
					"description": "Closes previously opened persistent connection"
				},
				"sphinxclient.construct": {
					"tokens": [
						"SphinxClient::__construct",
						"SphinxClient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "sphinxclient.construct",
					"name": "SphinxClient::__construct",
					"description": "Create a new SphinxClient object"
				},
				"sphinxclient.escapestring": {
					"tokens": [
						"SphinxClient::escapeString",
						"escapeString",
						"::escapeString"
					],
					"id": "sphinxclient.escapestring",
					"name": "SphinxClient::escapeString",
					"description": "Escape special characters"
				},
				"sphinxclient.getlasterror": {
					"tokens": [
						"SphinxClient::getLastError",
						"getLastError",
						"::getLastError"
					],
					"id": "sphinxclient.getlasterror",
					"name": "SphinxClient::getLastError",
					"description": "Get the last error message"
				},
				"sphinxclient.getlastwarning": {
					"tokens": [
						"SphinxClient::getLastWarning",
						"getLastWarning",
						"::getLastWarning"
					],
					"id": "sphinxclient.getlastwarning",
					"name": "SphinxClient::getLastWarning",
					"description": "Get the last warning"
				},
				"sphinxclient.open": {
					"tokens": [
						"SphinxClient::open",
						"open",
						"::open"
					],
					"id": "sphinxclient.open",
					"name": "SphinxClient::open",
					"description": "Opens persistent connection to the server"
				},
				"sphinxclient.query": {
					"tokens": [
						"SphinxClient::query",
						"query",
						"::query"
					],
					"id": "sphinxclient.query",
					"name": "SphinxClient::query",
					"description": "Execute search query"
				},
				"sphinxclient.resetfilters": {
					"tokens": [
						"SphinxClient::resetFilters",
						"resetFilters",
						"::resetFilters"
					],
					"id": "sphinxclient.resetfilters",
					"name": "SphinxClient::resetFilters",
					"description": "Clear all filters"
				},
				"sphinxclient.resetgroupby": {
					"tokens": [
						"SphinxClient::resetGroupBy",
						"resetGroupBy",
						"::resetGroupBy"
					],
					"id": "sphinxclient.resetgroupby",
					"name": "SphinxClient::resetGroupBy",
					"description": "Clear all group-by settings"
				},
				"sphinxclient.runqueries": {
					"tokens": [
						"SphinxClient::runQueries",
						"runQueries",
						"::runQueries"
					],
					"id": "sphinxclient.runqueries",
					"name": "SphinxClient::runQueries",
					"description": "Run a batch of search queries"
				},
				"sphinxclient.setarrayresult": {
					"tokens": [
						"SphinxClient::setArrayResult",
						"setArrayResult",
						"::setArrayResult"
					],
					"id": "sphinxclient.setarrayresult",
					"name": "SphinxClient::setArrayResult",
					"description": "Change the format of result set array"
				},
				"sphinxclient.setconnecttimeout": {
					"tokens": [
						"SphinxClient::setConnectTimeout",
						"setConnectTimeout",
						"::setConnectTimeout"
					],
					"id": "sphinxclient.setconnecttimeout",
					"name": "SphinxClient::setConnectTimeout",
					"description": "Set connection timeout"
				},
				"sphinxclient.setfieldweights": {
					"tokens": [
						"SphinxClient::setFieldWeights",
						"setFieldWeights",
						"::setFieldWeights"
					],
					"id": "sphinxclient.setfieldweights",
					"name": "SphinxClient::setFieldWeights",
					"description": "Set field weights"
				},
				"sphinxclient.setfilter": {
					"tokens": [
						"SphinxClient::setFilter",
						"setFilter",
						"::setFilter"
					],
					"id": "sphinxclient.setfilter",
					"name": "SphinxClient::setFilter",
					"description": "Add new integer values set filter"
				},
				"sphinxclient.setfilterfloatrange": {
					"tokens": [
						"SphinxClient::setFilterFloatRange",
						"setFilterFloatRange",
						"::setFilterFloatRange"
					],
					"id": "sphinxclient.setfilterfloatrange",
					"name": "SphinxClient::setFilterFloatRange",
					"description": "Add new float range filter"
				},
				"sphinxclient.setfilterrange": {
					"tokens": [
						"SphinxClient::setFilterRange",
						"setFilterRange",
						"::setFilterRange"
					],
					"id": "sphinxclient.setfilterrange",
					"name": "SphinxClient::setFilterRange",
					"description": "Add new integer range filter"
				},
				"sphinxclient.setgeoanchor": {
					"tokens": [
						"SphinxClient::setGeoAnchor",
						"setGeoAnchor",
						"::setGeoAnchor"
					],
					"id": "sphinxclient.setgeoanchor",
					"name": "SphinxClient::setGeoAnchor",
					"description": "Set anchor point for a geosphere distance calculations"
				},
				"sphinxclient.setgroupby": {
					"tokens": [
						"SphinxClient::setGroupBy",
						"setGroupBy",
						"::setGroupBy"
					],
					"id": "sphinxclient.setgroupby",
					"name": "SphinxClient::setGroupBy",
					"description": "Set grouping attribute"
				},
				"sphinxclient.setgroupdistinct": {
					"tokens": [
						"SphinxClient::setGroupDistinct",
						"setGroupDistinct",
						"::setGroupDistinct"
					],
					"id": "sphinxclient.setgroupdistinct",
					"name": "SphinxClient::setGroupDistinct",
					"description": "Set attribute name for per-group distinct values count calculations"
				},
				"sphinxclient.setidrange": {
					"tokens": [
						"SphinxClient::setIDRange",
						"setIDRange",
						"::setIDRange"
					],
					"id": "sphinxclient.setidrange",
					"name": "SphinxClient::setIDRange",
					"description": "Set a range of accepted document IDs"
				},
				"sphinxclient.setindexweights": {
					"tokens": [
						"SphinxClient::setIndexWeights",
						"setIndexWeights",
						"::setIndexWeights"
					],
					"id": "sphinxclient.setindexweights",
					"name": "SphinxClient::setIndexWeights",
					"description": "Set per-index weights"
				},
				"sphinxclient.setlimits": {
					"tokens": [
						"SphinxClient::setLimits",
						"setLimits",
						"::setLimits"
					],
					"id": "sphinxclient.setlimits",
					"name": "SphinxClient::setLimits",
					"description": "Set offset and limit of the result set"
				},
				"sphinxclient.setmatchmode": {
					"tokens": [
						"SphinxClient::setMatchMode",
						"setMatchMode",
						"::setMatchMode"
					],
					"id": "sphinxclient.setmatchmode",
					"name": "SphinxClient::setMatchMode",
					"description": "Set full-text query matching mode"
				},
				"sphinxclient.setmaxquerytime": {
					"tokens": [
						"SphinxClient::setMaxQueryTime",
						"setMaxQueryTime",
						"::setMaxQueryTime"
					],
					"id": "sphinxclient.setmaxquerytime",
					"name": "SphinxClient::setMaxQueryTime",
					"description": "Set maximum query time"
				},
				"sphinxclient.setoverride": {
					"tokens": [
						"SphinxClient::setOverride",
						"setOverride",
						"::setOverride"
					],
					"id": "sphinxclient.setoverride",
					"name": "SphinxClient::setOverride",
					"description": "Sets temporary per-document attribute value\n   overrides"
				},
				"sphinxclient.setrankingmode": {
					"tokens": [
						"SphinxClient::setRankingMode",
						"setRankingMode",
						"::setRankingMode"
					],
					"id": "sphinxclient.setrankingmode",
					"name": "SphinxClient::setRankingMode",
					"description": "Set ranking mode"
				},
				"sphinxclient.setretries": {
					"tokens": [
						"SphinxClient::setRetries",
						"setRetries",
						"::setRetries"
					],
					"id": "sphinxclient.setretries",
					"name": "SphinxClient::setRetries",
					"description": "Set retry count and delay"
				},
				"sphinxclient.setselect": {
					"tokens": [
						"SphinxClient::setSelect",
						"setSelect",
						"::setSelect"
					],
					"id": "sphinxclient.setselect",
					"name": "SphinxClient::setSelect",
					"description": "Set select clause"
				},
				"sphinxclient.setserver": {
					"tokens": [
						"SphinxClient::setServer",
						"setServer",
						"::setServer"
					],
					"id": "sphinxclient.setserver",
					"name": "SphinxClient::setServer",
					"description": "Set searchd host and port"
				},
				"sphinxclient.setsortmode": {
					"tokens": [
						"SphinxClient::setSortMode",
						"setSortMode",
						"::setSortMode"
					],
					"id": "sphinxclient.setsortmode",
					"name": "SphinxClient::setSortMode",
					"description": "Set matches sorting mode"
				},
				"sphinxclient.status": {
					"tokens": [
						"SphinxClient::status",
						"status",
						"::status"
					],
					"id": "sphinxclient.status",
					"name": "SphinxClient::status",
					"description": "Queries searchd status"
				},
				"sphinxclient.updateattributes": {
					"tokens": [
						"SphinxClient::updateAttributes",
						"updateAttributes",
						"::updateAttributes"
					],
					"id": "sphinxclient.updateattributes",
					"name": "SphinxClient::updateAttributes",
					"description": "Update document attributes"
				},
				"swish.construct": {
					"tokens": [
						"Swish::__construct",
						"Swish::_construct",
						"__construct",
						"::__construct"
					],
					"id": "swish.construct",
					"name": "Swish::__construct",
					"description": "Construct a Swish object"
				},
				"swish.getmetalist": {
					"tokens": [
						"Swish::getMetaList",
						"getMetaList",
						"::getMetaList"
					],
					"id": "swish.getmetalist",
					"name": "Swish::getMetaList",
					"description": "Get the list of meta entries for the index"
				},
				"swish.getpropertylist": {
					"tokens": [
						"Swish::getPropertyList",
						"getPropertyList",
						"::getPropertyList"
					],
					"id": "swish.getpropertylist",
					"name": "Swish::getPropertyList",
					"description": "Get the list of properties for the index"
				},
				"swish.prepare": {
					"tokens": [
						"Swish::prepare",
						"prepare",
						"::prepare"
					],
					"id": "swish.prepare",
					"name": "Swish::prepare",
					"description": "Prepare a search query"
				},
				"swish.query": {
					"tokens": [
						"Swish::query",
						"query",
						"::query"
					],
					"id": "swish.query",
					"name": "Swish::query",
					"description": "Execute a query and return results object"
				},
				"swishresult.getmetalist": {
					"tokens": [
						"SwishResult::getMetaList",
						"getMetaList",
						"::getMetaList"
					],
					"id": "swishresult.getmetalist",
					"name": "SwishResult::getMetaList",
					"description": "Get a list of meta entries"
				},
				"swishresult.stem": {
					"tokens": [
						"SwishResult::stem",
						"stem",
						"::stem"
					],
					"id": "swishresult.stem",
					"name": "SwishResult::stem",
					"description": "Stems the given word"
				},
				"swishresults.getparsedwords": {
					"tokens": [
						"SwishResults::getParsedWords",
						"getParsedWords",
						"::getParsedWords"
					],
					"id": "swishresults.getparsedwords",
					"name": "SwishResults::getParsedWords",
					"description": "Get an array of parsed words"
				},
				"swishresults.getremovedstopwords": {
					"tokens": [
						"SwishResults::getRemovedStopwords",
						"getRemovedStopwords",
						"::getRemovedStopwords"
					],
					"id": "swishresults.getremovedstopwords",
					"name": "SwishResults::getRemovedStopwords",
					"description": "Get an array of stopwords removed from the query"
				},
				"swishresults.nextresult": {
					"tokens": [
						"SwishResults::nextResult",
						"nextResult",
						"::nextResult"
					],
					"id": "swishresults.nextresult",
					"name": "SwishResults::nextResult",
					"description": "Get the next search result"
				},
				"swishresults.seekresult": {
					"tokens": [
						"SwishResults::seekResult",
						"seekResult",
						"::seekResult"
					],
					"id": "swishresults.seekresult",
					"name": "SwishResults::seekResult",
					"description": "Set current seek pointer to the given position"
				},
				"swishsearch.execute": {
					"tokens": [
						"SwishSearch::execute",
						"execute",
						"::execute"
					],
					"id": "swishsearch.execute",
					"name": "SwishSearch::execute",
					"description": "Execute the search and get the results"
				},
				"swishsearch.resetlimit": {
					"tokens": [
						"SwishSearch::resetLimit",
						"resetLimit",
						"::resetLimit"
					],
					"id": "swishsearch.resetlimit",
					"name": "SwishSearch::resetLimit",
					"description": "Reset the search limits"
				},
				"swishsearch.setlimit": {
					"tokens": [
						"SwishSearch::setLimit",
						"setLimit",
						"::setLimit"
					],
					"id": "swishsearch.setlimit",
					"name": "SwishSearch::setLimit",
					"description": "Set the search limits"
				},
				"swishsearch.setphrasedelimiter": {
					"tokens": [
						"SwishSearch::setPhraseDelimiter",
						"setPhraseDelimiter",
						"::setPhraseDelimiter"
					],
					"id": "swishsearch.setphrasedelimiter",
					"name": "SwishSearch::setPhraseDelimiter",
					"description": "Set the phrase delimiter"
				},
				"swishsearch.setsort": {
					"tokens": [
						"SwishSearch::setSort",
						"setSort",
						"::setSort"
					],
					"id": "swishsearch.setsort",
					"name": "SwishSearch::setSort",
					"description": "Set the sort order"
				},
				"swishsearch.setstructure": {
					"tokens": [
						"SwishSearch::setStructure",
						"setStructure",
						"::setStructure"
					],
					"id": "swishsearch.setstructure",
					"name": "SwishSearch::setStructure",
					"description": "Set the structure flag in the search object"
				},
				"function.apache-child-terminate": {
					"tokens": [
						"apache_child_terminate",
						"apachechild_terminate"
					],
					"id": "function.apache-child-terminate",
					"name": "apache_child_terminate",
					"description": "Terminate apache process after this request"
				},
				"function.apache-get-modules": {
					"tokens": [
						"apache_get_modules",
						"apacheget_modules"
					],
					"id": "function.apache-get-modules",
					"name": "apache_get_modules",
					"description": "Get a list of loaded Apache modules"
				},
				"function.apache-get-version": {
					"tokens": [
						"apache_get_version",
						"apacheget_version"
					],
					"id": "function.apache-get-version",
					"name": "apache_get_version",
					"description": "Fetch Apache version"
				},
				"function.apache-getenv": {
					"tokens": [
						"apache_getenv",
						"apachegetenv"
					],
					"id": "function.apache-getenv",
					"name": "apache_getenv",
					"description": "Get an Apache subprocess_env variable"
				},
				"function.apache-lookup-uri": {
					"tokens": [
						"apache_lookup_uri",
						"apachelookup_uri"
					],
					"id": "function.apache-lookup-uri",
					"name": "apache_lookup_uri",
					"description": "Perform a partial request for the specified URI and return all info about it"
				},
				"function.apache-note": {
					"tokens": [
						"apache_note",
						"apachenote"
					],
					"id": "function.apache-note",
					"name": "apache_note",
					"description": "Get and set apache request notes"
				},
				"function.apache-request-headers": {
					"tokens": [
						"apache_request_headers",
						"apacherequest_headers"
					],
					"id": "function.apache-request-headers",
					"name": "apache_request_headers",
					"description": "Fetch all HTTP request headers"
				},
				"function.apache-reset-timeout": {
					"tokens": [
						"apache_reset_timeout",
						"apachereset_timeout"
					],
					"id": "function.apache-reset-timeout",
					"name": "apache_reset_timeout",
					"description": "Reset the Apache write timer"
				},
				"function.apache-response-headers": {
					"tokens": [
						"apache_response_headers",
						"apacheresponse_headers"
					],
					"id": "function.apache-response-headers",
					"name": "apache_response_headers",
					"description": "Fetch all HTTP response headers"
				},
				"function.apache-setenv": {
					"tokens": [
						"apache_setenv",
						"apachesetenv"
					],
					"id": "function.apache-setenv",
					"name": "apache_setenv",
					"description": "Set an Apache subprocess_env variable"
				},
				"function.getallheaders": {
					"tokens": [
						"getallheaders"
					],
					"id": "function.getallheaders",
					"name": "getallheaders",
					"description": "Fetch all HTTP request headers"
				},
				"function.virtual": {
					"tokens": [
						"virtual"
					],
					"id": "function.virtual",
					"name": "virtual",
					"description": "Perform an Apache sub-request"
				},
				"function.fastcgi-finish-request": {
					"tokens": [
						"fastcgi_finish_request",
						"fastcgifinish_request"
					],
					"id": "function.fastcgi-finish-request",
					"name": "fastcgi_finish_request",
					"description": "Flushes all response data to the client"
				},
				"function.iis-add-server": {
					"tokens": [
						"iis_add_server",
						"iisadd_server"
					],
					"id": "function.iis-add-server",
					"name": "iis_add_server",
					"description": "Creates a new virtual web server"
				},
				"function.iis-get-dir-security": {
					"tokens": [
						"iis_get_dir_security",
						"iisget_dir_security"
					],
					"id": "function.iis-get-dir-security",
					"name": "iis_get_dir_security",
					"description": "Gets Directory Security"
				},
				"function.iis-get-script-map": {
					"tokens": [
						"iis_get_script_map",
						"iisget_script_map"
					],
					"id": "function.iis-get-script-map",
					"name": "iis_get_script_map",
					"description": "Gets script mapping on a virtual directory for a specific extension"
				},
				"function.iis-get-server-by-comment": {
					"tokens": [
						"iis_get_server_by_comment",
						"iisget_server_by_comment"
					],
					"id": "function.iis-get-server-by-comment",
					"name": "iis_get_server_by_comment",
					"description": "Return the instance number associated with the Comment"
				},
				"function.iis-get-server-by-path": {
					"tokens": [
						"iis_get_server_by_path",
						"iisget_server_by_path"
					],
					"id": "function.iis-get-server-by-path",
					"name": "iis_get_server_by_path",
					"description": "Return the instance number associated with the Path"
				},
				"function.iis-get-server-rights": {
					"tokens": [
						"iis_get_server_rights",
						"iisget_server_rights"
					],
					"id": "function.iis-get-server-rights",
					"name": "iis_get_server_rights",
					"description": "Gets server rights"
				},
				"function.iis-get-service-state": {
					"tokens": [
						"iis_get_service_state",
						"iisget_service_state"
					],
					"id": "function.iis-get-service-state",
					"name": "iis_get_service_state",
					"description": "Returns the state for the service defined by ServiceId"
				},
				"function.iis-remove-server": {
					"tokens": [
						"iis_remove_server",
						"iisremove_server"
					],
					"id": "function.iis-remove-server",
					"name": "iis_remove_server",
					"description": "Removes the virtual web server indicated by ServerInstance"
				},
				"function.iis-set-app-settings": {
					"tokens": [
						"iis_set_app_settings",
						"iisset_app_settings"
					],
					"id": "function.iis-set-app-settings",
					"name": "iis_set_app_settings",
					"description": "Creates application scope for a virtual directory"
				},
				"function.iis-set-dir-security": {
					"tokens": [
						"iis_set_dir_security",
						"iisset_dir_security"
					],
					"id": "function.iis-set-dir-security",
					"name": "iis_set_dir_security",
					"description": "Sets Directory Security"
				},
				"function.iis-set-script-map": {
					"tokens": [
						"iis_set_script_map",
						"iisset_script_map"
					],
					"id": "function.iis-set-script-map",
					"name": "iis_set_script_map",
					"description": "Sets script mapping on a virtual directory"
				},
				"function.iis-set-server-rights": {
					"tokens": [
						"iis_set_server_rights",
						"iisset_server_rights"
					],
					"id": "function.iis-set-server-rights",
					"name": "iis_set_server_rights",
					"description": "Sets server rights"
				},
				"function.iis-start-server": {
					"tokens": [
						"iis_start_server",
						"iisstart_server"
					],
					"id": "function.iis-start-server",
					"name": "iis_start_server",
					"description": "Starts the virtual web server"
				},
				"function.iis-start-service": {
					"tokens": [
						"iis_start_service",
						"iisstart_service"
					],
					"id": "function.iis-start-service",
					"name": "iis_start_service",
					"description": "Starts the service defined by ServiceId"
				},
				"function.iis-stop-server": {
					"tokens": [
						"iis_stop_server",
						"iisstop_server"
					],
					"id": "function.iis-stop-server",
					"name": "iis_stop_server",
					"description": "Stops the virtual web server"
				},
				"function.iis-stop-service": {
					"tokens": [
						"iis_stop_service",
						"iisstop_service"
					],
					"id": "function.iis-stop-service",
					"name": "iis_stop_service",
					"description": "Stops the service defined by ServiceId"
				},
				"function.nsapi-request-headers": {
					"tokens": [
						"nsapi_request_headers",
						"nsapirequest_headers"
					],
					"id": "function.nsapi-request-headers",
					"name": "nsapi_request_headers",
					"description": "Fetch all HTTP request headers"
				},
				"function.nsapi-response-headers": {
					"tokens": [
						"nsapi_response_headers",
						"nsapiresponse_headers"
					],
					"id": "function.nsapi-response-headers",
					"name": "nsapi_response_headers",
					"description": "Fetch all HTTP response headers"
				},
				"function.nsapi-virtual": {
					"tokens": [
						"nsapi_virtual",
						"nsapivirtual"
					],
					"id": "function.nsapi-virtual",
					"name": "nsapi_virtual",
					"description": "Perform an NSAPI sub-request"
				},
				"function.msession-connect": {
					"tokens": [
						"msession_connect",
						"msessionconnect"
					],
					"id": "function.msession-connect",
					"name": "msession_connect",
					"description": "Connect to msession server"
				},
				"function.msession-count": {
					"tokens": [
						"msession_count",
						"msessioncount"
					],
					"id": "function.msession-count",
					"name": "msession_count",
					"description": "Get session count"
				},
				"function.msession-create": {
					"tokens": [
						"msession_create",
						"msessioncreate"
					],
					"id": "function.msession-create",
					"name": "msession_create",
					"description": "Create a session"
				},
				"function.msession-destroy": {
					"tokens": [
						"msession_destroy",
						"msessiondestroy"
					],
					"id": "function.msession-destroy",
					"name": "msession_destroy",
					"description": "Destroy a session"
				},
				"function.msession-disconnect": {
					"tokens": [
						"msession_disconnect",
						"msessiondisconnect"
					],
					"id": "function.msession-disconnect",
					"name": "msession_disconnect",
					"description": "Close connection to msession server"
				},
				"function.msession-find": {
					"tokens": [
						"msession_find",
						"msessionfind"
					],
					"id": "function.msession-find",
					"name": "msession_find",
					"description": "Find all sessions with name and value"
				},
				"function.msession-get-array": {
					"tokens": [
						"msession_get_array",
						"msessionget_array"
					],
					"id": "function.msession-get-array",
					"name": "msession_get_array",
					"description": "Get array of msession variables"
				},
				"function.msession-get-data": {
					"tokens": [
						"msession_get_data",
						"msessionget_data"
					],
					"id": "function.msession-get-data",
					"name": "msession_get_data",
					"description": "Get data session unstructured data"
				},
				"function.msession-get": {
					"tokens": [
						"msession_get",
						"msessionget"
					],
					"id": "function.msession-get",
					"name": "msession_get",
					"description": "Get value from session"
				},
				"function.msession-inc": {
					"tokens": [
						"msession_inc",
						"msessioninc"
					],
					"id": "function.msession-inc",
					"name": "msession_inc",
					"description": "Increment value in session"
				},
				"function.msession-list": {
					"tokens": [
						"msession_list",
						"msessionlist"
					],
					"id": "function.msession-list",
					"name": "msession_list",
					"description": "List all sessions"
				},
				"function.msession-listvar": {
					"tokens": [
						"msession_listvar",
						"msessionlistvar"
					],
					"id": "function.msession-listvar",
					"name": "msession_listvar",
					"description": "List sessions with variable"
				},
				"function.msession-lock": {
					"tokens": [
						"msession_lock",
						"msessionlock"
					],
					"id": "function.msession-lock",
					"name": "msession_lock",
					"description": "Lock a session"
				},
				"function.msession-plugin": {
					"tokens": [
						"msession_plugin",
						"msessionplugin"
					],
					"id": "function.msession-plugin",
					"name": "msession_plugin",
					"description": "Call an escape function within the msession personality plugin"
				},
				"function.msession-randstr": {
					"tokens": [
						"msession_randstr",
						"msessionrandstr"
					],
					"id": "function.msession-randstr",
					"name": "msession_randstr",
					"description": "Get random string"
				},
				"function.msession-set-array": {
					"tokens": [
						"msession_set_array",
						"msessionset_array"
					],
					"id": "function.msession-set-array",
					"name": "msession_set_array",
					"description": "Set msession variables from an array"
				},
				"function.msession-set-data": {
					"tokens": [
						"msession_set_data",
						"msessionset_data"
					],
					"id": "function.msession-set-data",
					"name": "msession_set_data",
					"description": "Set data session unstructured data"
				},
				"function.msession-set": {
					"tokens": [
						"msession_set",
						"msessionset"
					],
					"id": "function.msession-set",
					"name": "msession_set",
					"description": "Set value in session"
				},
				"function.msession-timeout": {
					"tokens": [
						"msession_timeout",
						"msessiontimeout"
					],
					"id": "function.msession-timeout",
					"name": "msession_timeout",
					"description": "Set/get session timeout"
				},
				"function.msession-uniq": {
					"tokens": [
						"msession_uniq",
						"msessionuniq"
					],
					"id": "function.msession-uniq",
					"name": "msession_uniq",
					"description": "Get unique id"
				},
				"function.msession-unlock": {
					"tokens": [
						"msession_unlock",
						"msessionunlock"
					],
					"id": "function.msession-unlock",
					"name": "msession_unlock",
					"description": "Unlock a session"
				},
				"function.session-abort": {
					"tokens": [
						"session_abort",
						"sessionabort"
					],
					"id": "function.session-abort",
					"name": "session_abort",
					"description": "Discard session array changes and finish session"
				},
				"function.session-cache-expire": {
					"tokens": [
						"session_cache_expire",
						"sessioncache_expire"
					],
					"id": "function.session-cache-expire",
					"name": "session_cache_expire",
					"description": "Return current cache expire"
				},
				"function.session-cache-limiter": {
					"tokens": [
						"session_cache_limiter",
						"sessioncache_limiter"
					],
					"id": "function.session-cache-limiter",
					"name": "session_cache_limiter",
					"description": "Get and/or set the current cache limiter"
				},
				"function.session-commit": {
					"tokens": [
						"session_commit",
						"sessioncommit"
					],
					"id": "function.session-commit",
					"name": "session_commit",
					"description": "Alias of session_write_close"
				},
				"function.session-decode": {
					"tokens": [
						"session_decode",
						"sessiondecode"
					],
					"id": "function.session-decode",
					"name": "session_decode",
					"description": "Decodes session data from a session encoded string"
				},
				"function.session-destroy": {
					"tokens": [
						"session_destroy",
						"sessiondestroy"
					],
					"id": "function.session-destroy",
					"name": "session_destroy",
					"description": "Destroys all data registered to a session"
				},
				"function.session-encode": {
					"tokens": [
						"session_encode",
						"sessionencode"
					],
					"id": "function.session-encode",
					"name": "session_encode",
					"description": "Encodes the current session data as a session encoded string"
				},
				"function.session-get-cookie-params": {
					"tokens": [
						"session_get_cookie_params",
						"sessionget_cookie_params"
					],
					"id": "function.session-get-cookie-params",
					"name": "session_get_cookie_params",
					"description": "Get the session cookie parameters"
				},
				"function.session-id": {
					"tokens": [
						"session_id",
						"sessionid"
					],
					"id": "function.session-id",
					"name": "session_id",
					"description": "Get and/or set the current session id"
				},
				"function.session-is-registered": {
					"tokens": [
						"session_is_registered",
						"sessionis_registered"
					],
					"id": "function.session-is-registered",
					"name": "session_is_registered",
					"description": "Find out whether a global variable is registered in a session"
				},
				"function.session-module-name": {
					"tokens": [
						"session_module_name",
						"sessionmodule_name"
					],
					"id": "function.session-module-name",
					"name": "session_module_name",
					"description": "Get and/or set the current session module"
				},
				"function.session-name": {
					"tokens": [
						"session_name",
						"sessionname"
					],
					"id": "function.session-name",
					"name": "session_name",
					"description": "Get and/or set the current session name"
				},
				"function.session-regenerate-id": {
					"tokens": [
						"session_regenerate_id",
						"sessionregenerate_id"
					],
					"id": "function.session-regenerate-id",
					"name": "session_regenerate_id",
					"description": "Update the current session id with a newly generated one"
				},
				"function.session-register-shutdown": {
					"tokens": [
						"session_register_shutdown",
						"sessionregister_shutdown"
					],
					"id": "function.session-register-shutdown",
					"name": "session_register_shutdown",
					"description": "Session shutdown function"
				},
				"function.session-register": {
					"tokens": [
						"session_register",
						"sessionregister"
					],
					"id": "function.session-register",
					"name": "session_register",
					"description": "Register one or more global variables with the current session"
				},
				"function.session-reset": {
					"tokens": [
						"session_reset",
						"sessionreset"
					],
					"id": "function.session-reset",
					"name": "session_reset",
					"description": "Re-initialize session array with original values"
				},
				"function.session-save-path": {
					"tokens": [
						"session_save_path",
						"sessionsave_path"
					],
					"id": "function.session-save-path",
					"name": "session_save_path",
					"description": "Get and/or set the current session save path"
				},
				"function.session-set-cookie-params": {
					"tokens": [
						"session_set_cookie_params",
						"sessionset_cookie_params"
					],
					"id": "function.session-set-cookie-params",
					"name": "session_set_cookie_params",
					"description": "Set the session cookie parameters"
				},
				"function.session-set-save-handler": {
					"tokens": [
						"session_set_save_handler",
						"sessionset_save_handler"
					],
					"id": "function.session-set-save-handler",
					"name": "session_set_save_handler",
					"description": "Sets user-level session storage functions"
				},
				"function.session-start": {
					"tokens": [
						"session_start",
						"sessionstart"
					],
					"id": "function.session-start",
					"name": "session_start",
					"description": "Start new or resume existing session"
				},
				"function.session-status": {
					"tokens": [
						"session_status",
						"sessionstatus"
					],
					"id": "function.session-status",
					"name": "session_status",
					"description": "Returns the current session status"
				},
				"function.session-unregister": {
					"tokens": [
						"session_unregister",
						"sessionunregister"
					],
					"id": "function.session-unregister",
					"name": "session_unregister",
					"description": "Unregister a global variable from the current session"
				},
				"function.session-unset": {
					"tokens": [
						"session_unset",
						"sessionunset"
					],
					"id": "function.session-unset",
					"name": "session_unset",
					"description": "Free all session variables"
				},
				"function.session-write-close": {
					"tokens": [
						"session_write_close",
						"sessionwrite_close"
					],
					"id": "function.session-write-close",
					"name": "session_write_close",
					"description": "Write session data and end session"
				},
				"sessionhandler.close": {
					"tokens": [
						"SessionHandler::close",
						"close",
						"::close"
					],
					"id": "sessionhandler.close",
					"name": "SessionHandler::close",
					"description": "Close the session"
				},
				"sessionhandler.create-sid": {
					"tokens": [
						"SessionHandler::create_sid",
						"SessionHandler::createsid",
						"create_sid",
						"::create_sid"
					],
					"id": "sessionhandler.create-sid",
					"name": "SessionHandler::create_sid",
					"description": "Return a new session ID"
				},
				"sessionhandler.destroy": {
					"tokens": [
						"SessionHandler::destroy",
						"destroy",
						"::destroy"
					],
					"id": "sessionhandler.destroy",
					"name": "SessionHandler::destroy",
					"description": "Destroy a session"
				},
				"sessionhandler.gc": {
					"tokens": [
						"SessionHandler::gc",
						"gc",
						"::gc"
					],
					"id": "sessionhandler.gc",
					"name": "SessionHandler::gc",
					"description": "Cleanup old sessions"
				},
				"sessionhandler.open": {
					"tokens": [
						"SessionHandler::open",
						"open",
						"::open"
					],
					"id": "sessionhandler.open",
					"name": "SessionHandler::open",
					"description": "Initialize session"
				},
				"sessionhandler.read": {
					"tokens": [
						"SessionHandler::read",
						"read",
						"::read"
					],
					"id": "sessionhandler.read",
					"name": "SessionHandler::read",
					"description": "Read session data"
				},
				"sessionhandler.write": {
					"tokens": [
						"SessionHandler::write",
						"write",
						"::write"
					],
					"id": "sessionhandler.write",
					"name": "SessionHandler::write",
					"description": "Write session data"
				},
				"sessionhandlerinterface.close": {
					"tokens": [
						"SessionHandlerInterface::close",
						"close",
						"::close"
					],
					"id": "sessionhandlerinterface.close",
					"name": "SessionHandlerInterface::close",
					"description": "Close the session"
				},
				"sessionhandlerinterface.destroy": {
					"tokens": [
						"SessionHandlerInterface::destroy",
						"destroy",
						"::destroy"
					],
					"id": "sessionhandlerinterface.destroy",
					"name": "SessionHandlerInterface::destroy",
					"description": "Destroy a session"
				},
				"sessionhandlerinterface.gc": {
					"tokens": [
						"SessionHandlerInterface::gc",
						"gc",
						"::gc"
					],
					"id": "sessionhandlerinterface.gc",
					"name": "SessionHandlerInterface::gc",
					"description": "Cleanup old sessions"
				},
				"sessionhandlerinterface.open": {
					"tokens": [
						"SessionHandlerInterface::open",
						"open",
						"::open"
					],
					"id": "sessionhandlerinterface.open",
					"name": "SessionHandlerInterface::open",
					"description": "Initialize session"
				},
				"sessionhandlerinterface.read": {
					"tokens": [
						"SessionHandlerInterface::read",
						"read",
						"::read"
					],
					"id": "sessionhandlerinterface.read",
					"name": "SessionHandlerInterface::read",
					"description": "Read session data"
				},
				"sessionhandlerinterface.write": {
					"tokens": [
						"SessionHandlerInterface::write",
						"write",
						"::write"
					],
					"id": "sessionhandlerinterface.write",
					"name": "SessionHandlerInterface::write",
					"description": "Write session data"
				},
				"function.session-pgsql-add-error": {
					"tokens": [
						"session_pgsql_add_error",
						"sessionpgsql_add_error"
					],
					"id": "function.session-pgsql-add-error",
					"name": "session_pgsql_add_error",
					"description": "Increments error counts and sets last error message"
				},
				"function.session-pgsql-get-error": {
					"tokens": [
						"session_pgsql_get_error",
						"sessionpgsql_get_error"
					],
					"id": "function.session-pgsql-get-error",
					"name": "session_pgsql_get_error",
					"description": "Returns number of errors and last error message"
				},
				"function.session-pgsql-get-field": {
					"tokens": [
						"session_pgsql_get_field",
						"sessionpgsql_get_field"
					],
					"id": "function.session-pgsql-get-field",
					"name": "session_pgsql_get_field",
					"description": "Get custom field value"
				},
				"function.session-pgsql-reset": {
					"tokens": [
						"session_pgsql_reset",
						"sessionpgsql_reset"
					],
					"id": "function.session-pgsql-reset",
					"name": "session_pgsql_reset",
					"description": "Reset connection to session database servers"
				},
				"function.session-pgsql-set-field": {
					"tokens": [
						"session_pgsql_set_field",
						"sessionpgsql_set_field"
					],
					"id": "function.session-pgsql-set-field",
					"name": "session_pgsql_set_field",
					"description": "Set custom field value"
				},
				"function.session-pgsql-status": {
					"tokens": [
						"session_pgsql_status",
						"sessionpgsql_status"
					],
					"id": "function.session-pgsql-status",
					"name": "session_pgsql_status",
					"description": "Get current save handler status"
				},
				"function.bbcode-add-element": {
					"tokens": [
						"bbcode_add_element",
						"bbcodeadd_element"
					],
					"id": "function.bbcode-add-element",
					"name": "bbcode_add_element",
					"description": "Adds a bbcode element"
				},
				"function.bbcode-add-smiley": {
					"tokens": [
						"bbcode_add_smiley",
						"bbcodeadd_smiley"
					],
					"id": "function.bbcode-add-smiley",
					"name": "bbcode_add_smiley",
					"description": "Adds a smiley to the parser"
				},
				"function.bbcode-create": {
					"tokens": [
						"bbcode_create",
						"bbcodecreate"
					],
					"id": "function.bbcode-create",
					"name": "bbcode_create",
					"description": "Create a BBCode Resource"
				},
				"function.bbcode-destroy": {
					"tokens": [
						"bbcode_destroy",
						"bbcodedestroy"
					],
					"id": "function.bbcode-destroy",
					"name": "bbcode_destroy",
					"description": "Close BBCode_container resource"
				},
				"function.bbcode-parse": {
					"tokens": [
						"bbcode_parse",
						"bbcodeparse"
					],
					"id": "function.bbcode-parse",
					"name": "bbcode_parse",
					"description": "Parse a string following a given rule set"
				},
				"function.bbcode-set-arg-parser": {
					"tokens": [
						"bbcode_set_arg_parser",
						"bbcodeset_arg_parser"
					],
					"id": "function.bbcode-set-arg-parser",
					"name": "bbcode_set_arg_parser",
					"description": "Attach another parser in order to use another rule set for argument parsing"
				},
				"function.bbcode-set-flags": {
					"tokens": [
						"bbcode_set_flags",
						"bbcodeset_flags"
					],
					"id": "function.bbcode-set-flags",
					"name": "bbcode_set_flags",
					"description": "Set or alter parser options"
				},
				"function.preg-filter": {
					"tokens": [
						"preg_filter",
						"pregfilter"
					],
					"id": "function.preg-filter",
					"name": "preg_filter",
					"description": "Perform a regular expression search and replace"
				},
				"function.preg-grep": {
					"tokens": [
						"preg_grep",
						"preggrep"
					],
					"id": "function.preg-grep",
					"name": "preg_grep",
					"description": "Return array entries that match the pattern"
				},
				"function.preg-last-error": {
					"tokens": [
						"preg_last_error",
						"preglast_error"
					],
					"id": "function.preg-last-error",
					"name": "preg_last_error",
					"description": "Returns the error code of the last PCRE regex execution"
				},
				"function.preg-match-all": {
					"tokens": [
						"preg_match_all",
						"pregmatch_all"
					],
					"id": "function.preg-match-all",
					"name": "preg_match_all",
					"description": "Perform a global regular expression match"
				},
				"function.preg-match": {
					"tokens": [
						"preg_match",
						"pregmatch"
					],
					"id": "function.preg-match",
					"name": "preg_match",
					"description": "Perform a regular expression match"
				},
				"function.preg-quote": {
					"tokens": [
						"preg_quote",
						"pregquote"
					],
					"id": "function.preg-quote",
					"name": "preg_quote",
					"description": "Quote regular expression characters"
				},
				"function.preg-replace-callback-array": {
					"tokens": [
						"preg_replace_callback_array",
						"pregreplace_callback_array"
					],
					"id": "function.preg-replace-callback-array",
					"name": "preg_replace_callback_array",
					"description": "Perform a regular expression search and replace using callbacks"
				},
				"function.preg-replace-callback": {
					"tokens": [
						"preg_replace_callback",
						"pregreplace_callback"
					],
					"id": "function.preg-replace-callback",
					"name": "preg_replace_callback",
					"description": "Perform a regular expression search and replace using a callback"
				},
				"function.preg-replace": {
					"tokens": [
						"preg_replace",
						"pregreplace"
					],
					"id": "function.preg-replace",
					"name": "preg_replace",
					"description": "Perform a regular expression search and replace"
				},
				"function.preg-split": {
					"tokens": [
						"preg_split",
						"pregsplit"
					],
					"id": "function.preg-split",
					"name": "preg_split",
					"description": "Split string by a regular expression"
				},
				"function.ereg-replace": {
					"tokens": [
						"ereg_replace",
						"eregreplace"
					],
					"id": "function.ereg-replace",
					"name": "ereg_replace",
					"description": "Replace regular expression"
				},
				"function.ereg": {
					"tokens": [
						"ereg"
					],
					"id": "function.ereg",
					"name": "ereg",
					"description": "Regular expression match"
				},
				"function.eregi-replace": {
					"tokens": [
						"eregi_replace",
						"eregireplace"
					],
					"id": "function.eregi-replace",
					"name": "eregi_replace",
					"description": "Replace regular expression case insensitive"
				},
				"function.eregi": {
					"tokens": [
						"eregi"
					],
					"id": "function.eregi",
					"name": "eregi",
					"description": "Case insensitive regular expression match"
				},
				"function.split": {
					"tokens": [
						"split"
					],
					"id": "function.split",
					"name": "split",
					"description": "Split string into array by regular expression"
				},
				"function.spliti": {
					"tokens": [
						"spliti"
					],
					"id": "function.spliti",
					"name": "spliti",
					"description": "Split string into array by regular expression case insensitive"
				},
				"function.sql-regcase": {
					"tokens": [
						"sql_regcase",
						"sqlregcase"
					],
					"id": "function.sql-regcase",
					"name": "sql_regcase",
					"description": "Make regular expression for case insensitive match"
				},
				"function.ssdeep-fuzzy-compare": {
					"tokens": [
						"ssdeep_fuzzy_compare",
						"ssdeepfuzzy_compare"
					],
					"id": "function.ssdeep-fuzzy-compare",
					"name": "ssdeep_fuzzy_compare",
					"description": "Calculates the match score between two fuzzy hash signatures"
				},
				"function.ssdeep-fuzzy-hash-filename": {
					"tokens": [
						"ssdeep_fuzzy_hash_filename",
						"ssdeepfuzzy_hash_filename"
					],
					"id": "function.ssdeep-fuzzy-hash-filename",
					"name": "ssdeep_fuzzy_hash_filename",
					"description": "Create a fuzzy hash from a file"
				},
				"function.ssdeep-fuzzy-hash": {
					"tokens": [
						"ssdeep_fuzzy_hash",
						"ssdeepfuzzy_hash"
					],
					"id": "function.ssdeep-fuzzy-hash",
					"name": "ssdeep_fuzzy_hash",
					"description": "Create a fuzzy hash from a string"
				},
				"function.addcslashes": {
					"tokens": [
						"addcslashes"
					],
					"id": "function.addcslashes",
					"name": "addcslashes",
					"description": "Quote string with slashes in a C style"
				},
				"function.addslashes": {
					"tokens": [
						"addslashes"
					],
					"id": "function.addslashes",
					"name": "addslashes",
					"description": "Quote string with slashes"
				},
				"function.bin2hex": {
					"tokens": [
						"bin2hex"
					],
					"id": "function.bin2hex",
					"name": "bin2hex",
					"description": "Convert binary data into hexadecimal representation"
				},
				"function.chop": {
					"tokens": [
						"chop"
					],
					"id": "function.chop",
					"name": "chop",
					"description": "Alias of rtrim"
				},
				"function.chr": {
					"tokens": [
						"chr"
					],
					"id": "function.chr",
					"name": "chr",
					"description": "Return a specific character"
				},
				"function.chunk-split": {
					"tokens": [
						"chunk_split",
						"chunksplit"
					],
					"id": "function.chunk-split",
					"name": "chunk_split",
					"description": "Split a string into smaller chunks"
				},
				"function.convert-cyr-string": {
					"tokens": [
						"convert_cyr_string",
						"convertcyr_string"
					],
					"id": "function.convert-cyr-string",
					"name": "convert_cyr_string",
					"description": "Convert from one Cyrillic character set to another"
				},
				"function.convert-uudecode": {
					"tokens": [
						"convert_uudecode",
						"convertuudecode"
					],
					"id": "function.convert-uudecode",
					"name": "convert_uudecode",
					"description": "Decode a uuencoded string"
				},
				"function.convert-uuencode": {
					"tokens": [
						"convert_uuencode",
						"convertuuencode"
					],
					"id": "function.convert-uuencode",
					"name": "convert_uuencode",
					"description": "Uuencode a string"
				},
				"function.count-chars": {
					"tokens": [
						"count_chars",
						"countchars"
					],
					"id": "function.count-chars",
					"name": "count_chars",
					"description": "Return information about characters used in a string"
				},
				"function.crc32": {
					"tokens": [
						"crc32"
					],
					"id": "function.crc32",
					"name": "crc32",
					"description": "Calculates the crc32 polynomial of a string"
				},
				"function.crypt": {
					"tokens": [
						"crypt"
					],
					"id": "function.crypt",
					"name": "crypt",
					"description": "One-way string hashing"
				},
				"function.echo": {
					"tokens": [
						"echo"
					],
					"id": "function.echo",
					"name": "echo",
					"description": "Output one or more strings"
				},
				"function.explode": {
					"tokens": [
						"explode"
					],
					"id": "function.explode",
					"name": "explode",
					"description": "Split a string by string"
				},
				"function.fprintf": {
					"tokens": [
						"fprintf"
					],
					"id": "function.fprintf",
					"name": "fprintf",
					"description": "Write a formatted string to a stream"
				},
				"function.get-html-translation-table": {
					"tokens": [
						"get_html_translation_table",
						"gethtml_translation_table"
					],
					"id": "function.get-html-translation-table",
					"name": "get_html_translation_table",
					"description": "Returns the translation table used by htmlspecialchars and htmlentities"
				},
				"function.hebrev": {
					"tokens": [
						"hebrev"
					],
					"id": "function.hebrev",
					"name": "hebrev",
					"description": "Convert logical Hebrew text to visual text"
				},
				"function.hebrevc": {
					"tokens": [
						"hebrevc"
					],
					"id": "function.hebrevc",
					"name": "hebrevc",
					"description": "Convert logical Hebrew text to visual text with newline conversion"
				},
				"function.hex2bin": {
					"tokens": [
						"hex2bin"
					],
					"id": "function.hex2bin",
					"name": "hex2bin",
					"description": "Decodes a hexadecimally encoded binary string"
				},
				"function.html-entity-decode": {
					"tokens": [
						"html_entity_decode",
						"htmlentity_decode"
					],
					"id": "function.html-entity-decode",
					"name": "html_entity_decode",
					"description": "Convert all HTML entities to their applicable characters"
				},
				"function.htmlentities": {
					"tokens": [
						"htmlentities"
					],
					"id": "function.htmlentities",
					"name": "htmlentities",
					"description": "Convert all applicable characters to HTML entities"
				},
				"function.htmlspecialchars-decode": {
					"tokens": [
						"htmlspecialchars_decode",
						"htmlspecialcharsdecode"
					],
					"id": "function.htmlspecialchars-decode",
					"name": "htmlspecialchars_decode",
					"description": "Convert special HTML entities back to characters"
				},
				"function.htmlspecialchars": {
					"tokens": [
						"htmlspecialchars"
					],
					"id": "function.htmlspecialchars",
					"name": "htmlspecialchars",
					"description": "Convert special characters to HTML entities"
				},
				"function.implode": {
					"tokens": [
						"implode"
					],
					"id": "function.implode",
					"name": "implode",
					"description": "Join array elements with a string"
				},
				"function.join": {
					"tokens": [
						"join"
					],
					"id": "function.join",
					"name": "join",
					"description": "Alias of implode"
				},
				"function.lcfirst": {
					"tokens": [
						"lcfirst"
					],
					"id": "function.lcfirst",
					"name": "lcfirst",
					"description": "Make a string's first character lowercase"
				},
				"function.levenshtein": {
					"tokens": [
						"levenshtein"
					],
					"id": "function.levenshtein",
					"name": "levenshtein",
					"description": "Calculate Levenshtein distance between two strings"
				},
				"function.localeconv": {
					"tokens": [
						"localeconv"
					],
					"id": "function.localeconv",
					"name": "localeconv",
					"description": "Get numeric formatting information"
				},
				"function.ltrim": {
					"tokens": [
						"ltrim"
					],
					"id": "function.ltrim",
					"name": "ltrim",
					"description": "Strip whitespace (or other characters) from the beginning of a string"
				},
				"function.md5-file": {
					"tokens": [
						"md5_file",
						"md5file"
					],
					"id": "function.md5-file",
					"name": "md5_file",
					"description": "Calculates the md5 hash of a given file"
				},
				"function.md5": {
					"tokens": [
						"md5"
					],
					"id": "function.md5",
					"name": "md5",
					"description": "Calculate the md5 hash of a string"
				},
				"function.metaphone": {
					"tokens": [
						"metaphone"
					],
					"id": "function.metaphone",
					"name": "metaphone",
					"description": "Calculate the metaphone key of a string"
				},
				"function.money-format": {
					"tokens": [
						"money_format",
						"moneyformat"
					],
					"id": "function.money-format",
					"name": "money_format",
					"description": "Formats a number as a currency string"
				},
				"function.nl-langinfo": {
					"tokens": [
						"nl_langinfo",
						"nllanginfo"
					],
					"id": "function.nl-langinfo",
					"name": "nl_langinfo",
					"description": "Query language and locale information"
				},
				"function.nl2br": {
					"tokens": [
						"nl2br"
					],
					"id": "function.nl2br",
					"name": "nl2br",
					"description": "Inserts HTML line breaks before all newlines in a string"
				},
				"function.number-format": {
					"tokens": [
						"number_format",
						"numberformat"
					],
					"id": "function.number-format",
					"name": "number_format",
					"description": "Format a number with grouped thousands"
				},
				"function.ord": {
					"tokens": [
						"ord"
					],
					"id": "function.ord",
					"name": "ord",
					"description": "Return ASCII value of character"
				},
				"function.parse-str": {
					"tokens": [
						"parse_str",
						"parsestr"
					],
					"id": "function.parse-str",
					"name": "parse_str",
					"description": "Parses the string into variables"
				},
				"function.print": {
					"tokens": [
						"print"
					],
					"id": "function.print",
					"name": "print",
					"description": "Output a string"
				},
				"function.printf": {
					"tokens": [
						"printf"
					],
					"id": "function.printf",
					"name": "printf",
					"description": "Output a formatted string"
				},
				"function.quoted-printable-decode": {
					"tokens": [
						"quoted_printable_decode",
						"quotedprintable_decode"
					],
					"id": "function.quoted-printable-decode",
					"name": "quoted_printable_decode",
					"description": "Convert a quoted-printable string to an 8 bit string"
				},
				"function.quoted-printable-encode": {
					"tokens": [
						"quoted_printable_encode",
						"quotedprintable_encode"
					],
					"id": "function.quoted-printable-encode",
					"name": "quoted_printable_encode",
					"description": "Convert a 8 bit string to a quoted-printable string"
				},
				"function.quotemeta": {
					"tokens": [
						"quotemeta"
					],
					"id": "function.quotemeta",
					"name": "quotemeta",
					"description": "Quote meta characters"
				},
				"function.rtrim": {
					"tokens": [
						"rtrim"
					],
					"id": "function.rtrim",
					"name": "rtrim",
					"description": "Strip whitespace (or other characters) from the end of a string"
				},
				"function.setlocale": {
					"tokens": [
						"setlocale"
					],
					"id": "function.setlocale",
					"name": "setlocale",
					"description": "Set locale information"
				},
				"function.sha1-file": {
					"tokens": [
						"sha1_file",
						"sha1file"
					],
					"id": "function.sha1-file",
					"name": "sha1_file",
					"description": "Calculate the sha1 hash of a file"
				},
				"function.sha1": {
					"tokens": [
						"sha1"
					],
					"id": "function.sha1",
					"name": "sha1",
					"description": "Calculate the sha1 hash of a string"
				},
				"function.similar-text": {
					"tokens": [
						"similar_text",
						"similartext"
					],
					"id": "function.similar-text",
					"name": "similar_text",
					"description": "Calculate the similarity between two strings"
				},
				"function.soundex": {
					"tokens": [
						"soundex"
					],
					"id": "function.soundex",
					"name": "soundex",
					"description": "Calculate the soundex key of a string"
				},
				"function.sprintf": {
					"tokens": [
						"sprintf"
					],
					"id": "function.sprintf",
					"name": "sprintf",
					"description": "Return a formatted string"
				},
				"function.sscanf": {
					"tokens": [
						"sscanf"
					],
					"id": "function.sscanf",
					"name": "sscanf",
					"description": "Parses input from a string according to a format"
				},
				"function.str-getcsv": {
					"tokens": [
						"str_getcsv",
						"strgetcsv"
					],
					"id": "function.str-getcsv",
					"name": "str_getcsv",
					"description": "Parse a CSV string into an array"
				},
				"function.str-ireplace": {
					"tokens": [
						"str_ireplace",
						"strireplace"
					],
					"id": "function.str-ireplace",
					"name": "str_ireplace",
					"description": "Case-insensitive version of str_replace."
				},
				"function.str-pad": {
					"tokens": [
						"str_pad",
						"strpad"
					],
					"id": "function.str-pad",
					"name": "str_pad",
					"description": "Pad a string to a certain length with another string"
				},
				"function.str-repeat": {
					"tokens": [
						"str_repeat",
						"strrepeat"
					],
					"id": "function.str-repeat",
					"name": "str_repeat",
					"description": "Repeat a string"
				},
				"function.str-replace": {
					"tokens": [
						"str_replace",
						"strreplace"
					],
					"id": "function.str-replace",
					"name": "str_replace",
					"description": "Replace all occurrences of the search string with the replacement string"
				},
				"function.str-rot13": {
					"tokens": [
						"str_rot13",
						"strrot13"
					],
					"id": "function.str-rot13",
					"name": "str_rot13",
					"description": "Perform the rot13 transform on a string"
				},
				"function.str-shuffle": {
					"tokens": [
						"str_shuffle",
						"strshuffle"
					],
					"id": "function.str-shuffle",
					"name": "str_shuffle",
					"description": "Randomly shuffles a string"
				},
				"function.str-split": {
					"tokens": [
						"str_split",
						"strsplit"
					],
					"id": "function.str-split",
					"name": "str_split",
					"description": "Convert a string to an array"
				},
				"function.str-word-count": {
					"tokens": [
						"str_word_count",
						"strword_count"
					],
					"id": "function.str-word-count",
					"name": "str_word_count",
					"description": "Return information about words used in a string"
				},
				"function.strcasecmp": {
					"tokens": [
						"strcasecmp"
					],
					"id": "function.strcasecmp",
					"name": "strcasecmp",
					"description": "Binary safe case-insensitive string comparison"
				},
				"function.strchr": {
					"tokens": [
						"strchr"
					],
					"id": "function.strchr",
					"name": "strchr",
					"description": "Alias of strstr"
				},
				"function.strcmp": {
					"tokens": [
						"strcmp"
					],
					"id": "function.strcmp",
					"name": "strcmp",
					"description": "Binary safe string comparison"
				},
				"function.strcoll": {
					"tokens": [
						"strcoll"
					],
					"id": "function.strcoll",
					"name": "strcoll",
					"description": "Locale based string comparison"
				},
				"function.strcspn": {
					"tokens": [
						"strcspn"
					],
					"id": "function.strcspn",
					"name": "strcspn",
					"description": "Find length of initial segment not matching mask"
				},
				"function.strip-tags": {
					"tokens": [
						"strip_tags",
						"striptags"
					],
					"id": "function.strip-tags",
					"name": "strip_tags",
					"description": "Strip HTML and PHP tags from a string"
				},
				"function.stripcslashes": {
					"tokens": [
						"stripcslashes"
					],
					"id": "function.stripcslashes",
					"name": "stripcslashes",
					"description": "Un-quote string quoted with addcslashes"
				},
				"function.stripos": {
					"tokens": [
						"stripos"
					],
					"id": "function.stripos",
					"name": "stripos",
					"description": "Find the position of the first occurrence of a case-insensitive substring in a string"
				},
				"function.stripslashes": {
					"tokens": [
						"stripslashes"
					],
					"id": "function.stripslashes",
					"name": "stripslashes",
					"description": "Un-quotes a quoted string"
				},
				"function.stristr": {
					"tokens": [
						"stristr"
					],
					"id": "function.stristr",
					"name": "stristr",
					"description": "Case-insensitive strstr"
				},
				"function.strlen": {
					"tokens": [
						"strlen"
					],
					"id": "function.strlen",
					"name": "strlen",
					"description": "Get string length"
				},
				"function.strnatcasecmp": {
					"tokens": [
						"strnatcasecmp"
					],
					"id": "function.strnatcasecmp",
					"name": "strnatcasecmp",
					"description": "Case insensitive string comparisons using a &quot;natural order&quot; algorithm"
				},
				"function.strnatcmp": {
					"tokens": [
						"strnatcmp"
					],
					"id": "function.strnatcmp",
					"name": "strnatcmp",
					"description": "String comparisons using a &quot;natural order&quot; algorithm"
				},
				"function.strncasecmp": {
					"tokens": [
						"strncasecmp"
					],
					"id": "function.strncasecmp",
					"name": "strncasecmp",
					"description": "Binary safe case-insensitive string comparison of the first n characters"
				},
				"function.strncmp": {
					"tokens": [
						"strncmp"
					],
					"id": "function.strncmp",
					"name": "strncmp",
					"description": "Binary safe string comparison of the first n characters"
				},
				"function.strpbrk": {
					"tokens": [
						"strpbrk"
					],
					"id": "function.strpbrk",
					"name": "strpbrk",
					"description": "Search a string for any of a set of characters"
				},
				"function.strpos": {
					"tokens": [
						"strpos"
					],
					"id": "function.strpos",
					"name": "strpos",
					"description": "Find the position of the first occurrence of a substring in a string"
				},
				"function.strrchr": {
					"tokens": [
						"strrchr"
					],
					"id": "function.strrchr",
					"name": "strrchr",
					"description": "Find the last occurrence of a character in a string"
				},
				"function.strrev": {
					"tokens": [
						"strrev"
					],
					"id": "function.strrev",
					"name": "strrev",
					"description": "Reverse a string"
				},
				"function.strripos": {
					"tokens": [
						"strripos"
					],
					"id": "function.strripos",
					"name": "strripos",
					"description": "Find the position of the last occurrence of a case-insensitive substring in a string"
				},
				"function.strrpos": {
					"tokens": [
						"strrpos"
					],
					"id": "function.strrpos",
					"name": "strrpos",
					"description": "Find the position of the last occurrence of a substring in a string"
				},
				"function.strspn": {
					"tokens": [
						"strspn"
					],
					"id": "function.strspn",
					"name": "strspn",
					"description": "Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask."
				},
				"function.strstr": {
					"tokens": [
						"strstr"
					],
					"id": "function.strstr",
					"name": "strstr",
					"description": "Find the first occurrence of a string"
				},
				"function.strtok": {
					"tokens": [
						"strtok"
					],
					"id": "function.strtok",
					"name": "strtok",
					"description": "Tokenize string"
				},
				"function.strtolower": {
					"tokens": [
						"strtolower"
					],
					"id": "function.strtolower",
					"name": "strtolower",
					"description": "Make a string lowercase"
				},
				"function.strtoupper": {
					"tokens": [
						"strtoupper"
					],
					"id": "function.strtoupper",
					"name": "strtoupper",
					"description": "Make a string uppercase"
				},
				"function.strtr": {
					"tokens": [
						"strtr"
					],
					"id": "function.strtr",
					"name": "strtr",
					"description": "Translate characters or replace substrings"
				},
				"function.substr-compare": {
					"tokens": [
						"substr_compare",
						"substrcompare"
					],
					"id": "function.substr-compare",
					"name": "substr_compare",
					"description": "Binary safe comparison of two strings from an offset, up to length characters"
				},
				"function.substr-count": {
					"tokens": [
						"substr_count",
						"substrcount"
					],
					"id": "function.substr-count",
					"name": "substr_count",
					"description": "Count the number of substring occurrences"
				},
				"function.substr-replace": {
					"tokens": [
						"substr_replace",
						"substrreplace"
					],
					"id": "function.substr-replace",
					"name": "substr_replace",
					"description": "Replace text within a portion of a string"
				},
				"function.substr": {
					"tokens": [
						"substr"
					],
					"id": "function.substr",
					"name": "substr",
					"description": "Return part of a string"
				},
				"function.trim": {
					"tokens": [
						"trim"
					],
					"id": "function.trim",
					"name": "trim",
					"description": "Strip whitespace (or other characters) from the beginning and end of a string"
				},
				"function.ucfirst": {
					"tokens": [
						"ucfirst"
					],
					"id": "function.ucfirst",
					"name": "ucfirst",
					"description": "Make a string's first character uppercase"
				},
				"function.ucwords": {
					"tokens": [
						"ucwords"
					],
					"id": "function.ucwords",
					"name": "ucwords",
					"description": "Uppercase the first character of each word in a string"
				},
				"function.vfprintf": {
					"tokens": [
						"vfprintf"
					],
					"id": "function.vfprintf",
					"name": "vfprintf",
					"description": "Write a formatted string to a stream"
				},
				"function.vprintf": {
					"tokens": [
						"vprintf"
					],
					"id": "function.vprintf",
					"name": "vprintf",
					"description": "Output a formatted string"
				},
				"function.vsprintf": {
					"tokens": [
						"vsprintf"
					],
					"id": "function.vsprintf",
					"name": "vsprintf",
					"description": "Return a formatted string"
				},
				"function.wordwrap": {
					"tokens": [
						"wordwrap"
					],
					"id": "function.wordwrap",
					"name": "wordwrap",
					"description": "Wraps a string to a given number of characters"
				},
				"function.array-change-key-case": {
					"tokens": [
						"array_change_key_case",
						"arraychange_key_case"
					],
					"id": "function.array-change-key-case",
					"name": "array_change_key_case",
					"description": "Changes the case of all keys in an array"
				},
				"function.array-chunk": {
					"tokens": [
						"array_chunk",
						"arraychunk"
					],
					"id": "function.array-chunk",
					"name": "array_chunk",
					"description": "Split an array into chunks"
				},
				"function.array-column": {
					"tokens": [
						"array_column",
						"arraycolumn"
					],
					"id": "function.array-column",
					"name": "array_column",
					"description": "Return the values from a single column in the input array"
				},
				"function.array-combine": {
					"tokens": [
						"array_combine",
						"arraycombine"
					],
					"id": "function.array-combine",
					"name": "array_combine",
					"description": "Creates an array by using one array for keys and another for its values"
				},
				"function.array-count-values": {
					"tokens": [
						"array_count_values",
						"arraycount_values"
					],
					"id": "function.array-count-values",
					"name": "array_count_values",
					"description": "Counts all the values of an array"
				},
				"function.array-diff-assoc": {
					"tokens": [
						"array_diff_assoc",
						"arraydiff_assoc"
					],
					"id": "function.array-diff-assoc",
					"name": "array_diff_assoc",
					"description": "Computes the difference of arrays with additional index check"
				},
				"function.array-diff-key": {
					"tokens": [
						"array_diff_key",
						"arraydiff_key"
					],
					"id": "function.array-diff-key",
					"name": "array_diff_key",
					"description": "Computes the difference of arrays using keys for comparison"
				},
				"function.array-diff-uassoc": {
					"tokens": [
						"array_diff_uassoc",
						"arraydiff_uassoc"
					],
					"id": "function.array-diff-uassoc",
					"name": "array_diff_uassoc",
					"description": "Computes the difference of arrays with additional index check which is performed by a user supplied callback function"
				},
				"function.array-diff-ukey": {
					"tokens": [
						"array_diff_ukey",
						"arraydiff_ukey"
					],
					"id": "function.array-diff-ukey",
					"name": "array_diff_ukey",
					"description": "Computes the difference of arrays using a callback function on the keys for comparison"
				},
				"function.array-diff": {
					"tokens": [
						"array_diff",
						"arraydiff"
					],
					"id": "function.array-diff",
					"name": "array_diff",
					"description": "Computes the difference of arrays"
				},
				"function.array-fill-keys": {
					"tokens": [
						"array_fill_keys",
						"arrayfill_keys"
					],
					"id": "function.array-fill-keys",
					"name": "array_fill_keys",
					"description": "Fill an array with values, specifying keys"
				},
				"function.array-fill": {
					"tokens": [
						"array_fill",
						"arrayfill"
					],
					"id": "function.array-fill",
					"name": "array_fill",
					"description": "Fill an array with values"
				},
				"function.array-filter": {
					"tokens": [
						"array_filter",
						"arrayfilter"
					],
					"id": "function.array-filter",
					"name": "array_filter",
					"description": "Filters elements of an array using a callback function"
				},
				"function.array-flip": {
					"tokens": [
						"array_flip",
						"arrayflip"
					],
					"id": "function.array-flip",
					"name": "array_flip",
					"description": "Exchanges all keys with their associated values in an array"
				},
				"function.array-intersect-assoc": {
					"tokens": [
						"array_intersect_assoc",
						"arrayintersect_assoc"
					],
					"id": "function.array-intersect-assoc",
					"name": "array_intersect_assoc",
					"description": "Computes the intersection of arrays with additional index check"
				},
				"function.array-intersect-key": {
					"tokens": [
						"array_intersect_key",
						"arrayintersect_key"
					],
					"id": "function.array-intersect-key",
					"name": "array_intersect_key",
					"description": "Computes the intersection of arrays using keys for comparison"
				},
				"function.array-intersect-uassoc": {
					"tokens": [
						"array_intersect_uassoc",
						"arrayintersect_uassoc"
					],
					"id": "function.array-intersect-uassoc",
					"name": "array_intersect_uassoc",
					"description": "Computes the intersection of arrays with additional index check, compares indexes by a callback function"
				},
				"function.array-intersect-ukey": {
					"tokens": [
						"array_intersect_ukey",
						"arrayintersect_ukey"
					],
					"id": "function.array-intersect-ukey",
					"name": "array_intersect_ukey",
					"description": "Computes the intersection of arrays using a callback function on the keys for comparison"
				},
				"function.array-intersect": {
					"tokens": [
						"array_intersect",
						"arrayintersect"
					],
					"id": "function.array-intersect",
					"name": "array_intersect",
					"description": "Computes the intersection of arrays"
				},
				"function.array-key-exists": {
					"tokens": [
						"array_key_exists",
						"arraykey_exists"
					],
					"id": "function.array-key-exists",
					"name": "array_key_exists",
					"description": "Checks if the given key or index exists in the array"
				},
				"function.array-keys": {
					"tokens": [
						"array_keys",
						"arraykeys"
					],
					"id": "function.array-keys",
					"name": "array_keys",
					"description": "Return all the keys or a subset of the keys of an array"
				},
				"function.array-map": {
					"tokens": [
						"array_map",
						"arraymap"
					],
					"id": "function.array-map",
					"name": "array_map",
					"description": "Applies the callback to the elements of the given arrays"
				},
				"function.array-merge-recursive": {
					"tokens": [
						"array_merge_recursive",
						"arraymerge_recursive"
					],
					"id": "function.array-merge-recursive",
					"name": "array_merge_recursive",
					"description": "Merge two or more arrays recursively"
				},
				"function.array-merge": {
					"tokens": [
						"array_merge",
						"arraymerge"
					],
					"id": "function.array-merge",
					"name": "array_merge",
					"description": "Merge one or more arrays"
				},
				"function.array-multisort": {
					"tokens": [
						"array_multisort",
						"arraymultisort"
					],
					"id": "function.array-multisort",
					"name": "array_multisort",
					"description": "Sort multiple or multi-dimensional arrays"
				},
				"function.array-pad": {
					"tokens": [
						"array_pad",
						"arraypad"
					],
					"id": "function.array-pad",
					"name": "array_pad",
					"description": "Pad array to the specified length with a value"
				},
				"function.array-pop": {
					"tokens": [
						"array_pop",
						"arraypop"
					],
					"id": "function.array-pop",
					"name": "array_pop",
					"description": "Pop the element off the end of array"
				},
				"function.array-product": {
					"tokens": [
						"array_product",
						"arrayproduct"
					],
					"id": "function.array-product",
					"name": "array_product",
					"description": "Calculate the product of values in an array"
				},
				"function.array-push": {
					"tokens": [
						"array_push",
						"arraypush"
					],
					"id": "function.array-push",
					"name": "array_push",
					"description": "Push one or more elements onto the end of array"
				},
				"function.array-rand": {
					"tokens": [
						"array_rand",
						"arrayrand"
					],
					"id": "function.array-rand",
					"name": "array_rand",
					"description": "Pick one or more random entries out of an array"
				},
				"function.array-reduce": {
					"tokens": [
						"array_reduce",
						"arrayreduce"
					],
					"id": "function.array-reduce",
					"name": "array_reduce",
					"description": "Iteratively reduce the array to a single value using a callback function"
				},
				"function.array-replace-recursive": {
					"tokens": [
						"array_replace_recursive",
						"arrayreplace_recursive"
					],
					"id": "function.array-replace-recursive",
					"name": "array_replace_recursive",
					"description": "Replaces elements from passed arrays into the first array recursively"
				},
				"function.array-replace": {
					"tokens": [
						"array_replace",
						"arrayreplace"
					],
					"id": "function.array-replace",
					"name": "array_replace",
					"description": "Replaces elements from passed arrays into the first array"
				},
				"function.array-reverse": {
					"tokens": [
						"array_reverse",
						"arrayreverse"
					],
					"id": "function.array-reverse",
					"name": "array_reverse",
					"description": "Return an array with elements in reverse order"
				},
				"function.array-search": {
					"tokens": [
						"array_search",
						"arraysearch"
					],
					"id": "function.array-search",
					"name": "array_search",
					"description": "Searches the array for a given value and returns the corresponding key if successful"
				},
				"function.array-shift": {
					"tokens": [
						"array_shift",
						"arrayshift"
					],
					"id": "function.array-shift",
					"name": "array_shift",
					"description": "Shift an element off the beginning of array"
				},
				"function.array-slice": {
					"tokens": [
						"array_slice",
						"arrayslice"
					],
					"id": "function.array-slice",
					"name": "array_slice",
					"description": "Extract a slice of the array"
				},
				"function.array-splice": {
					"tokens": [
						"array_splice",
						"arraysplice"
					],
					"id": "function.array-splice",
					"name": "array_splice",
					"description": "Remove a portion of the array and replace it with something else"
				},
				"function.array-sum": {
					"tokens": [
						"array_sum",
						"arraysum"
					],
					"id": "function.array-sum",
					"name": "array_sum",
					"description": "Calculate the sum of values in an array"
				},
				"function.array-udiff-assoc": {
					"tokens": [
						"array_udiff_assoc",
						"arrayudiff_assoc"
					],
					"id": "function.array-udiff-assoc",
					"name": "array_udiff_assoc",
					"description": "Computes the difference of arrays with additional index check, compares data by a callback function"
				},
				"function.array-udiff-uassoc": {
					"tokens": [
						"array_udiff_uassoc",
						"arrayudiff_uassoc"
					],
					"id": "function.array-udiff-uassoc",
					"name": "array_udiff_uassoc",
					"description": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function"
				},
				"function.array-udiff": {
					"tokens": [
						"array_udiff",
						"arrayudiff"
					],
					"id": "function.array-udiff",
					"name": "array_udiff",
					"description": "Computes the difference of arrays by using a callback function for data comparison"
				},
				"function.array-uintersect-assoc": {
					"tokens": [
						"array_uintersect_assoc",
						"arrayuintersect_assoc"
					],
					"id": "function.array-uintersect-assoc",
					"name": "array_uintersect_assoc",
					"description": "Computes the intersection of arrays with additional index check, compares data by a callback function"
				},
				"function.array-uintersect-uassoc": {
					"tokens": [
						"array_uintersect_uassoc",
						"arrayuintersect_uassoc"
					],
					"id": "function.array-uintersect-uassoc",
					"name": "array_uintersect_uassoc",
					"description": "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions"
				},
				"function.array-uintersect": {
					"tokens": [
						"array_uintersect",
						"arrayuintersect"
					],
					"id": "function.array-uintersect",
					"name": "array_uintersect",
					"description": "Computes the intersection of arrays, compares data by a callback function"
				},
				"function.array-unique": {
					"tokens": [
						"array_unique",
						"arrayunique"
					],
					"id": "function.array-unique",
					"name": "array_unique",
					"description": "Removes duplicate values from an array"
				},
				"function.array-unshift": {
					"tokens": [
						"array_unshift",
						"arrayunshift"
					],
					"id": "function.array-unshift",
					"name": "array_unshift",
					"description": "Prepend one or more elements to the beginning of an array"
				},
				"function.array-values": {
					"tokens": [
						"array_values",
						"arrayvalues"
					],
					"id": "function.array-values",
					"name": "array_values",
					"description": "Return all the values of an array"
				},
				"function.array-walk-recursive": {
					"tokens": [
						"array_walk_recursive",
						"arraywalk_recursive"
					],
					"id": "function.array-walk-recursive",
					"name": "array_walk_recursive",
					"description": "Apply a user function recursively to every member of an array"
				},
				"function.array-walk": {
					"tokens": [
						"array_walk",
						"arraywalk"
					],
					"id": "function.array-walk",
					"name": "array_walk",
					"description": "Apply a user supplied function to every member of an array"
				},
				"function.array": {
					"tokens": [
						"array"
					],
					"id": "function.array",
					"name": "array",
					"description": "Create an array"
				},
				"function.arsort": {
					"tokens": [
						"arsort"
					],
					"id": "function.arsort",
					"name": "arsort",
					"description": "Sort an array in reverse order and maintain index association"
				},
				"function.asort": {
					"tokens": [
						"asort"
					],
					"id": "function.asort",
					"name": "asort",
					"description": "Sort an array and maintain index association"
				},
				"function.compact": {
					"tokens": [
						"compact"
					],
					"id": "function.compact",
					"name": "compact",
					"description": "Create array containing variables and their values"
				},
				"function.count": {
					"tokens": [
						"count"
					],
					"id": "function.count",
					"name": "count",
					"description": "Count all elements in an array, or something in an object"
				},
				"function.current": {
					"tokens": [
						"current"
					],
					"id": "function.current",
					"name": "current",
					"description": "Return the current element in an array"
				},
				"function.each": {
					"tokens": [
						"each"
					],
					"id": "function.each",
					"name": "each",
					"description": "Return the current key and value pair from an array and advance the array cursor"
				},
				"function.end": {
					"tokens": [
						"end"
					],
					"id": "function.end",
					"name": "end",
					"description": "Set the internal pointer of an array to its last element"
				},
				"function.extract": {
					"tokens": [
						"extract"
					],
					"id": "function.extract",
					"name": "extract",
					"description": "Import variables into the current symbol table from an array"
				},
				"function.in-array": {
					"tokens": [
						"in_array",
						"inarray"
					],
					"id": "function.in-array",
					"name": "in_array",
					"description": "Checks if a value exists in an array"
				},
				"function.key-exists": {
					"tokens": [
						"key_exists",
						"keyexists"
					],
					"id": "function.key-exists",
					"name": "key_exists",
					"description": "Alias of array_key_exists"
				},
				"function.key": {
					"tokens": [
						"key"
					],
					"id": "function.key",
					"name": "key",
					"description": "Fetch a key from an array"
				},
				"function.krsort": {
					"tokens": [
						"krsort"
					],
					"id": "function.krsort",
					"name": "krsort",
					"description": "Sort an array by key in reverse order"
				},
				"function.ksort": {
					"tokens": [
						"ksort"
					],
					"id": "function.ksort",
					"name": "ksort",
					"description": "Sort an array by key"
				},
				"function.list": {
					"tokens": [
						"list"
					],
					"id": "function.list",
					"name": "list",
					"description": "Assign variables as if they were an array"
				},
				"function.natcasesort": {
					"tokens": [
						"natcasesort"
					],
					"id": "function.natcasesort",
					"name": "natcasesort",
					"description": "Sort an array using a case insensitive &quot;natural order&quot; algorithm"
				},
				"function.natsort": {
					"tokens": [
						"natsort"
					],
					"id": "function.natsort",
					"name": "natsort",
					"description": "Sort an array using a &quot;natural order&quot; algorithm"
				},
				"function.next": {
					"tokens": [
						"next"
					],
					"id": "function.next",
					"name": "next",
					"description": "Advance the internal array pointer of an array"
				},
				"function.pos": {
					"tokens": [
						"pos"
					],
					"id": "function.pos",
					"name": "pos",
					"description": "Alias of current"
				},
				"function.prev": {
					"tokens": [
						"prev"
					],
					"id": "function.prev",
					"name": "prev",
					"description": "Rewind the internal array pointer"
				},
				"function.range": {
					"tokens": [
						"range"
					],
					"id": "function.range",
					"name": "range",
					"description": "Create an array containing a range of elements"
				},
				"function.reset": {
					"tokens": [
						"reset"
					],
					"id": "function.reset",
					"name": "reset",
					"description": "Set the internal pointer of an array to its first element"
				},
				"function.rsort": {
					"tokens": [
						"rsort"
					],
					"id": "function.rsort",
					"name": "rsort",
					"description": "Sort an array in reverse order"
				},
				"function.shuffle": {
					"tokens": [
						"shuffle"
					],
					"id": "function.shuffle",
					"name": "shuffle",
					"description": "Shuffle an array"
				},
				"function.sizeof": {
					"tokens": [
						"sizeof"
					],
					"id": "function.sizeof",
					"name": "sizeof",
					"description": "Alias of count"
				},
				"function.sort": {
					"tokens": [
						"sort"
					],
					"id": "function.sort",
					"name": "sort",
					"description": "Sort an array"
				},
				"function.uasort": {
					"tokens": [
						"uasort"
					],
					"id": "function.uasort",
					"name": "uasort",
					"description": "Sort an array with a user-defined comparison function and maintain index association"
				},
				"function.uksort": {
					"tokens": [
						"uksort"
					],
					"id": "function.uksort",
					"name": "uksort",
					"description": "Sort an array by keys using a user-defined comparison function"
				},
				"function.usort": {
					"tokens": [
						"usort"
					],
					"id": "function.usort",
					"name": "usort",
					"description": "Sort an array by values using a user-defined comparison function"
				},
				"function.autoload": {
					"tokens": [
						"__autoload",
						"_autoload"
					],
					"id": "function.autoload",
					"name": "__autoload",
					"description": "Attempt to load undefined class"
				},
				"function.call-user-method-array": {
					"tokens": [
						"call_user_method_array",
						"calluser_method_array"
					],
					"id": "function.call-user-method-array",
					"name": "call_user_method_array",
					"description": "Call a user method given with an array of parameters"
				},
				"function.call-user-method": {
					"tokens": [
						"call_user_method",
						"calluser_method"
					],
					"id": "function.call-user-method",
					"name": "call_user_method",
					"description": "Call a user method on an specific object"
				},
				"function.class-alias": {
					"tokens": [
						"class_alias",
						"classalias"
					],
					"id": "function.class-alias",
					"name": "class_alias",
					"description": "Creates an alias for a class"
				},
				"function.class-exists": {
					"tokens": [
						"class_exists",
						"classexists"
					],
					"id": "function.class-exists",
					"name": "class_exists",
					"description": "Checks if the class has been defined"
				},
				"function.get-called-class": {
					"tokens": [
						"get_called_class",
						"getcalled_class"
					],
					"id": "function.get-called-class",
					"name": "get_called_class",
					"description": "the &quot;Late Static Binding&quot; class name"
				},
				"function.get-class-methods": {
					"tokens": [
						"get_class_methods",
						"getclass_methods"
					],
					"id": "function.get-class-methods",
					"name": "get_class_methods",
					"description": "Gets the class methods' names"
				},
				"function.get-class-vars": {
					"tokens": [
						"get_class_vars",
						"getclass_vars"
					],
					"id": "function.get-class-vars",
					"name": "get_class_vars",
					"description": "Get the default properties of the class"
				},
				"function.get-class": {
					"tokens": [
						"get_class",
						"getclass"
					],
					"id": "function.get-class",
					"name": "get_class",
					"description": "Returns the name of the class of an object"
				},
				"function.get-declared-classes": {
					"tokens": [
						"get_declared_classes",
						"getdeclared_classes"
					],
					"id": "function.get-declared-classes",
					"name": "get_declared_classes",
					"description": "Returns an array with the name of the defined classes"
				},
				"function.get-declared-interfaces": {
					"tokens": [
						"get_declared_interfaces",
						"getdeclared_interfaces"
					],
					"id": "function.get-declared-interfaces",
					"name": "get_declared_interfaces",
					"description": "Returns an array of all declared interfaces"
				},
				"function.get-declared-traits": {
					"tokens": [
						"get_declared_traits",
						"getdeclared_traits"
					],
					"id": "function.get-declared-traits",
					"name": "get_declared_traits",
					"description": "Returns an array of all declared traits"
				},
				"function.get-object-vars": {
					"tokens": [
						"get_object_vars",
						"getobject_vars"
					],
					"id": "function.get-object-vars",
					"name": "get_object_vars",
					"description": "Gets the properties of the given object"
				},
				"function.get-parent-class": {
					"tokens": [
						"get_parent_class",
						"getparent_class"
					],
					"id": "function.get-parent-class",
					"name": "get_parent_class",
					"description": "Retrieves the parent class name for object or class"
				},
				"function.interface-exists": {
					"tokens": [
						"interface_exists",
						"interfaceexists"
					],
					"id": "function.interface-exists",
					"name": "interface_exists",
					"description": "Checks if the interface has been defined"
				},
				"function.is-a": {
					"tokens": [
						"is_a",
						"isa"
					],
					"id": "function.is-a",
					"name": "is_a",
					"description": "Checks if the object is of this class or has this class as one of its parents"
				},
				"function.is-subclass-of": {
					"tokens": [
						"is_subclass_of",
						"issubclass_of"
					],
					"id": "function.is-subclass-of",
					"name": "is_subclass_of",
					"description": "Checks if the object has this class as one of its parents or implements it."
				},
				"function.method-exists": {
					"tokens": [
						"method_exists",
						"methodexists"
					],
					"id": "function.method-exists",
					"name": "method_exists",
					"description": "Checks if the class method exists"
				},
				"function.property-exists": {
					"tokens": [
						"property_exists",
						"propertyexists"
					],
					"id": "function.property-exists",
					"name": "property_exists",
					"description": "Checks if the object or class has a property"
				},
				"function.trait-exists": {
					"tokens": [
						"trait_exists",
						"traitexists"
					],
					"id": "function.trait-exists",
					"name": "trait_exists",
					"description": "Checks if the trait exists"
				},
				"function.classkit-import": {
					"tokens": [
						"classkit_import",
						"classkitimport"
					],
					"id": "function.classkit-import",
					"name": "classkit_import",
					"description": "Import new class method definitions from a file"
				},
				"function.classkit-method-add": {
					"tokens": [
						"classkit_method_add",
						"classkitmethod_add"
					],
					"id": "function.classkit-method-add",
					"name": "classkit_method_add",
					"description": "Dynamically adds a new method to a given class"
				},
				"function.classkit-method-copy": {
					"tokens": [
						"classkit_method_copy",
						"classkitmethod_copy"
					],
					"id": "function.classkit-method-copy",
					"name": "classkit_method_copy",
					"description": "Copies a method from class to another"
				},
				"function.classkit-method-redefine": {
					"tokens": [
						"classkit_method_redefine",
						"classkitmethod_redefine"
					],
					"id": "function.classkit-method-redefine",
					"name": "classkit_method_redefine",
					"description": "Dynamically changes the code of the given method"
				},
				"function.classkit-method-remove": {
					"tokens": [
						"classkit_method_remove",
						"classkitmethod_remove"
					],
					"id": "function.classkit-method-remove",
					"name": "classkit_method_remove",
					"description": "Dynamically removes the given method"
				},
				"function.classkit-method-rename": {
					"tokens": [
						"classkit_method_rename",
						"classkitmethod_rename"
					],
					"id": "function.classkit-method-rename",
					"name": "classkit_method_rename",
					"description": "Dynamically changes the name of the given method"
				},
				"function.ctype-alnum": {
					"tokens": [
						"ctype_alnum",
						"ctypealnum"
					],
					"id": "function.ctype-alnum",
					"name": "ctype_alnum",
					"description": "Check for alphanumeric character(s)"
				},
				"function.ctype-alpha": {
					"tokens": [
						"ctype_alpha",
						"ctypealpha"
					],
					"id": "function.ctype-alpha",
					"name": "ctype_alpha",
					"description": "Check for alphabetic character(s)"
				},
				"function.ctype-cntrl": {
					"tokens": [
						"ctype_cntrl",
						"ctypecntrl"
					],
					"id": "function.ctype-cntrl",
					"name": "ctype_cntrl",
					"description": "Check for control character(s)"
				},
				"function.ctype-digit": {
					"tokens": [
						"ctype_digit",
						"ctypedigit"
					],
					"id": "function.ctype-digit",
					"name": "ctype_digit",
					"description": "Check for numeric character(s)"
				},
				"function.ctype-graph": {
					"tokens": [
						"ctype_graph",
						"ctypegraph"
					],
					"id": "function.ctype-graph",
					"name": "ctype_graph",
					"description": "Check for any printable character(s) except space"
				},
				"function.ctype-lower": {
					"tokens": [
						"ctype_lower",
						"ctypelower"
					],
					"id": "function.ctype-lower",
					"name": "ctype_lower",
					"description": "Check for lowercase character(s)"
				},
				"function.ctype-print": {
					"tokens": [
						"ctype_print",
						"ctypeprint"
					],
					"id": "function.ctype-print",
					"name": "ctype_print",
					"description": "Check for printable character(s)"
				},
				"function.ctype-punct": {
					"tokens": [
						"ctype_punct",
						"ctypepunct"
					],
					"id": "function.ctype-punct",
					"name": "ctype_punct",
					"description": "Check for any printable character which is not whitespace or an\n   alphanumeric character"
				},
				"function.ctype-space": {
					"tokens": [
						"ctype_space",
						"ctypespace"
					],
					"id": "function.ctype-space",
					"name": "ctype_space",
					"description": "Check for whitespace character(s)"
				},
				"function.ctype-upper": {
					"tokens": [
						"ctype_upper",
						"ctypeupper"
					],
					"id": "function.ctype-upper",
					"name": "ctype_upper",
					"description": "Check for uppercase character(s)"
				},
				"function.ctype-xdigit": {
					"tokens": [
						"ctype_xdigit",
						"ctypexdigit"
					],
					"id": "function.ctype-xdigit",
					"name": "ctype_xdigit",
					"description": "Check for character(s) representing a hexadecimal digit"
				},
				"function.filter-has-var": {
					"tokens": [
						"filter_has_var",
						"filterhas_var"
					],
					"id": "function.filter-has-var",
					"name": "filter_has_var",
					"description": "Checks if variable of specified type exists"
				},
				"function.filter-id": {
					"tokens": [
						"filter_id",
						"filterid"
					],
					"id": "function.filter-id",
					"name": "filter_id",
					"description": "Returns the filter ID belonging to a named filter"
				},
				"function.filter-input-array": {
					"tokens": [
						"filter_input_array",
						"filterinput_array"
					],
					"id": "function.filter-input-array",
					"name": "filter_input_array",
					"description": "Gets external variables and optionally filters them"
				},
				"function.filter-input": {
					"tokens": [
						"filter_input",
						"filterinput"
					],
					"id": "function.filter-input",
					"name": "filter_input",
					"description": "Gets a specific external variable by name and optionally filters it"
				},
				"function.filter-list": {
					"tokens": [
						"filter_list",
						"filterlist"
					],
					"id": "function.filter-list",
					"name": "filter_list",
					"description": "Returns a list of all supported filters"
				},
				"function.filter-var-array": {
					"tokens": [
						"filter_var_array",
						"filtervar_array"
					],
					"id": "function.filter-var-array",
					"name": "filter_var_array",
					"description": "Gets multiple variables and optionally filters them"
				},
				"function.filter-var": {
					"tokens": [
						"filter_var",
						"filtervar"
					],
					"id": "function.filter-var",
					"name": "filter_var",
					"description": "Filters a variable with a specified filter"
				},
				"function.call-user-func-array": {
					"tokens": [
						"call_user_func_array",
						"calluser_func_array"
					],
					"id": "function.call-user-func-array",
					"name": "call_user_func_array",
					"description": "Call a callback with an array of parameters"
				},
				"function.call-user-func": {
					"tokens": [
						"call_user_func",
						"calluser_func"
					],
					"id": "function.call-user-func",
					"name": "call_user_func",
					"description": "Call the callback given by the first parameter"
				},
				"function.create-function": {
					"tokens": [
						"create_function",
						"createfunction"
					],
					"id": "function.create-function",
					"name": "create_function",
					"description": "Create an anonymous (lambda-style) function"
				},
				"function.forward-static-call-array": {
					"tokens": [
						"forward_static_call_array",
						"forwardstatic_call_array"
					],
					"id": "function.forward-static-call-array",
					"name": "forward_static_call_array",
					"description": "Call a static method and pass the arguments as array"
				},
				"function.forward-static-call": {
					"tokens": [
						"forward_static_call",
						"forwardstatic_call"
					],
					"id": "function.forward-static-call",
					"name": "forward_static_call",
					"description": "Call a static method"
				},
				"function.func-get-arg": {
					"tokens": [
						"func_get_arg",
						"funcget_arg"
					],
					"id": "function.func-get-arg",
					"name": "func_get_arg",
					"description": "Return an item from the argument list"
				},
				"function.func-get-args": {
					"tokens": [
						"func_get_args",
						"funcget_args"
					],
					"id": "function.func-get-args",
					"name": "func_get_args",
					"description": "Returns an array comprising a function's argument list"
				},
				"function.func-num-args": {
					"tokens": [
						"func_num_args",
						"funcnum_args"
					],
					"id": "function.func-num-args",
					"name": "func_num_args",
					"description": "Returns the number of arguments passed to the function"
				},
				"function.function-exists": {
					"tokens": [
						"function_exists",
						"functionexists"
					],
					"id": "function.function-exists",
					"name": "function_exists",
					"description": "Return TRUE if the given function has been defined"
				},
				"function.get-defined-functions": {
					"tokens": [
						"get_defined_functions",
						"getdefined_functions"
					],
					"id": "function.get-defined-functions",
					"name": "get_defined_functions",
					"description": "Returns an array of all defined functions"
				},
				"function.register-shutdown-function": {
					"tokens": [
						"register_shutdown_function",
						"registershutdown_function"
					],
					"id": "function.register-shutdown-function",
					"name": "register_shutdown_function",
					"description": "Register a function for execution on shutdown"
				},
				"function.register-tick-function": {
					"tokens": [
						"register_tick_function",
						"registertick_function"
					],
					"id": "function.register-tick-function",
					"name": "register_tick_function",
					"description": "Register a function for execution on each tick"
				},
				"function.unregister-tick-function": {
					"tokens": [
						"unregister_tick_function",
						"unregistertick_function"
					],
					"id": "function.unregister-tick-function",
					"name": "unregister_tick_function",
					"description": "De-register a function for execution on each tick"
				},
				"quickhashintset.add": {
					"tokens": [
						"QuickHashIntSet::add",
						"add",
						"::add"
					],
					"id": "quickhashintset.add",
					"name": "QuickHashIntSet::add",
					"description": "This method adds a new entry to the set"
				},
				"quickhashintset.construct": {
					"tokens": [
						"QuickHashIntSet::__construct",
						"QuickHashIntSet::_construct",
						"__construct",
						"::__construct"
					],
					"id": "quickhashintset.construct",
					"name": "QuickHashIntSet::__construct",
					"description": "Creates a new QuickHashIntSet object"
				},
				"quickhashintset.delete": {
					"tokens": [
						"QuickHashIntSet::delete",
						"delete",
						"::delete"
					],
					"id": "quickhashintset.delete",
					"name": "QuickHashIntSet::delete",
					"description": "This method deletes an entry from the set"
				},
				"quickhashintset.exists": {
					"tokens": [
						"QuickHashIntSet::exists",
						"exists",
						"::exists"
					],
					"id": "quickhashintset.exists",
					"name": "QuickHashIntSet::exists",
					"description": "This method checks whether a key is part of the set"
				},
				"quickhashintset.getsize": {
					"tokens": [
						"QuickHashIntSet::getSize",
						"getSize",
						"::getSize"
					],
					"id": "quickhashintset.getsize",
					"name": "QuickHashIntSet::getSize",
					"description": "Returns the number of elements in the set"
				},
				"quickhashintset.loadfromfile": {
					"tokens": [
						"QuickHashIntSet::loadFromFile",
						"loadFromFile",
						"::loadFromFile"
					],
					"id": "quickhashintset.loadfromfile",
					"name": "QuickHashIntSet::loadFromFile",
					"description": "This factory method creates a set from a file"
				},
				"quickhashintset.loadfromstring": {
					"tokens": [
						"QuickHashIntSet::loadFromString",
						"loadFromString",
						"::loadFromString"
					],
					"id": "quickhashintset.loadfromstring",
					"name": "QuickHashIntSet::loadFromString",
					"description": "This factory method creates a set from a string"
				},
				"quickhashintset.savetofile": {
					"tokens": [
						"QuickHashIntSet::saveToFile",
						"saveToFile",
						"::saveToFile"
					],
					"id": "quickhashintset.savetofile",
					"name": "QuickHashIntSet::saveToFile",
					"description": "This method stores an in-memory set to disk"
				},
				"quickhashintset.savetostring": {
					"tokens": [
						"QuickHashIntSet::saveToString",
						"saveToString",
						"::saveToString"
					],
					"id": "quickhashintset.savetostring",
					"name": "QuickHashIntSet::saveToString",
					"description": "This method returns a serialized version of the set"
				},
				"quickhashinthash.add": {
					"tokens": [
						"QuickHashIntHash::add",
						"add",
						"::add"
					],
					"id": "quickhashinthash.add",
					"name": "QuickHashIntHash::add",
					"description": "This method adds a new entry to the hash"
				},
				"quickhashinthash.construct": {
					"tokens": [
						"QuickHashIntHash::__construct",
						"QuickHashIntHash::_construct",
						"__construct",
						"::__construct"
					],
					"id": "quickhashinthash.construct",
					"name": "QuickHashIntHash::__construct",
					"description": "Creates a new QuickHashIntHash object"
				},
				"quickhashinthash.delete": {
					"tokens": [
						"QuickHashIntHash::delete",
						"delete",
						"::delete"
					],
					"id": "quickhashinthash.delete",
					"name": "QuickHashIntHash::delete",
					"description": "This method deletes am entry from the hash"
				},
				"quickhashinthash.exists": {
					"tokens": [
						"QuickHashIntHash::exists",
						"exists",
						"::exists"
					],
					"id": "quickhashinthash.exists",
					"name": "QuickHashIntHash::exists",
					"description": "This method checks whether a key is part of the hash"
				},
				"quickhashinthash.get": {
					"tokens": [
						"QuickHashIntHash::get",
						"get",
						"::get"
					],
					"id": "quickhashinthash.get",
					"name": "QuickHashIntHash::get",
					"description": "This method retrieves a value from the hash by its key"
				},
				"quickhashinthash.getsize": {
					"tokens": [
						"QuickHashIntHash::getSize",
						"getSize",
						"::getSize"
					],
					"id": "quickhashinthash.getsize",
					"name": "QuickHashIntHash::getSize",
					"description": "Returns the number of elements in the hash"
				},
				"quickhashinthash.loadfromfile": {
					"tokens": [
						"QuickHashIntHash::loadFromFile",
						"loadFromFile",
						"::loadFromFile"
					],
					"id": "quickhashinthash.loadfromfile",
					"name": "QuickHashIntHash::loadFromFile",
					"description": "This factory method creates a hash from a file"
				},
				"quickhashinthash.loadfromstring": {
					"tokens": [
						"QuickHashIntHash::loadFromString",
						"loadFromString",
						"::loadFromString"
					],
					"id": "quickhashinthash.loadfromstring",
					"name": "QuickHashIntHash::loadFromString",
					"description": "This factory method creates a hash from a string"
				},
				"quickhashinthash.savetofile": {
					"tokens": [
						"QuickHashIntHash::saveToFile",
						"saveToFile",
						"::saveToFile"
					],
					"id": "quickhashinthash.savetofile",
					"name": "QuickHashIntHash::saveToFile",
					"description": "This method stores an in-memory hash to disk"
				},
				"quickhashinthash.savetostring": {
					"tokens": [
						"QuickHashIntHash::saveToString",
						"saveToString",
						"::saveToString"
					],
					"id": "quickhashinthash.savetostring",
					"name": "QuickHashIntHash::saveToString",
					"description": "This method returns a serialized version of the hash"
				},
				"quickhashinthash.set": {
					"tokens": [
						"QuickHashIntHash::set",
						"set",
						"::set"
					],
					"id": "quickhashinthash.set",
					"name": "QuickHashIntHash::set",
					"description": "This method updates an entry in the hash with a new value, or\n  adds a new one if the entry doesn't exist"
				},
				"quickhashinthash.update": {
					"tokens": [
						"QuickHashIntHash::update",
						"update",
						"::update"
					],
					"id": "quickhashinthash.update",
					"name": "QuickHashIntHash::update",
					"description": "This method updates an entry in the hash with a new value"
				},
				"quickhashstringinthash.add": {
					"tokens": [
						"QuickHashStringIntHash::add",
						"add",
						"::add"
					],
					"id": "quickhashstringinthash.add",
					"name": "QuickHashStringIntHash::add",
					"description": "This method adds a new entry to the hash"
				},
				"quickhashstringinthash.construct": {
					"tokens": [
						"QuickHashStringIntHash::__construct",
						"QuickHashStringIntHash::_construct",
						"__construct",
						"::__construct"
					],
					"id": "quickhashstringinthash.construct",
					"name": "QuickHashStringIntHash::__construct",
					"description": "Creates a new QuickHashStringIntHash object"
				},
				"quickhashstringinthash.delete": {
					"tokens": [
						"QuickHashStringIntHash::delete",
						"delete",
						"::delete"
					],
					"id": "quickhashstringinthash.delete",
					"name": "QuickHashStringIntHash::delete",
					"description": "This method deletes am entry from the hash"
				},
				"quickhashstringinthash.exists": {
					"tokens": [
						"QuickHashStringIntHash::exists",
						"exists",
						"::exists"
					],
					"id": "quickhashstringinthash.exists",
					"name": "QuickHashStringIntHash::exists",
					"description": "This method checks whether a key is part of the hash"
				},
				"quickhashstringinthash.get": {
					"tokens": [
						"QuickHashStringIntHash::get",
						"get",
						"::get"
					],
					"id": "quickhashstringinthash.get",
					"name": "QuickHashStringIntHash::get",
					"description": "This method retrieves a value from the hash by its key"
				},
				"quickhashstringinthash.getsize": {
					"tokens": [
						"QuickHashStringIntHash::getSize",
						"getSize",
						"::getSize"
					],
					"id": "quickhashstringinthash.getsize",
					"name": "QuickHashStringIntHash::getSize",
					"description": "Returns the number of elements in the hash"
				},
				"quickhashstringinthash.loadfromfile": {
					"tokens": [
						"QuickHashStringIntHash::loadFromFile",
						"loadFromFile",
						"::loadFromFile"
					],
					"id": "quickhashstringinthash.loadfromfile",
					"name": "QuickHashStringIntHash::loadFromFile",
					"description": "This factory method creates a hash from a file"
				},
				"quickhashstringinthash.loadfromstring": {
					"tokens": [
						"QuickHashStringIntHash::loadFromString",
						"loadFromString",
						"::loadFromString"
					],
					"id": "quickhashstringinthash.loadfromstring",
					"name": "QuickHashStringIntHash::loadFromString",
					"description": "This factory method creates a hash from a string"
				},
				"quickhashstringinthash.savetofile": {
					"tokens": [
						"QuickHashStringIntHash::saveToFile",
						"saveToFile",
						"::saveToFile"
					],
					"id": "quickhashstringinthash.savetofile",
					"name": "QuickHashStringIntHash::saveToFile",
					"description": "This method stores an in-memory hash to disk"
				},
				"quickhashstringinthash.savetostring": {
					"tokens": [
						"QuickHashStringIntHash::saveToString",
						"saveToString",
						"::saveToString"
					],
					"id": "quickhashstringinthash.savetostring",
					"name": "QuickHashStringIntHash::saveToString",
					"description": "This method returns a serialized version of the hash"
				},
				"quickhashstringinthash.set": {
					"tokens": [
						"QuickHashStringIntHash::set",
						"set",
						"::set"
					],
					"id": "quickhashstringinthash.set",
					"name": "QuickHashStringIntHash::set",
					"description": "This method updates an entry in the hash with a new value, or\n  adds a new one if the entry doesn't exist"
				},
				"quickhashstringinthash.update": {
					"tokens": [
						"QuickHashStringIntHash::update",
						"update",
						"::update"
					],
					"id": "quickhashstringinthash.update",
					"name": "QuickHashStringIntHash::update",
					"description": "This method updates an entry in the hash with a new value"
				},
				"quickhashintstringhash.add": {
					"tokens": [
						"QuickHashIntStringHash::add",
						"add",
						"::add"
					],
					"id": "quickhashintstringhash.add",
					"name": "QuickHashIntStringHash::add",
					"description": "This method adds a new entry to the hash"
				},
				"quickhashintstringhash.construct": {
					"tokens": [
						"QuickHashIntStringHash::__construct",
						"QuickHashIntStringHash::_construct",
						"__construct",
						"::__construct"
					],
					"id": "quickhashintstringhash.construct",
					"name": "QuickHashIntStringHash::__construct",
					"description": "Creates a new QuickHashIntStringHash object"
				},
				"quickhashintstringhash.delete": {
					"tokens": [
						"QuickHashIntStringHash::delete",
						"delete",
						"::delete"
					],
					"id": "quickhashintstringhash.delete",
					"name": "QuickHashIntStringHash::delete",
					"description": "This method deletes am entry from the hash"
				},
				"quickhashintstringhash.exists": {
					"tokens": [
						"QuickHashIntStringHash::exists",
						"exists",
						"::exists"
					],
					"id": "quickhashintstringhash.exists",
					"name": "QuickHashIntStringHash::exists",
					"description": "This method checks whether a key is part of the hash"
				},
				"quickhashintstringhash.get": {
					"tokens": [
						"QuickHashIntStringHash::get",
						"get",
						"::get"
					],
					"id": "quickhashintstringhash.get",
					"name": "QuickHashIntStringHash::get",
					"description": "This method retrieves a value from the hash by its key"
				},
				"quickhashintstringhash.getsize": {
					"tokens": [
						"QuickHashIntStringHash::getSize",
						"getSize",
						"::getSize"
					],
					"id": "quickhashintstringhash.getsize",
					"name": "QuickHashIntStringHash::getSize",
					"description": "Returns the number of elements in the hash"
				},
				"quickhashintstringhash.loadfromfile": {
					"tokens": [
						"QuickHashIntStringHash::loadFromFile",
						"loadFromFile",
						"::loadFromFile"
					],
					"id": "quickhashintstringhash.loadfromfile",
					"name": "QuickHashIntStringHash::loadFromFile",
					"description": "This factory method creates a hash from a file"
				},
				"quickhashintstringhash.loadfromstring": {
					"tokens": [
						"QuickHashIntStringHash::loadFromString",
						"loadFromString",
						"::loadFromString"
					],
					"id": "quickhashintstringhash.loadfromstring",
					"name": "QuickHashIntStringHash::loadFromString",
					"description": "This factory method creates a hash from a string"
				},
				"quickhashintstringhash.savetofile": {
					"tokens": [
						"QuickHashIntStringHash::saveToFile",
						"saveToFile",
						"::saveToFile"
					],
					"id": "quickhashintstringhash.savetofile",
					"name": "QuickHashIntStringHash::saveToFile",
					"description": "This method stores an in-memory hash to disk"
				},
				"quickhashintstringhash.savetostring": {
					"tokens": [
						"QuickHashIntStringHash::saveToString",
						"saveToString",
						"::saveToString"
					],
					"id": "quickhashintstringhash.savetostring",
					"name": "QuickHashIntStringHash::saveToString",
					"description": "This method returns a serialized version of the hash"
				},
				"quickhashintstringhash.set": {
					"tokens": [
						"QuickHashIntStringHash::set",
						"set",
						"::set"
					],
					"id": "quickhashintstringhash.set",
					"name": "QuickHashIntStringHash::set",
					"description": "This method updates an entry in the hash with a new value, or\n  adds a new one if the entry doesn't exist"
				},
				"quickhashintstringhash.update": {
					"tokens": [
						"QuickHashIntStringHash::update",
						"update",
						"::update"
					],
					"id": "quickhashintstringhash.update",
					"name": "QuickHashIntStringHash::update",
					"description": "This method updates an entry in the hash with a new value"
				},
				"reflection.export": {
					"tokens": [
						"Reflection::export",
						"export",
						"::export"
					],
					"id": "reflection.export",
					"name": "Reflection::export",
					"description": "Exports"
				},
				"reflection.getmodifiernames": {
					"tokens": [
						"Reflection::getModifierNames",
						"getModifierNames",
						"::getModifierNames"
					],
					"id": "reflection.getmodifiernames",
					"name": "Reflection::getModifierNames",
					"description": "Gets modifier names"
				},
				"reflectionclass.construct": {
					"tokens": [
						"ReflectionClass::__construct",
						"ReflectionClass::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionclass.construct",
					"name": "ReflectionClass::__construct",
					"description": "Constructs a ReflectionClass"
				},
				"reflectionclass.export": {
					"tokens": [
						"ReflectionClass::export",
						"export",
						"::export"
					],
					"id": "reflectionclass.export",
					"name": "ReflectionClass::export",
					"description": "Exports a class"
				},
				"reflectionclass.getconstant": {
					"tokens": [
						"ReflectionClass::getConstant",
						"getConstant",
						"::getConstant"
					],
					"id": "reflectionclass.getconstant",
					"name": "ReflectionClass::getConstant",
					"description": "Gets defined constant"
				},
				"reflectionclass.getconstants": {
					"tokens": [
						"ReflectionClass::getConstants",
						"getConstants",
						"::getConstants"
					],
					"id": "reflectionclass.getconstants",
					"name": "ReflectionClass::getConstants",
					"description": "Gets constants"
				},
				"reflectionclass.getconstructor": {
					"tokens": [
						"ReflectionClass::getConstructor",
						"getConstructor",
						"::getConstructor"
					],
					"id": "reflectionclass.getconstructor",
					"name": "ReflectionClass::getConstructor",
					"description": "Gets the constructor of the class"
				},
				"reflectionclass.getdefaultproperties": {
					"tokens": [
						"ReflectionClass::getDefaultProperties",
						"getDefaultProperties",
						"::getDefaultProperties"
					],
					"id": "reflectionclass.getdefaultproperties",
					"name": "ReflectionClass::getDefaultProperties",
					"description": "Gets default properties"
				},
				"reflectionclass.getdoccomment": {
					"tokens": [
						"ReflectionClass::getDocComment",
						"getDocComment",
						"::getDocComment"
					],
					"id": "reflectionclass.getdoccomment",
					"name": "ReflectionClass::getDocComment",
					"description": "Gets doc comments"
				},
				"reflectionclass.getendline": {
					"tokens": [
						"ReflectionClass::getEndLine",
						"getEndLine",
						"::getEndLine"
					],
					"id": "reflectionclass.getendline",
					"name": "ReflectionClass::getEndLine",
					"description": "Gets end line"
				},
				"reflectionclass.getextension": {
					"tokens": [
						"ReflectionClass::getExtension",
						"getExtension",
						"::getExtension"
					],
					"id": "reflectionclass.getextension",
					"name": "ReflectionClass::getExtension",
					"description": "Gets a ReflectionExtension object for the extension which defined the class"
				},
				"reflectionclass.getextensionname": {
					"tokens": [
						"ReflectionClass::getExtensionName",
						"getExtensionName",
						"::getExtensionName"
					],
					"id": "reflectionclass.getextensionname",
					"name": "ReflectionClass::getExtensionName",
					"description": "Gets the name of the extension which defined the class"
				},
				"reflectionclass.getfilename": {
					"tokens": [
						"ReflectionClass::getFileName",
						"getFileName",
						"::getFileName"
					],
					"id": "reflectionclass.getfilename",
					"name": "ReflectionClass::getFileName",
					"description": "Gets the filename of the file in which the class has been defined"
				},
				"reflectionclass.getinterfacenames": {
					"tokens": [
						"ReflectionClass::getInterfaceNames",
						"getInterfaceNames",
						"::getInterfaceNames"
					],
					"id": "reflectionclass.getinterfacenames",
					"name": "ReflectionClass::getInterfaceNames",
					"description": "Gets the interface names"
				},
				"reflectionclass.getinterfaces": {
					"tokens": [
						"ReflectionClass::getInterfaces",
						"getInterfaces",
						"::getInterfaces"
					],
					"id": "reflectionclass.getinterfaces",
					"name": "ReflectionClass::getInterfaces",
					"description": "Gets the interfaces"
				},
				"reflectionclass.getmethod": {
					"tokens": [
						"ReflectionClass::getMethod",
						"getMethod",
						"::getMethod"
					],
					"id": "reflectionclass.getmethod",
					"name": "ReflectionClass::getMethod",
					"description": "Gets a ReflectionMethod for a class method."
				},
				"reflectionclass.getmethods": {
					"tokens": [
						"ReflectionClass::getMethods",
						"getMethods",
						"::getMethods"
					],
					"id": "reflectionclass.getmethods",
					"name": "ReflectionClass::getMethods",
					"description": "Gets an array of methods"
				},
				"reflectionclass.getmodifiers": {
					"tokens": [
						"ReflectionClass::getModifiers",
						"getModifiers",
						"::getModifiers"
					],
					"id": "reflectionclass.getmodifiers",
					"name": "ReflectionClass::getModifiers",
					"description": "Gets modifiers"
				},
				"reflectionclass.getname": {
					"tokens": [
						"ReflectionClass::getName",
						"getName",
						"::getName"
					],
					"id": "reflectionclass.getname",
					"name": "ReflectionClass::getName",
					"description": "Gets class name"
				},
				"reflectionclass.getnamespacename": {
					"tokens": [
						"ReflectionClass::getNamespaceName",
						"getNamespaceName",
						"::getNamespaceName"
					],
					"id": "reflectionclass.getnamespacename",
					"name": "ReflectionClass::getNamespaceName",
					"description": "Gets namespace name"
				},
				"reflectionclass.getparentclass": {
					"tokens": [
						"ReflectionClass::getParentClass",
						"getParentClass",
						"::getParentClass"
					],
					"id": "reflectionclass.getparentclass",
					"name": "ReflectionClass::getParentClass",
					"description": "Gets parent class"
				},
				"reflectionclass.getproperties": {
					"tokens": [
						"ReflectionClass::getProperties",
						"getProperties",
						"::getProperties"
					],
					"id": "reflectionclass.getproperties",
					"name": "ReflectionClass::getProperties",
					"description": "Gets properties"
				},
				"reflectionclass.getproperty": {
					"tokens": [
						"ReflectionClass::getProperty",
						"getProperty",
						"::getProperty"
					],
					"id": "reflectionclass.getproperty",
					"name": "ReflectionClass::getProperty",
					"description": "Gets a ReflectionProperty for a class's property"
				},
				"reflectionclass.getshortname": {
					"tokens": [
						"ReflectionClass::getShortName",
						"getShortName",
						"::getShortName"
					],
					"id": "reflectionclass.getshortname",
					"name": "ReflectionClass::getShortName",
					"description": "Gets short name"
				},
				"reflectionclass.getstartline": {
					"tokens": [
						"ReflectionClass::getStartLine",
						"getStartLine",
						"::getStartLine"
					],
					"id": "reflectionclass.getstartline",
					"name": "ReflectionClass::getStartLine",
					"description": "Gets starting line number"
				},
				"reflectionclass.getstaticproperties": {
					"tokens": [
						"ReflectionClass::getStaticProperties",
						"getStaticProperties",
						"::getStaticProperties"
					],
					"id": "reflectionclass.getstaticproperties",
					"name": "ReflectionClass::getStaticProperties",
					"description": "Gets static properties"
				},
				"reflectionclass.getstaticpropertyvalue": {
					"tokens": [
						"ReflectionClass::getStaticPropertyValue",
						"getStaticPropertyValue",
						"::getStaticPropertyValue"
					],
					"id": "reflectionclass.getstaticpropertyvalue",
					"name": "ReflectionClass::getStaticPropertyValue",
					"description": "Gets static property value"
				},
				"reflectionclass.gettraitaliases": {
					"tokens": [
						"ReflectionClass::getTraitAliases",
						"getTraitAliases",
						"::getTraitAliases"
					],
					"id": "reflectionclass.gettraitaliases",
					"name": "ReflectionClass::getTraitAliases",
					"description": "Returns an array of trait aliases"
				},
				"reflectionclass.gettraitnames": {
					"tokens": [
						"ReflectionClass::getTraitNames",
						"getTraitNames",
						"::getTraitNames"
					],
					"id": "reflectionclass.gettraitnames",
					"name": "ReflectionClass::getTraitNames",
					"description": "Returns an array of names of traits used by this class"
				},
				"reflectionclass.gettraits": {
					"tokens": [
						"ReflectionClass::getTraits",
						"getTraits",
						"::getTraits"
					],
					"id": "reflectionclass.gettraits",
					"name": "ReflectionClass::getTraits",
					"description": "Returns an array of traits used by this class"
				},
				"reflectionclass.hasconstant": {
					"tokens": [
						"ReflectionClass::hasConstant",
						"hasConstant",
						"::hasConstant"
					],
					"id": "reflectionclass.hasconstant",
					"name": "ReflectionClass::hasConstant",
					"description": "Checks if constant is defined"
				},
				"reflectionclass.hasmethod": {
					"tokens": [
						"ReflectionClass::hasMethod",
						"hasMethod",
						"::hasMethod"
					],
					"id": "reflectionclass.hasmethod",
					"name": "ReflectionClass::hasMethod",
					"description": "Checks if method is defined"
				},
				"reflectionclass.hasproperty": {
					"tokens": [
						"ReflectionClass::hasProperty",
						"hasProperty",
						"::hasProperty"
					],
					"id": "reflectionclass.hasproperty",
					"name": "ReflectionClass::hasProperty",
					"description": "Checks if property is defined"
				},
				"reflectionclass.implementsinterface": {
					"tokens": [
						"ReflectionClass::implementsInterface",
						"implementsInterface",
						"::implementsInterface"
					],
					"id": "reflectionclass.implementsinterface",
					"name": "ReflectionClass::implementsInterface",
					"description": "Implements interface"
				},
				"reflectionclass.innamespace": {
					"tokens": [
						"ReflectionClass::inNamespace",
						"inNamespace",
						"::inNamespace"
					],
					"id": "reflectionclass.innamespace",
					"name": "ReflectionClass::inNamespace",
					"description": "Checks if in namespace"
				},
				"reflectionclass.isabstract": {
					"tokens": [
						"ReflectionClass::isAbstract",
						"isAbstract",
						"::isAbstract"
					],
					"id": "reflectionclass.isabstract",
					"name": "ReflectionClass::isAbstract",
					"description": "Checks if class is abstract"
				},
				"reflectionclass.isanonymous": {
					"tokens": [
						"ReflectionClass::isAnonymous",
						"isAnonymous",
						"::isAnonymous"
					],
					"id": "reflectionclass.isanonymous",
					"name": "ReflectionClass::isAnonymous",
					"description": "Checks if class is anonymous"
				},
				"reflectionclass.iscloneable": {
					"tokens": [
						"ReflectionClass::isCloneable",
						"isCloneable",
						"::isCloneable"
					],
					"id": "reflectionclass.iscloneable",
					"name": "ReflectionClass::isCloneable",
					"description": "Returns whether this class is cloneable"
				},
				"reflectionclass.isfinal": {
					"tokens": [
						"ReflectionClass::isFinal",
						"isFinal",
						"::isFinal"
					],
					"id": "reflectionclass.isfinal",
					"name": "ReflectionClass::isFinal",
					"description": "Checks if class is final"
				},
				"reflectionclass.isinstance": {
					"tokens": [
						"ReflectionClass::isInstance",
						"isInstance",
						"::isInstance"
					],
					"id": "reflectionclass.isinstance",
					"name": "ReflectionClass::isInstance",
					"description": "Checks class for instance"
				},
				"reflectionclass.isinstantiable": {
					"tokens": [
						"ReflectionClass::isInstantiable",
						"isInstantiable",
						"::isInstantiable"
					],
					"id": "reflectionclass.isinstantiable",
					"name": "ReflectionClass::isInstantiable",
					"description": "Checks if the class is instantiable"
				},
				"reflectionclass.isinterface": {
					"tokens": [
						"ReflectionClass::isInterface",
						"isInterface",
						"::isInterface"
					],
					"id": "reflectionclass.isinterface",
					"name": "ReflectionClass::isInterface",
					"description": "Checks if the class is an interface"
				},
				"reflectionclass.isinternal": {
					"tokens": [
						"ReflectionClass::isInternal",
						"isInternal",
						"::isInternal"
					],
					"id": "reflectionclass.isinternal",
					"name": "ReflectionClass::isInternal",
					"description": "Checks if class is defined internally by an extension, or the core"
				},
				"reflectionclass.isiterateable": {
					"tokens": [
						"ReflectionClass::isIterateable",
						"isIterateable",
						"::isIterateable"
					],
					"id": "reflectionclass.isiterateable",
					"name": "ReflectionClass::isIterateable",
					"description": "Checks if iterateable"
				},
				"reflectionclass.issubclassof": {
					"tokens": [
						"ReflectionClass::isSubclassOf",
						"isSubclassOf",
						"::isSubclassOf"
					],
					"id": "reflectionclass.issubclassof",
					"name": "ReflectionClass::isSubclassOf",
					"description": "Checks if a subclass"
				},
				"reflectionclass.istrait": {
					"tokens": [
						"ReflectionClass::isTrait",
						"isTrait",
						"::isTrait"
					],
					"id": "reflectionclass.istrait",
					"name": "ReflectionClass::isTrait",
					"description": "Returns whether this is a trait"
				},
				"reflectionclass.isuserdefined": {
					"tokens": [
						"ReflectionClass::isUserDefined",
						"isUserDefined",
						"::isUserDefined"
					],
					"id": "reflectionclass.isuserdefined",
					"name": "ReflectionClass::isUserDefined",
					"description": "Checks if user defined"
				},
				"reflectionclass.newinstance": {
					"tokens": [
						"ReflectionClass::newInstance",
						"newInstance",
						"::newInstance"
					],
					"id": "reflectionclass.newinstance",
					"name": "ReflectionClass::newInstance",
					"description": "Creates a new class instance from given arguments."
				},
				"reflectionclass.newinstanceargs": {
					"tokens": [
						"ReflectionClass::newInstanceArgs",
						"newInstanceArgs",
						"::newInstanceArgs"
					],
					"id": "reflectionclass.newinstanceargs",
					"name": "ReflectionClass::newInstanceArgs",
					"description": "Creates a new class instance from given arguments."
				},
				"reflectionclass.newinstancewithoutconstructor": {
					"tokens": [
						"ReflectionClass::newInstanceWithoutConstructor",
						"newInstanceWithoutConstructor",
						"::newInstanceWithoutConstructor"
					],
					"id": "reflectionclass.newinstancewithoutconstructor",
					"name": "ReflectionClass::newInstanceWithoutConstructor",
					"description": "Creates a new class instance without invoking the constructor."
				},
				"reflectionclass.setstaticpropertyvalue": {
					"tokens": [
						"ReflectionClass::setStaticPropertyValue",
						"setStaticPropertyValue",
						"::setStaticPropertyValue"
					],
					"id": "reflectionclass.setstaticpropertyvalue",
					"name": "ReflectionClass::setStaticPropertyValue",
					"description": "Sets static property value"
				},
				"reflectionclass.tostring": {
					"tokens": [
						"ReflectionClass::__toString",
						"ReflectionClass::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionclass.tostring",
					"name": "ReflectionClass::__toString",
					"description": "Returns the string representation of the ReflectionClass object."
				},
				"reflectionzendextension.clone": {
					"tokens": [
						"ReflectionZendExtension::__clone",
						"ReflectionZendExtension::_clone",
						"__clone",
						"::__clone"
					],
					"id": "reflectionzendextension.clone",
					"name": "ReflectionZendExtension::__clone",
					"description": "Clone handler"
				},
				"reflectionzendextension.construct": {
					"tokens": [
						"ReflectionZendExtension::__construct",
						"ReflectionZendExtension::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionzendextension.construct",
					"name": "ReflectionZendExtension::__construct",
					"description": "Constructor"
				},
				"reflectionzendextension.export": {
					"tokens": [
						"ReflectionZendExtension::export",
						"export",
						"::export"
					],
					"id": "reflectionzendextension.export",
					"name": "ReflectionZendExtension::export",
					"description": "Export"
				},
				"reflectionzendextension.getauthor": {
					"tokens": [
						"ReflectionZendExtension::getAuthor",
						"getAuthor",
						"::getAuthor"
					],
					"id": "reflectionzendextension.getauthor",
					"name": "ReflectionZendExtension::getAuthor",
					"description": "Gets author"
				},
				"reflectionzendextension.getcopyright": {
					"tokens": [
						"ReflectionZendExtension::getCopyright",
						"getCopyright",
						"::getCopyright"
					],
					"id": "reflectionzendextension.getcopyright",
					"name": "ReflectionZendExtension::getCopyright",
					"description": "Gets copyright"
				},
				"reflectionzendextension.getname": {
					"tokens": [
						"ReflectionZendExtension::getName",
						"getName",
						"::getName"
					],
					"id": "reflectionzendextension.getname",
					"name": "ReflectionZendExtension::getName",
					"description": "Gets name"
				},
				"reflectionzendextension.geturl": {
					"tokens": [
						"ReflectionZendExtension::getURL",
						"getURL",
						"::getURL"
					],
					"id": "reflectionzendextension.geturl",
					"name": "ReflectionZendExtension::getURL",
					"description": "Gets URL"
				},
				"reflectionzendextension.getversion": {
					"tokens": [
						"ReflectionZendExtension::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "reflectionzendextension.getversion",
					"name": "ReflectionZendExtension::getVersion",
					"description": "Gets version"
				},
				"reflectionzendextension.tostring": {
					"tokens": [
						"ReflectionZendExtension::__toString",
						"ReflectionZendExtension::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionzendextension.tostring",
					"name": "ReflectionZendExtension::__toString",
					"description": "To string handler"
				},
				"reflectionextension.clone": {
					"tokens": [
						"ReflectionExtension::__clone",
						"ReflectionExtension::_clone",
						"__clone",
						"::__clone"
					],
					"id": "reflectionextension.clone",
					"name": "ReflectionExtension::__clone",
					"description": "Clones"
				},
				"reflectionextension.construct": {
					"tokens": [
						"ReflectionExtension::__construct",
						"ReflectionExtension::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionextension.construct",
					"name": "ReflectionExtension::__construct",
					"description": "Constructs a ReflectionExtension"
				},
				"reflectionextension.export": {
					"tokens": [
						"ReflectionExtension::export",
						"export",
						"::export"
					],
					"id": "reflectionextension.export",
					"name": "ReflectionExtension::export",
					"description": "Export"
				},
				"reflectionextension.getclasses": {
					"tokens": [
						"ReflectionExtension::getClasses",
						"getClasses",
						"::getClasses"
					],
					"id": "reflectionextension.getclasses",
					"name": "ReflectionExtension::getClasses",
					"description": "Gets classes"
				},
				"reflectionextension.getclassnames": {
					"tokens": [
						"ReflectionExtension::getClassNames",
						"getClassNames",
						"::getClassNames"
					],
					"id": "reflectionextension.getclassnames",
					"name": "ReflectionExtension::getClassNames",
					"description": "Gets class names"
				},
				"reflectionextension.getconstants": {
					"tokens": [
						"ReflectionExtension::getConstants",
						"getConstants",
						"::getConstants"
					],
					"id": "reflectionextension.getconstants",
					"name": "ReflectionExtension::getConstants",
					"description": "Gets constants"
				},
				"reflectionextension.getdependencies": {
					"tokens": [
						"ReflectionExtension::getDependencies",
						"getDependencies",
						"::getDependencies"
					],
					"id": "reflectionextension.getdependencies",
					"name": "ReflectionExtension::getDependencies",
					"description": "Gets dependencies"
				},
				"reflectionextension.getfunctions": {
					"tokens": [
						"ReflectionExtension::getFunctions",
						"getFunctions",
						"::getFunctions"
					],
					"id": "reflectionextension.getfunctions",
					"name": "ReflectionExtension::getFunctions",
					"description": "Gets extension functions"
				},
				"reflectionextension.getinientries": {
					"tokens": [
						"ReflectionExtension::getINIEntries",
						"getINIEntries",
						"::getINIEntries"
					],
					"id": "reflectionextension.getinientries",
					"name": "ReflectionExtension::getINIEntries",
					"description": "Gets extension ini entries"
				},
				"reflectionextension.getname": {
					"tokens": [
						"ReflectionExtension::getName",
						"getName",
						"::getName"
					],
					"id": "reflectionextension.getname",
					"name": "ReflectionExtension::getName",
					"description": "Gets extension name"
				},
				"reflectionextension.getversion": {
					"tokens": [
						"ReflectionExtension::getVersion",
						"getVersion",
						"::getVersion"
					],
					"id": "reflectionextension.getversion",
					"name": "ReflectionExtension::getVersion",
					"description": "Gets extension version"
				},
				"reflectionextension.info": {
					"tokens": [
						"ReflectionExtension::info",
						"info",
						"::info"
					],
					"id": "reflectionextension.info",
					"name": "ReflectionExtension::info",
					"description": "Print extension info"
				},
				"reflectionextension.ispersistent": {
					"tokens": [
						"ReflectionExtension::isPersistent",
						"isPersistent",
						"::isPersistent"
					],
					"id": "reflectionextension.ispersistent",
					"name": "ReflectionExtension::isPersistent",
					"description": "Returns whether this extension is persistent"
				},
				"reflectionextension.istemporary": {
					"tokens": [
						"ReflectionExtension::isTemporary",
						"isTemporary",
						"::isTemporary"
					],
					"id": "reflectionextension.istemporary",
					"name": "ReflectionExtension::isTemporary",
					"description": "Returns whether this extension is temporary"
				},
				"reflectionextension.tostring": {
					"tokens": [
						"ReflectionExtension::__toString",
						"ReflectionExtension::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionextension.tostring",
					"name": "ReflectionExtension::__toString",
					"description": "To string"
				},
				"reflectionfunction.construct": {
					"tokens": [
						"ReflectionFunction::__construct",
						"ReflectionFunction::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionfunction.construct",
					"name": "ReflectionFunction::__construct",
					"description": "Constructs a ReflectionFunction object"
				},
				"reflectionfunction.export": {
					"tokens": [
						"ReflectionFunction::export",
						"export",
						"::export"
					],
					"id": "reflectionfunction.export",
					"name": "ReflectionFunction::export",
					"description": "Exports function"
				},
				"reflectionfunction.getclosure": {
					"tokens": [
						"ReflectionFunction::getClosure",
						"getClosure",
						"::getClosure"
					],
					"id": "reflectionfunction.getclosure",
					"name": "ReflectionFunction::getClosure",
					"description": "Returns a dynamically created closure for the function"
				},
				"reflectionfunction.invoke": {
					"tokens": [
						"ReflectionFunction::invoke",
						"invoke",
						"::invoke"
					],
					"id": "reflectionfunction.invoke",
					"name": "ReflectionFunction::invoke",
					"description": "Invokes function"
				},
				"reflectionfunction.invokeargs": {
					"tokens": [
						"ReflectionFunction::invokeArgs",
						"invokeArgs",
						"::invokeArgs"
					],
					"id": "reflectionfunction.invokeargs",
					"name": "ReflectionFunction::invokeArgs",
					"description": "Invokes function args"
				},
				"reflectionfunction.isdisabled": {
					"tokens": [
						"ReflectionFunction::isDisabled",
						"isDisabled",
						"::isDisabled"
					],
					"id": "reflectionfunction.isdisabled",
					"name": "ReflectionFunction::isDisabled",
					"description": "Checks if function is disabled"
				},
				"reflectionfunction.tostring": {
					"tokens": [
						"ReflectionFunction::__toString",
						"ReflectionFunction::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionfunction.tostring",
					"name": "ReflectionFunction::__toString",
					"description": "To string"
				},
				"reflectionfunctionabstract.clone": {
					"tokens": [
						"ReflectionFunctionAbstract::__clone",
						"ReflectionFunctionAbstract::_clone",
						"__clone",
						"::__clone"
					],
					"id": "reflectionfunctionabstract.clone",
					"name": "ReflectionFunctionAbstract::__clone",
					"description": "Clones function"
				},
				"reflectionfunctionabstract.getclosurescopeclass": {
					"tokens": [
						"ReflectionFunctionAbstract::getClosureScopeClass",
						"getClosureScopeClass",
						"::getClosureScopeClass"
					],
					"id": "reflectionfunctionabstract.getclosurescopeclass",
					"name": "ReflectionFunctionAbstract::getClosureScopeClass",
					"description": "Returns the scope associated to the closure"
				},
				"reflectionfunctionabstract.getclosurethis": {
					"tokens": [
						"ReflectionFunctionAbstract::getClosureThis",
						"getClosureThis",
						"::getClosureThis"
					],
					"id": "reflectionfunctionabstract.getclosurethis",
					"name": "ReflectionFunctionAbstract::getClosureThis",
					"description": "Returns this pointer bound to closure"
				},
				"reflectionfunctionabstract.getdoccomment": {
					"tokens": [
						"ReflectionFunctionAbstract::getDocComment",
						"getDocComment",
						"::getDocComment"
					],
					"id": "reflectionfunctionabstract.getdoccomment",
					"name": "ReflectionFunctionAbstract::getDocComment",
					"description": "Gets doc comment"
				},
				"reflectionfunctionabstract.getendline": {
					"tokens": [
						"ReflectionFunctionAbstract::getEndLine",
						"getEndLine",
						"::getEndLine"
					],
					"id": "reflectionfunctionabstract.getendline",
					"name": "ReflectionFunctionAbstract::getEndLine",
					"description": "Gets end line number"
				},
				"reflectionfunctionabstract.getextension": {
					"tokens": [
						"ReflectionFunctionAbstract::getExtension",
						"getExtension",
						"::getExtension"
					],
					"id": "reflectionfunctionabstract.getextension",
					"name": "ReflectionFunctionAbstract::getExtension",
					"description": "Gets extension info"
				},
				"reflectionfunctionabstract.getextensionname": {
					"tokens": [
						"ReflectionFunctionAbstract::getExtensionName",
						"getExtensionName",
						"::getExtensionName"
					],
					"id": "reflectionfunctionabstract.getextensionname",
					"name": "ReflectionFunctionAbstract::getExtensionName",
					"description": "Gets extension name"
				},
				"reflectionfunctionabstract.getfilename": {
					"tokens": [
						"ReflectionFunctionAbstract::getFileName",
						"getFileName",
						"::getFileName"
					],
					"id": "reflectionfunctionabstract.getfilename",
					"name": "ReflectionFunctionAbstract::getFileName",
					"description": "Gets file name"
				},
				"reflectionfunctionabstract.getname": {
					"tokens": [
						"ReflectionFunctionAbstract::getName",
						"getName",
						"::getName"
					],
					"id": "reflectionfunctionabstract.getname",
					"name": "ReflectionFunctionAbstract::getName",
					"description": "Gets function name"
				},
				"reflectionfunctionabstract.getnamespacename": {
					"tokens": [
						"ReflectionFunctionAbstract::getNamespaceName",
						"getNamespaceName",
						"::getNamespaceName"
					],
					"id": "reflectionfunctionabstract.getnamespacename",
					"name": "ReflectionFunctionAbstract::getNamespaceName",
					"description": "Gets namespace name"
				},
				"reflectionfunctionabstract.getnumberofparameters": {
					"tokens": [
						"ReflectionFunctionAbstract::getNumberOfParameters",
						"getNumberOfParameters",
						"::getNumberOfParameters"
					],
					"id": "reflectionfunctionabstract.getnumberofparameters",
					"name": "ReflectionFunctionAbstract::getNumberOfParameters",
					"description": "Gets number of parameters"
				},
				"reflectionfunctionabstract.getnumberofrequiredparameters": {
					"tokens": [
						"ReflectionFunctionAbstract::getNumberOfRequiredParameters",
						"getNumberOfRequiredParameters",
						"::getNumberOfRequiredParameters"
					],
					"id": "reflectionfunctionabstract.getnumberofrequiredparameters",
					"name": "ReflectionFunctionAbstract::getNumberOfRequiredParameters",
					"description": "Gets number of required parameters"
				},
				"reflectionfunctionabstract.getparameters": {
					"tokens": [
						"ReflectionFunctionAbstract::getParameters",
						"getParameters",
						"::getParameters"
					],
					"id": "reflectionfunctionabstract.getparameters",
					"name": "ReflectionFunctionAbstract::getParameters",
					"description": "Gets parameters"
				},
				"reflectionfunctionabstract.getreturntype": {
					"tokens": [
						"ReflectionFunctionAbstract::getReturnType",
						"getReturnType",
						"::getReturnType"
					],
					"id": "reflectionfunctionabstract.getreturntype",
					"name": "ReflectionFunctionAbstract::getReturnType",
					"description": "Gets the specified return type of a function"
				},
				"reflectionfunctionabstract.getshortname": {
					"tokens": [
						"ReflectionFunctionAbstract::getShortName",
						"getShortName",
						"::getShortName"
					],
					"id": "reflectionfunctionabstract.getshortname",
					"name": "ReflectionFunctionAbstract::getShortName",
					"description": "Gets function short name"
				},
				"reflectionfunctionabstract.getstartline": {
					"tokens": [
						"ReflectionFunctionAbstract::getStartLine",
						"getStartLine",
						"::getStartLine"
					],
					"id": "reflectionfunctionabstract.getstartline",
					"name": "ReflectionFunctionAbstract::getStartLine",
					"description": "Gets starting line number"
				},
				"reflectionfunctionabstract.getstaticvariables": {
					"tokens": [
						"ReflectionFunctionAbstract::getStaticVariables",
						"getStaticVariables",
						"::getStaticVariables"
					],
					"id": "reflectionfunctionabstract.getstaticvariables",
					"name": "ReflectionFunctionAbstract::getStaticVariables",
					"description": "Gets static variables"
				},
				"reflectionfunctionabstract.hasreturntype": {
					"tokens": [
						"ReflectionFunctionAbstract::hasReturnType",
						"hasReturnType",
						"::hasReturnType"
					],
					"id": "reflectionfunctionabstract.hasreturntype",
					"name": "ReflectionFunctionAbstract::hasReturnType",
					"description": "Checks if the function has a specified return type"
				},
				"reflectionfunctionabstract.innamespace": {
					"tokens": [
						"ReflectionFunctionAbstract::inNamespace",
						"inNamespace",
						"::inNamespace"
					],
					"id": "reflectionfunctionabstract.innamespace",
					"name": "ReflectionFunctionAbstract::inNamespace",
					"description": "Checks if function in namespace"
				},
				"reflectionfunctionabstract.isclosure": {
					"tokens": [
						"ReflectionFunctionAbstract::isClosure",
						"isClosure",
						"::isClosure"
					],
					"id": "reflectionfunctionabstract.isclosure",
					"name": "ReflectionFunctionAbstract::isClosure",
					"description": "Checks if closure"
				},
				"reflectionfunctionabstract.isdeprecated": {
					"tokens": [
						"ReflectionFunctionAbstract::isDeprecated",
						"isDeprecated",
						"::isDeprecated"
					],
					"id": "reflectionfunctionabstract.isdeprecated",
					"name": "ReflectionFunctionAbstract::isDeprecated",
					"description": "Checks if deprecated"
				},
				"reflectionfunctionabstract.isgenerator": {
					"tokens": [
						"ReflectionFunctionAbstract::isGenerator",
						"isGenerator",
						"::isGenerator"
					],
					"id": "reflectionfunctionabstract.isgenerator",
					"name": "ReflectionFunctionAbstract::isGenerator",
					"description": "Returns whether this function is a generator"
				},
				"reflectionfunctionabstract.isinternal": {
					"tokens": [
						"ReflectionFunctionAbstract::isInternal",
						"isInternal",
						"::isInternal"
					],
					"id": "reflectionfunctionabstract.isinternal",
					"name": "ReflectionFunctionAbstract::isInternal",
					"description": "Checks if is internal"
				},
				"reflectionfunctionabstract.isuserdefined": {
					"tokens": [
						"ReflectionFunctionAbstract::isUserDefined",
						"isUserDefined",
						"::isUserDefined"
					],
					"id": "reflectionfunctionabstract.isuserdefined",
					"name": "ReflectionFunctionAbstract::isUserDefined",
					"description": "Checks if user defined"
				},
				"reflectionfunctionabstract.isvariadic": {
					"tokens": [
						"ReflectionFunctionAbstract::isVariadic",
						"isVariadic",
						"::isVariadic"
					],
					"id": "reflectionfunctionabstract.isvariadic",
					"name": "ReflectionFunctionAbstract::isVariadic",
					"description": "Checks if the function is variadic"
				},
				"reflectionfunctionabstract.returnsreference": {
					"tokens": [
						"ReflectionFunctionAbstract::returnsReference",
						"returnsReference",
						"::returnsReference"
					],
					"id": "reflectionfunctionabstract.returnsreference",
					"name": "ReflectionFunctionAbstract::returnsReference",
					"description": "Checks if returns reference"
				},
				"reflectionfunctionabstract.tostring": {
					"tokens": [
						"ReflectionFunctionAbstract::__toString",
						"ReflectionFunctionAbstract::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionfunctionabstract.tostring",
					"name": "ReflectionFunctionAbstract::__toString",
					"description": "To string"
				},
				"reflectionmethod.construct": {
					"tokens": [
						"ReflectionMethod::__construct",
						"ReflectionMethod::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionmethod.construct",
					"name": "ReflectionMethod::__construct",
					"description": "Constructs a ReflectionMethod"
				},
				"reflectionmethod.export": {
					"tokens": [
						"ReflectionMethod::export",
						"export",
						"::export"
					],
					"id": "reflectionmethod.export",
					"name": "ReflectionMethod::export",
					"description": "Export a reflection method."
				},
				"reflectionmethod.getclosure": {
					"tokens": [
						"ReflectionMethod::getClosure",
						"getClosure",
						"::getClosure"
					],
					"id": "reflectionmethod.getclosure",
					"name": "ReflectionMethod::getClosure",
					"description": "Returns a dynamically created closure for the method"
				},
				"reflectionmethod.getdeclaringclass": {
					"tokens": [
						"ReflectionMethod::getDeclaringClass",
						"getDeclaringClass",
						"::getDeclaringClass"
					],
					"id": "reflectionmethod.getdeclaringclass",
					"name": "ReflectionMethod::getDeclaringClass",
					"description": "Gets declaring class for the reflected method."
				},
				"reflectionmethod.getmodifiers": {
					"tokens": [
						"ReflectionMethod::getModifiers",
						"getModifiers",
						"::getModifiers"
					],
					"id": "reflectionmethod.getmodifiers",
					"name": "ReflectionMethod::getModifiers",
					"description": "Gets the method modifiers"
				},
				"reflectionmethod.getprototype": {
					"tokens": [
						"ReflectionMethod::getPrototype",
						"getPrototype",
						"::getPrototype"
					],
					"id": "reflectionmethod.getprototype",
					"name": "ReflectionMethod::getPrototype",
					"description": "Gets the method prototype (if there is one)."
				},
				"reflectionmethod.invoke": {
					"tokens": [
						"ReflectionMethod::invoke",
						"invoke",
						"::invoke"
					],
					"id": "reflectionmethod.invoke",
					"name": "ReflectionMethod::invoke",
					"description": "Invoke"
				},
				"reflectionmethod.invokeargs": {
					"tokens": [
						"ReflectionMethod::invokeArgs",
						"invokeArgs",
						"::invokeArgs"
					],
					"id": "reflectionmethod.invokeargs",
					"name": "ReflectionMethod::invokeArgs",
					"description": "Invoke args"
				},
				"reflectionmethod.isabstract": {
					"tokens": [
						"ReflectionMethod::isAbstract",
						"isAbstract",
						"::isAbstract"
					],
					"id": "reflectionmethod.isabstract",
					"name": "ReflectionMethod::isAbstract",
					"description": "Checks if method is abstract"
				},
				"reflectionmethod.isconstructor": {
					"tokens": [
						"ReflectionMethod::isConstructor",
						"isConstructor",
						"::isConstructor"
					],
					"id": "reflectionmethod.isconstructor",
					"name": "ReflectionMethod::isConstructor",
					"description": "Checks if method is a constructor"
				},
				"reflectionmethod.isdestructor": {
					"tokens": [
						"ReflectionMethod::isDestructor",
						"isDestructor",
						"::isDestructor"
					],
					"id": "reflectionmethod.isdestructor",
					"name": "ReflectionMethod::isDestructor",
					"description": "Checks if method is a destructor"
				},
				"reflectionmethod.isfinal": {
					"tokens": [
						"ReflectionMethod::isFinal",
						"isFinal",
						"::isFinal"
					],
					"id": "reflectionmethod.isfinal",
					"name": "ReflectionMethod::isFinal",
					"description": "Checks if method is final"
				},
				"reflectionmethod.isprivate": {
					"tokens": [
						"ReflectionMethod::isPrivate",
						"isPrivate",
						"::isPrivate"
					],
					"id": "reflectionmethod.isprivate",
					"name": "ReflectionMethod::isPrivate",
					"description": "Checks if method is private"
				},
				"reflectionmethod.isprotected": {
					"tokens": [
						"ReflectionMethod::isProtected",
						"isProtected",
						"::isProtected"
					],
					"id": "reflectionmethod.isprotected",
					"name": "ReflectionMethod::isProtected",
					"description": "Checks if method is protected"
				},
				"reflectionmethod.ispublic": {
					"tokens": [
						"ReflectionMethod::isPublic",
						"isPublic",
						"::isPublic"
					],
					"id": "reflectionmethod.ispublic",
					"name": "ReflectionMethod::isPublic",
					"description": "Checks if method is public"
				},
				"reflectionmethod.isstatic": {
					"tokens": [
						"ReflectionMethod::isStatic",
						"isStatic",
						"::isStatic"
					],
					"id": "reflectionmethod.isstatic",
					"name": "ReflectionMethod::isStatic",
					"description": "Checks if method is static"
				},
				"reflectionmethod.setaccessible": {
					"tokens": [
						"ReflectionMethod::setAccessible",
						"setAccessible",
						"::setAccessible"
					],
					"id": "reflectionmethod.setaccessible",
					"name": "ReflectionMethod::setAccessible",
					"description": "Set method accessibility"
				},
				"reflectionmethod.tostring": {
					"tokens": [
						"ReflectionMethod::__toString",
						"ReflectionMethod::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionmethod.tostring",
					"name": "ReflectionMethod::__toString",
					"description": "Returns the string representation of the Reflection method object."
				},
				"reflectionobject.construct": {
					"tokens": [
						"ReflectionObject::__construct",
						"ReflectionObject::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionobject.construct",
					"name": "ReflectionObject::__construct",
					"description": "Constructs a ReflectionObject"
				},
				"reflectionobject.export": {
					"tokens": [
						"ReflectionObject::export",
						"export",
						"::export"
					],
					"id": "reflectionobject.export",
					"name": "ReflectionObject::export",
					"description": "Export"
				},
				"reflectionparameter.allowsnull": {
					"tokens": [
						"ReflectionParameter::allowsNull",
						"allowsNull",
						"::allowsNull"
					],
					"id": "reflectionparameter.allowsnull",
					"name": "ReflectionParameter::allowsNull",
					"description": "Checks if null is allowed"
				},
				"reflectionparameter.canbepassedbyvalue": {
					"tokens": [
						"ReflectionParameter::canBePassedByValue",
						"canBePassedByValue",
						"::canBePassedByValue"
					],
					"id": "reflectionparameter.canbepassedbyvalue",
					"name": "ReflectionParameter::canBePassedByValue",
					"description": "Returns whether this parameter can be passed by value"
				},
				"reflectionparameter.clone": {
					"tokens": [
						"ReflectionParameter::__clone",
						"ReflectionParameter::_clone",
						"__clone",
						"::__clone"
					],
					"id": "reflectionparameter.clone",
					"name": "ReflectionParameter::__clone",
					"description": "Clone"
				},
				"reflectionparameter.construct": {
					"tokens": [
						"ReflectionParameter::__construct",
						"ReflectionParameter::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionparameter.construct",
					"name": "ReflectionParameter::__construct",
					"description": "Construct"
				},
				"reflectionparameter.export": {
					"tokens": [
						"ReflectionParameter::export",
						"export",
						"::export"
					],
					"id": "reflectionparameter.export",
					"name": "ReflectionParameter::export",
					"description": "Exports"
				},
				"reflectionparameter.getclass": {
					"tokens": [
						"ReflectionParameter::getClass",
						"getClass",
						"::getClass"
					],
					"id": "reflectionparameter.getclass",
					"name": "ReflectionParameter::getClass",
					"description": "Get the type hinted class"
				},
				"reflectionparameter.getdeclaringclass": {
					"tokens": [
						"ReflectionParameter::getDeclaringClass",
						"getDeclaringClass",
						"::getDeclaringClass"
					],
					"id": "reflectionparameter.getdeclaringclass",
					"name": "ReflectionParameter::getDeclaringClass",
					"description": "Gets declaring class"
				},
				"reflectionparameter.getdeclaringfunction": {
					"tokens": [
						"ReflectionParameter::getDeclaringFunction",
						"getDeclaringFunction",
						"::getDeclaringFunction"
					],
					"id": "reflectionparameter.getdeclaringfunction",
					"name": "ReflectionParameter::getDeclaringFunction",
					"description": "Gets declaring function"
				},
				"reflectionparameter.getdefaultvalue": {
					"tokens": [
						"ReflectionParameter::getDefaultValue",
						"getDefaultValue",
						"::getDefaultValue"
					],
					"id": "reflectionparameter.getdefaultvalue",
					"name": "ReflectionParameter::getDefaultValue",
					"description": "Gets default parameter value"
				},
				"reflectionparameter.getdefaultvalueconstantname": {
					"tokens": [
						"ReflectionParameter::getDefaultValueConstantName",
						"getDefaultValueConstantName",
						"::getDefaultValueConstantName"
					],
					"id": "reflectionparameter.getdefaultvalueconstantname",
					"name": "ReflectionParameter::getDefaultValueConstantName",
					"description": "Returns the default value's constant name if default value is constant or null"
				},
				"reflectionparameter.getname": {
					"tokens": [
						"ReflectionParameter::getName",
						"getName",
						"::getName"
					],
					"id": "reflectionparameter.getname",
					"name": "ReflectionParameter::getName",
					"description": "Gets parameter name"
				},
				"reflectionparameter.getposition": {
					"tokens": [
						"ReflectionParameter::getPosition",
						"getPosition",
						"::getPosition"
					],
					"id": "reflectionparameter.getposition",
					"name": "ReflectionParameter::getPosition",
					"description": "Gets parameter position"
				},
				"reflectionparameter.gettype": {
					"tokens": [
						"ReflectionParameter::getType",
						"getType",
						"::getType"
					],
					"id": "reflectionparameter.gettype",
					"name": "ReflectionParameter::getType",
					"description": "Gets a parameter's type"
				},
				"reflectionparameter.hastype": {
					"tokens": [
						"ReflectionParameter::hasType",
						"hasType",
						"::hasType"
					],
					"id": "reflectionparameter.hastype",
					"name": "ReflectionParameter::hasType",
					"description": "Checks if parameter has a type"
				},
				"reflectionparameter.isarray": {
					"tokens": [
						"ReflectionParameter::isArray",
						"isArray",
						"::isArray"
					],
					"id": "reflectionparameter.isarray",
					"name": "ReflectionParameter::isArray",
					"description": "Checks if parameter expects an array"
				},
				"reflectionparameter.iscallable": {
					"tokens": [
						"ReflectionParameter::isCallable",
						"isCallable",
						"::isCallable"
					],
					"id": "reflectionparameter.iscallable",
					"name": "ReflectionParameter::isCallable",
					"description": "Returns whether parameter MUST be callable"
				},
				"reflectionparameter.isdefaultvalueavailable": {
					"tokens": [
						"ReflectionParameter::isDefaultValueAvailable",
						"isDefaultValueAvailable",
						"::isDefaultValueAvailable"
					],
					"id": "reflectionparameter.isdefaultvalueavailable",
					"name": "ReflectionParameter::isDefaultValueAvailable",
					"description": "Checks if a default value is available"
				},
				"reflectionparameter.isdefaultvalueconstant": {
					"tokens": [
						"ReflectionParameter::isDefaultValueConstant",
						"isDefaultValueConstant",
						"::isDefaultValueConstant"
					],
					"id": "reflectionparameter.isdefaultvalueconstant",
					"name": "ReflectionParameter::isDefaultValueConstant",
					"description": "Returns whether the default value of this parameter is constant"
				},
				"reflectionparameter.isoptional": {
					"tokens": [
						"ReflectionParameter::isOptional",
						"isOptional",
						"::isOptional"
					],
					"id": "reflectionparameter.isoptional",
					"name": "ReflectionParameter::isOptional",
					"description": "Checks if optional"
				},
				"reflectionparameter.ispassedbyreference": {
					"tokens": [
						"ReflectionParameter::isPassedByReference",
						"isPassedByReference",
						"::isPassedByReference"
					],
					"id": "reflectionparameter.ispassedbyreference",
					"name": "ReflectionParameter::isPassedByReference",
					"description": "Checks if passed by reference"
				},
				"reflectionparameter.isvariadic": {
					"tokens": [
						"ReflectionParameter::isVariadic",
						"isVariadic",
						"::isVariadic"
					],
					"id": "reflectionparameter.isvariadic",
					"name": "ReflectionParameter::isVariadic",
					"description": "Checks if the parameter is variadic"
				},
				"reflectionparameter.tostring": {
					"tokens": [
						"ReflectionParameter::__toString",
						"ReflectionParameter::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionparameter.tostring",
					"name": "ReflectionParameter::__toString",
					"description": "To string"
				},
				"reflectionproperty.clone": {
					"tokens": [
						"ReflectionProperty::__clone",
						"ReflectionProperty::_clone",
						"__clone",
						"::__clone"
					],
					"id": "reflectionproperty.clone",
					"name": "ReflectionProperty::__clone",
					"description": "Clone"
				},
				"reflectionproperty.construct": {
					"tokens": [
						"ReflectionProperty::__construct",
						"ReflectionProperty::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectionproperty.construct",
					"name": "ReflectionProperty::__construct",
					"description": "Construct a ReflectionProperty object"
				},
				"reflectionproperty.export": {
					"tokens": [
						"ReflectionProperty::export",
						"export",
						"::export"
					],
					"id": "reflectionproperty.export",
					"name": "ReflectionProperty::export",
					"description": "Export"
				},
				"reflectionproperty.getdeclaringclass": {
					"tokens": [
						"ReflectionProperty::getDeclaringClass",
						"getDeclaringClass",
						"::getDeclaringClass"
					],
					"id": "reflectionproperty.getdeclaringclass",
					"name": "ReflectionProperty::getDeclaringClass",
					"description": "Gets declaring class"
				},
				"reflectionproperty.getdoccomment": {
					"tokens": [
						"ReflectionProperty::getDocComment",
						"getDocComment",
						"::getDocComment"
					],
					"id": "reflectionproperty.getdoccomment",
					"name": "ReflectionProperty::getDocComment",
					"description": "Gets the property doc comment"
				},
				"reflectionproperty.getmodifiers": {
					"tokens": [
						"ReflectionProperty::getModifiers",
						"getModifiers",
						"::getModifiers"
					],
					"id": "reflectionproperty.getmodifiers",
					"name": "ReflectionProperty::getModifiers",
					"description": "Gets modifiers"
				},
				"reflectionproperty.getname": {
					"tokens": [
						"ReflectionProperty::getName",
						"getName",
						"::getName"
					],
					"id": "reflectionproperty.getname",
					"name": "ReflectionProperty::getName",
					"description": "Gets property name"
				},
				"reflectionproperty.getvalue": {
					"tokens": [
						"ReflectionProperty::getValue",
						"getValue",
						"::getValue"
					],
					"id": "reflectionproperty.getvalue",
					"name": "ReflectionProperty::getValue",
					"description": "Gets value"
				},
				"reflectionproperty.isdefault": {
					"tokens": [
						"ReflectionProperty::isDefault",
						"isDefault",
						"::isDefault"
					],
					"id": "reflectionproperty.isdefault",
					"name": "ReflectionProperty::isDefault",
					"description": "Checks if property is a default property"
				},
				"reflectionproperty.isprivate": {
					"tokens": [
						"ReflectionProperty::isPrivate",
						"isPrivate",
						"::isPrivate"
					],
					"id": "reflectionproperty.isprivate",
					"name": "ReflectionProperty::isPrivate",
					"description": "Checks if property is private"
				},
				"reflectionproperty.isprotected": {
					"tokens": [
						"ReflectionProperty::isProtected",
						"isProtected",
						"::isProtected"
					],
					"id": "reflectionproperty.isprotected",
					"name": "ReflectionProperty::isProtected",
					"description": "Checks if property is protected"
				},
				"reflectionproperty.ispublic": {
					"tokens": [
						"ReflectionProperty::isPublic",
						"isPublic",
						"::isPublic"
					],
					"id": "reflectionproperty.ispublic",
					"name": "ReflectionProperty::isPublic",
					"description": "Checks if property is public"
				},
				"reflectionproperty.isstatic": {
					"tokens": [
						"ReflectionProperty::isStatic",
						"isStatic",
						"::isStatic"
					],
					"id": "reflectionproperty.isstatic",
					"name": "ReflectionProperty::isStatic",
					"description": "Checks if property is static"
				},
				"reflectionproperty.setaccessible": {
					"tokens": [
						"ReflectionProperty::setAccessible",
						"setAccessible",
						"::setAccessible"
					],
					"id": "reflectionproperty.setaccessible",
					"name": "ReflectionProperty::setAccessible",
					"description": "Set property accessibility"
				},
				"reflectionproperty.setvalue": {
					"tokens": [
						"ReflectionProperty::setValue",
						"setValue",
						"::setValue"
					],
					"id": "reflectionproperty.setvalue",
					"name": "ReflectionProperty::setValue",
					"description": "Set property value"
				},
				"reflectionproperty.tostring": {
					"tokens": [
						"ReflectionProperty::__toString",
						"ReflectionProperty::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectionproperty.tostring",
					"name": "ReflectionProperty::__toString",
					"description": "To string"
				},
				"reflectiontype.allowsnull": {
					"tokens": [
						"ReflectionType::allowsNull",
						"allowsNull",
						"::allowsNull"
					],
					"id": "reflectiontype.allowsnull",
					"name": "ReflectionType::allowsNull",
					"description": "Checks if null is allowed"
				},
				"reflectiontype.isbuiltin": {
					"tokens": [
						"ReflectionType::isBuiltin",
						"isBuiltin",
						"::isBuiltin"
					],
					"id": "reflectiontype.isbuiltin",
					"name": "ReflectionType::isBuiltin",
					"description": "Checks if it is a built-in type"
				},
				"reflectiontype.tostring": {
					"tokens": [
						"ReflectionType::__toString",
						"ReflectionType::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflectiontype.tostring",
					"name": "ReflectionType::__toString",
					"description": "To string"
				},
				"reflectiongenerator.construct": {
					"tokens": [
						"ReflectionGenerator::__construct",
						"ReflectionGenerator::_construct",
						"__construct",
						"::__construct"
					],
					"id": "reflectiongenerator.construct",
					"name": "ReflectionGenerator::__construct",
					"description": "Constructs a ReflectionGenerator object"
				},
				"reflectiongenerator.getexecutingfile": {
					"tokens": [
						"ReflectionGenerator::getExecutingFile",
						"getExecutingFile",
						"::getExecutingFile"
					],
					"id": "reflectiongenerator.getexecutingfile",
					"name": "ReflectionGenerator::getExecutingFile",
					"description": "Gets the file name of the currently executing generator"
				},
				"reflectiongenerator.getexecutinggenerator": {
					"tokens": [
						"ReflectionGenerator::getExecutingGenerator",
						"getExecutingGenerator",
						"::getExecutingGenerator"
					],
					"id": "reflectiongenerator.getexecutinggenerator",
					"name": "ReflectionGenerator::getExecutingGenerator",
					"description": "Gets the executing Generator object"
				},
				"reflectiongenerator.getexecutingline": {
					"tokens": [
						"ReflectionGenerator::getExecutingLine",
						"getExecutingLine",
						"::getExecutingLine"
					],
					"id": "reflectiongenerator.getexecutingline",
					"name": "ReflectionGenerator::getExecutingLine",
					"description": "Gets the currently executing line of the generator"
				},
				"reflectiongenerator.getfunction": {
					"tokens": [
						"ReflectionGenerator::getFunction",
						"getFunction",
						"::getFunction"
					],
					"id": "reflectiongenerator.getfunction",
					"name": "ReflectionGenerator::getFunction",
					"description": "Gets the function name of the generator"
				},
				"reflectiongenerator.getthis": {
					"tokens": [
						"ReflectionGenerator::getThis",
						"getThis",
						"::getThis"
					],
					"id": "reflectiongenerator.getthis",
					"name": "ReflectionGenerator::getThis",
					"description": "Gets the $this value of the generator"
				},
				"reflectiongenerator.gettrace": {
					"tokens": [
						"ReflectionGenerator::getTrace",
						"getTrace",
						"::getTrace"
					],
					"id": "reflectiongenerator.gettrace",
					"name": "ReflectionGenerator::getTrace",
					"description": "Gets the trace of the executing generator"
				},
				"reflector.export": {
					"tokens": [
						"Reflector::export",
						"export",
						"::export"
					],
					"id": "reflector.export",
					"name": "Reflector::export",
					"description": "Exports"
				},
				"reflector.tostring": {
					"tokens": [
						"Reflector::__toString",
						"Reflector::_toString",
						"__toString",
						"::__toString"
					],
					"id": "reflector.tostring",
					"name": "Reflector::__toString",
					"description": "To string"
				},
				"function.boolval": {
					"tokens": [
						"boolval"
					],
					"id": "function.boolval",
					"name": "boolval",
					"description": "Get the boolean value of a variable"
				},
				"function.debug-zval-dump": {
					"tokens": [
						"debug_zval_dump",
						"debugzval_dump"
					],
					"id": "function.debug-zval-dump",
					"name": "debug_zval_dump",
					"description": "Dumps a string representation of an internal zend value to output"
				},
				"function.doubleval": {
					"tokens": [
						"doubleval"
					],
					"id": "function.doubleval",
					"name": "doubleval",
					"description": "Alias of floatval"
				},
				"function.empty": {
					"tokens": [
						"empty"
					],
					"id": "function.empty",
					"name": "empty",
					"description": "Determine whether a variable is empty"
				},
				"function.floatval": {
					"tokens": [
						"floatval"
					],
					"id": "function.floatval",
					"name": "floatval",
					"description": "Get float value of a variable"
				},
				"function.get-defined-vars": {
					"tokens": [
						"get_defined_vars",
						"getdefined_vars"
					],
					"id": "function.get-defined-vars",
					"name": "get_defined_vars",
					"description": "Returns an array of all defined variables"
				},
				"function.get-resource-type": {
					"tokens": [
						"get_resource_type",
						"getresource_type"
					],
					"id": "function.get-resource-type",
					"name": "get_resource_type",
					"description": "Returns the resource type"
				},
				"function.gettype": {
					"tokens": [
						"gettype"
					],
					"id": "function.gettype",
					"name": "gettype",
					"description": "Get the type of a variable"
				},
				"function.import-request-variables": {
					"tokens": [
						"import_request_variables",
						"importrequest_variables"
					],
					"id": "function.import-request-variables",
					"name": "import_request_variables",
					"description": "Import GET/POST/Cookie variables into the global scope"
				},
				"function.intval": {
					"tokens": [
						"intval"
					],
					"id": "function.intval",
					"name": "intval",
					"description": "Get the integer value of a variable"
				},
				"function.is-array": {
					"tokens": [
						"is_array",
						"isarray"
					],
					"id": "function.is-array",
					"name": "is_array",
					"description": "Finds whether a variable is an array"
				},
				"function.is-bool": {
					"tokens": [
						"is_bool",
						"isbool"
					],
					"id": "function.is-bool",
					"name": "is_bool",
					"description": "Finds out whether a variable is a boolean"
				},
				"function.is-callable": {
					"tokens": [
						"is_callable",
						"iscallable"
					],
					"id": "function.is-callable",
					"name": "is_callable",
					"description": "Verify that the contents of a variable can be called as a function"
				},
				"function.is-double": {
					"tokens": [
						"is_double",
						"isdouble"
					],
					"id": "function.is-double",
					"name": "is_double",
					"description": "Alias of is_float"
				},
				"function.is-float": {
					"tokens": [
						"is_float",
						"isfloat"
					],
					"id": "function.is-float",
					"name": "is_float",
					"description": "Finds whether the type of a variable is float"
				},
				"function.is-int": {
					"tokens": [
						"is_int",
						"isint"
					],
					"id": "function.is-int",
					"name": "is_int",
					"description": "Find whether the type of a variable is integer"
				},
				"function.is-integer": {
					"tokens": [
						"is_integer",
						"isinteger"
					],
					"id": "function.is-integer",
					"name": "is_integer",
					"description": "Alias of is_int"
				},
				"function.is-long": {
					"tokens": [
						"is_long",
						"islong"
					],
					"id": "function.is-long",
					"name": "is_long",
					"description": "Alias of is_int"
				},
				"function.is-null": {
					"tokens": [
						"is_null",
						"isnull"
					],
					"id": "function.is-null",
					"name": "is_null",
					"description": "Finds whether a variable is NULL"
				},
				"function.is-numeric": {
					"tokens": [
						"is_numeric",
						"isnumeric"
					],
					"id": "function.is-numeric",
					"name": "is_numeric",
					"description": "Finds whether a variable is a number or a numeric string"
				},
				"function.is-object": {
					"tokens": [
						"is_object",
						"isobject"
					],
					"id": "function.is-object",
					"name": "is_object",
					"description": "Finds whether a variable is an object"
				},
				"function.is-real": {
					"tokens": [
						"is_real",
						"isreal"
					],
					"id": "function.is-real",
					"name": "is_real",
					"description": "Alias of is_float"
				},
				"function.is-resource": {
					"tokens": [
						"is_resource",
						"isresource"
					],
					"id": "function.is-resource",
					"name": "is_resource",
					"description": "Finds whether a variable is a resource"
				},
				"function.is-scalar": {
					"tokens": [
						"is_scalar",
						"isscalar"
					],
					"id": "function.is-scalar",
					"name": "is_scalar",
					"description": "Finds whether a variable is a scalar"
				},
				"function.is-string": {
					"tokens": [
						"is_string",
						"isstring"
					],
					"id": "function.is-string",
					"name": "is_string",
					"description": "Find whether the type of a variable is string"
				},
				"function.isset": {
					"tokens": [
						"isset"
					],
					"id": "function.isset",
					"name": "isset",
					"description": "Determine if a variable is set and is not NULL"
				},
				"function.print-r": {
					"tokens": [
						"print_r",
						"printr"
					],
					"id": "function.print-r",
					"name": "print_r",
					"description": "Prints human-readable information about a variable"
				},
				"function.serialize": {
					"tokens": [
						"serialize"
					],
					"id": "function.serialize",
					"name": "serialize",
					"description": "Generates a storable representation of a value"
				},
				"function.settype": {
					"tokens": [
						"settype"
					],
					"id": "function.settype",
					"name": "settype",
					"description": "Set the type of a variable"
				},
				"function.strval": {
					"tokens": [
						"strval"
					],
					"id": "function.strval",
					"name": "strval",
					"description": "Get string value of a variable"
				},
				"function.unserialize": {
					"tokens": [
						"unserialize"
					],
					"id": "function.unserialize",
					"name": "unserialize",
					"description": "Creates a PHP value from a stored representation"
				},
				"function.unset": {
					"tokens": [
						"unset"
					],
					"id": "function.unset",
					"name": "unset",
					"description": "Unset a given variable"
				},
				"function.var-dump": {
					"tokens": [
						"var_dump",
						"vardump"
					],
					"id": "function.var-dump",
					"name": "var_dump",
					"description": "Dumps information about a variable"
				},
				"function.var-export": {
					"tokens": [
						"var_export",
						"varexport"
					],
					"id": "function.var-export",
					"name": "var_export",
					"description": "Outputs or returns a parsable string representation of a variable"
				},
				"function.oauth-get-sbs": {
					"tokens": [
						"oauth_get_sbs",
						"oauthget_sbs"
					],
					"id": "function.oauth-get-sbs",
					"name": "oauth_get_sbs",
					"description": "Generate a Signature Base String"
				},
				"function.oauth-urlencode": {
					"tokens": [
						"oauth_urlencode",
						"oauthurlencode"
					],
					"id": "function.oauth-urlencode",
					"name": "oauth_urlencode",
					"description": "Encode a URI to RFC 3986"
				},
				"oauth.construct": {
					"tokens": [
						"OAuth::__construct",
						"OAuth::_construct",
						"__construct",
						"::__construct"
					],
					"id": "oauth.construct",
					"name": "OAuth::__construct",
					"description": "Create a new OAuth object"
				},
				"oauth.destruct": {
					"tokens": [
						"OAuth::__destruct",
						"OAuth::_destruct",
						"__destruct",
						"::__destruct"
					],
					"id": "oauth.destruct",
					"name": "OAuth::__destruct",
					"description": "The destructor"
				},
				"oauth.disabledebug": {
					"tokens": [
						"OAuth::disableDebug",
						"disableDebug",
						"::disableDebug"
					],
					"id": "oauth.disabledebug",
					"name": "OAuth::disableDebug",
					"description": "Turn off verbose debugging"
				},
				"oauth.disableredirects": {
					"tokens": [
						"OAuth::disableRedirects",
						"disableRedirects",
						"::disableRedirects"
					],
					"id": "oauth.disableredirects",
					"name": "OAuth::disableRedirects",
					"description": "Turn off redirects"
				},
				"oauth.disablesslchecks": {
					"tokens": [
						"OAuth::disableSSLChecks",
						"disableSSLChecks",
						"::disableSSLChecks"
					],
					"id": "oauth.disablesslchecks",
					"name": "OAuth::disableSSLChecks",
					"description": "Turn off SSL checks"
				},
				"oauth.enabledebug": {
					"tokens": [
						"OAuth::enableDebug",
						"enableDebug",
						"::enableDebug"
					],
					"id": "oauth.enabledebug",
					"name": "OAuth::enableDebug",
					"description": "Turn on verbose debugging"
				},
				"oauth.enableredirects": {
					"tokens": [
						"OAuth::enableRedirects",
						"enableRedirects",
						"::enableRedirects"
					],
					"id": "oauth.enableredirects",
					"name": "OAuth::enableRedirects",
					"description": "Turn on redirects"
				},
				"oauth.enablesslchecks": {
					"tokens": [
						"OAuth::enableSSLChecks",
						"enableSSLChecks",
						"::enableSSLChecks"
					],
					"id": "oauth.enablesslchecks",
					"name": "OAuth::enableSSLChecks",
					"description": "Turn on SSL checks"
				},
				"oauth.fetch": {
					"tokens": [
						"OAuth::fetch",
						"fetch",
						"::fetch"
					],
					"id": "oauth.fetch",
					"name": "OAuth::fetch",
					"description": "Fetch an OAuth protected resource"
				},
				"oauth.generatesignature": {
					"tokens": [
						"OAuth::generateSignature",
						"generateSignature",
						"::generateSignature"
					],
					"id": "oauth.generatesignature",
					"name": "OAuth::generateSignature",
					"description": "Generate a signature"
				},
				"oauth.getaccesstoken": {
					"tokens": [
						"OAuth::getAccessToken",
						"getAccessToken",
						"::getAccessToken"
					],
					"id": "oauth.getaccesstoken",
					"name": "OAuth::getAccessToken",
					"description": "Fetch an access token"
				},
				"oauth.getcapath": {
					"tokens": [
						"OAuth::getCAPath",
						"getCAPath",
						"::getCAPath"
					],
					"id": "oauth.getcapath",
					"name": "OAuth::getCAPath",
					"description": "Gets CA information"
				},
				"oauth.getlastresponse": {
					"tokens": [
						"OAuth::getLastResponse",
						"getLastResponse",
						"::getLastResponse"
					],
					"id": "oauth.getlastresponse",
					"name": "OAuth::getLastResponse",
					"description": "Get the last response"
				},
				"oauth.getlastresponseheaders": {
					"tokens": [
						"OAuth::getLastResponseHeaders",
						"getLastResponseHeaders",
						"::getLastResponseHeaders"
					],
					"id": "oauth.getlastresponseheaders",
					"name": "OAuth::getLastResponseHeaders",
					"description": "Get headers for last response"
				},
				"oauth.getlastresponseinfo": {
					"tokens": [
						"OAuth::getLastResponseInfo",
						"getLastResponseInfo",
						"::getLastResponseInfo"
					],
					"id": "oauth.getlastresponseinfo",
					"name": "OAuth::getLastResponseInfo",
					"description": "Get HTTP information about the last response"
				},
				"oauth.getrequestheader": {
					"tokens": [
						"OAuth::getRequestHeader",
						"getRequestHeader",
						"::getRequestHeader"
					],
					"id": "oauth.getrequestheader",
					"name": "OAuth::getRequestHeader",
					"description": "Generate OAuth header string signature"
				},
				"oauth.getrequesttoken": {
					"tokens": [
						"OAuth::getRequestToken",
						"getRequestToken",
						"::getRequestToken"
					],
					"id": "oauth.getrequesttoken",
					"name": "OAuth::getRequestToken",
					"description": "Fetch a request token"
				},
				"oauth.setauthtype": {
					"tokens": [
						"OAuth::setAuthType",
						"setAuthType",
						"::setAuthType"
					],
					"id": "oauth.setauthtype",
					"name": "OAuth::setAuthType",
					"description": "Set authorization type"
				},
				"oauth.setcapath": {
					"tokens": [
						"OAuth::setCAPath",
						"setCAPath",
						"::setCAPath"
					],
					"id": "oauth.setcapath",
					"name": "OAuth::setCAPath",
					"description": "Set CA path and info"
				},
				"oauth.setnonce": {
					"tokens": [
						"OAuth::setNonce",
						"setNonce",
						"::setNonce"
					],
					"id": "oauth.setnonce",
					"name": "OAuth::setNonce",
					"description": "Set the nonce for subsequent requests"
				},
				"oauth.setrequestengine": {
					"tokens": [
						"OAuth::setRequestEngine",
						"setRequestEngine",
						"::setRequestEngine"
					],
					"id": "oauth.setrequestengine",
					"name": "OAuth::setRequestEngine",
					"description": "The setRequestEngine purpose"
				},
				"oauth.setrsacertificate": {
					"tokens": [
						"OAuth::setRSACertificate",
						"setRSACertificate",
						"::setRSACertificate"
					],
					"id": "oauth.setrsacertificate",
					"name": "OAuth::setRSACertificate",
					"description": "Set the RSA certificate"
				},
				"oauth.setsslchecks": {
					"tokens": [
						"OAuth::setSSLChecks",
						"setSSLChecks",
						"::setSSLChecks"
					],
					"id": "oauth.setsslchecks",
					"name": "OAuth::setSSLChecks",
					"description": "Tweak specific SSL checks for requests."
				},
				"oauth.settimestamp": {
					"tokens": [
						"OAuth::setTimestamp",
						"setTimestamp",
						"::setTimestamp"
					],
					"id": "oauth.settimestamp",
					"name": "OAuth::setTimestamp",
					"description": "Set the timestamp"
				},
				"oauth.settoken": {
					"tokens": [
						"OAuth::setToken",
						"setToken",
						"::setToken"
					],
					"id": "oauth.settoken",
					"name": "OAuth::setToken",
					"description": "Sets the token and secret"
				},
				"oauth.setversion": {
					"tokens": [
						"OAuth::setVersion",
						"setVersion",
						"::setVersion"
					],
					"id": "oauth.setversion",
					"name": "OAuth::setVersion",
					"description": "Set the OAuth version"
				},
				"oauthprovider.addrequiredparameter": {
					"tokens": [
						"OAuthProvider::addRequiredParameter",
						"addRequiredParameter",
						"::addRequiredParameter"
					],
					"id": "oauthprovider.addrequiredparameter",
					"name": "OAuthProvider::addRequiredParameter",
					"description": "Add required parameters"
				},
				"oauthprovider.callconsumerhandler": {
					"tokens": [
						"OAuthProvider::callconsumerHandler",
						"callconsumerHandler",
						"::callconsumerHandler"
					],
					"id": "oauthprovider.callconsumerhandler",
					"name": "OAuthProvider::callconsumerHandler",
					"description": "Calls the consumerNonceHandler callback"
				},
				"oauthprovider.calltimestampnoncehandler": {
					"tokens": [
						"OAuthProvider::callTimestampNonceHandler",
						"callTimestampNonceHandler",
						"::callTimestampNonceHandler"
					],
					"id": "oauthprovider.calltimestampnoncehandler",
					"name": "OAuthProvider::callTimestampNonceHandler",
					"description": "Calls the timestampNonceHandler callback"
				},
				"oauthprovider.calltokenhandler": {
					"tokens": [
						"OAuthProvider::calltokenHandler",
						"calltokenHandler",
						"::calltokenHandler"
					],
					"id": "oauthprovider.calltokenhandler",
					"name": "OAuthProvider::calltokenHandler",
					"description": "Calls the tokenNonceHandler callback"
				},
				"oauthprovider.checkoauthrequest": {
					"tokens": [
						"OAuthProvider::checkOAuthRequest",
						"checkOAuthRequest",
						"::checkOAuthRequest"
					],
					"id": "oauthprovider.checkoauthrequest",
					"name": "OAuthProvider::checkOAuthRequest",
					"description": "Check an oauth request"
				},
				"oauthprovider.construct": {
					"tokens": [
						"OAuthProvider::__construct",
						"OAuthProvider::_construct",
						"__construct",
						"::__construct"
					],
					"id": "oauthprovider.construct",
					"name": "OAuthProvider::__construct",
					"description": "Constructs a new OAuthProvider object"
				},
				"oauthprovider.consumerhandler": {
					"tokens": [
						"OAuthProvider::consumerHandler",
						"consumerHandler",
						"::consumerHandler"
					],
					"id": "oauthprovider.consumerhandler",
					"name": "OAuthProvider::consumerHandler",
					"description": "Set the consumerHandler handler callback"
				},
				"oauthprovider.generatetoken": {
					"tokens": [
						"OAuthProvider::generateToken",
						"generateToken",
						"::generateToken"
					],
					"id": "oauthprovider.generatetoken",
					"name": "OAuthProvider::generateToken",
					"description": "Generate a random token"
				},
				"oauthprovider.is2leggedendpoint": {
					"tokens": [
						"OAuthProvider::is2LeggedEndpoint",
						"is2LeggedEndpoint",
						"::is2LeggedEndpoint"
					],
					"id": "oauthprovider.is2leggedendpoint",
					"name": "OAuthProvider::is2LeggedEndpoint",
					"description": "is2LeggedEndpoint"
				},
				"oauthprovider.isrequesttokenendpoint": {
					"tokens": [
						"OAuthProvider::isRequestTokenEndpoint",
						"isRequestTokenEndpoint",
						"::isRequestTokenEndpoint"
					],
					"id": "oauthprovider.isrequesttokenendpoint",
					"name": "OAuthProvider::isRequestTokenEndpoint",
					"description": "Sets isRequestTokenEndpoint"
				},
				"oauthprovider.removerequiredparameter": {
					"tokens": [
						"OAuthProvider::removeRequiredParameter",
						"removeRequiredParameter",
						"::removeRequiredParameter"
					],
					"id": "oauthprovider.removerequiredparameter",
					"name": "OAuthProvider::removeRequiredParameter",
					"description": "Remove a required parameter"
				},
				"oauthprovider.reportproblem": {
					"tokens": [
						"OAuthProvider::reportProblem",
						"reportProblem",
						"::reportProblem"
					],
					"id": "oauthprovider.reportproblem",
					"name": "OAuthProvider::reportProblem",
					"description": "Report a problem"
				},
				"oauthprovider.setparam": {
					"tokens": [
						"OAuthProvider::setParam",
						"setParam",
						"::setParam"
					],
					"id": "oauthprovider.setparam",
					"name": "OAuthProvider::setParam",
					"description": "Set a parameter"
				},
				"oauthprovider.setrequesttokenpath": {
					"tokens": [
						"OAuthProvider::setRequestTokenPath",
						"setRequestTokenPath",
						"::setRequestTokenPath"
					],
					"id": "oauthprovider.setrequesttokenpath",
					"name": "OAuthProvider::setRequestTokenPath",
					"description": "Set request token path"
				},
				"oauthprovider.timestampnoncehandler": {
					"tokens": [
						"OAuthProvider::timestampNonceHandler",
						"timestampNonceHandler",
						"::timestampNonceHandler"
					],
					"id": "oauthprovider.timestampnoncehandler",
					"name": "OAuthProvider::timestampNonceHandler",
					"description": "Set the timestampNonceHandler handler callback"
				},
				"oauthprovider.tokenhandler": {
					"tokens": [
						"OAuthProvider::tokenHandler",
						"tokenHandler",
						"::tokenHandler"
					],
					"id": "oauthprovider.tokenhandler",
					"name": "OAuthProvider::tokenHandler",
					"description": "Set the tokenHandler handler callback"
				},
				"sca.createdataobject": {
					"tokens": [
						"SCA::createDataObject",
						"createDataObject",
						"::createDataObject"
					],
					"id": "sca.createdataobject",
					"name": "SCA::createDataObject",
					"description": "create an SDO"
				},
				"sca.getservice": {
					"tokens": [
						"SCA::getService",
						"getService",
						"::getService"
					],
					"id": "sca.getservice",
					"name": "SCA::getService",
					"description": "Obtain a proxy for a service"
				},
				"sca-localproxy.createdataobject": {
					"tokens": [
						"SCA_LocalProxy::createDataObject",
						"SCALocalProxy::createDataObject",
						"createDataObject",
						"::createDataObject"
					],
					"id": "sca-localproxy.createdataobject",
					"name": "SCA_LocalProxy::createDataObject",
					"description": "create an SDO"
				},
				"sca-soapproxy.createdataobject": {
					"tokens": [
						"SCA_SoapProxy::createDataObject",
						"SCASoapProxy::createDataObject",
						"createDataObject",
						"::createDataObject"
					],
					"id": "sca-soapproxy.createdataobject",
					"name": "SCA_SoapProxy::createDataObject",
					"description": "create an SDO"
				},
				"function.is-soap-fault": {
					"tokens": [
						"is_soap_fault",
						"issoap_fault"
					],
					"id": "function.is-soap-fault",
					"name": "is_soap_fault",
					"description": "Checks if a SOAP call has failed"
				},
				"function.use-soap-error-handler": {
					"tokens": [
						"use_soap_error_handler",
						"usesoap_error_handler"
					],
					"id": "function.use-soap-error-handler",
					"name": "use_soap_error_handler",
					"description": "Set whether to use the SOAP error handler"
				},
				"soapclient.call": {
					"tokens": [
						"SoapClient::__call",
						"SoapClient::_call",
						"__call",
						"::__call"
					],
					"id": "soapclient.call",
					"name": "SoapClient::__call",
					"description": "Calls a SOAP function (deprecated)"
				},
				"soapclient.construct": {
					"tokens": [
						"SoapClient::__construct",
						"SoapClient::_construct",
						"__construct",
						"::__construct"
					],
					"id": "soapclient.construct",
					"name": "SoapClient::__construct",
					"description": "SoapClient constructor"
				},
				"soapclient.dorequest": {
					"tokens": [
						"SoapClient::__doRequest",
						"SoapClient::_doRequest",
						"__doRequest",
						"::__doRequest"
					],
					"id": "soapclient.dorequest",
					"name": "SoapClient::__doRequest",
					"description": "Performs a SOAP request"
				},
				"soapclient.getfunctions": {
					"tokens": [
						"SoapClient::__getFunctions",
						"SoapClient::_getFunctions",
						"__getFunctions",
						"::__getFunctions"
					],
					"id": "soapclient.getfunctions",
					"name": "SoapClient::__getFunctions",
					"description": "Returns list of available SOAP functions"
				},
				"soapclient.getlastrequest": {
					"tokens": [
						"SoapClient::__getLastRequest",
						"SoapClient::_getLastRequest",
						"__getLastRequest",
						"::__getLastRequest"
					],
					"id": "soapclient.getlastrequest",
					"name": "SoapClient::__getLastRequest",
					"description": "Returns last SOAP request"
				},
				"soapclient.getlastrequestheaders": {
					"tokens": [
						"SoapClient::__getLastRequestHeaders",
						"SoapClient::_getLastRequestHeaders",
						"__getLastRequestHeaders",
						"::__getLastRequestHeaders"
					],
					"id": "soapclient.getlastrequestheaders",
					"name": "SoapClient::__getLastRequestHeaders",
					"description": "Returns the SOAP headers from the last request"
				},
				"soapclient.getlastresponse": {
					"tokens": [
						"SoapClient::__getLastResponse",
						"SoapClient::_getLastResponse",
						"__getLastResponse",
						"::__getLastResponse"
					],
					"id": "soapclient.getlastresponse",
					"name": "SoapClient::__getLastResponse",
					"description": "Returns last SOAP response"
				},
				"soapclient.getlastresponseheaders": {
					"tokens": [
						"SoapClient::__getLastResponseHeaders",
						"SoapClient::_getLastResponseHeaders",
						"__getLastResponseHeaders",
						"::__getLastResponseHeaders"
					],
					"id": "soapclient.getlastresponseheaders",
					"name": "SoapClient::__getLastResponseHeaders",
					"description": "Returns the SOAP headers from the last response"
				},
				"soapclient.gettypes": {
					"tokens": [
						"SoapClient::__getTypes",
						"SoapClient::_getTypes",
						"__getTypes",
						"::__getTypes"
					],
					"id": "soapclient.gettypes",
					"name": "SoapClient::__getTypes",
					"description": "Returns a list of SOAP types"
				},
				"soapclient.setcookie": {
					"tokens": [
						"SoapClient::__setCookie",
						"SoapClient::_setCookie",
						"__setCookie",
						"::__setCookie"
					],
					"id": "soapclient.setcookie",
					"name": "SoapClient::__setCookie",
					"description": "The __setCookie purpose"
				},
				"soapclient.setlocation": {
					"tokens": [
						"SoapClient::__setLocation",
						"SoapClient::_setLocation",
						"__setLocation",
						"::__setLocation"
					],
					"id": "soapclient.setlocation",
					"name": "SoapClient::__setLocation",
					"description": "Sets the location of the Web service to use"
				},
				"soapclient.setsoapheaders": {
					"tokens": [
						"SoapClient::__setSoapHeaders",
						"SoapClient::_setSoapHeaders",
						"__setSoapHeaders",
						"::__setSoapHeaders"
					],
					"id": "soapclient.setsoapheaders",
					"name": "SoapClient::__setSoapHeaders",
					"description": "Sets SOAP headers for subsequent calls"
				},
				"soapclient.soapcall": {
					"tokens": [
						"SoapClient::__soapCall",
						"SoapClient::_soapCall",
						"__soapCall",
						"::__soapCall"
					],
					"id": "soapclient.soapcall",
					"name": "SoapClient::__soapCall",
					"description": "Calls a SOAP function"
				},
				"soapclient.soapclient": {
					"tokens": [
						"SoapClient::SoapClient",
						"SoapClient",
						"::SoapClient"
					],
					"id": "soapclient.soapclient",
					"name": "SoapClient::SoapClient",
					"description": "SoapClient constructor"
				},
				"soapserver.addfunction": {
					"tokens": [
						"SoapServer::addFunction",
						"addFunction",
						"::addFunction"
					],
					"id": "soapserver.addfunction",
					"name": "SoapServer::addFunction",
					"description": "Adds one or more functions to handle SOAP requests"
				},
				"soapserver.addsoapheader": {
					"tokens": [
						"SoapServer::addSoapHeader",
						"addSoapHeader",
						"::addSoapHeader"
					],
					"id": "soapserver.addsoapheader",
					"name": "SoapServer::addSoapHeader",
					"description": "Add a SOAP header to the response"
				},
				"soapserver.construct": {
					"tokens": [
						"SoapServer::__construct",
						"SoapServer::_construct",
						"__construct",
						"::__construct"
					],
					"id": "soapserver.construct",
					"name": "SoapServer::__construct",
					"description": "SoapServer constructor"
				},
				"soapserver.fault": {
					"tokens": [
						"SoapServer::fault",
						"fault",
						"::fault"
					],
					"id": "soapserver.fault",
					"name": "SoapServer::fault",
					"description": "Issue SoapServer fault indicating an error"
				},
				"soapserver.getfunctions": {
					"tokens": [
						"SoapServer::getFunctions",
						"getFunctions",
						"::getFunctions"
					],
					"id": "soapserver.getfunctions",
					"name": "SoapServer::getFunctions",
					"description": "Returns list of defined functions"
				},
				"soapserver.handle": {
					"tokens": [
						"SoapServer::handle",
						"handle",
						"::handle"
					],
					"id": "soapserver.handle",
					"name": "SoapServer::handle",
					"description": "Handles a SOAP request"
				},
				"soapserver.setclass": {
					"tokens": [
						"SoapServer::setClass",
						"setClass",
						"::setClass"
					],
					"id": "soapserver.setclass",
					"name": "SoapServer::setClass",
					"description": "Sets the class which handles SOAP requests"
				},
				"soapserver.setobject": {
					"tokens": [
						"SoapServer::setObject",
						"setObject",
						"::setObject"
					],
					"id": "soapserver.setobject",
					"name": "SoapServer::setObject",
					"description": "Sets the object which will be used to handle SOAP requests"
				},
				"soapserver.setpersistence": {
					"tokens": [
						"SoapServer::setPersistence",
						"setPersistence",
						"::setPersistence"
					],
					"id": "soapserver.setpersistence",
					"name": "SoapServer::setPersistence",
					"description": "Sets SoapServer persistence mode"
				},
				"soapserver.soapserver": {
					"tokens": [
						"SoapServer::SoapServer",
						"SoapServer",
						"::SoapServer"
					],
					"id": "soapserver.soapserver",
					"name": "SoapServer::SoapServer",
					"description": "SoapServer constructor"
				},
				"soapfault.construct": {
					"tokens": [
						"SoapFault::__construct",
						"SoapFault::_construct",
						"__construct",
						"::__construct"
					],
					"id": "soapfault.construct",
					"name": "SoapFault::__construct",
					"description": "SoapFault constructor"
				},
				"soapfault.soapfault": {
					"tokens": [
						"SoapFault::SoapFault",
						"SoapFault",
						"::SoapFault"
					],
					"id": "soapfault.soapfault",
					"name": "SoapFault::SoapFault",
					"description": "SoapFault constructor"
				},
				"soapfault.tostring": {
					"tokens": [
						"SoapFault::__toString",
						"SoapFault::_toString",
						"__toString",
						"::__toString"
					],
					"id": "soapfault.tostring",
					"name": "SoapFault::__toString",
					"description": "Obtain a string representation of a SoapFault"
				},
				"soapheader.construct": {
					"tokens": [
						"SoapHeader::__construct",
						"SoapHeader::_construct",
						"__construct",
						"::__construct"
					],
					"id": "soapheader.construct",
					"name": "SoapHeader::__construct",
					"description": "SoapHeader constructor"
				},
				"soapheader.soapheader": {
					"tokens": [
						"SoapHeader::SoapHeader",
						"SoapHeader",
						"::SoapHeader"
					],
					"id": "soapheader.soapheader",
					"name": "SoapHeader::SoapHeader",
					"description": "SoapHeader constructor"
				},
				"soapparam.construct": {
					"tokens": [
						"SoapParam::__construct",
						"SoapParam::_construct",
						"__construct",
						"::__construct"
					],
					"id": "soapparam.construct",
					"name": "SoapParam::__construct",
					"description": "SoapParam constructor"
				},
				"soapparam.soapparam": {
					"tokens": [
						"SoapParam::SoapParam",
						"SoapParam",
						"::SoapParam"
					],
					"id": "soapparam.soapparam",
					"name": "SoapParam::SoapParam",
					"description": "SoapParam constructor"
				},
				"soapvar.construct": {
					"tokens": [
						"SoapVar::__construct",
						"SoapVar::_construct",
						"__construct",
						"::__construct"
					],
					"id": "soapvar.construct",
					"name": "SoapVar::__construct",
					"description": "SoapVar constructor"
				},
				"soapvar.soapvar": {
					"tokens": [
						"SoapVar::SoapVar",
						"SoapVar",
						"::SoapVar"
					],
					"id": "soapvar.soapvar",
					"name": "SoapVar::SoapVar",
					"description": "SoapVar constructor"
				},
				"yar-server.construct": {
					"tokens": [
						"Yar_Server::__construct",
						"YarServer::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yar-server.construct",
					"name": "Yar_Server::__construct",
					"description": "Register a server"
				},
				"yar-server.handle": {
					"tokens": [
						"Yar_Server::handle",
						"YarServer::handle",
						"handle",
						"::handle"
					],
					"id": "yar-server.handle",
					"name": "Yar_Server::handle",
					"description": "Start RPC Server"
				},
				"yar-client.call": {
					"tokens": [
						"Yar_Client::__call",
						"YarClient::__call",
						"__call",
						"::__call"
					],
					"id": "yar-client.call",
					"name": "Yar_Client::__call",
					"description": "Call service"
				},
				"yar-client.construct": {
					"tokens": [
						"Yar_Client::__construct",
						"YarClient::__construct",
						"__construct",
						"::__construct"
					],
					"id": "yar-client.construct",
					"name": "Yar_Client::__construct",
					"description": "Create a client"
				},
				"yar-client.setopt": {
					"tokens": [
						"Yar_Client::setOpt",
						"YarClient::setOpt",
						"setOpt",
						"::setOpt"
					],
					"id": "yar-client.setopt",
					"name": "Yar_Client::setOpt",
					"description": "Set calling contexts"
				},
				"yar-concurrent-client.call": {
					"tokens": [
						"Yar_Concurrent_Client::call",
						"YarConcurrent_Client::call",
						"call",
						"::call"
					],
					"id": "yar-concurrent-client.call",
					"name": "Yar_Concurrent_Client::call",
					"description": "Register a concurrent call"
				},
				"yar-concurrent-client.loop": {
					"tokens": [
						"Yar_Concurrent_Client::loop",
						"YarConcurrent_Client::loop",
						"loop",
						"::loop"
					],
					"id": "yar-concurrent-client.loop",
					"name": "Yar_Concurrent_Client::loop",
					"description": "Send all calls"
				},
				"yar-concurrent-client.reset": {
					"tokens": [
						"Yar_Concurrent_Client::reset",
						"YarConcurrent_Client::reset",
						"reset",
						"::reset"
					],
					"id": "yar-concurrent-client.reset",
					"name": "Yar_Concurrent_Client::reset",
					"description": "Clean all registered calls"
				},
				"yar-server-exception.gettype": {
					"tokens": [
						"Yar_Server_Exception::getType",
						"YarServer_Exception::getType",
						"getType",
						"::getType"
					],
					"id": "yar-server-exception.gettype",
					"name": "Yar_Server_Exception::getType",
					"description": "The getType purpose"
				},
				"yar-client-exception.gettype": {
					"tokens": [
						"Yar_Client_Exception::getType",
						"YarClient_Exception::getType",
						"getType",
						"::getType"
					],
					"id": "yar-client-exception.gettype",
					"name": "Yar_Client_Exception::getType",
					"description": "The getType purpose"
				},
				"function.xmlrpc-decode-request": {
					"tokens": [
						"xmlrpc_decode_request",
						"xmlrpcdecode_request"
					],
					"id": "function.xmlrpc-decode-request",
					"name": "xmlrpc_decode_request",
					"description": "Decodes XML into native PHP types"
				},
				"function.xmlrpc-decode": {
					"tokens": [
						"xmlrpc_decode",
						"xmlrpcdecode"
					],
					"id": "function.xmlrpc-decode",
					"name": "xmlrpc_decode",
					"description": "Decodes XML into native PHP types"
				},
				"function.xmlrpc-encode-request": {
					"tokens": [
						"xmlrpc_encode_request",
						"xmlrpcencode_request"
					],
					"id": "function.xmlrpc-encode-request",
					"name": "xmlrpc_encode_request",
					"description": "Generates XML for a method request"
				},
				"function.xmlrpc-encode": {
					"tokens": [
						"xmlrpc_encode",
						"xmlrpcencode"
					],
					"id": "function.xmlrpc-encode",
					"name": "xmlrpc_encode",
					"description": "Generates XML for a PHP value"
				},
				"function.xmlrpc-get-type": {
					"tokens": [
						"xmlrpc_get_type",
						"xmlrpcget_type"
					],
					"id": "function.xmlrpc-get-type",
					"name": "xmlrpc_get_type",
					"description": "Gets xmlrpc type for a PHP value"
				},
				"function.xmlrpc-is-fault": {
					"tokens": [
						"xmlrpc_is_fault",
						"xmlrpcis_fault"
					],
					"id": "function.xmlrpc-is-fault",
					"name": "xmlrpc_is_fault",
					"description": "Determines if an array value represents an XMLRPC fault"
				},
				"function.xmlrpc-parse-method-descriptions": {
					"tokens": [
						"xmlrpc_parse_method_descriptions",
						"xmlrpcparse_method_descriptions"
					],
					"id": "function.xmlrpc-parse-method-descriptions",
					"name": "xmlrpc_parse_method_descriptions",
					"description": "Decodes XML into a list of method descriptions"
				},
				"function.xmlrpc-server-add-introspection-data": {
					"tokens": [
						"xmlrpc_server_add_introspection_data",
						"xmlrpcserver_add_introspection_data"
					],
					"id": "function.xmlrpc-server-add-introspection-data",
					"name": "xmlrpc_server_add_introspection_data",
					"description": "Adds introspection documentation"
				},
				"function.xmlrpc-server-call-method": {
					"tokens": [
						"xmlrpc_server_call_method",
						"xmlrpcserver_call_method"
					],
					"id": "function.xmlrpc-server-call-method",
					"name": "xmlrpc_server_call_method",
					"description": "Parses XML requests and call methods"
				},
				"function.xmlrpc-server-create": {
					"tokens": [
						"xmlrpc_server_create",
						"xmlrpcserver_create"
					],
					"id": "function.xmlrpc-server-create",
					"name": "xmlrpc_server_create",
					"description": "Creates an xmlrpc server"
				},
				"function.xmlrpc-server-destroy": {
					"tokens": [
						"xmlrpc_server_destroy",
						"xmlrpcserver_destroy"
					],
					"id": "function.xmlrpc-server-destroy",
					"name": "xmlrpc_server_destroy",
					"description": "Destroys server resources"
				},
				"function.xmlrpc-server-register-introspection-callback": {
					"tokens": [
						"xmlrpc_server_register_introspection_callback",
						"xmlrpcserver_register_introspection_callback"
					],
					"id": "function.xmlrpc-server-register-introspection-callback",
					"name": "xmlrpc_server_register_introspection_callback",
					"description": "Register a PHP function to generate documentation"
				},
				"function.xmlrpc-server-register-method": {
					"tokens": [
						"xmlrpc_server_register_method",
						"xmlrpcserver_register_method"
					],
					"id": "function.xmlrpc-server-register-method",
					"name": "xmlrpc_server_register_method",
					"description": "Register a PHP function to resource method matching method_name"
				},
				"function.xmlrpc-set-type": {
					"tokens": [
						"xmlrpc_set_type",
						"xmlrpcset_type"
					],
					"id": "function.xmlrpc-set-type",
					"name": "xmlrpc_set_type",
					"description": "Sets xmlrpc type, base64 or datetime, for a PHP string value"
				},
				"function.com-create-guid": {
					"tokens": [
						"com_create_guid",
						"comcreate_guid"
					],
					"id": "function.com-create-guid",
					"name": "com_create_guid",
					"description": "Generate a globally unique identifier (GUID)"
				},
				"function.com-event-sink": {
					"tokens": [
						"com_event_sink",
						"comevent_sink"
					],
					"id": "function.com-event-sink",
					"name": "com_event_sink",
					"description": "Connect events from a COM object to a PHP object"
				},
				"function.com-get-active-object": {
					"tokens": [
						"com_get_active_object",
						"comget_active_object"
					],
					"id": "function.com-get-active-object",
					"name": "com_get_active_object",
					"description": "Returns a handle to an already running instance of a COM object"
				},
				"function.com-load-typelib": {
					"tokens": [
						"com_load_typelib",
						"comload_typelib"
					],
					"id": "function.com-load-typelib",
					"name": "com_load_typelib",
					"description": "Loads a Typelib"
				},
				"function.com-message-pump": {
					"tokens": [
						"com_message_pump",
						"commessage_pump"
					],
					"id": "function.com-message-pump",
					"name": "com_message_pump",
					"description": "Process COM messages, sleeping for up to timeoutms milliseconds"
				},
				"function.com-print-typeinfo": {
					"tokens": [
						"com_print_typeinfo",
						"comprint_typeinfo"
					],
					"id": "function.com-print-typeinfo",
					"name": "com_print_typeinfo",
					"description": "Print out a PHP class definition for a dispatchable interface"
				},
				"function.variant-abs": {
					"tokens": [
						"variant_abs",
						"variantabs"
					],
					"id": "function.variant-abs",
					"name": "variant_abs",
					"description": "Returns the absolute value of a variant"
				},
				"function.variant-add": {
					"tokens": [
						"variant_add",
						"variantadd"
					],
					"id": "function.variant-add",
					"name": "variant_add",
					"description": "&quot;Adds&quot; two variant values together and returns the result"
				},
				"function.variant-and": {
					"tokens": [
						"variant_and",
						"variantand"
					],
					"id": "function.variant-and",
					"name": "variant_and",
					"description": "Performs a bitwise AND operation between two variants"
				},
				"function.variant-cast": {
					"tokens": [
						"variant_cast",
						"variantcast"
					],
					"id": "function.variant-cast",
					"name": "variant_cast",
					"description": "Convert a variant into a new variant object of another type"
				},
				"function.variant-cat": {
					"tokens": [
						"variant_cat",
						"variantcat"
					],
					"id": "function.variant-cat",
					"name": "variant_cat",
					"description": "concatenates two variant values together and returns the result"
				},
				"function.variant-cmp": {
					"tokens": [
						"variant_cmp",
						"variantcmp"
					],
					"id": "function.variant-cmp",
					"name": "variant_cmp",
					"description": "Compares two variants"
				},
				"function.variant-date-from-timestamp": {
					"tokens": [
						"variant_date_from_timestamp",
						"variantdate_from_timestamp"
					],
					"id": "function.variant-date-from-timestamp",
					"name": "variant_date_from_timestamp",
					"description": "Returns a variant date representation of a Unix timestamp"
				},
				"function.variant-date-to-timestamp": {
					"tokens": [
						"variant_date_to_timestamp",
						"variantdate_to_timestamp"
					],
					"id": "function.variant-date-to-timestamp",
					"name": "variant_date_to_timestamp",
					"description": "Converts a variant date/time value to Unix timestamp"
				},
				"function.variant-div": {
					"tokens": [
						"variant_div",
						"variantdiv"
					],
					"id": "function.variant-div",
					"name": "variant_div",
					"description": "Returns the result from dividing two variants"
				},
				"function.variant-eqv": {
					"tokens": [
						"variant_eqv",
						"varianteqv"
					],
					"id": "function.variant-eqv",
					"name": "variant_eqv",
					"description": "Performs a bitwise equivalence on two variants"
				},
				"function.variant-fix": {
					"tokens": [
						"variant_fix",
						"variantfix"
					],
					"id": "function.variant-fix",
					"name": "variant_fix",
					"description": "Returns the integer portion of a variant"
				},
				"function.variant-get-type": {
					"tokens": [
						"variant_get_type",
						"variantget_type"
					],
					"id": "function.variant-get-type",
					"name": "variant_get_type",
					"description": "Returns the type of a variant object"
				},
				"function.variant-idiv": {
					"tokens": [
						"variant_idiv",
						"variantidiv"
					],
					"id": "function.variant-idiv",
					"name": "variant_idiv",
					"description": "Converts variants to integers and then returns the result from dividing them"
				},
				"function.variant-imp": {
					"tokens": [
						"variant_imp",
						"variantimp"
					],
					"id": "function.variant-imp",
					"name": "variant_imp",
					"description": "Performs a bitwise implication on two variants"
				},
				"function.variant-int": {
					"tokens": [
						"variant_int",
						"variantint"
					],
					"id": "function.variant-int",
					"name": "variant_int",
					"description": "Returns the integer portion of a variant"
				},
				"function.variant-mod": {
					"tokens": [
						"variant_mod",
						"variantmod"
					],
					"id": "function.variant-mod",
					"name": "variant_mod",
					"description": "Divides two variants and returns only the remainder"
				},
				"function.variant-mul": {
					"tokens": [
						"variant_mul",
						"variantmul"
					],
					"id": "function.variant-mul",
					"name": "variant_mul",
					"description": "Multiplies the values of the two variants"
				},
				"function.variant-neg": {
					"tokens": [
						"variant_neg",
						"variantneg"
					],
					"id": "function.variant-neg",
					"name": "variant_neg",
					"description": "Performs logical negation on a variant"
				},
				"function.variant-not": {
					"tokens": [
						"variant_not",
						"variantnot"
					],
					"id": "function.variant-not",
					"name": "variant_not",
					"description": "Performs bitwise not negation on a variant"
				},
				"function.variant-or": {
					"tokens": [
						"variant_or",
						"variantor"
					],
					"id": "function.variant-or",
					"name": "variant_or",
					"description": "Performs a logical disjunction on two variants"
				},
				"function.variant-pow": {
					"tokens": [
						"variant_pow",
						"variantpow"
					],
					"id": "function.variant-pow",
					"name": "variant_pow",
					"description": "Returns the result of performing the power function with two variants"
				},
				"function.variant-round": {
					"tokens": [
						"variant_round",
						"variantround"
					],
					"id": "function.variant-round",
					"name": "variant_round",
					"description": "Rounds a variant to the specified number of decimal places"
				},
				"function.variant-set-type": {
					"tokens": [
						"variant_set_type",
						"variantset_type"
					],
					"id": "function.variant-set-type",
					"name": "variant_set_type",
					"description": "Convert a variant into another type &quot;in-place&quot;"
				},
				"function.variant-set": {
					"tokens": [
						"variant_set",
						"variantset"
					],
					"id": "function.variant-set",
					"name": "variant_set",
					"description": "Assigns a new value for a variant object"
				},
				"function.variant-sub": {
					"tokens": [
						"variant_sub",
						"variantsub"
					],
					"id": "function.variant-sub",
					"name": "variant_sub",
					"description": "Subtracts the value of the right variant from the left variant value"
				},
				"function.variant-xor": {
					"tokens": [
						"variant_xor",
						"variantxor"
					],
					"id": "function.variant-xor",
					"name": "variant_xor",
					"description": "Performs a logical exclusion on two variants"
				},
				"function.win32-ps-list-procs": {
					"tokens": [
						"win32_ps_list_procs",
						"win32ps_list_procs"
					],
					"id": "function.win32-ps-list-procs",
					"name": "win32_ps_list_procs",
					"description": "List running processes"
				},
				"function.win32-ps-stat-mem": {
					"tokens": [
						"win32_ps_stat_mem",
						"win32ps_stat_mem"
					],
					"id": "function.win32-ps-stat-mem",
					"name": "win32_ps_stat_mem",
					"description": "Stat memory utilization"
				},
				"function.win32-ps-stat-proc": {
					"tokens": [
						"win32_ps_stat_proc",
						"win32ps_stat_proc"
					],
					"id": "function.win32-ps-stat-proc",
					"name": "win32_ps_stat_proc",
					"description": "Stat process"
				},
				"function.win32-continue-service": {
					"tokens": [
						"win32_continue_service",
						"win32continue_service"
					],
					"id": "function.win32-continue-service",
					"name": "win32_continue_service",
					"description": "Resumes a paused service"
				},
				"function.win32-create-service": {
					"tokens": [
						"win32_create_service",
						"win32create_service"
					],
					"id": "function.win32-create-service",
					"name": "win32_create_service",
					"description": "Creates a new service entry in the SCM database"
				},
				"function.win32-delete-service": {
					"tokens": [
						"win32_delete_service",
						"win32delete_service"
					],
					"id": "function.win32-delete-service",
					"name": "win32_delete_service",
					"description": "Deletes a service entry from the SCM database"
				},
				"function.win32-get-last-control-message": {
					"tokens": [
						"win32_get_last_control_message",
						"win32get_last_control_message"
					],
					"id": "function.win32-get-last-control-message",
					"name": "win32_get_last_control_message",
					"description": "Returns the last control message that was sent to this service"
				},
				"function.win32-pause-service": {
					"tokens": [
						"win32_pause_service",
						"win32pause_service"
					],
					"id": "function.win32-pause-service",
					"name": "win32_pause_service",
					"description": "Pauses a service"
				},
				"function.win32-query-service-status": {
					"tokens": [
						"win32_query_service_status",
						"win32query_service_status"
					],
					"id": "function.win32-query-service-status",
					"name": "win32_query_service_status",
					"description": "Queries the status of a service"
				},
				"function.win32-set-service-status": {
					"tokens": [
						"win32_set_service_status",
						"win32set_service_status"
					],
					"id": "function.win32-set-service-status",
					"name": "win32_set_service_status",
					"description": "Update the service status"
				},
				"function.win32-start-service-ctrl-dispatcher": {
					"tokens": [
						"win32_start_service_ctrl_dispatcher",
						"win32start_service_ctrl_dispatcher"
					],
					"id": "function.win32-start-service-ctrl-dispatcher",
					"name": "win32_start_service_ctrl_dispatcher",
					"description": "Registers the script with the SCM, so that it can act as the service with the given name"
				},
				"function.win32-start-service": {
					"tokens": [
						"win32_start_service",
						"win32start_service"
					],
					"id": "function.win32-start-service",
					"name": "win32_start_service",
					"description": "Starts a service"
				},
				"function.win32-stop-service": {
					"tokens": [
						"win32_stop_service",
						"win32stop_service"
					],
					"id": "function.win32-stop-service",
					"name": "win32_stop_service",
					"description": "Stops a service"
				},
				"domattr.construct": {
					"tokens": [
						"DOMAttr::__construct",
						"DOMAttr::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domattr.construct",
					"name": "DOMAttr::__construct",
					"description": "Creates a new DOMAttr object"
				},
				"domattr.isid": {
					"tokens": [
						"DOMAttr::isId",
						"isId",
						"::isId"
					],
					"id": "domattr.isid",
					"name": "DOMAttr::isId",
					"description": "Checks if attribute is a defined ID"
				},
				"domcdatasection.construct": {
					"tokens": [
						"DOMCdataSection::__construct",
						"DOMCdataSection::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domcdatasection.construct",
					"name": "DOMCdataSection::__construct",
					"description": "Constructs a new DOMCdataSection object"
				},
				"domcharacterdata.appenddata": {
					"tokens": [
						"DOMCharacterData::appendData",
						"appendData",
						"::appendData"
					],
					"id": "domcharacterdata.appenddata",
					"name": "DOMCharacterData::appendData",
					"description": "Append the string to the end of the character data of the node"
				},
				"domcharacterdata.deletedata": {
					"tokens": [
						"DOMCharacterData::deleteData",
						"deleteData",
						"::deleteData"
					],
					"id": "domcharacterdata.deletedata",
					"name": "DOMCharacterData::deleteData",
					"description": "Remove a range of characters from the node"
				},
				"domcharacterdata.insertdata": {
					"tokens": [
						"DOMCharacterData::insertData",
						"insertData",
						"::insertData"
					],
					"id": "domcharacterdata.insertdata",
					"name": "DOMCharacterData::insertData",
					"description": "Insert a string at the specified 16-bit unit offset"
				},
				"domcharacterdata.replacedata": {
					"tokens": [
						"DOMCharacterData::replaceData",
						"replaceData",
						"::replaceData"
					],
					"id": "domcharacterdata.replacedata",
					"name": "DOMCharacterData::replaceData",
					"description": "Replace a substring within the DOMCharacterData node"
				},
				"domcharacterdata.substringdata": {
					"tokens": [
						"DOMCharacterData::substringData",
						"substringData",
						"::substringData"
					],
					"id": "domcharacterdata.substringdata",
					"name": "DOMCharacterData::substringData",
					"description": "Extracts a range of data from the node"
				},
				"domcomment.construct": {
					"tokens": [
						"DOMComment::__construct",
						"DOMComment::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domcomment.construct",
					"name": "DOMComment::__construct",
					"description": "Creates a new DOMComment object"
				},
				"domdocument.construct": {
					"tokens": [
						"DOMDocument::__construct",
						"DOMDocument::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domdocument.construct",
					"name": "DOMDocument::__construct",
					"description": "Creates a new DOMDocument object"
				},
				"domdocument.createattribute": {
					"tokens": [
						"DOMDocument::createAttribute",
						"createAttribute",
						"::createAttribute"
					],
					"id": "domdocument.createattribute",
					"name": "DOMDocument::createAttribute",
					"description": "Create new attribute"
				},
				"domdocument.createattributens": {
					"tokens": [
						"DOMDocument::createAttributeNS",
						"createAttributeNS",
						"::createAttributeNS"
					],
					"id": "domdocument.createattributens",
					"name": "DOMDocument::createAttributeNS",
					"description": "Create new attribute node with an associated namespace"
				},
				"domdocument.createcdatasection": {
					"tokens": [
						"DOMDocument::createCDATASection",
						"createCDATASection",
						"::createCDATASection"
					],
					"id": "domdocument.createcdatasection",
					"name": "DOMDocument::createCDATASection",
					"description": "Create new cdata node"
				},
				"domdocument.createcomment": {
					"tokens": [
						"DOMDocument::createComment",
						"createComment",
						"::createComment"
					],
					"id": "domdocument.createcomment",
					"name": "DOMDocument::createComment",
					"description": "Create new comment node"
				},
				"domdocument.createdocumentfragment": {
					"tokens": [
						"DOMDocument::createDocumentFragment",
						"createDocumentFragment",
						"::createDocumentFragment"
					],
					"id": "domdocument.createdocumentfragment",
					"name": "DOMDocument::createDocumentFragment",
					"description": "Create new document fragment"
				},
				"domdocument.createelement": {
					"tokens": [
						"DOMDocument::createElement",
						"createElement",
						"::createElement"
					],
					"id": "domdocument.createelement",
					"name": "DOMDocument::createElement",
					"description": "Create new element node"
				},
				"domdocument.createelementns": {
					"tokens": [
						"DOMDocument::createElementNS",
						"createElementNS",
						"::createElementNS"
					],
					"id": "domdocument.createelementns",
					"name": "DOMDocument::createElementNS",
					"description": "Create new element node with an associated namespace"
				},
				"domdocument.createentityreference": {
					"tokens": [
						"DOMDocument::createEntityReference",
						"createEntityReference",
						"::createEntityReference"
					],
					"id": "domdocument.createentityreference",
					"name": "DOMDocument::createEntityReference",
					"description": "Create new entity reference node"
				},
				"domdocument.createprocessinginstruction": {
					"tokens": [
						"DOMDocument::createProcessingInstruction",
						"createProcessingInstruction",
						"::createProcessingInstruction"
					],
					"id": "domdocument.createprocessinginstruction",
					"name": "DOMDocument::createProcessingInstruction",
					"description": "Creates new PI node"
				},
				"domdocument.createtextnode": {
					"tokens": [
						"DOMDocument::createTextNode",
						"createTextNode",
						"::createTextNode"
					],
					"id": "domdocument.createtextnode",
					"name": "DOMDocument::createTextNode",
					"description": "Create new text node"
				},
				"domdocument.getelementbyid": {
					"tokens": [
						"DOMDocument::getElementById",
						"getElementById",
						"::getElementById"
					],
					"id": "domdocument.getelementbyid",
					"name": "DOMDocument::getElementById",
					"description": "Searches for an element with a certain id"
				},
				"domdocument.getelementsbytagname": {
					"tokens": [
						"DOMDocument::getElementsByTagName",
						"getElementsByTagName",
						"::getElementsByTagName"
					],
					"id": "domdocument.getelementsbytagname",
					"name": "DOMDocument::getElementsByTagName",
					"description": "Searches for all elements with given local tag name"
				},
				"domdocument.getelementsbytagnamens": {
					"tokens": [
						"DOMDocument::getElementsByTagNameNS",
						"getElementsByTagNameNS",
						"::getElementsByTagNameNS"
					],
					"id": "domdocument.getelementsbytagnamens",
					"name": "DOMDocument::getElementsByTagNameNS",
					"description": "Searches for all elements with given tag name in specified namespace"
				},
				"domdocument.importnode": {
					"tokens": [
						"DOMDocument::importNode",
						"importNode",
						"::importNode"
					],
					"id": "domdocument.importnode",
					"name": "DOMDocument::importNode",
					"description": "Import node into current document"
				},
				"domdocument.load": {
					"tokens": [
						"DOMDocument::load",
						"load",
						"::load"
					],
					"id": "domdocument.load",
					"name": "DOMDocument::load",
					"description": "Load XML from a file"
				},
				"domdocument.loadhtml": {
					"tokens": [
						"DOMDocument::loadHTML",
						"loadHTML",
						"::loadHTML"
					],
					"id": "domdocument.loadhtml",
					"name": "DOMDocument::loadHTML",
					"description": "Load HTML from a string"
				},
				"domdocument.loadhtmlfile": {
					"tokens": [
						"DOMDocument::loadHTMLFile",
						"loadHTMLFile",
						"::loadHTMLFile"
					],
					"id": "domdocument.loadhtmlfile",
					"name": "DOMDocument::loadHTMLFile",
					"description": "Load HTML from a file"
				},
				"domdocument.loadxml": {
					"tokens": [
						"DOMDocument::loadXML",
						"loadXML",
						"::loadXML"
					],
					"id": "domdocument.loadxml",
					"name": "DOMDocument::loadXML",
					"description": "Load XML from a string"
				},
				"domdocument.normalizedocument": {
					"tokens": [
						"DOMDocument::normalizeDocument",
						"normalizeDocument",
						"::normalizeDocument"
					],
					"id": "domdocument.normalizedocument",
					"name": "DOMDocument::normalizeDocument",
					"description": "Normalizes the document"
				},
				"domdocument.registernodeclass": {
					"tokens": [
						"DOMDocument::registerNodeClass",
						"registerNodeClass",
						"::registerNodeClass"
					],
					"id": "domdocument.registernodeclass",
					"name": "DOMDocument::registerNodeClass",
					"description": "Register extended class used to create base node type"
				},
				"domdocument.relaxngvalidate": {
					"tokens": [
						"DOMDocument::relaxNGValidate",
						"relaxNGValidate",
						"::relaxNGValidate"
					],
					"id": "domdocument.relaxngvalidate",
					"name": "DOMDocument::relaxNGValidate",
					"description": "Performs relaxNG validation on the document"
				},
				"domdocument.relaxngvalidatesource": {
					"tokens": [
						"DOMDocument::relaxNGValidateSource",
						"relaxNGValidateSource",
						"::relaxNGValidateSource"
					],
					"id": "domdocument.relaxngvalidatesource",
					"name": "DOMDocument::relaxNGValidateSource",
					"description": "Performs relaxNG validation on the document"
				},
				"domdocument.save": {
					"tokens": [
						"DOMDocument::save",
						"save",
						"::save"
					],
					"id": "domdocument.save",
					"name": "DOMDocument::save",
					"description": "Dumps the internal XML tree back into a file"
				},
				"domdocument.savehtml": {
					"tokens": [
						"DOMDocument::saveHTML",
						"saveHTML",
						"::saveHTML"
					],
					"id": "domdocument.savehtml",
					"name": "DOMDocument::saveHTML",
					"description": "Dumps the internal document into a string using HTML formatting"
				},
				"domdocument.savehtmlfile": {
					"tokens": [
						"DOMDocument::saveHTMLFile",
						"saveHTMLFile",
						"::saveHTMLFile"
					],
					"id": "domdocument.savehtmlfile",
					"name": "DOMDocument::saveHTMLFile",
					"description": "Dumps the internal document into a file using HTML formatting"
				},
				"domdocument.savexml": {
					"tokens": [
						"DOMDocument::saveXML",
						"saveXML",
						"::saveXML"
					],
					"id": "domdocument.savexml",
					"name": "DOMDocument::saveXML",
					"description": "Dumps the internal XML tree back into a string"
				},
				"domdocument.schemavalidate": {
					"tokens": [
						"DOMDocument::schemaValidate",
						"schemaValidate",
						"::schemaValidate"
					],
					"id": "domdocument.schemavalidate",
					"name": "DOMDocument::schemaValidate",
					"description": "Validates a document based on a schema"
				},
				"domdocument.schemavalidatesource": {
					"tokens": [
						"DOMDocument::schemaValidateSource",
						"schemaValidateSource",
						"::schemaValidateSource"
					],
					"id": "domdocument.schemavalidatesource",
					"name": "DOMDocument::schemaValidateSource",
					"description": "Validates a document based on a schema"
				},
				"domdocument.validate": {
					"tokens": [
						"DOMDocument::validate",
						"validate",
						"::validate"
					],
					"id": "domdocument.validate",
					"name": "DOMDocument::validate",
					"description": "Validates the document based on its DTD"
				},
				"domdocument.xinclude": {
					"tokens": [
						"DOMDocument::xinclude",
						"xinclude",
						"::xinclude"
					],
					"id": "domdocument.xinclude",
					"name": "DOMDocument::xinclude",
					"description": "Substitutes XIncludes in a DOMDocument Object"
				},
				"domdocumentfragment.appendxml": {
					"tokens": [
						"DOMDocumentFragment::appendXML",
						"appendXML",
						"::appendXML"
					],
					"id": "domdocumentfragment.appendxml",
					"name": "DOMDocumentFragment::appendXML",
					"description": "Append raw XML data"
				},
				"domelement.construct": {
					"tokens": [
						"DOMElement::__construct",
						"DOMElement::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domelement.construct",
					"name": "DOMElement::__construct",
					"description": "Creates a new DOMElement object"
				},
				"domelement.getattribute": {
					"tokens": [
						"DOMElement::getAttribute",
						"getAttribute",
						"::getAttribute"
					],
					"id": "domelement.getattribute",
					"name": "DOMElement::getAttribute",
					"description": "Returns value of attribute"
				},
				"domelement.getattributenode": {
					"tokens": [
						"DOMElement::getAttributeNode",
						"getAttributeNode",
						"::getAttributeNode"
					],
					"id": "domelement.getattributenode",
					"name": "DOMElement::getAttributeNode",
					"description": "Returns attribute node"
				},
				"domelement.getattributenodens": {
					"tokens": [
						"DOMElement::getAttributeNodeNS",
						"getAttributeNodeNS",
						"::getAttributeNodeNS"
					],
					"id": "domelement.getattributenodens",
					"name": "DOMElement::getAttributeNodeNS",
					"description": "Returns attribute node"
				},
				"domelement.getattributens": {
					"tokens": [
						"DOMElement::getAttributeNS",
						"getAttributeNS",
						"::getAttributeNS"
					],
					"id": "domelement.getattributens",
					"name": "DOMElement::getAttributeNS",
					"description": "Returns value of attribute"
				},
				"domelement.getelementsbytagname": {
					"tokens": [
						"DOMElement::getElementsByTagName",
						"getElementsByTagName",
						"::getElementsByTagName"
					],
					"id": "domelement.getelementsbytagname",
					"name": "DOMElement::getElementsByTagName",
					"description": "Gets elements by tagname"
				},
				"domelement.getelementsbytagnamens": {
					"tokens": [
						"DOMElement::getElementsByTagNameNS",
						"getElementsByTagNameNS",
						"::getElementsByTagNameNS"
					],
					"id": "domelement.getelementsbytagnamens",
					"name": "DOMElement::getElementsByTagNameNS",
					"description": "Get elements by namespaceURI and localName"
				},
				"domelement.hasattribute": {
					"tokens": [
						"DOMElement::hasAttribute",
						"hasAttribute",
						"::hasAttribute"
					],
					"id": "domelement.hasattribute",
					"name": "DOMElement::hasAttribute",
					"description": "Checks to see if attribute exists"
				},
				"domelement.hasattributens": {
					"tokens": [
						"DOMElement::hasAttributeNS",
						"hasAttributeNS",
						"::hasAttributeNS"
					],
					"id": "domelement.hasattributens",
					"name": "DOMElement::hasAttributeNS",
					"description": "Checks to see if attribute exists"
				},
				"domelement.removeattribute": {
					"tokens": [
						"DOMElement::removeAttribute",
						"removeAttribute",
						"::removeAttribute"
					],
					"id": "domelement.removeattribute",
					"name": "DOMElement::removeAttribute",
					"description": "Removes attribute"
				},
				"domelement.removeattributenode": {
					"tokens": [
						"DOMElement::removeAttributeNode",
						"removeAttributeNode",
						"::removeAttributeNode"
					],
					"id": "domelement.removeattributenode",
					"name": "DOMElement::removeAttributeNode",
					"description": "Removes attribute"
				},
				"domelement.removeattributens": {
					"tokens": [
						"DOMElement::removeAttributeNS",
						"removeAttributeNS",
						"::removeAttributeNS"
					],
					"id": "domelement.removeattributens",
					"name": "DOMElement::removeAttributeNS",
					"description": "Removes attribute"
				},
				"domelement.setattribute": {
					"tokens": [
						"DOMElement::setAttribute",
						"setAttribute",
						"::setAttribute"
					],
					"id": "domelement.setattribute",
					"name": "DOMElement::setAttribute",
					"description": "Adds new attribute"
				},
				"domelement.setattributenode": {
					"tokens": [
						"DOMElement::setAttributeNode",
						"setAttributeNode",
						"::setAttributeNode"
					],
					"id": "domelement.setattributenode",
					"name": "DOMElement::setAttributeNode",
					"description": "Adds new attribute node to element"
				},
				"domelement.setattributenodens": {
					"tokens": [
						"DOMElement::setAttributeNodeNS",
						"setAttributeNodeNS",
						"::setAttributeNodeNS"
					],
					"id": "domelement.setattributenodens",
					"name": "DOMElement::setAttributeNodeNS",
					"description": "Adds new attribute node to element"
				},
				"domelement.setattributens": {
					"tokens": [
						"DOMElement::setAttributeNS",
						"setAttributeNS",
						"::setAttributeNS"
					],
					"id": "domelement.setattributens",
					"name": "DOMElement::setAttributeNS",
					"description": "Adds new attribute"
				},
				"domelement.setidattribute": {
					"tokens": [
						"DOMElement::setIdAttribute",
						"setIdAttribute",
						"::setIdAttribute"
					],
					"id": "domelement.setidattribute",
					"name": "DOMElement::setIdAttribute",
					"description": "Declares the attribute specified by name to be of type ID"
				},
				"domelement.setidattributenode": {
					"tokens": [
						"DOMElement::setIdAttributeNode",
						"setIdAttributeNode",
						"::setIdAttributeNode"
					],
					"id": "domelement.setidattributenode",
					"name": "DOMElement::setIdAttributeNode",
					"description": "Declares the attribute specified by node to be of type ID"
				},
				"domelement.setidattributens": {
					"tokens": [
						"DOMElement::setIdAttributeNS",
						"setIdAttributeNS",
						"::setIdAttributeNS"
					],
					"id": "domelement.setidattributens",
					"name": "DOMElement::setIdAttributeNS",
					"description": "Declares the attribute specified by local name and namespace URI to be of type ID"
				},
				"domentityreference.construct": {
					"tokens": [
						"DOMEntityReference::__construct",
						"DOMEntityReference::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domentityreference.construct",
					"name": "DOMEntityReference::__construct",
					"description": "Creates a new DOMEntityReference object"
				},
				"domimplementation.construct": {
					"tokens": [
						"DOMImplementation::__construct",
						"DOMImplementation::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domimplementation.construct",
					"name": "DOMImplementation::__construct",
					"description": "Creates a new DOMImplementation object"
				},
				"domimplementation.createdocument": {
					"tokens": [
						"DOMImplementation::createDocument",
						"createDocument",
						"::createDocument"
					],
					"id": "domimplementation.createdocument",
					"name": "DOMImplementation::createDocument",
					"description": "Creates a DOMDocument object of the specified type with its document element"
				},
				"domimplementation.createdocumenttype": {
					"tokens": [
						"DOMImplementation::createDocumentType",
						"createDocumentType",
						"::createDocumentType"
					],
					"id": "domimplementation.createdocumenttype",
					"name": "DOMImplementation::createDocumentType",
					"description": "Creates an empty DOMDocumentType object"
				},
				"domimplementation.hasfeature": {
					"tokens": [
						"DOMImplementation::hasFeature",
						"hasFeature",
						"::hasFeature"
					],
					"id": "domimplementation.hasfeature",
					"name": "DOMImplementation::hasFeature",
					"description": "Test if the DOM implementation implements a specific feature"
				},
				"domnamednodemap.getnameditem": {
					"tokens": [
						"DOMNamedNodeMap::getNamedItem",
						"getNamedItem",
						"::getNamedItem"
					],
					"id": "domnamednodemap.getnameditem",
					"name": "DOMNamedNodeMap::getNamedItem",
					"description": "Retrieves a node specified by name"
				},
				"domnamednodemap.getnameditemns": {
					"tokens": [
						"DOMNamedNodeMap::getNamedItemNS",
						"getNamedItemNS",
						"::getNamedItemNS"
					],
					"id": "domnamednodemap.getnameditemns",
					"name": "DOMNamedNodeMap::getNamedItemNS",
					"description": "Retrieves a node specified by local name and namespace URI"
				},
				"domnamednodemap.item": {
					"tokens": [
						"DOMNamedNodeMap::item",
						"item",
						"::item"
					],
					"id": "domnamednodemap.item",
					"name": "DOMNamedNodeMap::item",
					"description": "Retrieves a node specified by index"
				},
				"domnode.appendchild": {
					"tokens": [
						"DOMNode::appendChild",
						"appendChild",
						"::appendChild"
					],
					"id": "domnode.appendchild",
					"name": "DOMNode::appendChild",
					"description": "Adds new child at the end of the children"
				},
				"domnode.c14n": {
					"tokens": [
						"DOMNode::C14N",
						"C14N",
						"::C14N"
					],
					"id": "domnode.c14n",
					"name": "DOMNode::C14N",
					"description": "Canonicalize nodes to a string"
				},
				"domnode.c14nfile": {
					"tokens": [
						"DOMNode::C14NFile",
						"C14NFile",
						"::C14NFile"
					],
					"id": "domnode.c14nfile",
					"name": "DOMNode::C14NFile",
					"description": "Canonicalize nodes to a file"
				},
				"domnode.clonenode": {
					"tokens": [
						"DOMNode::cloneNode",
						"cloneNode",
						"::cloneNode"
					],
					"id": "domnode.clonenode",
					"name": "DOMNode::cloneNode",
					"description": "Clones a node"
				},
				"domnode.getlineno": {
					"tokens": [
						"DOMNode::getLineNo",
						"getLineNo",
						"::getLineNo"
					],
					"id": "domnode.getlineno",
					"name": "DOMNode::getLineNo",
					"description": "Get line number for a node"
				},
				"domnode.getnodepath": {
					"tokens": [
						"DOMNode::getNodePath",
						"getNodePath",
						"::getNodePath"
					],
					"id": "domnode.getnodepath",
					"name": "DOMNode::getNodePath",
					"description": "Get an XPath for a node"
				},
				"domnode.hasattributes": {
					"tokens": [
						"DOMNode::hasAttributes",
						"hasAttributes",
						"::hasAttributes"
					],
					"id": "domnode.hasattributes",
					"name": "DOMNode::hasAttributes",
					"description": "Checks if node has attributes"
				},
				"domnode.haschildnodes": {
					"tokens": [
						"DOMNode::hasChildNodes",
						"hasChildNodes",
						"::hasChildNodes"
					],
					"id": "domnode.haschildnodes",
					"name": "DOMNode::hasChildNodes",
					"description": "Checks if node has children"
				},
				"domnode.insertbefore": {
					"tokens": [
						"DOMNode::insertBefore",
						"insertBefore",
						"::insertBefore"
					],
					"id": "domnode.insertbefore",
					"name": "DOMNode::insertBefore",
					"description": "Adds a new child before a reference node"
				},
				"domnode.isdefaultnamespace": {
					"tokens": [
						"DOMNode::isDefaultNamespace",
						"isDefaultNamespace",
						"::isDefaultNamespace"
					],
					"id": "domnode.isdefaultnamespace",
					"name": "DOMNode::isDefaultNamespace",
					"description": "Checks if the specified namespaceURI is the default namespace or not"
				},
				"domnode.issamenode": {
					"tokens": [
						"DOMNode::isSameNode",
						"isSameNode",
						"::isSameNode"
					],
					"id": "domnode.issamenode",
					"name": "DOMNode::isSameNode",
					"description": "Indicates if two nodes are the same node"
				},
				"domnode.issupported": {
					"tokens": [
						"DOMNode::isSupported",
						"isSupported",
						"::isSupported"
					],
					"id": "domnode.issupported",
					"name": "DOMNode::isSupported",
					"description": "Checks if feature is supported for specified version"
				},
				"domnode.lookupnamespaceuri": {
					"tokens": [
						"DOMNode::lookupNamespaceURI",
						"lookupNamespaceURI",
						"::lookupNamespaceURI"
					],
					"id": "domnode.lookupnamespaceuri",
					"name": "DOMNode::lookupNamespaceURI",
					"description": "Gets the namespace URI of the node based on the prefix"
				},
				"domnode.lookupprefix": {
					"tokens": [
						"DOMNode::lookupPrefix",
						"lookupPrefix",
						"::lookupPrefix"
					],
					"id": "domnode.lookupprefix",
					"name": "DOMNode::lookupPrefix",
					"description": "Gets the namespace prefix of the node based on the namespace URI"
				},
				"domnode.normalize": {
					"tokens": [
						"DOMNode::normalize",
						"normalize",
						"::normalize"
					],
					"id": "domnode.normalize",
					"name": "DOMNode::normalize",
					"description": "Normalizes the node"
				},
				"domnode.removechild": {
					"tokens": [
						"DOMNode::removeChild",
						"removeChild",
						"::removeChild"
					],
					"id": "domnode.removechild",
					"name": "DOMNode::removeChild",
					"description": "Removes child from list of children"
				},
				"domnode.replacechild": {
					"tokens": [
						"DOMNode::replaceChild",
						"replaceChild",
						"::replaceChild"
					],
					"id": "domnode.replacechild",
					"name": "DOMNode::replaceChild",
					"description": "Replaces a child"
				},
				"domnodelist.item": {
					"tokens": [
						"DOMNodelist::item",
						"item",
						"::item"
					],
					"id": "domnodelist.item",
					"name": "DOMNodelist::item",
					"description": "Retrieves a node specified by index"
				},
				"domprocessinginstruction.construct": {
					"tokens": [
						"DOMProcessingInstruction::__construct",
						"DOMProcessingInstruction::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domprocessinginstruction.construct",
					"name": "DOMProcessingInstruction::__construct",
					"description": "Creates a new DOMProcessingInstruction object"
				},
				"domtext.construct": {
					"tokens": [
						"DOMText::__construct",
						"DOMText::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domtext.construct",
					"name": "DOMText::__construct",
					"description": "Creates a new DOMText object"
				},
				"domtext.iswhitespaceinelementcontent": {
					"tokens": [
						"DOMText::isWhitespaceInElementContent",
						"isWhitespaceInElementContent",
						"::isWhitespaceInElementContent"
					],
					"id": "domtext.iswhitespaceinelementcontent",
					"name": "DOMText::isWhitespaceInElementContent",
					"description": "Indicates whether this text node contains whitespace"
				},
				"domtext.splittext": {
					"tokens": [
						"DOMText::splitText",
						"splitText",
						"::splitText"
					],
					"id": "domtext.splittext",
					"name": "DOMText::splitText",
					"description": "Breaks this node into two nodes at the specified offset"
				},
				"domxpath.construct": {
					"tokens": [
						"DOMXPath::__construct",
						"DOMXPath::_construct",
						"__construct",
						"::__construct"
					],
					"id": "domxpath.construct",
					"name": "DOMXPath::__construct",
					"description": "Creates a new DOMXPath object"
				},
				"domxpath.evaluate": {
					"tokens": [
						"DOMXPath::evaluate",
						"evaluate",
						"::evaluate"
					],
					"id": "domxpath.evaluate",
					"name": "DOMXPath::evaluate",
					"description": "Evaluates the given XPath expression and returns a typed result if possible"
				},
				"domxpath.query": {
					"tokens": [
						"DOMXPath::query",
						"query",
						"::query"
					],
					"id": "domxpath.query",
					"name": "DOMXPath::query",
					"description": "Evaluates the given XPath expression"
				},
				"domxpath.registernamespace": {
					"tokens": [
						"DOMXPath::registerNamespace",
						"registerNamespace",
						"::registerNamespace"
					],
					"id": "domxpath.registernamespace",
					"name": "DOMXPath::registerNamespace",
					"description": "Registers the namespace with the DOMXPath object"
				},
				"domxpath.registerphpfunctions": {
					"tokens": [
						"DOMXPath::registerPhpFunctions",
						"registerPhpFunctions",
						"::registerPhpFunctions"
					],
					"id": "domxpath.registerphpfunctions",
					"name": "DOMXPath::registerPhpFunctions",
					"description": "Register PHP functions as XPath functions"
				},
				"function.dom-import-simplexml": {
					"tokens": [
						"dom_import_simplexml",
						"domimport_simplexml"
					],
					"id": "function.dom-import-simplexml",
					"name": "dom_import_simplexml",
					"description": "Gets a DOMElement object from a\n   SimpleXMLElement object"
				},
				"function.libxml-clear-errors": {
					"tokens": [
						"libxml_clear_errors",
						"libxmlclear_errors"
					],
					"id": "function.libxml-clear-errors",
					"name": "libxml_clear_errors",
					"description": "Clear libxml error buffer"
				},
				"function.libxml-disable-entity-loader": {
					"tokens": [
						"libxml_disable_entity_loader",
						"libxmldisable_entity_loader"
					],
					"id": "function.libxml-disable-entity-loader",
					"name": "libxml_disable_entity_loader",
					"description": "Disable the ability to load external entities"
				},
				"function.libxml-get-errors": {
					"tokens": [
						"libxml_get_errors",
						"libxmlget_errors"
					],
					"id": "function.libxml-get-errors",
					"name": "libxml_get_errors",
					"description": "Retrieve array of errors"
				},
				"function.libxml-get-last-error": {
					"tokens": [
						"libxml_get_last_error",
						"libxmlget_last_error"
					],
					"id": "function.libxml-get-last-error",
					"name": "libxml_get_last_error",
					"description": "Retrieve last error from libxml"
				},
				"function.libxml-set-external-entity-loader": {
					"tokens": [
						"libxml_set_external_entity_loader",
						"libxmlset_external_entity_loader"
					],
					"id": "function.libxml-set-external-entity-loader",
					"name": "libxml_set_external_entity_loader",
					"description": "Changes the default external entity loader"
				},
				"function.libxml-set-streams-context": {
					"tokens": [
						"libxml_set_streams_context",
						"libxmlset_streams_context"
					],
					"id": "function.libxml-set-streams-context",
					"name": "libxml_set_streams_context",
					"description": "Set the streams context for the next libxml document load or write"
				},
				"function.libxml-use-internal-errors": {
					"tokens": [
						"libxml_use_internal_errors",
						"libxmluse_internal_errors"
					],
					"id": "function.libxml-use-internal-errors",
					"name": "libxml_use_internal_errors",
					"description": "Disable libxml errors and allow user to fetch error information as needed"
				},
				"sdo-das-changesummary.beginlogging": {
					"tokens": [
						"SDO_DAS_ChangeSummary::beginLogging",
						"SDODAS_ChangeSummary::beginLogging",
						"beginLogging",
						"::beginLogging"
					],
					"id": "sdo-das-changesummary.beginlogging",
					"name": "SDO_DAS_ChangeSummary::beginLogging",
					"description": "Begin change logging"
				},
				"sdo-das-changesummary.endlogging": {
					"tokens": [
						"SDO_DAS_ChangeSummary::endLogging",
						"SDODAS_ChangeSummary::endLogging",
						"endLogging",
						"::endLogging"
					],
					"id": "sdo-das-changesummary.endlogging",
					"name": "SDO_DAS_ChangeSummary::endLogging",
					"description": "End change logging"
				},
				"sdo-das-changesummary.getchangetype": {
					"tokens": [
						"SDO_DAS_ChangeSummary::getChangeType",
						"SDODAS_ChangeSummary::getChangeType",
						"getChangeType",
						"::getChangeType"
					],
					"id": "sdo-das-changesummary.getchangetype",
					"name": "SDO_DAS_ChangeSummary::getChangeType",
					"description": "Get the type of change made to an SDO_DataObject"
				},
				"sdo-das-changesummary.getchangeddataobjects": {
					"tokens": [
						"SDO_DAS_ChangeSummary::getChangedDataObjects",
						"SDODAS_ChangeSummary::getChangedDataObjects",
						"getChangedDataObjects",
						"::getChangedDataObjects"
					],
					"id": "sdo-das-changesummary.getchangeddataobjects",
					"name": "SDO_DAS_ChangeSummary::getChangedDataObjects",
					"description": "Get the changed data objects from a change summary"
				},
				"sdo-das-changesummary.getoldcontainer": {
					"tokens": [
						"SDO_DAS_ChangeSummary::getOldContainer",
						"SDODAS_ChangeSummary::getOldContainer",
						"getOldContainer",
						"::getOldContainer"
					],
					"id": "sdo-das-changesummary.getoldcontainer",
					"name": "SDO_DAS_ChangeSummary::getOldContainer",
					"description": "Get the old container for a deleted SDO_DataObject"
				},
				"sdo-das-changesummary.getoldvalues": {
					"tokens": [
						"SDO_DAS_ChangeSummary::getOldValues",
						"SDODAS_ChangeSummary::getOldValues",
						"getOldValues",
						"::getOldValues"
					],
					"id": "sdo-das-changesummary.getoldvalues",
					"name": "SDO_DAS_ChangeSummary::getOldValues",
					"description": "Get the old values for a given changed SDO_DataObject"
				},
				"sdo-das-changesummary.islogging": {
					"tokens": [
						"SDO_DAS_ChangeSummary::isLogging",
						"SDODAS_ChangeSummary::isLogging",
						"isLogging",
						"::isLogging"
					],
					"id": "sdo-das-changesummary.islogging",
					"name": "SDO_DAS_ChangeSummary::isLogging",
					"description": "Test to see whether change logging is switched on"
				},
				"sdo-das-datafactory.addpropertytotype": {
					"tokens": [
						"SDO_DAS_DataFactory::addPropertyToType",
						"SDODAS_DataFactory::addPropertyToType",
						"addPropertyToType",
						"::addPropertyToType"
					],
					"id": "sdo-das-datafactory.addpropertytotype",
					"name": "SDO_DAS_DataFactory::addPropertyToType",
					"description": "Adds a property to a type"
				},
				"sdo-das-datafactory.addtype": {
					"tokens": [
						"SDO_DAS_DataFactory::addType",
						"SDODAS_DataFactory::addType",
						"addType",
						"::addType"
					],
					"id": "sdo-das-datafactory.addtype",
					"name": "SDO_DAS_DataFactory::addType",
					"description": "Add a new type to a model"
				},
				"sdo-das-datafactory.getdatafactory": {
					"tokens": [
						"SDO_DAS_DataFactory::getDataFactory",
						"SDODAS_DataFactory::getDataFactory",
						"getDataFactory",
						"::getDataFactory"
					],
					"id": "sdo-das-datafactory.getdatafactory",
					"name": "SDO_DAS_DataFactory::getDataFactory",
					"description": "Get a data factory instance"
				},
				"sdo-das-dataobject.getchangesummary": {
					"tokens": [
						"SDO_DAS_DataObject::getChangeSummary",
						"SDODAS_DataObject::getChangeSummary",
						"getChangeSummary",
						"::getChangeSummary"
					],
					"id": "sdo-das-dataobject.getchangesummary",
					"name": "SDO_DAS_DataObject::getChangeSummary",
					"description": "Get a data object's change summary"
				},
				"sdo-das-setting.getlistindex": {
					"tokens": [
						"SDO_DAS_Setting::getListIndex",
						"SDODAS_Setting::getListIndex",
						"getListIndex",
						"::getListIndex"
					],
					"id": "sdo-das-setting.getlistindex",
					"name": "SDO_DAS_Setting::getListIndex",
					"description": "Get the list index for a changed many-valued property"
				},
				"sdo-das-setting.getpropertyindex": {
					"tokens": [
						"SDO_DAS_Setting::getPropertyIndex",
						"SDODAS_Setting::getPropertyIndex",
						"getPropertyIndex",
						"::getPropertyIndex"
					],
					"id": "sdo-das-setting.getpropertyindex",
					"name": "SDO_DAS_Setting::getPropertyIndex",
					"description": "Get the property index for a changed property"
				},
				"sdo-das-setting.getpropertyname": {
					"tokens": [
						"SDO_DAS_Setting::getPropertyName",
						"SDODAS_Setting::getPropertyName",
						"getPropertyName",
						"::getPropertyName"
					],
					"id": "sdo-das-setting.getpropertyname",
					"name": "SDO_DAS_Setting::getPropertyName",
					"description": "Get the property name for a changed property"
				},
				"sdo-das-setting.getvalue": {
					"tokens": [
						"SDO_DAS_Setting::getValue",
						"SDODAS_Setting::getValue",
						"getValue",
						"::getValue"
					],
					"id": "sdo-das-setting.getvalue",
					"name": "SDO_DAS_Setting::getValue",
					"description": "Get the old value for the changed property"
				},
				"sdo-das-setting.isset": {
					"tokens": [
						"SDO_DAS_Setting::isSet",
						"SDODAS_Setting::isSet",
						"isSet",
						"::isSet"
					],
					"id": "sdo-das-setting.isset",
					"name": "SDO_DAS_Setting::isSet",
					"description": "Test whether a property was set prior to being modified"
				},
				"sdo-datafactory.create": {
					"tokens": [
						"SDO_DataFactory::create",
						"SDODataFactory::create",
						"create",
						"::create"
					],
					"id": "sdo-datafactory.create",
					"name": "SDO_DataFactory::create",
					"description": "Create an SDO_DataObject"
				},
				"sdo-dataobject.clear": {
					"tokens": [
						"SDO_DataObject::clear",
						"SDODataObject::clear",
						"clear",
						"::clear"
					],
					"id": "sdo-dataobject.clear",
					"name": "SDO_DataObject::clear",
					"description": "Clear an SDO_DataObject's properties"
				},
				"sdo-dataobject.createdataobject": {
					"tokens": [
						"SDO_DataObject::createDataObject",
						"SDODataObject::createDataObject",
						"createDataObject",
						"::createDataObject"
					],
					"id": "sdo-dataobject.createdataobject",
					"name": "SDO_DataObject::createDataObject",
					"description": "Create a child SDO_DataObject"
				},
				"sdo-dataobject.getcontainer": {
					"tokens": [
						"SDO_DataObject::getContainer",
						"SDODataObject::getContainer",
						"getContainer",
						"::getContainer"
					],
					"id": "sdo-dataobject.getcontainer",
					"name": "SDO_DataObject::getContainer",
					"description": "Get a data object's container"
				},
				"sdo-dataobject.getsequence": {
					"tokens": [
						"SDO_DataObject::getSequence",
						"SDODataObject::getSequence",
						"getSequence",
						"::getSequence"
					],
					"id": "sdo-dataobject.getsequence",
					"name": "SDO_DataObject::getSequence",
					"description": "Get the sequence for a data object"
				},
				"sdo-dataobject.gettypename": {
					"tokens": [
						"SDO_DataObject::getTypeName",
						"SDODataObject::getTypeName",
						"getTypeName",
						"::getTypeName"
					],
					"id": "sdo-dataobject.gettypename",
					"name": "SDO_DataObject::getTypeName",
					"description": "Return the name of the type for a data object."
				},
				"sdo-dataobject.gettypenamespaceuri": {
					"tokens": [
						"SDO_DataObject::getTypeNamespaceURI",
						"SDODataObject::getTypeNamespaceURI",
						"getTypeNamespaceURI",
						"::getTypeNamespaceURI"
					],
					"id": "sdo-dataobject.gettypenamespaceuri",
					"name": "SDO_DataObject::getTypeNamespaceURI",
					"description": "Return the namespace URI of the type for a data object."
				},
				"sdo-exception.getcause": {
					"tokens": [
						"SDO_Exception::getCause",
						"SDOException::getCause",
						"getCause",
						"::getCause"
					],
					"id": "sdo-exception.getcause",
					"name": "SDO_Exception::getCause",
					"description": "Get the cause of the exception."
				},
				"sdo-list.insert": {
					"tokens": [
						"SDO_List::insert",
						"SDOList::insert",
						"insert",
						"::insert"
					],
					"id": "sdo-list.insert",
					"name": "SDO_List::insert",
					"description": "Insert into a list"
				},
				"sdo-model-property.getcontainingtype": {
					"tokens": [
						"SDO_Model_Property::getContainingType",
						"SDOModel_Property::getContainingType",
						"getContainingType",
						"::getContainingType"
					],
					"id": "sdo-model-property.getcontainingtype",
					"name": "SDO_Model_Property::getContainingType",
					"description": "Get the SDO_Model_Type which contains this property"
				},
				"sdo-model-property.getdefault": {
					"tokens": [
						"SDO_Model_Property::getDefault",
						"SDOModel_Property::getDefault",
						"getDefault",
						"::getDefault"
					],
					"id": "sdo-model-property.getdefault",
					"name": "SDO_Model_Property::getDefault",
					"description": "Get the default value for the property"
				},
				"sdo-model-property.getname": {
					"tokens": [
						"SDO_Model_Property::getName",
						"SDOModel_Property::getName",
						"getName",
						"::getName"
					],
					"id": "sdo-model-property.getname",
					"name": "SDO_Model_Property::getName",
					"description": "Get the name of the SDO_Model_Property"
				},
				"sdo-model-property.gettype": {
					"tokens": [
						"SDO_Model_Property::getType",
						"SDOModel_Property::getType",
						"getType",
						"::getType"
					],
					"id": "sdo-model-property.gettype",
					"name": "SDO_Model_Property::getType",
					"description": "Get the SDO_Model_Type of the property"
				},
				"sdo-model-property.iscontainment": {
					"tokens": [
						"SDO_Model_Property::isContainment",
						"SDOModel_Property::isContainment",
						"isContainment",
						"::isContainment"
					],
					"id": "sdo-model-property.iscontainment",
					"name": "SDO_Model_Property::isContainment",
					"description": "Test to see if the property defines a containment relationship"
				},
				"sdo-model-property.ismany": {
					"tokens": [
						"SDO_Model_Property::isMany",
						"SDOModel_Property::isMany",
						"isMany",
						"::isMany"
					],
					"id": "sdo-model-property.ismany",
					"name": "SDO_Model_Property::isMany",
					"description": "Test to see if the property is many-valued"
				},
				"sdo-model-reflectiondataobject.construct": {
					"tokens": [
						"SDO_Model_ReflectionDataObject::__construct",
						"SDOModel_ReflectionDataObject::__construct",
						"__construct",
						"::__construct"
					],
					"id": "sdo-model-reflectiondataobject.construct",
					"name": "SDO_Model_ReflectionDataObject::__construct",
					"description": "Construct an SDO_Model_ReflectionDataObject"
				},
				"sdo-model-reflectiondataobject.export": {
					"tokens": [
						"SDO_Model_ReflectionDataObject::export",
						"SDOModel_ReflectionDataObject::export",
						"export",
						"::export"
					],
					"id": "sdo-model-reflectiondataobject.export",
					"name": "SDO_Model_ReflectionDataObject::export",
					"description": "Get a string describing the SDO_DataObject."
				},
				"sdo-model-reflectiondataobject.getcontainmentproperty": {
					"tokens": [
						"SDO_Model_ReflectionDataObject::getContainmentProperty",
						"SDOModel_ReflectionDataObject::getContainmentProperty",
						"getContainmentProperty",
						"::getContainmentProperty"
					],
					"id": "sdo-model-reflectiondataobject.getcontainmentproperty",
					"name": "SDO_Model_ReflectionDataObject::getContainmentProperty",
					"description": "Get the property which defines the containment relationship to the data object"
				},
				"sdo-model-reflectiondataobject.getinstanceproperties": {
					"tokens": [
						"SDO_Model_ReflectionDataObject::getInstanceProperties",
						"SDOModel_ReflectionDataObject::getInstanceProperties",
						"getInstanceProperties",
						"::getInstanceProperties"
					],
					"id": "sdo-model-reflectiondataobject.getinstanceproperties",
					"name": "SDO_Model_ReflectionDataObject::getInstanceProperties",
					"description": "Get the instance properties of the SDO_DataObject"
				},
				"sdo-model-reflectiondataobject.gettype": {
					"tokens": [
						"SDO_Model_ReflectionDataObject::getType",
						"SDOModel_ReflectionDataObject::getType",
						"getType",
						"::getType"
					],
					"id": "sdo-model-reflectiondataobject.gettype",
					"name": "SDO_Model_ReflectionDataObject::getType",
					"description": "Get the SDO_Model_Type for the SDO_DataObject"
				},
				"sdo-model-type.getbasetype": {
					"tokens": [
						"SDO_Model_Type::getBaseType",
						"SDOModel_Type::getBaseType",
						"getBaseType",
						"::getBaseType"
					],
					"id": "sdo-model-type.getbasetype",
					"name": "SDO_Model_Type::getBaseType",
					"description": "Get the base type for this type"
				},
				"sdo-model-type.getname": {
					"tokens": [
						"SDO_Model_Type::getName",
						"SDOModel_Type::getName",
						"getName",
						"::getName"
					],
					"id": "sdo-model-type.getname",
					"name": "SDO_Model_Type::getName",
					"description": "Get the name of the type"
				},
				"sdo-model-type.getnamespaceuri": {
					"tokens": [
						"SDO_Model_Type::getNamespaceURI",
						"SDOModel_Type::getNamespaceURI",
						"getNamespaceURI",
						"::getNamespaceURI"
					],
					"id": "sdo-model-type.getnamespaceuri",
					"name": "SDO_Model_Type::getNamespaceURI",
					"description": "Get the namespace URI of the type"
				},
				"sdo-model-type.getproperties": {
					"tokens": [
						"SDO_Model_Type::getProperties",
						"SDOModel_Type::getProperties",
						"getProperties",
						"::getProperties"
					],
					"id": "sdo-model-type.getproperties",
					"name": "SDO_Model_Type::getProperties",
					"description": "Get the SDO_Model_Property objects defined for the type"
				},
				"sdo-model-type.getproperty": {
					"tokens": [
						"SDO_Model_Type::getProperty",
						"SDOModel_Type::getProperty",
						"getProperty",
						"::getProperty"
					],
					"id": "sdo-model-type.getproperty",
					"name": "SDO_Model_Type::getProperty",
					"description": "Get an SDO_Model_Property of the type"
				},
				"sdo-model-type.isabstracttype": {
					"tokens": [
						"SDO_Model_Type::isAbstractType",
						"SDOModel_Type::isAbstractType",
						"isAbstractType",
						"::isAbstractType"
					],
					"id": "sdo-model-type.isabstracttype",
					"name": "SDO_Model_Type::isAbstractType",
					"description": "Test to see if this SDO_Model_Type is an abstract data type"
				},
				"sdo-model-type.isdatatype": {
					"tokens": [
						"SDO_Model_Type::isDataType",
						"SDOModel_Type::isDataType",
						"isDataType",
						"::isDataType"
					],
					"id": "sdo-model-type.isdatatype",
					"name": "SDO_Model_Type::isDataType",
					"description": "Test to see if this SDO_Model_Type is a primitive data type"
				},
				"sdo-model-type.isinstance": {
					"tokens": [
						"SDO_Model_Type::isInstance",
						"SDOModel_Type::isInstance",
						"isInstance",
						"::isInstance"
					],
					"id": "sdo-model-type.isinstance",
					"name": "SDO_Model_Type::isInstance",
					"description": "Test for an SDO_DataObject being an instance of this SDO_Model_Type"
				},
				"sdo-model-type.isopentype": {
					"tokens": [
						"SDO_Model_Type::isOpenType",
						"SDOModel_Type::isOpenType",
						"isOpenType",
						"::isOpenType"
					],
					"id": "sdo-model-type.isopentype",
					"name": "SDO_Model_Type::isOpenType",
					"description": "Test to see if this type is an open type"
				},
				"sdo-model-type.issequencedtype": {
					"tokens": [
						"SDO_Model_Type::isSequencedType",
						"SDOModel_Type::isSequencedType",
						"isSequencedType",
						"::isSequencedType"
					],
					"id": "sdo-model-type.issequencedtype",
					"name": "SDO_Model_Type::isSequencedType",
					"description": "Test to see if this is a sequenced type"
				},
				"sdo-sequence.getproperty": {
					"tokens": [
						"SDO_Sequence::getProperty",
						"SDOSequence::getProperty",
						"getProperty",
						"::getProperty"
					],
					"id": "sdo-sequence.getproperty",
					"name": "SDO_Sequence::getProperty",
					"description": "Return the property for the specified sequence index."
				},
				"sdo-sequence.insert": {
					"tokens": [
						"SDO_Sequence::insert",
						"SDOSequence::insert",
						"insert",
						"::insert"
					],
					"id": "sdo-sequence.insert",
					"name": "SDO_Sequence::insert",
					"description": "Insert into a sequence"
				},
				"sdo-sequence.move": {
					"tokens": [
						"SDO_Sequence::move",
						"SDOSequence::move",
						"move",
						"::move"
					],
					"id": "sdo-sequence.move",
					"name": "SDO_Sequence::move",
					"description": "Move an item to another sequence position"
				},
				"sdo-das-relational.applychanges": {
					"tokens": [
						"SDO_DAS_Relational::applyChanges",
						"SDODAS_Relational::applyChanges",
						"applyChanges",
						"::applyChanges"
					],
					"id": "sdo-das-relational.applychanges",
					"name": "SDO_DAS_Relational::applyChanges",
					"description": "Applies the changes made to a data graph back to the database."
				},
				"sdo-das-relational.construct": {
					"tokens": [
						"SDO_DAS_Relational::__construct",
						"SDODAS_Relational::__construct",
						"__construct",
						"::__construct"
					],
					"id": "sdo-das-relational.construct",
					"name": "SDO_DAS_Relational::__construct",
					"description": "Creates an instance of a Relational Data Access Service"
				},
				"sdo-das-relational.createrootdataobject": {
					"tokens": [
						"SDO_DAS_Relational::createRootDataObject",
						"SDODAS_Relational::createRootDataObject",
						"createRootDataObject",
						"::createRootDataObject"
					],
					"id": "sdo-das-relational.createrootdataobject",
					"name": "SDO_DAS_Relational::createRootDataObject",
					"description": "Returns the special root object in an otherwise \n   empty data graph. Used when creating a data graph from scratch."
				},
				"sdo-das-relational.executepreparedquery": {
					"tokens": [
						"SDO_DAS_Relational::executePreparedQuery",
						"SDODAS_Relational::executePreparedQuery",
						"executePreparedQuery",
						"::executePreparedQuery"
					],
					"id": "sdo-das-relational.executepreparedquery",
					"name": "SDO_DAS_Relational::executePreparedQuery",
					"description": "Executes an SQL query passed as a prepared statement, with a \n   list of values to substitute for placeholders, and return the \n   results as a normalised data graph."
				},
				"sdo-das-relational.executequery": {
					"tokens": [
						"SDO_DAS_Relational::executeQuery",
						"SDODAS_Relational::executeQuery",
						"executeQuery",
						"::executeQuery"
					],
					"id": "sdo-das-relational.executequery",
					"name": "SDO_DAS_Relational::executeQuery",
					"description": "Executes a given SQL query against a relational database \n   and returns the results as a normalised data graph."
				},
				"sdo-das-xml.addtypes": {
					"tokens": [
						"SDO_DAS_XML::addTypes",
						"SDODAS_XML::addTypes",
						"addTypes",
						"::addTypes"
					],
					"id": "sdo-das-xml.addtypes",
					"name": "SDO_DAS_XML::addTypes",
					"description": "To load a second or subsequent schema file to a SDO_DAS_XML object"
				},
				"sdo-das-xml.create": {
					"tokens": [
						"SDO_DAS_XML::create",
						"SDODAS_XML::create",
						"create",
						"::create"
					],
					"id": "sdo-das-xml.create",
					"name": "SDO_DAS_XML::create",
					"description": "To create SDO_DAS_XML object for a given schema file"
				},
				"sdo-das-xml.createdataobject": {
					"tokens": [
						"SDO_DAS_XML::createDataObject",
						"SDODAS_XML::createDataObject",
						"createDataObject",
						"::createDataObject"
					],
					"id": "sdo-das-xml.createdataobject",
					"name": "SDO_DAS_XML::createDataObject",
					"description": "Creates SDO_DataObject for a given namespace URI and type name"
				},
				"sdo-das-xml.createdocument": {
					"tokens": [
						"SDO_DAS_XML::createDocument",
						"SDODAS_XML::createDocument",
						"createDocument",
						"::createDocument"
					],
					"id": "sdo-das-xml.createdocument",
					"name": "SDO_DAS_XML::createDocument",
					"description": "Creates an XML Document object from scratch, without the need to load a document from a file or string."
				},
				"sdo-das-xml.loadfile": {
					"tokens": [
						"SDO_DAS_XML::loadFile",
						"SDODAS_XML::loadFile",
						"loadFile",
						"::loadFile"
					],
					"id": "sdo-das-xml.loadfile",
					"name": "SDO_DAS_XML::loadFile",
					"description": "Returns SDO_DAS_XML_Document object for a given path to xml instance document"
				},
				"sdo-das-xml.loadstring": {
					"tokens": [
						"SDO_DAS_XML::loadString",
						"SDODAS_XML::loadString",
						"loadString",
						"::loadString"
					],
					"id": "sdo-das-xml.loadstring",
					"name": "SDO_DAS_XML::loadString",
					"description": "Returns SDO_DAS_XML_Document for a given xml instance string"
				},
				"sdo-das-xml.savefile": {
					"tokens": [
						"SDO_DAS_XML::saveFile",
						"SDODAS_XML::saveFile",
						"saveFile",
						"::saveFile"
					],
					"id": "sdo-das-xml.savefile",
					"name": "SDO_DAS_XML::saveFile",
					"description": "Saves the SDO_DAS_XML_Document object to a file"
				},
				"sdo-das-xml.savestring": {
					"tokens": [
						"SDO_DAS_XML::saveString",
						"SDODAS_XML::saveString",
						"saveString",
						"::saveString"
					],
					"id": "sdo-das-xml.savestring",
					"name": "SDO_DAS_XML::saveString",
					"description": "Saves the SDO_DAS_XML_Document object to a string"
				},
				"sdo-das-xml-document.getrootdataobject": {
					"tokens": [
						"SDO_DAS_XML_Document::getRootDataObject",
						"SDODAS_XML_Document::getRootDataObject",
						"getRootDataObject",
						"::getRootDataObject"
					],
					"id": "sdo-das-xml-document.getrootdataobject",
					"name": "SDO_DAS_XML_Document::getRootDataObject",
					"description": "Returns the root SDO_DataObject"
				},
				"sdo-das-xml-document.getrootelementname": {
					"tokens": [
						"SDO_DAS_XML_Document::getRootElementName",
						"SDODAS_XML_Document::getRootElementName",
						"getRootElementName",
						"::getRootElementName"
					],
					"id": "sdo-das-xml-document.getrootelementname",
					"name": "SDO_DAS_XML_Document::getRootElementName",
					"description": "Returns root element's name"
				},
				"sdo-das-xml-document.getrootelementuri": {
					"tokens": [
						"SDO_DAS_XML_Document::getRootElementURI",
						"SDODAS_XML_Document::getRootElementURI",
						"getRootElementURI",
						"::getRootElementURI"
					],
					"id": "sdo-das-xml-document.getrootelementuri",
					"name": "SDO_DAS_XML_Document::getRootElementURI",
					"description": "Returns root element's URI string"
				},
				"sdo-das-xml-document.setencoding": {
					"tokens": [
						"SDO_DAS_XML_Document::setEncoding",
						"SDODAS_XML_Document::setEncoding",
						"setEncoding",
						"::setEncoding"
					],
					"id": "sdo-das-xml-document.setencoding",
					"name": "SDO_DAS_XML_Document::setEncoding",
					"description": "Sets the given string as encoding"
				},
				"sdo-das-xml-document.setxmldeclaration": {
					"tokens": [
						"SDO_DAS_XML_Document::setXMLDeclaration",
						"SDODAS_XML_Document::setXMLDeclaration",
						"setXMLDeclaration",
						"::setXMLDeclaration"
					],
					"id": "sdo-das-xml-document.setxmldeclaration",
					"name": "SDO_DAS_XML_Document::setXMLDeclaration",
					"description": "Sets the xml declaration"
				},
				"sdo-das-xml-document.setxmlversion": {
					"tokens": [
						"SDO_DAS_XML_Document::setXMLVersion",
						"SDODAS_XML_Document::setXMLVersion",
						"setXMLVersion",
						"::setXMLVersion"
					],
					"id": "sdo-das-xml-document.setxmlversion",
					"name": "SDO_DAS_XML_Document::setXMLVersion",
					"description": "Sets the given string as xml version"
				},
				"simplexmlelement.addattribute": {
					"tokens": [
						"SimpleXMLElement::addAttribute",
						"addAttribute",
						"::addAttribute"
					],
					"id": "simplexmlelement.addattribute",
					"name": "SimpleXMLElement::addAttribute",
					"description": "Adds an attribute to the SimpleXML element"
				},
				"simplexmlelement.addchild": {
					"tokens": [
						"SimpleXMLElement::addChild",
						"addChild",
						"::addChild"
					],
					"id": "simplexmlelement.addchild",
					"name": "SimpleXMLElement::addChild",
					"description": "Adds a child element to the XML node"
				},
				"simplexmlelement.asxml": {
					"tokens": [
						"SimpleXMLElement::asXML",
						"asXML",
						"::asXML"
					],
					"id": "simplexmlelement.asxml",
					"name": "SimpleXMLElement::asXML",
					"description": "Return a well-formed XML string based on SimpleXML element"
				},
				"simplexmlelement.attributes": {
					"tokens": [
						"SimpleXMLElement::attributes",
						"attributes",
						"::attributes"
					],
					"id": "simplexmlelement.attributes",
					"name": "SimpleXMLElement::attributes",
					"description": "Identifies an element's attributes"
				},
				"simplexmlelement.children": {
					"tokens": [
						"SimpleXMLElement::children",
						"children",
						"::children"
					],
					"id": "simplexmlelement.children",
					"name": "SimpleXMLElement::children",
					"description": "Finds children of given node"
				},
				"simplexmlelement.construct": {
					"tokens": [
						"SimpleXMLElement::__construct",
						"SimpleXMLElement::_construct",
						"__construct",
						"::__construct"
					],
					"id": "simplexmlelement.construct",
					"name": "SimpleXMLElement::__construct",
					"description": "Creates a new SimpleXMLElement object"
				},
				"simplexmlelement.count": {
					"tokens": [
						"SimpleXMLElement::count",
						"count",
						"::count"
					],
					"id": "simplexmlelement.count",
					"name": "SimpleXMLElement::count",
					"description": "Counts the children of an element"
				},
				"simplexmlelement.getdocnamespaces": {
					"tokens": [
						"SimpleXMLElement::getDocNamespaces",
						"getDocNamespaces",
						"::getDocNamespaces"
					],
					"id": "simplexmlelement.getdocnamespaces",
					"name": "SimpleXMLElement::getDocNamespaces",
					"description": "Returns namespaces declared in document"
				},
				"simplexmlelement.getname": {
					"tokens": [
						"SimpleXMLElement::getName",
						"getName",
						"::getName"
					],
					"id": "simplexmlelement.getname",
					"name": "SimpleXMLElement::getName",
					"description": "Gets the name of the XML element"
				},
				"simplexmlelement.getnamespaces": {
					"tokens": [
						"SimpleXMLElement::getNamespaces",
						"getNamespaces",
						"::getNamespaces"
					],
					"id": "simplexmlelement.getnamespaces",
					"name": "SimpleXMLElement::getNamespaces",
					"description": "Returns namespaces used in document"
				},
				"simplexmlelement.registerxpathnamespace": {
					"tokens": [
						"SimpleXMLElement::registerXPathNamespace",
						"registerXPathNamespace",
						"::registerXPathNamespace"
					],
					"id": "simplexmlelement.registerxpathnamespace",
					"name": "SimpleXMLElement::registerXPathNamespace",
					"description": "Creates a prefix/ns context for the next XPath query"
				},
				"simplexmlelement.savexml": {
					"tokens": [
						"SimpleXMLElement::saveXML",
						"saveXML",
						"::saveXML"
					],
					"id": "simplexmlelement.savexml",
					"name": "SimpleXMLElement::saveXML",
					"description": "Alias of SimpleXMLElement::asXML"
				},
				"simplexmlelement.tostring": {
					"tokens": [
						"SimpleXMLElement::__toString",
						"SimpleXMLElement::_toString",
						"__toString",
						"::__toString"
					],
					"id": "simplexmlelement.tostring",
					"name": "SimpleXMLElement::__toString",
					"description": "Returns the string content"
				},
				"simplexmlelement.xpath": {
					"tokens": [
						"SimpleXMLElement::xpath",
						"xpath",
						"::xpath"
					],
					"id": "simplexmlelement.xpath",
					"name": "SimpleXMLElement::xpath",
					"description": "Runs XPath query on XML data"
				},
				"simplexmliterator.current": {
					"tokens": [
						"SimpleXMLIterator::current",
						"current",
						"::current"
					],
					"id": "simplexmliterator.current",
					"name": "SimpleXMLIterator::current",
					"description": "Returns the current element"
				},
				"simplexmliterator.getchildren": {
					"tokens": [
						"SimpleXMLIterator::getChildren",
						"getChildren",
						"::getChildren"
					],
					"id": "simplexmliterator.getchildren",
					"name": "SimpleXMLIterator::getChildren",
					"description": "Returns the sub-elements of the current element"
				},
				"simplexmliterator.haschildren": {
					"tokens": [
						"SimpleXMLIterator::hasChildren",
						"hasChildren",
						"::hasChildren"
					],
					"id": "simplexmliterator.haschildren",
					"name": "SimpleXMLIterator::hasChildren",
					"description": "Checks whether the current element has sub elements."
				},
				"simplexmliterator.key": {
					"tokens": [
						"SimpleXMLIterator::key",
						"key",
						"::key"
					],
					"id": "simplexmliterator.key",
					"name": "SimpleXMLIterator::key",
					"description": "Return current key"
				},
				"simplexmliterator.next": {
					"tokens": [
						"SimpleXMLIterator::next",
						"next",
						"::next"
					],
					"id": "simplexmliterator.next",
					"name": "SimpleXMLIterator::next",
					"description": "Move to next element"
				},
				"simplexmliterator.rewind": {
					"tokens": [
						"SimpleXMLIterator::rewind",
						"rewind",
						"::rewind"
					],
					"id": "simplexmliterator.rewind",
					"name": "SimpleXMLIterator::rewind",
					"description": "Rewind to the first element"
				},
				"simplexmliterator.valid": {
					"tokens": [
						"SimpleXMLIterator::valid",
						"valid",
						"::valid"
					],
					"id": "simplexmliterator.valid",
					"name": "SimpleXMLIterator::valid",
					"description": "Check whether the current element is valid"
				},
				"function.simplexml-import-dom": {
					"tokens": [
						"simplexml_import_dom",
						"simplexmlimport_dom"
					],
					"id": "function.simplexml-import-dom",
					"name": "simplexml_import_dom",
					"description": "Get a SimpleXMLElement object from a DOM node."
				},
				"function.simplexml-load-file": {
					"tokens": [
						"simplexml_load_file",
						"simplexmlload_file"
					],
					"id": "function.simplexml-load-file",
					"name": "simplexml_load_file",
					"description": "Interprets an XML file into an object"
				},
				"function.simplexml-load-string": {
					"tokens": [
						"simplexml_load_string",
						"simplexmlload_string"
					],
					"id": "function.simplexml-load-string",
					"name": "simplexml_load_string",
					"description": "Interprets a string of XML into an object"
				},
				"function.wddx-add-vars": {
					"tokens": [
						"wddx_add_vars",
						"wddxadd_vars"
					],
					"id": "function.wddx-add-vars",
					"name": "wddx_add_vars",
					"description": "Add variables to a WDDX packet with the specified ID"
				},
				"function.wddx-deserialize": {
					"tokens": [
						"wddx_deserialize",
						"wddxdeserialize"
					],
					"id": "function.wddx-deserialize",
					"name": "wddx_deserialize",
					"description": "Unserializes a WDDX packet"
				},
				"function.wddx-packet-end": {
					"tokens": [
						"wddx_packet_end",
						"wddxpacket_end"
					],
					"id": "function.wddx-packet-end",
					"name": "wddx_packet_end",
					"description": "Ends a WDDX packet with the specified ID"
				},
				"function.wddx-packet-start": {
					"tokens": [
						"wddx_packet_start",
						"wddxpacket_start"
					],
					"id": "function.wddx-packet-start",
					"name": "wddx_packet_start",
					"description": "Starts a new WDDX packet with structure inside it"
				},
				"function.wddx-serialize-value": {
					"tokens": [
						"wddx_serialize_value",
						"wddxserialize_value"
					],
					"id": "function.wddx-serialize-value",
					"name": "wddx_serialize_value",
					"description": "Serialize a single value into a WDDX packet"
				},
				"function.wddx-serialize-vars": {
					"tokens": [
						"wddx_serialize_vars",
						"wddxserialize_vars"
					],
					"id": "function.wddx-serialize-vars",
					"name": "wddx_serialize_vars",
					"description": "Serialize variables into a WDDX packet"
				},
				"xmldiff-base.construct": {
					"tokens": [
						"XMLDiff\\Base::__construct",
						"XMLDiff\\Base::_construct",
						"__construct",
						"::__construct"
					],
					"id": "xmldiff-base.construct",
					"name": "XMLDiff\\Base::__construct",
					"description": "Constructor"
				},
				"xmldiff-base.diff": {
					"tokens": [
						"XMLDiff\\Base::diff",
						"diff",
						"::diff"
					],
					"id": "xmldiff-base.diff",
					"name": "XMLDiff\\Base::diff",
					"description": "Produce diff of two XML documents"
				},
				"xmldiff-base.merge": {
					"tokens": [
						"XMLDiff\\Base::merge",
						"merge",
						"::merge"
					],
					"id": "xmldiff-base.merge",
					"name": "XMLDiff\\Base::merge",
					"description": "Produce new XML document based on diff"
				},
				"xmldiff-dom.diff": {
					"tokens": [
						"XMLDiff\\DOM::diff",
						"diff",
						"::diff"
					],
					"id": "xmldiff-dom.diff",
					"name": "XMLDiff\\DOM::diff",
					"description": "Diff two DOMDocument objects"
				},
				"xmldiff-dom.merge": {
					"tokens": [
						"XMLDiff\\DOM::merge",
						"merge",
						"::merge"
					],
					"id": "xmldiff-dom.merge",
					"name": "XMLDiff\\DOM::merge",
					"description": "Produce merged DOMDocument"
				},
				"xmldiff-memory.diff": {
					"tokens": [
						"XMLDiff\\Memory::diff",
						"diff",
						"::diff"
					],
					"id": "xmldiff-memory.diff",
					"name": "XMLDiff\\Memory::diff",
					"description": "Diff two XML documents"
				},
				"xmldiff-memory.merge": {
					"tokens": [
						"XMLDiff\\Memory::merge",
						"merge",
						"::merge"
					],
					"id": "xmldiff-memory.merge",
					"name": "XMLDiff\\Memory::merge",
					"description": "Produce merged XML document"
				},
				"xmldiff-file.diff": {
					"tokens": [
						"XMLDiff\\File::diff",
						"diff",
						"::diff"
					],
					"id": "xmldiff-file.diff",
					"name": "XMLDiff\\File::diff",
					"description": "Diff two XML files"
				},
				"xmldiff-file.merge": {
					"tokens": [
						"XMLDiff\\File::merge",
						"merge",
						"::merge"
					],
					"id": "xmldiff-file.merge",
					"name": "XMLDiff\\File::merge",
					"description": "Produce merged XML document"
				},
				"function.utf8-decode": {
					"tokens": [
						"utf8_decode",
						"utf8decode"
					],
					"id": "function.utf8-decode",
					"name": "utf8_decode",
					"description": "Converts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1"
				},
				"function.utf8-encode": {
					"tokens": [
						"utf8_encode",
						"utf8encode"
					],
					"id": "function.utf8-encode",
					"name": "utf8_encode",
					"description": "Encodes an ISO-8859-1 string to UTF-8"
				},
				"function.xml-error-string": {
					"tokens": [
						"xml_error_string",
						"xmlerror_string"
					],
					"id": "function.xml-error-string",
					"name": "xml_error_string",
					"description": "Get XML parser error string"
				},
				"function.xml-get-current-byte-index": {
					"tokens": [
						"xml_get_current_byte_index",
						"xmlget_current_byte_index"
					],
					"id": "function.xml-get-current-byte-index",
					"name": "xml_get_current_byte_index",
					"description": "Get current byte index for an XML parser"
				},
				"function.xml-get-current-column-number": {
					"tokens": [
						"xml_get_current_column_number",
						"xmlget_current_column_number"
					],
					"id": "function.xml-get-current-column-number",
					"name": "xml_get_current_column_number",
					"description": "Get current column number for an XML parser"
				},
				"function.xml-get-current-line-number": {
					"tokens": [
						"xml_get_current_line_number",
						"xmlget_current_line_number"
					],
					"id": "function.xml-get-current-line-number",
					"name": "xml_get_current_line_number",
					"description": "Get current line number for an XML parser"
				},
				"function.xml-get-error-code": {
					"tokens": [
						"xml_get_error_code",
						"xmlget_error_code"
					],
					"id": "function.xml-get-error-code",
					"name": "xml_get_error_code",
					"description": "Get XML parser error code"
				},
				"function.xml-parse-into-struct": {
					"tokens": [
						"xml_parse_into_struct",
						"xmlparse_into_struct"
					],
					"id": "function.xml-parse-into-struct",
					"name": "xml_parse_into_struct",
					"description": "Parse XML data into an array structure"
				},
				"function.xml-parse": {
					"tokens": [
						"xml_parse",
						"xmlparse"
					],
					"id": "function.xml-parse",
					"name": "xml_parse",
					"description": "Start parsing an XML document"
				},
				"function.xml-parser-create-ns": {
					"tokens": [
						"xml_parser_create_ns",
						"xmlparser_create_ns"
					],
					"id": "function.xml-parser-create-ns",
					"name": "xml_parser_create_ns",
					"description": "Create an XML parser with namespace support"
				},
				"function.xml-parser-create": {
					"tokens": [
						"xml_parser_create",
						"xmlparser_create"
					],
					"id": "function.xml-parser-create",
					"name": "xml_parser_create",
					"description": "Create an XML parser"
				},
				"function.xml-parser-free": {
					"tokens": [
						"xml_parser_free",
						"xmlparser_free"
					],
					"id": "function.xml-parser-free",
					"name": "xml_parser_free",
					"description": "Free an XML parser"
				},
				"function.xml-parser-get-option": {
					"tokens": [
						"xml_parser_get_option",
						"xmlparser_get_option"
					],
					"id": "function.xml-parser-get-option",
					"name": "xml_parser_get_option",
					"description": "Get options from an XML parser"
				},
				"function.xml-parser-set-option": {
					"tokens": [
						"xml_parser_set_option",
						"xmlparser_set_option"
					],
					"id": "function.xml-parser-set-option",
					"name": "xml_parser_set_option",
					"description": "Set options in an XML parser"
				},
				"function.xml-set-character-data-handler": {
					"tokens": [
						"xml_set_character_data_handler",
						"xmlset_character_data_handler"
					],
					"id": "function.xml-set-character-data-handler",
					"name": "xml_set_character_data_handler",
					"description": "Set up character data handler"
				},
				"function.xml-set-default-handler": {
					"tokens": [
						"xml_set_default_handler",
						"xmlset_default_handler"
					],
					"id": "function.xml-set-default-handler",
					"name": "xml_set_default_handler",
					"description": "Set up default handler"
				},
				"function.xml-set-element-handler": {
					"tokens": [
						"xml_set_element_handler",
						"xmlset_element_handler"
					],
					"id": "function.xml-set-element-handler",
					"name": "xml_set_element_handler",
					"description": "Set up start and end element handlers"
				},
				"function.xml-set-end-namespace-decl-handler": {
					"tokens": [
						"xml_set_end_namespace_decl_handler",
						"xmlset_end_namespace_decl_handler"
					],
					"id": "function.xml-set-end-namespace-decl-handler",
					"name": "xml_set_end_namespace_decl_handler",
					"description": "Set up end namespace declaration handler"
				},
				"function.xml-set-external-entity-ref-handler": {
					"tokens": [
						"xml_set_external_entity_ref_handler",
						"xmlset_external_entity_ref_handler"
					],
					"id": "function.xml-set-external-entity-ref-handler",
					"name": "xml_set_external_entity_ref_handler",
					"description": "Set up external entity reference handler"
				},
				"function.xml-set-notation-decl-handler": {
					"tokens": [
						"xml_set_notation_decl_handler",
						"xmlset_notation_decl_handler"
					],
					"id": "function.xml-set-notation-decl-handler",
					"name": "xml_set_notation_decl_handler",
					"description": "Set up notation declaration handler"
				},
				"function.xml-set-object": {
					"tokens": [
						"xml_set_object",
						"xmlset_object"
					],
					"id": "function.xml-set-object",
					"name": "xml_set_object",
					"description": "Use XML Parser within an object"
				},
				"function.xml-set-processing-instruction-handler": {
					"tokens": [
						"xml_set_processing_instruction_handler",
						"xmlset_processing_instruction_handler"
					],
					"id": "function.xml-set-processing-instruction-handler",
					"name": "xml_set_processing_instruction_handler",
					"description": "Set up processing instruction (PI) handler"
				},
				"function.xml-set-start-namespace-decl-handler": {
					"tokens": [
						"xml_set_start_namespace_decl_handler",
						"xmlset_start_namespace_decl_handler"
					],
					"id": "function.xml-set-start-namespace-decl-handler",
					"name": "xml_set_start_namespace_decl_handler",
					"description": "Set up start namespace declaration handler"
				},
				"function.xml-set-unparsed-entity-decl-handler": {
					"tokens": [
						"xml_set_unparsed_entity_decl_handler",
						"xmlset_unparsed_entity_decl_handler"
					],
					"id": "function.xml-set-unparsed-entity-decl-handler",
					"name": "xml_set_unparsed_entity_decl_handler",
					"description": "Set up unparsed entity declaration handler"
				},
				"xmlreader.close": {
					"tokens": [
						"XMLReader::close",
						"close",
						"::close"
					],
					"id": "xmlreader.close",
					"name": "XMLReader::close",
					"description": "Close the XMLReader input"
				},
				"xmlreader.expand": {
					"tokens": [
						"XMLReader::expand",
						"expand",
						"::expand"
					],
					"id": "xmlreader.expand",
					"name": "XMLReader::expand",
					"description": "Returns a copy of the current node as a DOM object"
				},
				"xmlreader.getattribute": {
					"tokens": [
						"XMLReader::getAttribute",
						"getAttribute",
						"::getAttribute"
					],
					"id": "xmlreader.getattribute",
					"name": "XMLReader::getAttribute",
					"description": "Get the value of a named attribute"
				},
				"xmlreader.getattributeno": {
					"tokens": [
						"XMLReader::getAttributeNo",
						"getAttributeNo",
						"::getAttributeNo"
					],
					"id": "xmlreader.getattributeno",
					"name": "XMLReader::getAttributeNo",
					"description": "Get the value of an attribute by index"
				},
				"xmlreader.getattributens": {
					"tokens": [
						"XMLReader::getAttributeNs",
						"getAttributeNs",
						"::getAttributeNs"
					],
					"id": "xmlreader.getattributens",
					"name": "XMLReader::getAttributeNs",
					"description": "Get the value of an attribute by localname and URI"
				},
				"xmlreader.getparserproperty": {
					"tokens": [
						"XMLReader::getParserProperty",
						"getParserProperty",
						"::getParserProperty"
					],
					"id": "xmlreader.getparserproperty",
					"name": "XMLReader::getParserProperty",
					"description": "Indicates if specified property has been set"
				},
				"xmlreader.isvalid": {
					"tokens": [
						"XMLReader::isValid",
						"isValid",
						"::isValid"
					],
					"id": "xmlreader.isvalid",
					"name": "XMLReader::isValid",
					"description": "Indicates if the parsed document is valid"
				},
				"xmlreader.lookupnamespace": {
					"tokens": [
						"XMLReader::lookupNamespace",
						"lookupNamespace",
						"::lookupNamespace"
					],
					"id": "xmlreader.lookupnamespace",
					"name": "XMLReader::lookupNamespace",
					"description": "Lookup namespace for a prefix"
				},
				"xmlreader.movetoattribute": {
					"tokens": [
						"XMLReader::moveToAttribute",
						"moveToAttribute",
						"::moveToAttribute"
					],
					"id": "xmlreader.movetoattribute",
					"name": "XMLReader::moveToAttribute",
					"description": "Move cursor to a named attribute"
				},
				"xmlreader.movetoattributeno": {
					"tokens": [
						"XMLReader::moveToAttributeNo",
						"moveToAttributeNo",
						"::moveToAttributeNo"
					],
					"id": "xmlreader.movetoattributeno",
					"name": "XMLReader::moveToAttributeNo",
					"description": "Move cursor to an attribute by index"
				},
				"xmlreader.movetoattributens": {
					"tokens": [
						"XMLReader::moveToAttributeNs",
						"moveToAttributeNs",
						"::moveToAttributeNs"
					],
					"id": "xmlreader.movetoattributens",
					"name": "XMLReader::moveToAttributeNs",
					"description": "Move cursor to a named attribute"
				},
				"xmlreader.movetoelement": {
					"tokens": [
						"XMLReader::moveToElement",
						"moveToElement",
						"::moveToElement"
					],
					"id": "xmlreader.movetoelement",
					"name": "XMLReader::moveToElement",
					"description": "Position cursor on the parent Element of current Attribute"
				},
				"xmlreader.movetofirstattribute": {
					"tokens": [
						"XMLReader::moveToFirstAttribute",
						"moveToFirstAttribute",
						"::moveToFirstAttribute"
					],
					"id": "xmlreader.movetofirstattribute",
					"name": "XMLReader::moveToFirstAttribute",
					"description": "Position cursor on the first Attribute"
				},
				"xmlreader.movetonextattribute": {
					"tokens": [
						"XMLReader::moveToNextAttribute",
						"moveToNextAttribute",
						"::moveToNextAttribute"
					],
					"id": "xmlreader.movetonextattribute",
					"name": "XMLReader::moveToNextAttribute",
					"description": "Position cursor on the next Attribute"
				},
				"xmlreader.next": {
					"tokens": [
						"XMLReader::next",
						"next",
						"::next"
					],
					"id": "xmlreader.next",
					"name": "XMLReader::next",
					"description": "Move cursor to next node skipping all subtrees"
				},
				"xmlreader.open": {
					"tokens": [
						"XMLReader::open",
						"open",
						"::open"
					],
					"id": "xmlreader.open",
					"name": "XMLReader::open",
					"description": "Set the URI containing the XML to parse"
				},
				"xmlreader.read": {
					"tokens": [
						"XMLReader::read",
						"read",
						"::read"
					],
					"id": "xmlreader.read",
					"name": "XMLReader::read",
					"description": "Move to next node in document"
				},
				"xmlreader.readinnerxml": {
					"tokens": [
						"XMLReader::readInnerXML",
						"readInnerXML",
						"::readInnerXML"
					],
					"id": "xmlreader.readinnerxml",
					"name": "XMLReader::readInnerXML",
					"description": "Retrieve XML from current node"
				},
				"xmlreader.readouterxml": {
					"tokens": [
						"XMLReader::readOuterXML",
						"readOuterXML",
						"::readOuterXML"
					],
					"id": "xmlreader.readouterxml",
					"name": "XMLReader::readOuterXML",
					"description": "Retrieve XML from current node, including itself"
				},
				"xmlreader.readstring": {
					"tokens": [
						"XMLReader::readString",
						"readString",
						"::readString"
					],
					"id": "xmlreader.readstring",
					"name": "XMLReader::readString",
					"description": "Reads the contents of the current node as a string"
				},
				"xmlreader.setparserproperty": {
					"tokens": [
						"XMLReader::setParserProperty",
						"setParserProperty",
						"::setParserProperty"
					],
					"id": "xmlreader.setparserproperty",
					"name": "XMLReader::setParserProperty",
					"description": "Set parser options"
				},
				"xmlreader.setrelaxngschema": {
					"tokens": [
						"XMLReader::setRelaxNGSchema",
						"setRelaxNGSchema",
						"::setRelaxNGSchema"
					],
					"id": "xmlreader.setrelaxngschema",
					"name": "XMLReader::setRelaxNGSchema",
					"description": "Set the filename or URI for a RelaxNG Schema"
				},
				"xmlreader.setrelaxngschemasource": {
					"tokens": [
						"XMLReader::setRelaxNGSchemaSource",
						"setRelaxNGSchemaSource",
						"::setRelaxNGSchemaSource"
					],
					"id": "xmlreader.setrelaxngschemasource",
					"name": "XMLReader::setRelaxNGSchemaSource",
					"description": "Set the data containing a RelaxNG Schema"
				},
				"xmlreader.setschema": {
					"tokens": [
						"XMLReader::setSchema",
						"setSchema",
						"::setSchema"
					],
					"id": "xmlreader.setschema",
					"name": "XMLReader::setSchema",
					"description": "Validate document against XSD"
				},
				"xmlreader.xml": {
					"tokens": [
						"XMLReader::XML",
						"XML",
						"::XML"
					],
					"id": "xmlreader.xml",
					"name": "XMLReader::XML",
					"description": "Set the data containing the XML to parse"
				},
				"function.xmlwriter-end-attribute": {
					"tokens": [
						"XMLWriter::endAttribute",
						"endAttribute",
						"::endAttribute"
					],
					"id": "function.xmlwriter-end-attribute",
					"name": "XMLWriter::endAttribute",
					"description": "End attribute"
				},
				"function.xmlwriter-end-cdata": {
					"tokens": [
						"XMLWriter::endCData",
						"endCData",
						"::endCData"
					],
					"id": "function.xmlwriter-end-cdata",
					"name": "XMLWriter::endCData",
					"description": "End current CDATA"
				},
				"function.xmlwriter-end-comment": {
					"tokens": [
						"XMLWriter::endComment",
						"endComment",
						"::endComment"
					],
					"id": "function.xmlwriter-end-comment",
					"name": "XMLWriter::endComment",
					"description": "Create end comment"
				},
				"function.xmlwriter-end-document": {
					"tokens": [
						"XMLWriter::endDocument",
						"endDocument",
						"::endDocument"
					],
					"id": "function.xmlwriter-end-document",
					"name": "XMLWriter::endDocument",
					"description": "End current document"
				},
				"function.xmlwriter-end-dtd-attlist": {
					"tokens": [
						"XMLWriter::endDTDAttlist",
						"endDTDAttlist",
						"::endDTDAttlist"
					],
					"id": "function.xmlwriter-end-dtd-attlist",
					"name": "XMLWriter::endDTDAttlist",
					"description": "End current DTD AttList"
				},
				"function.xmlwriter-end-dtd-element": {
					"tokens": [
						"XMLWriter::endDTDElement",
						"endDTDElement",
						"::endDTDElement"
					],
					"id": "function.xmlwriter-end-dtd-element",
					"name": "XMLWriter::endDTDElement",
					"description": "End current DTD element"
				},
				"function.xmlwriter-end-dtd-entity": {
					"tokens": [
						"XMLWriter::endDTDEntity",
						"endDTDEntity",
						"::endDTDEntity"
					],
					"id": "function.xmlwriter-end-dtd-entity",
					"name": "XMLWriter::endDTDEntity",
					"description": "End current DTD Entity"
				},
				"function.xmlwriter-end-dtd": {
					"tokens": [
						"XMLWriter::endDTD",
						"endDTD",
						"::endDTD"
					],
					"id": "function.xmlwriter-end-dtd",
					"name": "XMLWriter::endDTD",
					"description": "End current DTD"
				},
				"function.xmlwriter-end-element": {
					"tokens": [
						"XMLWriter::endElement",
						"endElement",
						"::endElement"
					],
					"id": "function.xmlwriter-end-element",
					"name": "XMLWriter::endElement",
					"description": "End current element"
				},
				"function.xmlwriter-end-pi": {
					"tokens": [
						"XMLWriter::endPI",
						"endPI",
						"::endPI"
					],
					"id": "function.xmlwriter-end-pi",
					"name": "XMLWriter::endPI",
					"description": "End current PI"
				},
				"function.xmlwriter-flush": {
					"tokens": [
						"XMLWriter::flush",
						"flush",
						"::flush"
					],
					"id": "function.xmlwriter-flush",
					"name": "XMLWriter::flush",
					"description": "Flush current buffer"
				},
				"function.xmlwriter-full-end-element": {
					"tokens": [
						"XMLWriter::fullEndElement",
						"fullEndElement",
						"::fullEndElement"
					],
					"id": "function.xmlwriter-full-end-element",
					"name": "XMLWriter::fullEndElement",
					"description": "End current element"
				},
				"function.xmlwriter-open-memory": {
					"tokens": [
						"XMLWriter::openMemory",
						"openMemory",
						"::openMemory"
					],
					"id": "function.xmlwriter-open-memory",
					"name": "XMLWriter::openMemory",
					"description": "Create new xmlwriter using memory for string output"
				},
				"function.xmlwriter-open-uri": {
					"tokens": [
						"XMLWriter::openURI",
						"openURI",
						"::openURI"
					],
					"id": "function.xmlwriter-open-uri",
					"name": "XMLWriter::openURI",
					"description": "Create new xmlwriter using source uri for output"
				},
				"function.xmlwriter-output-memory": {
					"tokens": [
						"XMLWriter::outputMemory",
						"outputMemory",
						"::outputMemory"
					],
					"id": "function.xmlwriter-output-memory",
					"name": "XMLWriter::outputMemory",
					"description": "Returns current buffer"
				},
				"function.xmlwriter-set-indent-string": {
					"tokens": [
						"XMLWriter::setIndentString",
						"setIndentString",
						"::setIndentString"
					],
					"id": "function.xmlwriter-set-indent-string",
					"name": "XMLWriter::setIndentString",
					"description": "Set string used for indenting"
				},
				"function.xmlwriter-set-indent": {
					"tokens": [
						"XMLWriter::setIndent",
						"setIndent",
						"::setIndent"
					],
					"id": "function.xmlwriter-set-indent",
					"name": "XMLWriter::setIndent",
					"description": "Toggle indentation on/off"
				},
				"function.xmlwriter-start-attribute-ns": {
					"tokens": [
						"XMLWriter::startAttributeNS",
						"startAttributeNS",
						"::startAttributeNS"
					],
					"id": "function.xmlwriter-start-attribute-ns",
					"name": "XMLWriter::startAttributeNS",
					"description": "Create start namespaced attribute"
				},
				"function.xmlwriter-start-attribute": {
					"tokens": [
						"XMLWriter::startAttribute",
						"startAttribute",
						"::startAttribute"
					],
					"id": "function.xmlwriter-start-attribute",
					"name": "XMLWriter::startAttribute",
					"description": "Create start attribute"
				},
				"function.xmlwriter-start-cdata": {
					"tokens": [
						"XMLWriter::startCData",
						"startCData",
						"::startCData"
					],
					"id": "function.xmlwriter-start-cdata",
					"name": "XMLWriter::startCData",
					"description": "Create start CDATA tag"
				},
				"function.xmlwriter-start-comment": {
					"tokens": [
						"XMLWriter::startComment",
						"startComment",
						"::startComment"
					],
					"id": "function.xmlwriter-start-comment",
					"name": "XMLWriter::startComment",
					"description": "Create start comment"
				},
				"function.xmlwriter-start-document": {
					"tokens": [
						"XMLWriter::startDocument",
						"startDocument",
						"::startDocument"
					],
					"id": "function.xmlwriter-start-document",
					"name": "XMLWriter::startDocument",
					"description": "Create document tag"
				},
				"function.xmlwriter-start-dtd-attlist": {
					"tokens": [
						"XMLWriter::startDTDAttlist",
						"startDTDAttlist",
						"::startDTDAttlist"
					],
					"id": "function.xmlwriter-start-dtd-attlist",
					"name": "XMLWriter::startDTDAttlist",
					"description": "Create start DTD AttList"
				},
				"function.xmlwriter-start-dtd-element": {
					"tokens": [
						"XMLWriter::startDTDElement",
						"startDTDElement",
						"::startDTDElement"
					],
					"id": "function.xmlwriter-start-dtd-element",
					"name": "XMLWriter::startDTDElement",
					"description": "Create start DTD element"
				},
				"function.xmlwriter-start-dtd-entity": {
					"tokens": [
						"XMLWriter::startDTDEntity",
						"startDTDEntity",
						"::startDTDEntity"
					],
					"id": "function.xmlwriter-start-dtd-entity",
					"name": "XMLWriter::startDTDEntity",
					"description": "Create start DTD Entity"
				},
				"function.xmlwriter-start-dtd": {
					"tokens": [
						"XMLWriter::startDTD",
						"startDTD",
						"::startDTD"
					],
					"id": "function.xmlwriter-start-dtd",
					"name": "XMLWriter::startDTD",
					"description": "Create start DTD tag"
				},
				"function.xmlwriter-start-element-ns": {
					"tokens": [
						"XMLWriter::startElementNS",
						"startElementNS",
						"::startElementNS"
					],
					"id": "function.xmlwriter-start-element-ns",
					"name": "XMLWriter::startElementNS",
					"description": "Create start namespaced element tag"
				},
				"function.xmlwriter-start-element": {
					"tokens": [
						"XMLWriter::startElement",
						"startElement",
						"::startElement"
					],
					"id": "function.xmlwriter-start-element",
					"name": "XMLWriter::startElement",
					"description": "Create start element tag"
				},
				"function.xmlwriter-start-pi": {
					"tokens": [
						"XMLWriter::startPI",
						"startPI",
						"::startPI"
					],
					"id": "function.xmlwriter-start-pi",
					"name": "XMLWriter::startPI",
					"description": "Create start PI tag"
				},
				"function.xmlwriter-text": {
					"tokens": [
						"XMLWriter::text",
						"text",
						"::text"
					],
					"id": "function.xmlwriter-text",
					"name": "XMLWriter::text",
					"description": "Write text"
				},
				"function.xmlwriter-write-attribute-ns": {
					"tokens": [
						"XMLWriter::writeAttributeNS",
						"writeAttributeNS",
						"::writeAttributeNS"
					],
					"id": "function.xmlwriter-write-attribute-ns",
					"name": "XMLWriter::writeAttributeNS",
					"description": "Write full namespaced attribute"
				},
				"function.xmlwriter-write-attribute": {
					"tokens": [
						"XMLWriter::writeAttribute",
						"writeAttribute",
						"::writeAttribute"
					],
					"id": "function.xmlwriter-write-attribute",
					"name": "XMLWriter::writeAttribute",
					"description": "Write full attribute"
				},
				"function.xmlwriter-write-cdata": {
					"tokens": [
						"XMLWriter::writeCData",
						"writeCData",
						"::writeCData"
					],
					"id": "function.xmlwriter-write-cdata",
					"name": "XMLWriter::writeCData",
					"description": "Write full CDATA tag"
				},
				"function.xmlwriter-write-comment": {
					"tokens": [
						"XMLWriter::writeComment",
						"writeComment",
						"::writeComment"
					],
					"id": "function.xmlwriter-write-comment",
					"name": "XMLWriter::writeComment",
					"description": "Write full comment tag"
				},
				"function.xmlwriter-write-dtd-attlist": {
					"tokens": [
						"XMLWriter::writeDTDAttlist",
						"writeDTDAttlist",
						"::writeDTDAttlist"
					],
					"id": "function.xmlwriter-write-dtd-attlist",
					"name": "XMLWriter::writeDTDAttlist",
					"description": "Write full DTD AttList tag"
				},
				"function.xmlwriter-write-dtd-element": {
					"tokens": [
						"XMLWriter::writeDTDElement",
						"writeDTDElement",
						"::writeDTDElement"
					],
					"id": "function.xmlwriter-write-dtd-element",
					"name": "XMLWriter::writeDTDElement",
					"description": "Write full DTD element tag"
				},
				"function.xmlwriter-write-dtd-entity": {
					"tokens": [
						"XMLWriter::writeDTDEntity",
						"writeDTDEntity",
						"::writeDTDEntity"
					],
					"id": "function.xmlwriter-write-dtd-entity",
					"name": "XMLWriter::writeDTDEntity",
					"description": "Write full DTD Entity tag"
				},
				"function.xmlwriter-write-dtd": {
					"tokens": [
						"XMLWriter::writeDTD",
						"writeDTD",
						"::writeDTD"
					],
					"id": "function.xmlwriter-write-dtd",
					"name": "XMLWriter::writeDTD",
					"description": "Write full DTD tag"
				},
				"function.xmlwriter-write-element-ns": {
					"tokens": [
						"XMLWriter::writeElementNS",
						"writeElementNS",
						"::writeElementNS"
					],
					"id": "function.xmlwriter-write-element-ns",
					"name": "XMLWriter::writeElementNS",
					"description": "Write full namespaced element tag"
				},
				"function.xmlwriter-write-element": {
					"tokens": [
						"XMLWriter::writeElement",
						"writeElement",
						"::writeElement"
					],
					"id": "function.xmlwriter-write-element",
					"name": "XMLWriter::writeElement",
					"description": "Write full element tag"
				},
				"function.xmlwriter-write-pi": {
					"tokens": [
						"XMLWriter::writePI",
						"writePI",
						"::writePI"
					],
					"id": "function.xmlwriter-write-pi",
					"name": "XMLWriter::writePI",
					"description": "Writes a PI"
				},
				"function.xmlwriter-write-raw": {
					"tokens": [
						"XMLWriter::writeRaw",
						"writeRaw",
						"::writeRaw"
					],
					"id": "function.xmlwriter-write-raw",
					"name": "XMLWriter::writeRaw",
					"description": "Write a raw XML text"
				},
				"xsltprocessor.construct": {
					"tokens": [
						"XSLTProcessor::__construct",
						"XSLTProcessor::_construct",
						"__construct",
						"::__construct"
					],
					"id": "xsltprocessor.construct",
					"name": "XSLTProcessor::__construct",
					"description": "Creates a new XSLTProcessor object"
				},
				"xsltprocessor.getparameter": {
					"tokens": [
						"XSLTProcessor::getParameter",
						"getParameter",
						"::getParameter"
					],
					"id": "xsltprocessor.getparameter",
					"name": "XSLTProcessor::getParameter",
					"description": "Get value of a parameter"
				},
				"xsltprocessor.getsecurityprefs": {
					"tokens": [
						"XsltProcessor::getSecurityPrefs",
						"getSecurityPrefs",
						"::getSecurityPrefs"
					],
					"id": "xsltprocessor.getsecurityprefs",
					"name": "XsltProcessor::getSecurityPrefs",
					"description": "Get security preferences"
				},
				"xsltprocessor.hasexsltsupport": {
					"tokens": [
						"XSLTProcessor::hasExsltSupport",
						"hasExsltSupport",
						"::hasExsltSupport"
					],
					"id": "xsltprocessor.hasexsltsupport",
					"name": "XSLTProcessor::hasExsltSupport",
					"description": "Determine if PHP has EXSLT support"
				},
				"xsltprocessor.importstylesheet": {
					"tokens": [
						"XSLTProcessor::importStylesheet",
						"importStylesheet",
						"::importStylesheet"
					],
					"id": "xsltprocessor.importstylesheet",
					"name": "XSLTProcessor::importStylesheet",
					"description": "Import stylesheet"
				},
				"xsltprocessor.registerphpfunctions": {
					"tokens": [
						"XSLTProcessor::registerPHPFunctions",
						"registerPHPFunctions",
						"::registerPHPFunctions"
					],
					"id": "xsltprocessor.registerphpfunctions",
					"name": "XSLTProcessor::registerPHPFunctions",
					"description": "Enables the ability to use PHP functions as XSLT functions"
				},
				"xsltprocessor.removeparameter": {
					"tokens": [
						"XSLTProcessor::removeParameter",
						"removeParameter",
						"::removeParameter"
					],
					"id": "xsltprocessor.removeparameter",
					"name": "XSLTProcessor::removeParameter",
					"description": "Remove parameter"
				},
				"xsltprocessor.setparameter": {
					"tokens": [
						"XSLTProcessor::setParameter",
						"setParameter",
						"::setParameter"
					],
					"id": "xsltprocessor.setparameter",
					"name": "XSLTProcessor::setParameter",
					"description": "Set value for a parameter"
				},
				"xsltprocessor.setprofiling": {
					"tokens": [
						"XSLTProcessor::setProfiling",
						"setProfiling",
						"::setProfiling"
					],
					"id": "xsltprocessor.setprofiling",
					"name": "XSLTProcessor::setProfiling",
					"description": "Sets profiling output file"
				},
				"xsltprocessor.setsecurityprefs": {
					"tokens": [
						"XsltProcessor::setSecurityPrefs",
						"setSecurityPrefs",
						"::setSecurityPrefs"
					],
					"id": "xsltprocessor.setsecurityprefs",
					"name": "XsltProcessor::setSecurityPrefs",
					"description": "Set security preferences"
				},
				"xsltprocessor.transformtodoc": {
					"tokens": [
						"XSLTProcessor::transformToDoc",
						"transformToDoc",
						"::transformToDoc"
					],
					"id": "xsltprocessor.transformtodoc",
					"name": "XSLTProcessor::transformToDoc",
					"description": "Transform to a DOMDocument"
				},
				"xsltprocessor.transformtouri": {
					"tokens": [
						"XSLTProcessor::transformToUri",
						"transformToUri",
						"::transformToUri"
					],
					"id": "xsltprocessor.transformtouri",
					"name": "XSLTProcessor::transformToUri",
					"description": "Transform to URI"
				},
				"xsltprocessor.transformtoxml": {
					"tokens": [
						"XSLTProcessor::transformToXML",
						"transformToXML",
						"::transformToXML"
					],
					"id": "xsltprocessor.transformtoxml",
					"name": "XSLTProcessor::transformToXML",
					"description": "Transform to XML"
				},
				"internals2.counter.counter-class.construct": {
					"tokens": [
						"Counter::__construct",
						"Counter::_construct",
						"__construct",
						"::__construct"
					],
					"id": "internals2.counter.counter-class.construct",
					"name": "Counter::__construct",
					"description": "Creates an instance of a Counter which maintains a single numeric value."
				},
				"internals2.counter.counter-class.getvalue": {
					"tokens": [
						"Counter::getValue",
						"getValue",
						"::getValue"
					],
					"id": "internals2.counter.counter-class.getvalue",
					"name": "Counter::getValue",
					"description": "Get the current value of a counter."
				},
				"internals2.counter.counter-class.bumpvalue": {
					"tokens": [
						"Counter::bumpValue",
						"bumpValue",
						"::bumpValue"
					],
					"id": "internals2.counter.counter-class.bumpvalue",
					"name": "Counter::bumpValue",
					"description": "Change the current value of a counter."
				},
				"internals2.counter.counter-class.resetvalue": {
					"tokens": [
						"Counter::resetValue",
						"resetValue",
						"::resetValue"
					],
					"id": "internals2.counter.counter-class.resetvalue",
					"name": "Counter::resetValue",
					"description": "Reset the current value of a counter."
				},
				"internals2.counter.counter-class.getmeta": {
					"tokens": [
						"Counter::getMeta",
						"getMeta",
						"::getMeta"
					],
					"id": "internals2.counter.counter-class.getmeta",
					"name": "Counter::getMeta",
					"description": "Return a piece of metainformation about a counter."
				},
				"internals2.counter.counter-class.getnamed": {
					"tokens": [
						"Counter::getNamed",
						"getNamed",
						"::getNamed"
					],
					"id": "internals2.counter.counter-class.getnamed",
					"name": "Counter::getNamed",
					"description": "Retrieve an existing named counter."
				},
				"internals2.counter.counter-class.setcounterclass": {
					"tokens": [
						"Counter::setCounterClass",
						"setCounterClass",
						"::setCounterClass"
					],
					"id": "internals2.counter.counter-class.setcounterclass",
					"name": "Counter::setCounterClass",
					"description": "Set the class returned by Counter::getNamed."
				},
				"internals2.counter.function.counter-get": {
					"tokens": [
						"counter_get",
						"counterget"
					],
					"id": "internals2.counter.function.counter-get",
					"name": "counter_get",
					"description": "Get the current value of the basic counter."
				},
				"internals2.counter.function.counter-bump": {
					"tokens": [
						"counter_bump",
						"counterbump"
					],
					"id": "internals2.counter.function.counter-bump",
					"name": "counter_bump",
					"description": "Update the current value of the basic counter."
				},
				"internals2.counter.function.counter-reset": {
					"tokens": [
						"counter_reset",
						"counterreset"
					],
					"id": "internals2.counter.function.counter-reset",
					"name": "counter_reset",
					"description": "Reset the current value of the basic counter."
				},
				"internals2.counter.function.counter-create": {
					"tokens": [
						"counter_create",
						"countercreate"
					],
					"id": "internals2.counter.function.counter-create",
					"name": "counter_create",
					"description": "Creates a counter which maintains a single numeric value."
				},
				"internals2.counter.function.counter-get-value": {
					"tokens": [
						"counter_get_value",
						"counterget_value"
					],
					"id": "internals2.counter.function.counter-get-value",
					"name": "counter_get_value",
					"description": "Get the current value of a counter resource."
				},
				"internals2.counter.function.counter-bump-value": {
					"tokens": [
						"counter_bump_value",
						"counterbump_value"
					],
					"id": "internals2.counter.function.counter-bump-value",
					"name": "counter_bump_value",
					"description": "Change the current value of a counter resource."
				},
				"internals2.counter.function.counter-reset-value": {
					"tokens": [
						"counter_reset_value",
						"counterreset_value"
					],
					"id": "internals2.counter.function.counter-reset-value",
					"name": "counter_reset_value",
					"description": "Reset the current value of a counter resource."
				},
				"internals2.counter.function.counter-get-meta": {
					"tokens": [
						"counter_get_meta",
						"counterget_meta"
					],
					"id": "internals2.counter.function.counter-get-meta",
					"name": "counter_get_meta",
					"description": "Return a piece of metainformation about a counter resource."
				},
				"internals2.counter.function.counter-get-named": {
					"tokens": [
						"counter_get_named",
						"counterget_named"
					],
					"id": "internals2.counter.function.counter-get-named",
					"name": "counter_get_named",
					"description": "Retrieve an existing named counter as a resource."
				}
			}
		},
		"variable": {
			"label": "Variables",
			"elements": {
				"language.variables.superglobals": {
					"tokens": [
						"Superglobals"
					],
					"id": "language.variables.superglobals",
					"name": "Superglobals",
					"description": "Superglobals are built-in variables that are always available in all scopes"
				},
				"reserved.variables.globals": {
					"tokens": [
						"$GLOBALS"
					],
					"id": "reserved.variables.globals",
					"name": "$GLOBALS",
					"description": "References all variables available in global scope"
				},
				"reserved.variables.server": {
					"tokens": [
						"$_SERVER",
						"$SERVER"
					],
					"id": "reserved.variables.server",
					"name": "$_SERVER",
					"description": "Server and execution environment information"
				},
				"reserved.variables.get": {
					"tokens": [
						"$_GET",
						"$GET"
					],
					"id": "reserved.variables.get",
					"name": "$_GET",
					"description": "HTTP GET variables"
				},
				"reserved.variables.post": {
					"tokens": [
						"$_POST",
						"$POST"
					],
					"id": "reserved.variables.post",
					"name": "$_POST",
					"description": "HTTP POST variables"
				},
				"reserved.variables.files": {
					"tokens": [
						"$_FILES",
						"$FILES"
					],
					"id": "reserved.variables.files",
					"name": "$_FILES",
					"description": "HTTP File Upload variables"
				},
				"reserved.variables.request": {
					"tokens": [
						"$_REQUEST",
						"$REQUEST"
					],
					"id": "reserved.variables.request",
					"name": "$_REQUEST",
					"description": "HTTP Request variables"
				},
				"reserved.variables.session": {
					"tokens": [
						"$_SESSION",
						"$SESSION"
					],
					"id": "reserved.variables.session",
					"name": "$_SESSION",
					"description": "Session variables"
				},
				"reserved.variables.environment": {
					"tokens": [
						"$_ENV",
						"$ENV"
					],
					"id": "reserved.variables.environment",
					"name": "$_ENV",
					"description": "Environment variables"
				},
				"reserved.variables.cookies": {
					"tokens": [
						"$_COOKIE",
						"$COOKIE"
					],
					"id": "reserved.variables.cookies",
					"name": "$_COOKIE",
					"description": "HTTP Cookies"
				},
				"reserved.variables.phperrormsg": {
					"tokens": [
						"$php_errormsg",
						"$phperrormsg"
					],
					"id": "reserved.variables.phperrormsg",
					"name": "$php_errormsg",
					"description": "The previous error message"
				},
				"reserved.variables.httprawpostdata": {
					"tokens": [
						"$HTTP_RAW_POST_DATA",
						"$HTTPRAW_POST_DATA"
					],
					"id": "reserved.variables.httprawpostdata",
					"name": "$HTTP_RAW_POST_DATA",
					"description": "Raw POST data"
				},
				"reserved.variables.httpresponseheader": {
					"tokens": [
						"$http_response_header",
						"$httpresponse_header"
					],
					"id": "reserved.variables.httpresponseheader",
					"name": "$http_response_header",
					"description": "HTTP response headers"
				},
				"reserved.variables.argc": {
					"tokens": [
						"$argc"
					],
					"id": "reserved.variables.argc",
					"name": "$argc",
					"description": "The number of arguments passed to script"
				},
				"reserved.variables.argv": {
					"tokens": [
						"$argv"
					],
					"id": "reserved.variables.argv",
					"name": "$argv",
					"description": "Array of arguments passed to script"
				}
			}
		},
		"class": {
			"label": "Classes",
			"elements": {
				"class.error": {
					"tokens": [
						"Error"
					],
					"id": "class.error",
					"name": "Error",
					"description": "Error"
				},
				"class.traversable": {
					"tokens": [
						"Traversable"
					],
					"id": "class.traversable",
					"name": "Traversable",
					"description": "The Traversable interface"
				},
				"class.iterator": {
					"tokens": [
						"Iterator"
					],
					"id": "class.iterator",
					"name": "Iterator",
					"description": "The Iterator interface"
				},
				"class.iteratoraggregate": {
					"tokens": [
						"IteratorAggregate"
					],
					"id": "class.iteratoraggregate",
					"name": "IteratorAggregate",
					"description": "The IteratorAggregate interface"
				},
				"class.throwable": {
					"tokens": [
						"Throwable"
					],
					"id": "class.throwable",
					"name": "Throwable",
					"description": "Throwable"
				},
				"class.arrayaccess": {
					"tokens": [
						"ArrayAccess"
					],
					"id": "class.arrayaccess",
					"name": "ArrayAccess",
					"description": "The ArrayAccess interface"
				},
				"class.serializable": {
					"tokens": [
						"Serializable"
					],
					"id": "class.serializable",
					"name": "Serializable",
					"description": "The Serializable interface"
				},
				"class.closure": {
					"tokens": [
						"Closure"
					],
					"id": "class.closure",
					"name": "Closure",
					"description": "The Closure class"
				},
				"class.generator": {
					"tokens": [
						"Generator"
					],
					"id": "class.generator",
					"name": "Generator",
					"description": "The Generator class"
				},
				"class.apciterator": {
					"tokens": [
						"APCIterator"
					],
					"id": "class.apciterator",
					"name": "APCIterator",
					"description": "The APCIterator class"
				},
				"class.apcuiterator": {
					"tokens": [
						"APCUIterator"
					],
					"id": "class.apcuiterator",
					"name": "APCUIterator",
					"description": "The APCUIterator class"
				},
				"class.weakref": {
					"tokens": [
						"WeakRef"
					],
					"id": "class.weakref",
					"name": "WeakRef",
					"description": "The WeakRef class"
				},
				"class.weakmap": {
					"tokens": [
						"WeakMap"
					],
					"id": "class.weakmap",
					"name": "WeakMap",
					"description": "The WeakMap class"
				},
				"class.ktaglib-mpeg-file": {
					"tokens": [
						"KTaglib_MPEG_File",
						"KTaglibMPEG_File"
					],
					"id": "class.ktaglib-mpeg-file",
					"name": "KTaglib_MPEG_File",
					"description": "The KTaglib_MPEG_File class"
				},
				"class.ktaglib-mpeg-audioproperties": {
					"tokens": [
						"KTaglib_MPEG_AudioProperties",
						"KTaglibMPEG_AudioProperties"
					],
					"id": "class.ktaglib-mpeg-audioproperties",
					"name": "KTaglib_MPEG_AudioProperties",
					"description": "The KTaglib_MPEG_AudioProperties class"
				},
				"class.ktaglib-tag": {
					"tokens": [
						"KTaglib_Tag",
						"KTaglibTag"
					],
					"id": "class.ktaglib-tag",
					"name": "KTaglib_Tag",
					"description": "The KTaglib_Tag class"
				},
				"class.ktaglib-id3v2-tag": {
					"tokens": [
						"KTaglib_ID3v2_Tag",
						"KTaglibID3v2_Tag"
					],
					"id": "class.ktaglib-id3v2-tag",
					"name": "KTaglib_ID3v2_Tag",
					"description": "The KTaglib_ID3v2_Tag class"
				},
				"class.ktaglib-id3v2-frame": {
					"tokens": [
						"KTaglib_ID3v2_Frame",
						"KTaglibID3v2_Frame"
					],
					"id": "class.ktaglib-id3v2-frame",
					"name": "KTaglib_ID3v2_Frame",
					"description": "The KTaglib_ID3v2_Frame class"
				},
				"class.ktaglib-id3v2-attachedpictureframe": {
					"tokens": [
						"KTaglib_ID3v2_AttachedPictureFrame",
						"KTaglibID3v2_AttachedPictureFrame"
					],
					"id": "class.ktaglib-id3v2-attachedpictureframe",
					"name": "KTaglib_ID3v2_AttachedPictureFrame",
					"description": "The KTaglib_ID3v2_AttachedPictureFrame class"
				},
				"class.phar": {
					"tokens": [
						"Phar"
					],
					"id": "class.phar",
					"name": "Phar",
					"description": "The Phar class"
				},
				"class.phardata": {
					"tokens": [
						"PharData"
					],
					"id": "class.phardata",
					"name": "PharData",
					"description": "The PharData class"
				},
				"class.pharfileinfo": {
					"tokens": [
						"PharFileInfo"
					],
					"id": "class.pharfileinfo",
					"name": "PharFileInfo",
					"description": "The PharFileInfo class"
				},
				"class.rararchive": {
					"tokens": [
						"RarArchive"
					],
					"id": "class.rararchive",
					"name": "RarArchive",
					"description": "The RarArchive class"
				},
				"class.rarentry": {
					"tokens": [
						"RarEntry"
					],
					"id": "class.rarentry",
					"name": "RarEntry",
					"description": "The RarEntry class"
				},
				"class.rarexception": {
					"tokens": [
						"RarException"
					],
					"id": "class.rarexception",
					"name": "RarException",
					"description": "The RarException class"
				},
				"class.ziparchive": {
					"tokens": [
						"ZipArchive"
					],
					"id": "class.ziparchive",
					"name": "ZipArchive",
					"description": "The ZipArchive class"
				},
				"class.pdo": {
					"tokens": [
						"PDO"
					],
					"id": "class.pdo",
					"name": "PDO",
					"description": "The PDO class"
				},
				"class.pdostatement": {
					"tokens": [
						"PDOStatement"
					],
					"id": "class.pdostatement",
					"name": "PDOStatement",
					"description": "The PDOStatement class"
				},
				"class.mongoclient": {
					"tokens": [
						"MongoClient"
					],
					"id": "class.mongoclient",
					"name": "MongoClient",
					"description": "The MongoClient class"
				},
				"class.mongodb": {
					"tokens": [
						"MongoDB"
					],
					"id": "class.mongodb",
					"name": "MongoDB",
					"description": "The MongoDB class"
				},
				"class.mongocollection": {
					"tokens": [
						"MongoCollection"
					],
					"id": "class.mongocollection",
					"name": "MongoCollection",
					"description": "The MongoCollection class"
				},
				"class.mongocursor": {
					"tokens": [
						"MongoCursor"
					],
					"id": "class.mongocursor",
					"name": "MongoCursor",
					"description": "The MongoCursor class"
				},
				"class.mongocursorinterface": {
					"tokens": [
						"MongoCursorInterface"
					],
					"id": "class.mongocursorinterface",
					"name": "MongoCursorInterface",
					"description": "The MongoCursorInterface interface"
				},
				"class.mongocommandcursor": {
					"tokens": [
						"MongoCommandCursor"
					],
					"id": "class.mongocommandcursor",
					"name": "MongoCommandCursor",
					"description": "The MongoCommandCursor class"
				},
				"class.mongoid": {
					"tokens": [
						"MongoId"
					],
					"id": "class.mongoid",
					"name": "MongoId",
					"description": "The MongoId class"
				},
				"class.mongocode": {
					"tokens": [
						"MongoCode"
					],
					"id": "class.mongocode",
					"name": "MongoCode",
					"description": "The MongoCode class"
				},
				"class.mongodate": {
					"tokens": [
						"MongoDate"
					],
					"id": "class.mongodate",
					"name": "MongoDate",
					"description": "The MongoDate class"
				},
				"class.mongoregex": {
					"tokens": [
						"MongoRegex"
					],
					"id": "class.mongoregex",
					"name": "MongoRegex",
					"description": "The MongoRegex class"
				},
				"class.mongobindata": {
					"tokens": [
						"MongoBinData"
					],
					"id": "class.mongobindata",
					"name": "MongoBinData",
					"description": "The MongoBinData class"
				},
				"class.mongoint32": {
					"tokens": [
						"MongoInt32"
					],
					"id": "class.mongoint32",
					"name": "MongoInt32",
					"description": "The MongoInt32 class"
				},
				"class.mongoint64": {
					"tokens": [
						"MongoInt64"
					],
					"id": "class.mongoint64",
					"name": "MongoInt64",
					"description": "The MongoInt64 class"
				},
				"class.mongodbref": {
					"tokens": [
						"MongoDBRef"
					],
					"id": "class.mongodbref",
					"name": "MongoDBRef",
					"description": "The MongoDBRef class"
				},
				"class.mongominkey": {
					"tokens": [
						"MongoMinKey"
					],
					"id": "class.mongominkey",
					"name": "MongoMinKey",
					"description": "The MongoMinKey class"
				},
				"class.mongomaxkey": {
					"tokens": [
						"MongoMaxKey"
					],
					"id": "class.mongomaxkey",
					"name": "MongoMaxKey",
					"description": "The MongoMaxKey class"
				},
				"class.mongotimestamp": {
					"tokens": [
						"MongoTimestamp"
					],
					"id": "class.mongotimestamp",
					"name": "MongoTimestamp",
					"description": "The MongoTimestamp class"
				},
				"class.mongogridfs": {
					"tokens": [
						"MongoGridFS"
					],
					"id": "class.mongogridfs",
					"name": "MongoGridFS",
					"description": "The MongoGridFS class"
				},
				"class.mongogridfsfile": {
					"tokens": [
						"MongoGridFSFile"
					],
					"id": "class.mongogridfsfile",
					"name": "MongoGridFSFile",
					"description": "The MongoGridFSFile class"
				},
				"class.mongogridfscursor": {
					"tokens": [
						"MongoGridFSCursor"
					],
					"id": "class.mongogridfscursor",
					"name": "MongoGridFSCursor",
					"description": "The MongoGridFSCursor class"
				},
				"class.mongowritebatch": {
					"tokens": [
						"MongoWriteBatch"
					],
					"id": "class.mongowritebatch",
					"name": "MongoWriteBatch",
					"description": "The MongoWriteBatch class"
				},
				"class.mongoinsertbatch": {
					"tokens": [
						"MongoInsertBatch"
					],
					"id": "class.mongoinsertbatch",
					"name": "MongoInsertBatch",
					"description": "The MongoInsertBatch class"
				},
				"class.mongoupdatebatch": {
					"tokens": [
						"MongoUpdateBatch"
					],
					"id": "class.mongoupdatebatch",
					"name": "MongoUpdateBatch",
					"description": "The MongoUpdateBatch class"
				},
				"class.mongodeletebatch": {
					"tokens": [
						"MongoDeleteBatch"
					],
					"id": "class.mongodeletebatch",
					"name": "MongoDeleteBatch",
					"description": "The MongoDeleteBatch class"
				},
				"class.mongolog": {
					"tokens": [
						"MongoLog"
					],
					"id": "class.mongolog",
					"name": "MongoLog",
					"description": "The MongoLog class"
				},
				"class.mongopool": {
					"tokens": [
						"MongoPool"
					],
					"id": "class.mongopool",
					"name": "MongoPool",
					"description": "The MongoPool class"
				},
				"class.mongo": {
					"tokens": [
						"Mongo"
					],
					"id": "class.mongo",
					"name": "Mongo",
					"description": "The Mongo class [deprecated]"
				},
				"class.mongoexception": {
					"tokens": [
						"MongoException"
					],
					"id": "class.mongoexception",
					"name": "MongoException",
					"description": "The MongoException class"
				},
				"class.mongoresultexception": {
					"tokens": [
						"MongoResultException"
					],
					"id": "class.mongoresultexception",
					"name": "MongoResultException",
					"description": "The MongoResultException class"
				},
				"class.mongocursorexception": {
					"tokens": [
						"MongoCursorException"
					],
					"id": "class.mongocursorexception",
					"name": "MongoCursorException",
					"description": "The MongoCursorException class"
				},
				"class.mongocursortimeoutexception": {
					"tokens": [
						"MongoCursorTimeoutException"
					],
					"id": "class.mongocursortimeoutexception",
					"name": "MongoCursorTimeoutException",
					"description": "The MongoCursorTimeoutException class"
				},
				"class.mongoconnectionexception": {
					"tokens": [
						"MongoConnectionException"
					],
					"id": "class.mongoconnectionexception",
					"name": "MongoConnectionException",
					"description": "The MongoConnectionException class"
				},
				"class.mongogridfsexception": {
					"tokens": [
						"MongoGridFSException"
					],
					"id": "class.mongogridfsexception",
					"name": "MongoGridFSException",
					"description": "The MongoGridFSException class"
				},
				"class.mongoduplicatekeyexception": {
					"tokens": [
						"MongoDuplicateKeyException"
					],
					"id": "class.mongoduplicatekeyexception",
					"name": "MongoDuplicateKeyException",
					"description": "The MongoDuplicateKeyException class"
				},
				"class.mongoprotocolexception": {
					"tokens": [
						"MongoProtocolException"
					],
					"id": "class.mongoprotocolexception",
					"name": "MongoProtocolException",
					"description": "The MongoProtocolException class"
				},
				"class.mongoexecutiontimeoutexception": {
					"tokens": [
						"MongoExecutionTimeoutException"
					],
					"id": "class.mongoexecutiontimeoutexception",
					"name": "MongoExecutionTimeoutException",
					"description": "The MongoExecutionTimeoutException class"
				},
				"class.mongowriteconcernexception": {
					"tokens": [
						"MongoWriteConcernException"
					],
					"id": "class.mongowriteconcernexception",
					"name": "MongoWriteConcernException",
					"description": "The MongoWriteConcernException class"
				},
				"class.mongodb-driver-manager": {
					"tokens": [
						"MongoDB\\Driver\\Manager"
					],
					"id": "class.mongodb-driver-manager",
					"name": "MongoDB\\Driver\\Manager",
					"description": "The MongoDB\\Driver\\Manager class"
				},
				"class.mongodb-driver-command": {
					"tokens": [
						"MongoDB\\Driver\\Command"
					],
					"id": "class.mongodb-driver-command",
					"name": "MongoDB\\Driver\\Command",
					"description": "The MongoDB\\Driver\\Command class"
				},
				"class.mongodb-driver-query": {
					"tokens": [
						"MongoDB\\Driver\\Query"
					],
					"id": "class.mongodb-driver-query",
					"name": "MongoDB\\Driver\\Query",
					"description": "The MongoDB\\Driver\\Query class"
				},
				"class.mongodb-driver-bulkwrite": {
					"tokens": [
						"MongoDB\\Driver\\BulkWrite"
					],
					"id": "class.mongodb-driver-bulkwrite",
					"name": "MongoDB\\Driver\\BulkWrite",
					"description": "The MongoDB\\Driver\\BulkWrite class"
				},
				"class.mongodb-driver-writeconcern": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcern"
					],
					"id": "class.mongodb-driver-writeconcern",
					"name": "MongoDB\\Driver\\WriteConcern",
					"description": "The MongoDB\\Driver\\WriteConcern class"
				},
				"class.mongodb-driver-readpreference": {
					"tokens": [
						"MongoDB\\Driver\\ReadPreference"
					],
					"id": "class.mongodb-driver-readpreference",
					"name": "MongoDB\\Driver\\ReadPreference",
					"description": "The MongoDB\\Driver\\ReadPreference class"
				},
				"class.mongodb-driver-readconcern": {
					"tokens": [
						"MongoDB\\Driver\\ReadConcern"
					],
					"id": "class.mongodb-driver-readconcern",
					"name": "MongoDB\\Driver\\ReadConcern",
					"description": "The MongoDB\\Driver\\ReadConcern class"
				},
				"class.mongodb-driver-cursor": {
					"tokens": [
						"MongoDB\\Driver\\Cursor"
					],
					"id": "class.mongodb-driver-cursor",
					"name": "MongoDB\\Driver\\Cursor",
					"description": "The MongoDB\\Driver\\Cursor class"
				},
				"class.mongodb-driver-cursorid": {
					"tokens": [
						"MongoDB\\Driver\\CursorId"
					],
					"id": "class.mongodb-driver-cursorid",
					"name": "MongoDB\\Driver\\CursorId",
					"description": "The MongoDB\\Driver\\CursorId class"
				},
				"class.mongodb-driver-server": {
					"tokens": [
						"MongoDB\\Driver\\Server"
					],
					"id": "class.mongodb-driver-server",
					"name": "MongoDB\\Driver\\Server",
					"description": "The MongoDB\\Driver\\Server class"
				},
				"class.mongodb-driver-writeconcernerror": {
					"tokens": [
						"MongoDB\\Driver\\WriteConcernError"
					],
					"id": "class.mongodb-driver-writeconcernerror",
					"name": "MongoDB\\Driver\\WriteConcernError",
					"description": "The MongoDB\\Driver\\WriteConcernError class"
				},
				"class.mongodb-driver-writeerror": {
					"tokens": [
						"MongoDB\\Driver\\WriteError"
					],
					"id": "class.mongodb-driver-writeerror",
					"name": "MongoDB\\Driver\\WriteError",
					"description": "The MongoDB\\Driver\\WriteError class"
				},
				"class.mongodb-driver-writeresult": {
					"tokens": [
						"MongoDB\\Driver\\WriteResult"
					],
					"id": "class.mongodb-driver-writeresult",
					"name": "MongoDB\\Driver\\WriteResult",
					"description": "The MongoDB\\Driver\\WriteResult class"
				},
				"class.mongodb-bson-binary": {
					"tokens": [
						"MongoDB\\BSON\\Binary"
					],
					"id": "class.mongodb-bson-binary",
					"name": "MongoDB\\BSON\\Binary",
					"description": "The MongoDB\\BSON\\Binary class"
				},
				"class.mongodb-bson-javascript": {
					"tokens": [
						"MongoDB\\BSON\\Javascript"
					],
					"id": "class.mongodb-bson-javascript",
					"name": "MongoDB\\BSON\\Javascript",
					"description": "The MongoDB\\BSON\\Javascript class"
				},
				"class.mongodb-bson-maxkey": {
					"tokens": [
						"MongoDB\\BSON\\MaxKey"
					],
					"id": "class.mongodb-bson-maxkey",
					"name": "MongoDB\\BSON\\MaxKey",
					"description": "The MongoDB\\BSON\\MaxKey class"
				},
				"class.mongodb-bson-minkey": {
					"tokens": [
						"MongoDB\\BSON\\MinKey"
					],
					"id": "class.mongodb-bson-minkey",
					"name": "MongoDB\\BSON\\MinKey",
					"description": "The MongoDB\\BSON\\MinKey class"
				},
				"class.mongodb-bson-objectid": {
					"tokens": [
						"MongoDB\\BSON\\ObjectID"
					],
					"id": "class.mongodb-bson-objectid",
					"name": "MongoDB\\BSON\\ObjectID",
					"description": "The MongoDB\\BSON\\ObjectID class"
				},
				"class.mongodb-bson-regex": {
					"tokens": [
						"MongoDB\\BSON\\Regex"
					],
					"id": "class.mongodb-bson-regex",
					"name": "MongoDB\\BSON\\Regex",
					"description": "The MongoDB\\BSON\\Regex class"
				},
				"class.mongodb-bson-timestamp": {
					"tokens": [
						"MongoDB\\BSON\\Timestamp"
					],
					"id": "class.mongodb-bson-timestamp",
					"name": "MongoDB\\BSON\\Timestamp",
					"description": "The MongoDB\\BSON\\Timestamp class"
				},
				"class.mongodb-bson-utcdatetime": {
					"tokens": [
						"MongoDB\\BSON\\UTCDateTime"
					],
					"id": "class.mongodb-bson-utcdatetime",
					"name": "MongoDB\\BSON\\UTCDateTime",
					"description": "The MongoDB\\BSON\\UTCDateTime class"
				},
				"class.mongodb-bson-type": {
					"tokens": [
						"MongoDB\\BSON\\Type"
					],
					"id": "class.mongodb-bson-type",
					"name": "MongoDB\\BSON\\Type",
					"description": "The MongoDB\\BSON\\Type interface"
				},
				"class.mongodb-bson-persistable": {
					"tokens": [
						"MongoDB\\BSON\\Persistable"
					],
					"id": "class.mongodb-bson-persistable",
					"name": "MongoDB\\BSON\\Persistable",
					"description": "The MongoDB\\BSON\\Persistable interface"
				},
				"class.mongodb-bson-serializable": {
					"tokens": [
						"MongoDB\\BSON\\Serializable"
					],
					"id": "class.mongodb-bson-serializable",
					"name": "MongoDB\\BSON\\Serializable",
					"description": "The MongoDB\\BSON\\Serializable interface"
				},
				"class.mongodb-bson-unserializable": {
					"tokens": [
						"MongoDB\\BSON\\Unserializable"
					],
					"id": "class.mongodb-bson-unserializable",
					"name": "MongoDB\\BSON\\Unserializable",
					"description": "The MongoDB\\BSON\\Unserializable interface"
				},
				"class.mongodb-driver-exception-authenticationexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\AuthenticationException"
					],
					"id": "class.mongodb-driver-exception-authenticationexception",
					"name": "MongoDB\\Driver\\Exception\\AuthenticationException",
					"description": "The MongoDB\\Driver\\Exception\\AuthenticationException class"
				},
				"class.mongodb-driver-exception-bulkwriteexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\BulkWriteException"
					],
					"id": "class.mongodb-driver-exception-bulkwriteexception",
					"name": "MongoDB\\Driver\\Exception\\BulkWriteException",
					"description": "The MongoDB\\Driver\\Exception\\BulkWriteException class"
				},
				"class.mongodb-driver-exception-connectionexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\ConnectionException"
					],
					"id": "class.mongodb-driver-exception-connectionexception",
					"name": "MongoDB\\Driver\\Exception\\ConnectionException",
					"description": "The MongoDB\\Driver\\Exception\\ConnectionException class"
				},
				"class.mongodb-driver-exception-connectiontimeoutexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\ConnectionTimeoutException"
					],
					"id": "class.mongodb-driver-exception-connectiontimeoutexception",
					"name": "MongoDB\\Driver\\Exception\\ConnectionTimeoutException",
					"description": "The MongoDB\\Driver\\Exception\\ConnectionTimeoutException class"
				},
				"class.mongodb-driver-exception-exception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\Exception"
					],
					"id": "class.mongodb-driver-exception-exception",
					"name": "MongoDB\\Driver\\Exception\\Exception",
					"description": "The MongoDB\\Driver\\Exception\\Exception interface"
				},
				"class.mongodb-driver-exception-executiontimeoutexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\ExecutionTimeoutException"
					],
					"id": "class.mongodb-driver-exception-executiontimeoutexception",
					"name": "MongoDB\\Driver\\Exception\\ExecutionTimeoutException",
					"description": "The MongoDB\\Driver\\Exception\\ExecutionTimeoutException class"
				},
				"class.mongodb-driver-exception-invalidargumentexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\InvalidArgumentException"
					],
					"id": "class.mongodb-driver-exception-invalidargumentexception",
					"name": "MongoDB\\Driver\\Exception\\InvalidArgumentException",
					"description": "The MongoDB\\Driver\\Exception\\InvalidArgumentException class"
				},
				"class.mongodb-driver-exception-logicexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\LogicException"
					],
					"id": "class.mongodb-driver-exception-logicexception",
					"name": "MongoDB\\Driver\\Exception\\LogicException",
					"description": "The MongoDB\\Driver\\Exception\\LogicException class"
				},
				"class.mongodb-driver-exception-runtimeexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\RuntimeException"
					],
					"id": "class.mongodb-driver-exception-runtimeexception",
					"name": "MongoDB\\Driver\\Exception\\RuntimeException",
					"description": "The MongoDB\\Driver\\Exception\\RuntimeException class"
				},
				"class.mongodb-driver-exception-sslconnectionexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\SSLConnectionException"
					],
					"id": "class.mongodb-driver-exception-sslconnectionexception",
					"name": "MongoDB\\Driver\\Exception\\SSLConnectionException",
					"description": "The MongoDB\\Driver\\Exception\\SSLConnectionException class"
				},
				"class.mongodb-driver-exception-unexpectedvalueexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\UnexpectedValueException"
					],
					"id": "class.mongodb-driver-exception-unexpectedvalueexception",
					"name": "MongoDB\\Driver\\Exception\\UnexpectedValueException",
					"description": "The MongoDB\\Driver\\Exception\\UnexpectedValueException class"
				},
				"class.mongodb-driver-exception-writeexception": {
					"tokens": [
						"MongoDB\\Driver\\Exception\\WriteException"
					],
					"id": "class.mongodb-driver-exception-writeexception",
					"name": "MongoDB\\Driver\\Exception\\WriteException",
					"description": "The MongoDB\\Driver\\Exception\\WriteException class"
				},
				"class.mysqli": {
					"tokens": [
						"mysqli"
					],
					"id": "class.mysqli",
					"name": "mysqli",
					"description": "The mysqli class"
				},
				"class.mysqli-stmt": {
					"tokens": [
						"mysqli_stmt",
						"mysqlistmt"
					],
					"id": "class.mysqli-stmt",
					"name": "mysqli_stmt",
					"description": "The mysqli_stmt class"
				},
				"class.mysqli-result": {
					"tokens": [
						"mysqli_result",
						"mysqliresult"
					],
					"id": "class.mysqli-result",
					"name": "mysqli_result",
					"description": "The mysqli_result class"
				},
				"class.mysqli-driver": {
					"tokens": [
						"mysqli_driver",
						"mysqlidriver"
					],
					"id": "class.mysqli-driver",
					"name": "mysqli_driver",
					"description": "The mysqli_driver class"
				},
				"class.mysqli-warning": {
					"tokens": [
						"mysqli_warning",
						"mysqliwarning"
					],
					"id": "class.mysqli-warning",
					"name": "mysqli_warning",
					"description": "The mysqli_warning class"
				},
				"class.mysqli-sql-exception": {
					"tokens": [
						"mysqli_sql_exception",
						"mysqlisql_exception"
					],
					"id": "class.mysqli-sql-exception",
					"name": "mysqli_sql_exception",
					"description": "The mysqli_sql_exception class"
				},
				"class.mysqlnduhconnection": {
					"tokens": [
						"MysqlndUhConnection"
					],
					"id": "class.mysqlnduhconnection",
					"name": "MysqlndUhConnection",
					"description": "The MysqlndUhConnection class"
				},
				"class.mysqlnduhpreparedstatement": {
					"tokens": [
						"MysqlndUhPreparedStatement"
					],
					"id": "class.mysqlnduhpreparedstatement",
					"name": "MysqlndUhPreparedStatement",
					"description": "The MysqlndUhPreparedStatement class"
				},
				"class.OCI-Collection": {
					"tokens": [
						"OCI-Collection"
					],
					"id": "class.OCI-Collection",
					"name": "OCI-Collection",
					"description": "The OCI-Collection class"
				},
				"class.OCI-Lob": {
					"tokens": [
						"OCI-Lob"
					],
					"id": "class.OCI-Lob",
					"name": "OCI-Lob",
					"description": "The OCI-Lob class"
				},
				"class.sqlite3": {
					"tokens": [
						"SQLite3"
					],
					"id": "class.sqlite3",
					"name": "SQLite3",
					"description": "The SQLite3 class"
				},
				"class.sqlite3stmt": {
					"tokens": [
						"SQLite3Stmt"
					],
					"id": "class.sqlite3stmt",
					"name": "SQLite3Stmt",
					"description": "The SQLite3Stmt class"
				},
				"class.sqlite3result": {
					"tokens": [
						"SQLite3Result"
					],
					"id": "class.sqlite3result",
					"name": "SQLite3Result",
					"description": "The SQLite3Result class"
				},
				"class.tokyotyrant": {
					"tokens": [
						"TokyoTyrant"
					],
					"id": "class.tokyotyrant",
					"name": "TokyoTyrant",
					"description": "The TokyoTyrant class"
				},
				"class.tokyotyranttable": {
					"tokens": [
						"TokyoTyrantTable"
					],
					"id": "class.tokyotyranttable",
					"name": "TokyoTyrantTable",
					"description": "The TokyoTyrantTable class"
				},
				"class.tokyotyrantquery": {
					"tokens": [
						"TokyoTyrantQuery"
					],
					"id": "class.tokyotyrantquery",
					"name": "TokyoTyrantQuery",
					"description": "The TokyoTyrantQuery class"
				},
				"class.tokyotyrantiterator": {
					"tokens": [
						"TokyoTyrantIterator"
					],
					"id": "class.tokyotyrantiterator",
					"name": "TokyoTyrantIterator",
					"description": "The TokyoTyrantIterator class"
				},
				"class.tokyotyrantexception": {
					"tokens": [
						"TokyoTyrantException"
					],
					"id": "class.tokyotyrantexception",
					"name": "TokyoTyrantException",
					"description": "The TokyoTyrantException class"
				},
				"class.datetime": {
					"tokens": [
						"DateTime"
					],
					"id": "class.datetime",
					"name": "DateTime",
					"description": "The DateTime class"
				},
				"class.datetimeimmutable": {
					"tokens": [
						"DateTimeImmutable"
					],
					"id": "class.datetimeimmutable",
					"name": "DateTimeImmutable",
					"description": "The DateTimeImmutable class"
				},
				"class.datetimeinterface": {
					"tokens": [
						"DateTimeInterface"
					],
					"id": "class.datetimeinterface",
					"name": "DateTimeInterface",
					"description": "The DateTimeInterface interface"
				},
				"class.datetimezone": {
					"tokens": [
						"DateTimeZone"
					],
					"id": "class.datetimezone",
					"name": "DateTimeZone",
					"description": "The DateTimeZone class"
				},
				"class.dateinterval": {
					"tokens": [
						"DateInterval"
					],
					"id": "class.dateinterval",
					"name": "DateInterval",
					"description": "The DateInterval class"
				},
				"class.dateperiod": {
					"tokens": [
						"DatePeriod"
					],
					"id": "class.dateperiod",
					"name": "DatePeriod",
					"description": "The DatePeriod class"
				},
				"class.hrtime-performancecounter": {
					"tokens": [
						"HRTime\\PerformanceCounter"
					],
					"id": "class.hrtime-performancecounter",
					"name": "HRTime\\PerformanceCounter",
					"description": "The HRTime\\PerformanceCounter class"
				},
				"class.hrtime-stopwatch": {
					"tokens": [
						"HRTime\\StopWatch"
					],
					"id": "class.hrtime-stopwatch",
					"name": "HRTime\\StopWatch",
					"description": "The HRTime\\StopWatch class"
				},
				"class.hrtime-unit": {
					"tokens": [
						"HRTime\\Unit"
					],
					"id": "class.hrtime-unit",
					"name": "HRTime\\Unit",
					"description": "The HRTime\\Unit class"
				},
				"class.directory": {
					"tokens": [
						"Directory"
					],
					"id": "class.directory",
					"name": "Directory",
					"description": "The Directory class"
				},
				"class.finfo": {
					"tokens": [
						"finfo"
					],
					"id": "class.finfo",
					"name": "finfo",
					"description": "The finfo class"
				},
				"class.gender": {
					"tokens": [
						"Gender\\Gender"
					],
					"id": "class.gender",
					"name": "Gender\\Gender",
					"description": "The Gender\\Gender class"
				},
				"class.collator": {
					"tokens": [
						"Collator"
					],
					"id": "class.collator",
					"name": "Collator",
					"description": "The Collator class"
				},
				"class.numberformatter": {
					"tokens": [
						"NumberFormatter"
					],
					"id": "class.numberformatter",
					"name": "NumberFormatter",
					"description": "The NumberFormatter class"
				},
				"class.locale": {
					"tokens": [
						"Locale"
					],
					"id": "class.locale",
					"name": "Locale",
					"description": "The Locale class"
				},
				"class.normalizer": {
					"tokens": [
						"Normalizer"
					],
					"id": "class.normalizer",
					"name": "Normalizer",
					"description": "The Normalizer class"
				},
				"class.messageformatter": {
					"tokens": [
						"MessageFormatter"
					],
					"id": "class.messageformatter",
					"name": "MessageFormatter",
					"description": "The MessageFormatter class"
				},
				"class.intlcalendar": {
					"tokens": [
						"IntlCalendar"
					],
					"id": "class.intlcalendar",
					"name": "IntlCalendar",
					"description": "The IntlCalendar class"
				},
				"class.intltimezone": {
					"tokens": [
						"IntlTimeZone"
					],
					"id": "class.intltimezone",
					"name": "IntlTimeZone",
					"description": "The IntlTimeZone class"
				},
				"class.intldateformatter": {
					"tokens": [
						"IntlDateFormatter"
					],
					"id": "class.intldateformatter",
					"name": "IntlDateFormatter",
					"description": "The IntlDateFormatter class"
				},
				"class.resourcebundle": {
					"tokens": [
						"ResourceBundle"
					],
					"id": "class.resourcebundle",
					"name": "ResourceBundle",
					"description": "The ResourceBundle class"
				},
				"class.spoofchecker": {
					"tokens": [
						"Spoofchecker"
					],
					"id": "class.spoofchecker",
					"name": "Spoofchecker",
					"description": "The Spoofchecker class"
				},
				"class.transliterator": {
					"tokens": [
						"Transliterator"
					],
					"id": "class.transliterator",
					"name": "Transliterator",
					"description": "The Transliterator class"
				},
				"class.intlbreakiterator": {
					"tokens": [
						"IntlBreakIterator"
					],
					"id": "class.intlbreakiterator",
					"name": "IntlBreakIterator",
					"description": "The IntlBreakIterator class"
				},
				"class.intlrulebasedbreakiterator": {
					"tokens": [
						"IntlRuleBasedBreakIterator"
					],
					"id": "class.intlrulebasedbreakiterator",
					"name": "IntlRuleBasedBreakIterator",
					"description": "The IntlRuleBasedBreakIterator class"
				},
				"class.intlcodepointbreakiterator": {
					"tokens": [
						"IntlCodePointBreakIterator"
					],
					"id": "class.intlcodepointbreakiterator",
					"name": "IntlCodePointBreakIterator",
					"description": "The IntlCodePointBreakIterator class"
				},
				"class.intlpartsiterator": {
					"tokens": [
						"IntlPartsIterator"
					],
					"id": "class.intlpartsiterator",
					"name": "IntlPartsIterator",
					"description": "The IntlPartsIterator class"
				},
				"class.uconverter": {
					"tokens": [
						"UConverter"
					],
					"id": "class.uconverter",
					"name": "UConverter",
					"description": "The UConverter class"
				},
				"class.intlchar": {
					"tokens": [
						"IntlChar"
					],
					"id": "class.intlchar",
					"name": "IntlChar",
					"description": "IntlChar"
				},
				"class.intlexception": {
					"tokens": [
						"IntlException"
					],
					"id": "class.intlexception",
					"name": "IntlException",
					"description": "Exception class for intl errors"
				},
				"class.intliterator": {
					"tokens": [
						"IntlIterator"
					],
					"id": "class.intliterator",
					"name": "IntlIterator",
					"description": "The IntlIterator class"
				},
				"class.cairo": {
					"tokens": [
						"Cairo"
					],
					"id": "class.cairo",
					"name": "Cairo",
					"description": "The Cairo class"
				},
				"class.cairocontext": {
					"tokens": [
						"CairoContext"
					],
					"id": "class.cairocontext",
					"name": "CairoContext",
					"description": "The CairoContext class"
				},
				"class.cairoexception": {
					"tokens": [
						"CairoException"
					],
					"id": "class.cairoexception",
					"name": "CairoException",
					"description": "The CairoException class"
				},
				"class.cairostatus": {
					"tokens": [
						"CairoStatus"
					],
					"id": "class.cairostatus",
					"name": "CairoStatus",
					"description": "The CairoStatus class"
				},
				"class.cairosurface": {
					"tokens": [
						"CairoSurface"
					],
					"id": "class.cairosurface",
					"name": "CairoSurface",
					"description": "The CairoSurface class"
				},
				"class.cairosvgsurface": {
					"tokens": [
						"CairoSvgSurface"
					],
					"id": "class.cairosvgsurface",
					"name": "CairoSvgSurface",
					"description": "Svg Surface Backend"
				},
				"class.cairoimagesurface": {
					"tokens": [
						"CairoImageSurface"
					],
					"id": "class.cairoimagesurface",
					"name": "CairoImageSurface",
					"description": "The CairoImageSurface class"
				},
				"class.cairopdfsurface": {
					"tokens": [
						"CairoPdfSurface"
					],
					"id": "class.cairopdfsurface",
					"name": "CairoPdfSurface",
					"description": "The CairoPdfSurface class"
				},
				"class.cairopssurface": {
					"tokens": [
						"CairoPsSurface"
					],
					"id": "class.cairopssurface",
					"name": "CairoPsSurface",
					"description": "The CairoPsSurface class"
				},
				"class.cairosurfacetype": {
					"tokens": [
						"CairoSurfaceType"
					],
					"id": "class.cairosurfacetype",
					"name": "CairoSurfaceType",
					"description": "The CairoSurfaceType class"
				},
				"class.cairofontface": {
					"tokens": [
						"CairoFontFace"
					],
					"id": "class.cairofontface",
					"name": "CairoFontFace",
					"description": "The CairoFontFace class"
				},
				"class.cairofontoptions": {
					"tokens": [
						"CairoFontOptions"
					],
					"id": "class.cairofontoptions",
					"name": "CairoFontOptions",
					"description": "The CairoFontOptions class"
				},
				"class.cairofontslant": {
					"tokens": [
						"CairoFontSlant"
					],
					"id": "class.cairofontslant",
					"name": "CairoFontSlant",
					"description": "The CairoFontSlant class"
				},
				"class.cairofonttype": {
					"tokens": [
						"CairoFontType"
					],
					"id": "class.cairofonttype",
					"name": "CairoFontType",
					"description": "The CairoFontType class"
				},
				"class.cairofontweight": {
					"tokens": [
						"CairoFontWeight"
					],
					"id": "class.cairofontweight",
					"name": "CairoFontWeight",
					"description": "The CairoFontWeight class"
				},
				"class.cairoscaledfont": {
					"tokens": [
						"CairoScaledFont"
					],
					"id": "class.cairoscaledfont",
					"name": "CairoScaledFont",
					"description": "The CairoScaledFont class"
				},
				"class.cairotoyfontface": {
					"tokens": [
						"CairoToyFontFace"
					],
					"id": "class.cairotoyfontface",
					"name": "CairoToyFontFace",
					"description": "The CairoToyFontFace class"
				},
				"class.cairopatterntype": {
					"tokens": [
						"CairoPatternType"
					],
					"id": "class.cairopatterntype",
					"name": "CairoPatternType",
					"description": "The CairoPatternType class"
				},
				"class.cairopattern": {
					"tokens": [
						"CairoPattern"
					],
					"id": "class.cairopattern",
					"name": "CairoPattern",
					"description": "The CairoPattern class"
				},
				"class.cairogradientpattern": {
					"tokens": [
						"CairoGradientPattern"
					],
					"id": "class.cairogradientpattern",
					"name": "CairoGradientPattern",
					"description": "The CairoGradientPattern class"
				},
				"class.cairosolidpattern": {
					"tokens": [
						"CairoSolidPattern"
					],
					"id": "class.cairosolidpattern",
					"name": "CairoSolidPattern",
					"description": "The CairoSolidPattern class"
				},
				"class.cairosurfacepattern": {
					"tokens": [
						"CairoSurfacePattern"
					],
					"id": "class.cairosurfacepattern",
					"name": "CairoSurfacePattern",
					"description": "The CairoSurfacePattern class"
				},
				"class.cairolineargradient": {
					"tokens": [
						"CairoLinearGradient"
					],
					"id": "class.cairolineargradient",
					"name": "CairoLinearGradient",
					"description": "The CairoLinearGradient class"
				},
				"class.cairoradialgradient": {
					"tokens": [
						"CairoRadialGradient"
					],
					"id": "class.cairoradialgradient",
					"name": "CairoRadialGradient",
					"description": "The CairoRadialGradient class"
				},
				"class.cairoantialias": {
					"tokens": [
						"CairoAntialias"
					],
					"id": "class.cairoantialias",
					"name": "CairoAntialias",
					"description": "The CairoAntialias class"
				},
				"class.cairocontent": {
					"tokens": [
						"CairoContent"
					],
					"id": "class.cairocontent",
					"name": "CairoContent",
					"description": "The CairoContent class"
				},
				"class.cairoextend": {
					"tokens": [
						"CairoExtend"
					],
					"id": "class.cairoextend",
					"name": "CairoExtend",
					"description": "The CairoExtend class"
				},
				"class.cairoformat": {
					"tokens": [
						"CairoFormat"
					],
					"id": "class.cairoformat",
					"name": "CairoFormat",
					"description": "The CairoFormat class"
				},
				"class.cairofillrule": {
					"tokens": [
						"CairoFillRule"
					],
					"id": "class.cairofillrule",
					"name": "CairoFillRule",
					"description": "The CairoFillRule class"
				},
				"class.cairofilter": {
					"tokens": [
						"CairoFilter"
					],
					"id": "class.cairofilter",
					"name": "CairoFilter",
					"description": "The CairoFilter class"
				},
				"class.cairohintmetrics": {
					"tokens": [
						"CairoHintMetrics"
					],
					"id": "class.cairohintmetrics",
					"name": "CairoHintMetrics",
					"description": "The CairoHintMetrics class"
				},
				"class.cairohintstyle": {
					"tokens": [
						"CairoHintStyle"
					],
					"id": "class.cairohintstyle",
					"name": "CairoHintStyle",
					"description": "The CairoHintStyle class"
				},
				"class.cairolinecap": {
					"tokens": [
						"CairoLineCap"
					],
					"id": "class.cairolinecap",
					"name": "CairoLineCap",
					"description": "The CairoLineCap class"
				},
				"class.cairolinejoin": {
					"tokens": [
						"CairoLineJoin"
					],
					"id": "class.cairolinejoin",
					"name": "CairoLineJoin",
					"description": "The CairoLineJoin class"
				},
				"class.cairomatrix": {
					"tokens": [
						"CairoMatrix"
					],
					"id": "class.cairomatrix",
					"name": "CairoMatrix",
					"description": "The CairoMatrix class"
				},
				"class.cairooperator": {
					"tokens": [
						"CairoOperator"
					],
					"id": "class.cairooperator",
					"name": "CairoOperator",
					"description": "The CairoOperator class"
				},
				"class.cairopath": {
					"tokens": [
						"CairoPath"
					],
					"id": "class.cairopath",
					"name": "CairoPath",
					"description": "The CairoPath class"
				},
				"class.cairopslevel": {
					"tokens": [
						"CairoPsLevel"
					],
					"id": "class.cairopslevel",
					"name": "CairoPsLevel",
					"description": "The CairoPsLevel class"
				},
				"class.cairosubpixelorder": {
					"tokens": [
						"CairoSubpixelOrder"
					],
					"id": "class.cairosubpixelorder",
					"name": "CairoSubpixelOrder",
					"description": "The CairoSubpixelOrder class"
				},
				"class.cairosvgversion": {
					"tokens": [
						"CairoSvgVersion"
					],
					"id": "class.cairosvgversion",
					"name": "CairoSvgVersion",
					"description": "The CairoSvgVersion class"
				},
				"class.gmagick": {
					"tokens": [
						"Gmagick"
					],
					"id": "class.gmagick",
					"name": "Gmagick",
					"description": "The Gmagick class"
				},
				"class.gmagickdraw": {
					"tokens": [
						"GmagickDraw"
					],
					"id": "class.gmagickdraw",
					"name": "GmagickDraw",
					"description": "The GmagickDraw class"
				},
				"class.gmagickpixel": {
					"tokens": [
						"GmagickPixel"
					],
					"id": "class.gmagickpixel",
					"name": "GmagickPixel",
					"description": "The GmagickPixel class"
				},
				"class.imagick": {
					"tokens": [
						"Imagick"
					],
					"id": "class.imagick",
					"name": "Imagick",
					"description": "The Imagick class"
				},
				"class.imagickdraw": {
					"tokens": [
						"ImagickDraw"
					],
					"id": "class.imagickdraw",
					"name": "ImagickDraw",
					"description": "The ImagickDraw class"
				},
				"class.imagickpixel": {
					"tokens": [
						"ImagickPixel"
					],
					"id": "class.imagickpixel",
					"name": "ImagickPixel",
					"description": "The ImagickPixel class"
				},
				"class.imagickpixeliterator": {
					"tokens": [
						"ImagickPixelIterator"
					],
					"id": "class.imagickpixeliterator",
					"name": "ImagickPixelIterator",
					"description": "The ImagickPixelIterator class"
				},
				"class.imagickkernel": {
					"tokens": [
						"ImagickKernel"
					],
					"id": "class.imagickkernel",
					"name": "ImagickKernel",
					"description": "The ImagickKernel class"
				},
				"class.gmp": {
					"tokens": [
						"GMP"
					],
					"id": "class.gmp",
					"name": "GMP",
					"description": "The GMP class"
				},
				"class.lapack": {
					"tokens": [
						"Lapack"
					],
					"id": "class.lapack",
					"name": "Lapack",
					"description": "The Lapack class"
				},
				"class.lapackexception": {
					"tokens": [
						"LapackException"
					],
					"id": "class.lapackexception",
					"name": "LapackException",
					"description": "The LapackException class"
				},
				"class.harudoc": {
					"tokens": [
						"HaruDoc"
					],
					"id": "class.harudoc",
					"name": "HaruDoc",
					"description": "The HaruDoc class"
				},
				"class.harupage": {
					"tokens": [
						"HaruPage"
					],
					"id": "class.harupage",
					"name": "HaruPage",
					"description": "The HaruPage class"
				},
				"class.harufont": {
					"tokens": [
						"HaruFont"
					],
					"id": "class.harufont",
					"name": "HaruFont",
					"description": "The HaruFont class"
				},
				"class.haruimage": {
					"tokens": [
						"HaruImage"
					],
					"id": "class.haruimage",
					"name": "HaruImage",
					"description": "The HaruImage class"
				},
				"class.haruencoder": {
					"tokens": [
						"HaruEncoder"
					],
					"id": "class.haruencoder",
					"name": "HaruEncoder",
					"description": "The HaruEncoder class"
				},
				"class.haruoutline": {
					"tokens": [
						"HaruOutline"
					],
					"id": "class.haruoutline",
					"name": "HaruOutline",
					"description": "The HaruOutline class"
				},
				"class.haruannotation": {
					"tokens": [
						"HaruAnnotation"
					],
					"id": "class.haruannotation",
					"name": "HaruAnnotation",
					"description": "The HaruAnnotation class"
				},
				"class.harudestination": {
					"tokens": [
						"HaruDestination"
					],
					"id": "class.harudestination",
					"name": "HaruDestination",
					"description": "The HaruDestination class"
				},
				"class.swfaction": {
					"tokens": [
						"SWFAction"
					],
					"id": "class.swfaction",
					"name": "SWFAction",
					"description": "The SWFAction class"
				},
				"class.swfbitmap": {
					"tokens": [
						"SWFBitmap"
					],
					"id": "class.swfbitmap",
					"name": "SWFBitmap",
					"description": "The SWFBitmap class"
				},
				"class.swfbutton": {
					"tokens": [
						"SWFButton"
					],
					"id": "class.swfbutton",
					"name": "SWFButton",
					"description": "The SWFButton class"
				},
				"class.swfdisplayitem": {
					"tokens": [
						"SWFDisplayItem"
					],
					"id": "class.swfdisplayitem",
					"name": "SWFDisplayItem",
					"description": "The SWFDisplayItem class"
				},
				"class.swffill": {
					"tokens": [
						"SWFFill"
					],
					"id": "class.swffill",
					"name": "SWFFill",
					"description": "The SWFFill class"
				},
				"class.swffont": {
					"tokens": [
						"SWFFont"
					],
					"id": "class.swffont",
					"name": "SWFFont",
					"description": "The SWFFont class"
				},
				"class.swffontchar": {
					"tokens": [
						"SWFFontChar"
					],
					"id": "class.swffontchar",
					"name": "SWFFontChar",
					"description": "The SWFFontChar class"
				},
				"class.swfgradient": {
					"tokens": [
						"SWFGradient"
					],
					"id": "class.swfgradient",
					"name": "SWFGradient",
					"description": "The SWFGradient class"
				},
				"class.swfmorph": {
					"tokens": [
						"SWFMorph"
					],
					"id": "class.swfmorph",
					"name": "SWFMorph",
					"description": "The SWFMorph class"
				},
				"class.swfmovie": {
					"tokens": [
						"SWFMovie"
					],
					"id": "class.swfmovie",
					"name": "SWFMovie",
					"description": "The SWFMovie class"
				},
				"class.swfprebuiltclip": {
					"tokens": [
						"SWFPrebuiltClip"
					],
					"id": "class.swfprebuiltclip",
					"name": "SWFPrebuiltClip",
					"description": "The SWFPrebuiltClip class"
				},
				"class.swfshape": {
					"tokens": [
						"SWFShape"
					],
					"id": "class.swfshape",
					"name": "SWFShape",
					"description": "The SWFShape class"
				},
				"class.swfsound": {
					"tokens": [
						"SWFSound"
					],
					"id": "class.swfsound",
					"name": "SWFSound",
					"description": "The SWFSound class"
				},
				"class.swfsoundinstance": {
					"tokens": [
						"SWFSoundInstance"
					],
					"id": "class.swfsoundinstance",
					"name": "SWFSoundInstance",
					"description": "The SWFSoundInstance class"
				},
				"class.swfsprite": {
					"tokens": [
						"SWFSprite"
					],
					"id": "class.swfsprite",
					"name": "SWFSprite",
					"description": "The SWFSprite class"
				},
				"class.swftext": {
					"tokens": [
						"SWFText"
					],
					"id": "class.swftext",
					"name": "SWFText",
					"description": "The SWFText class"
				},
				"class.swftextfield": {
					"tokens": [
						"SWFTextField"
					],
					"id": "class.swftextfield",
					"name": "SWFTextField",
					"description": "The SWFTextField class"
				},
				"class.swfvideostream": {
					"tokens": [
						"SWFVideoStream"
					],
					"id": "class.swfvideostream",
					"name": "SWFVideoStream",
					"description": "The SWFVideoStream class"
				},
				"class.ev": {
					"tokens": [
						"Ev"
					],
					"id": "class.ev",
					"name": "Ev",
					"description": "The Ev class"
				},
				"class.evcheck": {
					"tokens": [
						"EvCheck"
					],
					"id": "class.evcheck",
					"name": "EvCheck",
					"description": "The EvCheck class"
				},
				"class.evchild": {
					"tokens": [
						"EvChild"
					],
					"id": "class.evchild",
					"name": "EvChild",
					"description": "The EvChild class"
				},
				"class.evembed": {
					"tokens": [
						"EvEmbed"
					],
					"id": "class.evembed",
					"name": "EvEmbed",
					"description": "The EvEmbed class"
				},
				"class.evfork": {
					"tokens": [
						"EvFork"
					],
					"id": "class.evfork",
					"name": "EvFork",
					"description": "The EvFork class"
				},
				"class.evidle": {
					"tokens": [
						"EvIdle"
					],
					"id": "class.evidle",
					"name": "EvIdle",
					"description": "The EvIdle class"
				},
				"class.evio": {
					"tokens": [
						"EvIo"
					],
					"id": "class.evio",
					"name": "EvIo",
					"description": "The EvIo class"
				},
				"class.evloop": {
					"tokens": [
						"EvLoop"
					],
					"id": "class.evloop",
					"name": "EvLoop",
					"description": "The EvLoop class"
				},
				"class.evperiodic": {
					"tokens": [
						"EvPeriodic"
					],
					"id": "class.evperiodic",
					"name": "EvPeriodic",
					"description": "The EvPeriodic class"
				},
				"class.evprepare": {
					"tokens": [
						"EvPrepare"
					],
					"id": "class.evprepare",
					"name": "EvPrepare",
					"description": "The EvPrepare class"
				},
				"class.evsignal": {
					"tokens": [
						"EvSignal"
					],
					"id": "class.evsignal",
					"name": "EvSignal",
					"description": "The EvSignal class"
				},
				"class.evstat": {
					"tokens": [
						"EvStat"
					],
					"id": "class.evstat",
					"name": "EvStat",
					"description": "The EvStat class"
				},
				"class.evtimer": {
					"tokens": [
						"EvTimer"
					],
					"id": "class.evtimer",
					"name": "EvTimer",
					"description": "The EvTimer class"
				},
				"class.evwatcher": {
					"tokens": [
						"EvWatcher"
					],
					"id": "class.evwatcher",
					"name": "EvWatcher",
					"description": "The EvWatcher class"
				},
				"class.threaded": {
					"tokens": [
						"Threaded"
					],
					"id": "class.threaded",
					"name": "Threaded",
					"description": "The Threaded class"
				},
				"class.thread": {
					"tokens": [
						"Thread"
					],
					"id": "class.thread",
					"name": "Thread",
					"description": "The Thread class"
				},
				"class.worker": {
					"tokens": [
						"Worker"
					],
					"id": "class.worker",
					"name": "Worker",
					"description": "The Worker class"
				},
				"class.collectable": {
					"tokens": [
						"Collectable"
					],
					"id": "class.collectable",
					"name": "Collectable",
					"description": "The Collectable class"
				},
				"class.pool": {
					"tokens": [
						"Pool"
					],
					"id": "class.pool",
					"name": "Pool",
					"description": "The Pool class"
				},
				"class.mutex": {
					"tokens": [
						"Mutex"
					],
					"id": "class.mutex",
					"name": "Mutex",
					"description": "The Mutex class"
				},
				"class.cond": {
					"tokens": [
						"Cond"
					],
					"id": "class.cond",
					"name": "Cond",
					"description": "The Cond class"
				},
				"class.syncmutex": {
					"tokens": [
						"SyncMutex"
					],
					"id": "class.syncmutex",
					"name": "SyncMutex",
					"description": "The SyncMutex class"
				},
				"class.syncsemaphore": {
					"tokens": [
						"SyncSemaphore"
					],
					"id": "class.syncsemaphore",
					"name": "SyncSemaphore",
					"description": "The SyncSemaphore class"
				},
				"class.syncevent": {
					"tokens": [
						"SyncEvent"
					],
					"id": "class.syncevent",
					"name": "SyncEvent",
					"description": "The SyncEvent class"
				},
				"class.syncreaderwriter": {
					"tokens": [
						"SyncReaderWriter"
					],
					"id": "class.syncreaderwriter",
					"name": "SyncReaderWriter",
					"description": "The SyncReaderWriter class"
				},
				"class.fannconnection": {
					"tokens": [
						"FANNConnection"
					],
					"id": "class.fannconnection",
					"name": "FANNConnection",
					"description": "The FANNConnection class"
				},
				"class.jsonserializable": {
					"tokens": [
						"JsonSerializable"
					],
					"id": "class.jsonserializable",
					"name": "JsonSerializable",
					"description": "The JsonSerializable interface"
				},
				"class.judy": {
					"tokens": [
						"Judy"
					],
					"id": "class.judy",
					"name": "Judy",
					"description": "The Judy class"
				},
				"class.lua": {
					"tokens": [
						"Lua"
					],
					"id": "class.lua",
					"name": "Lua",
					"description": "The Lua class"
				},
				"class.luaclosure": {
					"tokens": [
						"LuaClosure"
					],
					"id": "class.luaclosure",
					"name": "LuaClosure",
					"description": "The LuaClosure class"
				},
				"class.spldoublylinkedlist": {
					"tokens": [
						"SplDoublyLinkedList"
					],
					"id": "class.spldoublylinkedlist",
					"name": "SplDoublyLinkedList",
					"description": "The SplDoublyLinkedList class"
				},
				"class.splstack": {
					"tokens": [
						"SplStack"
					],
					"id": "class.splstack",
					"name": "SplStack",
					"description": "The SplStack class"
				},
				"class.splqueue": {
					"tokens": [
						"SplQueue"
					],
					"id": "class.splqueue",
					"name": "SplQueue",
					"description": "The SplQueue class"
				},
				"class.splheap": {
					"tokens": [
						"SplHeap"
					],
					"id": "class.splheap",
					"name": "SplHeap",
					"description": "The SplHeap class"
				},
				"class.splmaxheap": {
					"tokens": [
						"SplMaxHeap"
					],
					"id": "class.splmaxheap",
					"name": "SplMaxHeap",
					"description": "The SplMaxHeap class"
				},
				"class.splminheap": {
					"tokens": [
						"SplMinHeap"
					],
					"id": "class.splminheap",
					"name": "SplMinHeap",
					"description": "The SplMinHeap class"
				},
				"class.splpriorityqueue": {
					"tokens": [
						"SplPriorityQueue"
					],
					"id": "class.splpriorityqueue",
					"name": "SplPriorityQueue",
					"description": "The SplPriorityQueue class"
				},
				"class.splfixedarray": {
					"tokens": [
						"SplFixedArray"
					],
					"id": "class.splfixedarray",
					"name": "SplFixedArray",
					"description": "The SplFixedArray class"
				},
				"class.splobjectstorage": {
					"tokens": [
						"SplObjectStorage"
					],
					"id": "class.splobjectstorage",
					"name": "SplObjectStorage",
					"description": "The SplObjectStorage class"
				},
				"class.appenditerator": {
					"tokens": [
						"AppendIterator"
					],
					"id": "class.appenditerator",
					"name": "AppendIterator",
					"description": "The AppendIterator class"
				},
				"class.arrayiterator": {
					"tokens": [
						"ArrayIterator"
					],
					"id": "class.arrayiterator",
					"name": "ArrayIterator",
					"description": "The ArrayIterator class"
				},
				"class.cachingiterator": {
					"tokens": [
						"CachingIterator"
					],
					"id": "class.cachingiterator",
					"name": "CachingIterator",
					"description": "The CachingIterator class"
				},
				"class.callbackfilteriterator": {
					"tokens": [
						"CallbackFilterIterator"
					],
					"id": "class.callbackfilteriterator",
					"name": "CallbackFilterIterator",
					"description": "The CallbackFilterIterator class"
				},
				"class.directoryiterator": {
					"tokens": [
						"DirectoryIterator"
					],
					"id": "class.directoryiterator",
					"name": "DirectoryIterator",
					"description": "The DirectoryIterator class"
				},
				"class.emptyiterator": {
					"tokens": [
						"EmptyIterator"
					],
					"id": "class.emptyiterator",
					"name": "EmptyIterator",
					"description": "The EmptyIterator class"
				},
				"class.filesystemiterator": {
					"tokens": [
						"FilesystemIterator"
					],
					"id": "class.filesystemiterator",
					"name": "FilesystemIterator",
					"description": "The FilesystemIterator class"
				},
				"class.filteriterator": {
					"tokens": [
						"FilterIterator"
					],
					"id": "class.filteriterator",
					"name": "FilterIterator",
					"description": "The FilterIterator class"
				},
				"class.globiterator": {
					"tokens": [
						"GlobIterator"
					],
					"id": "class.globiterator",
					"name": "GlobIterator",
					"description": "The GlobIterator class"
				},
				"class.infiniteiterator": {
					"tokens": [
						"InfiniteIterator"
					],
					"id": "class.infiniteiterator",
					"name": "InfiniteIterator",
					"description": "The InfiniteIterator class"
				},
				"class.iteratoriterator": {
					"tokens": [
						"IteratorIterator"
					],
					"id": "class.iteratoriterator",
					"name": "IteratorIterator",
					"description": "The IteratorIterator class"
				},
				"class.limititerator": {
					"tokens": [
						"LimitIterator"
					],
					"id": "class.limititerator",
					"name": "LimitIterator",
					"description": "The LimitIterator class"
				},
				"class.multipleiterator": {
					"tokens": [
						"MultipleIterator"
					],
					"id": "class.multipleiterator",
					"name": "MultipleIterator",
					"description": "The MultipleIterator class"
				},
				"class.norewinditerator": {
					"tokens": [
						"NoRewindIterator"
					],
					"id": "class.norewinditerator",
					"name": "NoRewindIterator",
					"description": "The NoRewindIterator class"
				},
				"class.parentiterator": {
					"tokens": [
						"ParentIterator"
					],
					"id": "class.parentiterator",
					"name": "ParentIterator",
					"description": "The ParentIterator class"
				},
				"class.recursivearrayiterator": {
					"tokens": [
						"RecursiveArrayIterator"
					],
					"id": "class.recursivearrayiterator",
					"name": "RecursiveArrayIterator",
					"description": "The RecursiveArrayIterator class"
				},
				"class.recursivecachingiterator": {
					"tokens": [
						"RecursiveCachingIterator"
					],
					"id": "class.recursivecachingiterator",
					"name": "RecursiveCachingIterator",
					"description": "The RecursiveCachingIterator class"
				},
				"class.recursivecallbackfilteriterator": {
					"tokens": [
						"RecursiveCallbackFilterIterator"
					],
					"id": "class.recursivecallbackfilteriterator",
					"name": "RecursiveCallbackFilterIterator",
					"description": "The RecursiveCallbackFilterIterator class"
				},
				"class.recursivedirectoryiterator": {
					"tokens": [
						"RecursiveDirectoryIterator"
					],
					"id": "class.recursivedirectoryiterator",
					"name": "RecursiveDirectoryIterator",
					"description": "The RecursiveDirectoryIterator class"
				},
				"class.recursivefilteriterator": {
					"tokens": [
						"RecursiveFilterIterator"
					],
					"id": "class.recursivefilteriterator",
					"name": "RecursiveFilterIterator",
					"description": "The RecursiveFilterIterator class"
				},
				"class.recursiveiteratoriterator": {
					"tokens": [
						"RecursiveIteratorIterator"
					],
					"id": "class.recursiveiteratoriterator",
					"name": "RecursiveIteratorIterator",
					"description": "The RecursiveIteratorIterator class"
				},
				"class.recursiveregexiterator": {
					"tokens": [
						"RecursiveRegexIterator"
					],
					"id": "class.recursiveregexiterator",
					"name": "RecursiveRegexIterator",
					"description": "The RecursiveRegexIterator class"
				},
				"class.recursivetreeiterator": {
					"tokens": [
						"RecursiveTreeIterator"
					],
					"id": "class.recursivetreeiterator",
					"name": "RecursiveTreeIterator",
					"description": "The RecursiveTreeIterator class"
				},
				"class.regexiterator": {
					"tokens": [
						"RegexIterator"
					],
					"id": "class.regexiterator",
					"name": "RegexIterator",
					"description": "The RegexIterator class"
				},
				"class.countable": {
					"tokens": [
						"Countable"
					],
					"id": "class.countable",
					"name": "Countable",
					"description": "The Countable interface"
				},
				"class.outeriterator": {
					"tokens": [
						"OuterIterator"
					],
					"id": "class.outeriterator",
					"name": "OuterIterator",
					"description": "The OuterIterator interface"
				},
				"class.recursiveiterator": {
					"tokens": [
						"RecursiveIterator"
					],
					"id": "class.recursiveiterator",
					"name": "RecursiveIterator",
					"description": "The RecursiveIterator interface"
				},
				"class.seekableiterator": {
					"tokens": [
						"SeekableIterator"
					],
					"id": "class.seekableiterator",
					"name": "SeekableIterator",
					"description": "The SeekableIterator interface"
				},
				"class.splfileinfo": {
					"tokens": [
						"SplFileInfo"
					],
					"id": "class.splfileinfo",
					"name": "SplFileInfo",
					"description": "The SplFileInfo class"
				},
				"class.splfileobject": {
					"tokens": [
						"SplFileObject"
					],
					"id": "class.splfileobject",
					"name": "SplFileObject",
					"description": "The SplFileObject class"
				},
				"class.spltempfileobject": {
					"tokens": [
						"SplTempFileObject"
					],
					"id": "class.spltempfileobject",
					"name": "SplTempFileObject",
					"description": "The SplTempFileObject class"
				},
				"class.arrayobject": {
					"tokens": [
						"ArrayObject"
					],
					"id": "class.arrayobject",
					"name": "ArrayObject",
					"description": "The ArrayObject class"
				},
				"class.splobserver": {
					"tokens": [
						"SplObserver"
					],
					"id": "class.splobserver",
					"name": "SplObserver",
					"description": "The SplObserver interface"
				},
				"class.splsubject": {
					"tokens": [
						"SplSubject"
					],
					"id": "class.splsubject",
					"name": "SplSubject",
					"description": "The SplSubject interface"
				},
				"class.spltype": {
					"tokens": [
						"SplType"
					],
					"id": "class.spltype",
					"name": "SplType",
					"description": "The SplType class"
				},
				"class.splint": {
					"tokens": [
						"SplInt"
					],
					"id": "class.splint",
					"name": "SplInt",
					"description": "The SplInt class"
				},
				"class.splfloat": {
					"tokens": [
						"SplFloat"
					],
					"id": "class.splfloat",
					"name": "SplFloat",
					"description": "The SplFloat class"
				},
				"class.splenum": {
					"tokens": [
						"SplEnum"
					],
					"id": "class.splenum",
					"name": "SplEnum",
					"description": "The SplEnum class"
				},
				"class.splbool": {
					"tokens": [
						"SplBool"
					],
					"id": "class.splbool",
					"name": "SplBool",
					"description": "The SplBool class"
				},
				"class.splstring": {
					"tokens": [
						"SplString"
					],
					"id": "class.splstring",
					"name": "SplString",
					"description": "The SplString class"
				},
				"class.php-user-filter": {
					"tokens": [
						"php_user_filter",
						"phpuser_filter"
					],
					"id": "class.php-user-filter",
					"name": "php_user_filter",
					"description": "The php_user_filter class"
				},
				"class.streamwrapper": {
					"tokens": [
						"streamWrapper"
					],
					"id": "class.streamwrapper",
					"name": "streamWrapper",
					"description": "The streamWrapper class"
				},
				"class.tidy": {
					"tokens": [
						"tidy"
					],
					"id": "class.tidy",
					"name": "tidy",
					"description": "The tidy class"
				},
				"class.tidynode": {
					"tokens": [
						"tidyNode"
					],
					"id": "class.tidynode",
					"name": "tidyNode",
					"description": "The tidyNode class"
				},
				"class.v8js": {
					"tokens": [
						"V8Js"
					],
					"id": "class.v8js",
					"name": "V8Js",
					"description": "The V8Js class"
				},
				"class.v8jsexception": {
					"tokens": [
						"V8JsException"
					],
					"id": "class.v8jsexception",
					"name": "V8JsException",
					"description": "The V8JsException class"
				},
				"class.yaf-application": {
					"tokens": [
						"Yaf_Application",
						"YafApplication"
					],
					"id": "class.yaf-application",
					"name": "Yaf_Application",
					"description": "The Yaf_Application class"
				},
				"class.yaf-bootstrap-abstract": {
					"tokens": [
						"Yaf_Bootstrap_Abstract",
						"YafBootstrap_Abstract"
					],
					"id": "class.yaf-bootstrap-abstract",
					"name": "Yaf_Bootstrap_Abstract",
					"description": "The Yaf_Bootstrap_Abstract class"
				},
				"class.yaf-dispatcher": {
					"tokens": [
						"Yaf_Dispatcher",
						"YafDispatcher"
					],
					"id": "class.yaf-dispatcher",
					"name": "Yaf_Dispatcher",
					"description": "The Yaf_Dispatcher class"
				},
				"class.yaf-config-abstract": {
					"tokens": [
						"Yaf_Config_Abstract",
						"YafConfig_Abstract"
					],
					"id": "class.yaf-config-abstract",
					"name": "Yaf_Config_Abstract",
					"description": "The Yaf_Config_Abstract class"
				},
				"class.yaf-config-ini": {
					"tokens": [
						"Yaf_Config_Ini",
						"YafConfig_Ini"
					],
					"id": "class.yaf-config-ini",
					"name": "Yaf_Config_Ini",
					"description": "The Yaf_Config_Ini class"
				},
				"class.yaf-config-simple": {
					"tokens": [
						"Yaf_Config_Simple",
						"YafConfig_Simple"
					],
					"id": "class.yaf-config-simple",
					"name": "Yaf_Config_Simple",
					"description": "The Yaf_Config_Simple class"
				},
				"class.yaf-controller-abstract": {
					"tokens": [
						"Yaf_Controller_Abstract",
						"YafController_Abstract"
					],
					"id": "class.yaf-controller-abstract",
					"name": "Yaf_Controller_Abstract",
					"description": "The Yaf_Controller_Abstract class"
				},
				"class.yaf-action-abstract": {
					"tokens": [
						"Yaf_Action_Abstract",
						"YafAction_Abstract"
					],
					"id": "class.yaf-action-abstract",
					"name": "Yaf_Action_Abstract",
					"description": "The Yaf_Action_Abstract class"
				},
				"class.yaf-view-interface": {
					"tokens": [
						"Yaf_View_Interface",
						"YafView_Interface"
					],
					"id": "class.yaf-view-interface",
					"name": "Yaf_View_Interface",
					"description": "The Yaf_View_Interface class"
				},
				"class.yaf-view-simple": {
					"tokens": [
						"Yaf_View_Simple",
						"YafView_Simple"
					],
					"id": "class.yaf-view-simple",
					"name": "Yaf_View_Simple",
					"description": "The Yaf_View_Simple class"
				},
				"class.yaf-loader": {
					"tokens": [
						"Yaf_Loader",
						"YafLoader"
					],
					"id": "class.yaf-loader",
					"name": "Yaf_Loader",
					"description": "The Yaf_Loader class"
				},
				"class.yaf-plugin-abstract": {
					"tokens": [
						"Yaf_Plugin_Abstract",
						"YafPlugin_Abstract"
					],
					"id": "class.yaf-plugin-abstract",
					"name": "Yaf_Plugin_Abstract",
					"description": "The Yaf_Plugin_Abstract class"
				},
				"class.yaf-registry": {
					"tokens": [
						"Yaf_Registry",
						"YafRegistry"
					],
					"id": "class.yaf-registry",
					"name": "Yaf_Registry",
					"description": "The Yaf_Registry class"
				},
				"class.yaf-request-abstract": {
					"tokens": [
						"Yaf_Request_Abstract",
						"YafRequest_Abstract"
					],
					"id": "class.yaf-request-abstract",
					"name": "Yaf_Request_Abstract",
					"description": "The Yaf_Request_Abstract class"
				},
				"class.yaf-request-http": {
					"tokens": [
						"Yaf_Request_Http",
						"YafRequest_Http"
					],
					"id": "class.yaf-request-http",
					"name": "Yaf_Request_Http",
					"description": "The Yaf_Request_Http class"
				},
				"class.yaf-request-simple": {
					"tokens": [
						"Yaf_Request_Simple",
						"YafRequest_Simple"
					],
					"id": "class.yaf-request-simple",
					"name": "Yaf_Request_Simple",
					"description": "The Yaf_Request_Simple class"
				},
				"class.yaf-response-abstract": {
					"tokens": [
						"Yaf_Response_Abstract",
						"YafResponse_Abstract"
					],
					"id": "class.yaf-response-abstract",
					"name": "Yaf_Response_Abstract",
					"description": "The Yaf_Response_Abstract class"
				},
				"class.yaf-route-interface": {
					"tokens": [
						"Yaf_Route_Interface",
						"YafRoute_Interface"
					],
					"id": "class.yaf-route-interface",
					"name": "Yaf_Route_Interface",
					"description": "The Yaf_Route_Interface class"
				},
				"class.yaf-route-map": {
					"tokens": [
						"Yaf_Route_Map",
						"YafRoute_Map"
					],
					"id": "class.yaf-route-map",
					"name": "Yaf_Route_Map",
					"description": "The Yaf_Route_Map class"
				},
				"class.yaf-route-regex": {
					"tokens": [
						"Yaf_Route_Regex",
						"YafRoute_Regex"
					],
					"id": "class.yaf-route-regex",
					"name": "Yaf_Route_Regex",
					"description": "The Yaf_Route_Regex class"
				},
				"class.yaf-route-rewrite": {
					"tokens": [
						"Yaf_Route_Rewrite",
						"YafRoute_Rewrite"
					],
					"id": "class.yaf-route-rewrite",
					"name": "Yaf_Route_Rewrite",
					"description": "The Yaf_Route_Rewrite class"
				},
				"class.yaf-router": {
					"tokens": [
						"Yaf_Router",
						"YafRouter"
					],
					"id": "class.yaf-router",
					"name": "Yaf_Router",
					"description": "The Yaf_Router class"
				},
				"class.yaf-route-simple": {
					"tokens": [
						"Yaf_Route_Simple",
						"YafRoute_Simple"
					],
					"id": "class.yaf-route-simple",
					"name": "Yaf_Route_Simple",
					"description": "The Yaf_Route_Simple class"
				},
				"class.yaf-route-static": {
					"tokens": [
						"Yaf_Route_Static",
						"YafRoute_Static"
					],
					"id": "class.yaf-route-static",
					"name": "Yaf_Route_Static",
					"description": "The Yaf_Route_Static class"
				},
				"class.yaf-route-supervar": {
					"tokens": [
						"Yaf_Route_Supervar",
						"YafRoute_Supervar"
					],
					"id": "class.yaf-route-supervar",
					"name": "Yaf_Route_Supervar",
					"description": "The Yaf_Route_Supervar class"
				},
				"class.yaf-session": {
					"tokens": [
						"Yaf_Session",
						"YafSession"
					],
					"id": "class.yaf-session",
					"name": "Yaf_Session",
					"description": "The Yaf_Session class"
				},
				"class.yaf-exception": {
					"tokens": [
						"Yaf_Exception",
						"YafException"
					],
					"id": "class.yaf-exception",
					"name": "Yaf_Exception",
					"description": "The Yaf_Exception class"
				},
				"class.yaf-exception-typeerror": {
					"tokens": [
						"Yaf_Exception_TypeError",
						"YafException_TypeError"
					],
					"id": "class.yaf-exception-typeerror",
					"name": "Yaf_Exception_TypeError",
					"description": "The Yaf_Exception_TypeError class"
				},
				"class.yaf-exception-startuperror": {
					"tokens": [
						"Yaf_Exception_StartupError",
						"YafException_StartupError"
					],
					"id": "class.yaf-exception-startuperror",
					"name": "Yaf_Exception_StartupError",
					"description": "The Yaf_Exception_StartupError class"
				},
				"class.yaf-exception-dispatchfailed": {
					"tokens": [
						"Yaf_Exception_DispatchFailed",
						"YafException_DispatchFailed"
					],
					"id": "class.yaf-exception-dispatchfailed",
					"name": "Yaf_Exception_DispatchFailed",
					"description": "The Yaf_Exception_DispatchFailed class"
				},
				"class.yaf-exception-routerfailed": {
					"tokens": [
						"Yaf_Exception_RouterFailed",
						"YafException_RouterFailed"
					],
					"id": "class.yaf-exception-routerfailed",
					"name": "Yaf_Exception_RouterFailed",
					"description": "The Yaf_Exception_RouterFailed class"
				},
				"class.yaf-exception-loadfailed": {
					"tokens": [
						"Yaf_Exception_LoadFailed",
						"YafException_LoadFailed"
					],
					"id": "class.yaf-exception-loadfailed",
					"name": "Yaf_Exception_LoadFailed",
					"description": "The Yaf_Exception_LoadFailed class"
				},
				"class.yaf-exception-loadfailed-module": {
					"tokens": [
						"Yaf_Exception_LoadFailed_Module",
						"YafException_LoadFailed_Module"
					],
					"id": "class.yaf-exception-loadfailed-module",
					"name": "Yaf_Exception_LoadFailed_Module",
					"description": "The Yaf_Exception_LoadFailed_Module class"
				},
				"class.yaf-exception-loadfailed-controller": {
					"tokens": [
						"Yaf_Exception_LoadFailed_Controller",
						"YafException_LoadFailed_Controller"
					],
					"id": "class.yaf-exception-loadfailed-controller",
					"name": "Yaf_Exception_LoadFailed_Controller",
					"description": "The Yaf_Exception_LoadFailed_Controller class"
				},
				"class.yaf-exception-loadfailed-action": {
					"tokens": [
						"Yaf_Exception_LoadFailed_Action",
						"YafException_LoadFailed_Action"
					],
					"id": "class.yaf-exception-loadfailed-action",
					"name": "Yaf_Exception_LoadFailed_Action",
					"description": "The Yaf_Exception_LoadFailed_Action class"
				},
				"class.yaf-exception-loadfailed-view": {
					"tokens": [
						"Yaf_Exception_LoadFailed_View",
						"YafException_LoadFailed_View"
					],
					"id": "class.yaf-exception-loadfailed-view",
					"name": "Yaf_Exception_LoadFailed_View",
					"description": "The Yaf_Exception_LoadFailed_View class"
				},
				"class.chdb": {
					"tokens": [
						"chdb"
					],
					"id": "class.chdb",
					"name": "chdb",
					"description": "The chdb class"
				},
				"class.curlfile": {
					"tokens": [
						"CURLFile"
					],
					"id": "class.curlfile",
					"name": "CURLFile",
					"description": "The CURLFile class"
				},
				"class.event": {
					"tokens": [
						"Event"
					],
					"id": "class.event",
					"name": "Event",
					"description": "The Event class"
				},
				"class.eventbase": {
					"tokens": [
						"EventBase"
					],
					"id": "class.eventbase",
					"name": "EventBase",
					"description": "The EventBase class"
				},
				"class.eventbuffer": {
					"tokens": [
						"EventBuffer"
					],
					"id": "class.eventbuffer",
					"name": "EventBuffer",
					"description": "The EventBuffer class"
				},
				"class.eventbufferevent": {
					"tokens": [
						"EventBufferEvent"
					],
					"id": "class.eventbufferevent",
					"name": "EventBufferEvent",
					"description": "The EventBufferEvent class"
				},
				"class.eventconfig": {
					"tokens": [
						"EventConfig"
					],
					"id": "class.eventconfig",
					"name": "EventConfig",
					"description": "The EventConfig class"
				},
				"class.eventdnsbase": {
					"tokens": [
						"EventDnsBase"
					],
					"id": "class.eventdnsbase",
					"name": "EventDnsBase",
					"description": "The EventDnsBase class"
				},
				"class.eventhttp": {
					"tokens": [
						"EventHttp"
					],
					"id": "class.eventhttp",
					"name": "EventHttp",
					"description": "The EventHttp class"
				},
				"class.eventhttpconnection": {
					"tokens": [
						"EventHttpConnection"
					],
					"id": "class.eventhttpconnection",
					"name": "EventHttpConnection",
					"description": "The EventHttpConnection class"
				},
				"class.eventhttprequest": {
					"tokens": [
						"EventHttpRequest"
					],
					"id": "class.eventhttprequest",
					"name": "EventHttpRequest",
					"description": "The EventHttpRequest class"
				},
				"class.eventlistener": {
					"tokens": [
						"EventListener"
					],
					"id": "class.eventlistener",
					"name": "EventListener",
					"description": "The EventListener class"
				},
				"class.eventsslcontext": {
					"tokens": [
						"EventSslContext"
					],
					"id": "class.eventsslcontext",
					"name": "EventSslContext",
					"description": "The EventSslContext class"
				},
				"class.eventutil": {
					"tokens": [
						"EventUtil"
					],
					"id": "class.eventutil",
					"name": "EventUtil",
					"description": "The EventUtil class"
				},
				"class.gearmanclient": {
					"tokens": [
						"GearmanClient"
					],
					"id": "class.gearmanclient",
					"name": "GearmanClient",
					"description": "The GearmanClient class"
				},
				"class.gearmanjob": {
					"tokens": [
						"GearmanJob"
					],
					"id": "class.gearmanjob",
					"name": "GearmanJob",
					"description": "The GearmanJob class"
				},
				"class.gearmantask": {
					"tokens": [
						"GearmanTask"
					],
					"id": "class.gearmantask",
					"name": "GearmanTask",
					"description": "The GearmanTask class"
				},
				"class.gearmanworker": {
					"tokens": [
						"GearmanWorker"
					],
					"id": "class.gearmanworker",
					"name": "GearmanWorker",
					"description": "The GearmanWorker class"
				},
				"class.gearmanexception": {
					"tokens": [
						"GearmanException"
					],
					"id": "class.gearmanexception",
					"name": "GearmanException",
					"description": "The GearmanException class"
				},
				"class.memcache": {
					"tokens": [
						"Memcache"
					],
					"id": "class.memcache",
					"name": "Memcache",
					"description": "The Memcache class"
				},
				"class.memcached": {
					"tokens": [
						"Memcached"
					],
					"id": "class.memcached",
					"name": "Memcached",
					"description": "The Memcached class"
				},
				"class.memcachedexception": {
					"tokens": [
						"MemcachedException"
					],
					"id": "class.memcachedexception",
					"name": "MemcachedException",
					"description": "The MemcachedException class"
				},
				"class.rrdcreator": {
					"tokens": [
						"RRDCreator"
					],
					"id": "class.rrdcreator",
					"name": "RRDCreator",
					"description": "The RRDCreator class"
				},
				"class.rrdgraph": {
					"tokens": [
						"RRDGraph"
					],
					"id": "class.rrdgraph",
					"name": "RRDGraph",
					"description": "The RRDGraph class"
				},
				"class.rrdupdater": {
					"tokens": [
						"RRDUpdater"
					],
					"id": "class.rrdupdater",
					"name": "RRDUpdater",
					"description": "The RRDUpdater class"
				},
				"class.snmp": {
					"tokens": [
						"SNMP"
					],
					"id": "class.snmp",
					"name": "SNMP",
					"description": "The SNMP class"
				},
				"class.stomp": {
					"tokens": [
						"Stomp"
					],
					"id": "class.stomp",
					"name": "Stomp",
					"description": "The Stomp class"
				},
				"class.stompframe": {
					"tokens": [
						"StompFrame"
					],
					"id": "class.stompframe",
					"name": "StompFrame",
					"description": "The StompFrame class"
				},
				"class.stompexception": {
					"tokens": [
						"StompException"
					],
					"id": "class.stompexception",
					"name": "StompException",
					"description": "The StompException class"
				},
				"class.svm": {
					"tokens": [
						"SVM"
					],
					"id": "class.svm",
					"name": "SVM",
					"description": "The SVM class"
				},
				"class.svmmodel": {
					"tokens": [
						"SVMModel"
					],
					"id": "class.svmmodel",
					"name": "SVMModel",
					"description": "The SVMModel class"
				},
				"class.varnishadmin": {
					"tokens": [
						"VarnishAdmin"
					],
					"id": "class.varnishadmin",
					"name": "VarnishAdmin",
					"description": "The VarnishAdmin class"
				},
				"class.varnishstat": {
					"tokens": [
						"VarnishStat"
					],
					"id": "class.varnishstat",
					"name": "VarnishStat",
					"description": "The VarnishStat class"
				},
				"class.varnishlog": {
					"tokens": [
						"VarnishLog"
					],
					"id": "class.varnishlog",
					"name": "VarnishLog",
					"description": "The VarnishLog class"
				},
				"class.zmq": {
					"tokens": [
						"ZMQ"
					],
					"id": "class.zmq",
					"name": "ZMQ",
					"description": "The ZMQ class"
				},
				"class.zmqcontext": {
					"tokens": [
						"ZMQContext"
					],
					"id": "class.zmqcontext",
					"name": "ZMQContext",
					"description": "The ZMQContext class"
				},
				"class.zmqsocket": {
					"tokens": [
						"ZMQSocket"
					],
					"id": "class.zmqsocket",
					"name": "ZMQSocket",
					"description": "The ZMQSocket class"
				},
				"class.zmqpoll": {
					"tokens": [
						"ZMQPoll"
					],
					"id": "class.zmqpoll",
					"name": "ZMQPoll",
					"description": "The ZMQPoll class"
				},
				"class.zmqdevice": {
					"tokens": [
						"ZMQDevice"
					],
					"id": "class.zmqdevice",
					"name": "ZMQDevice",
					"description": "The ZMQDevice class"
				},
				"class.solrutils": {
					"tokens": [
						"SolrUtils"
					],
					"id": "class.solrutils",
					"name": "SolrUtils",
					"description": "The SolrUtils class"
				},
				"class.solrinputdocument": {
					"tokens": [
						"SolrInputDocument"
					],
					"id": "class.solrinputdocument",
					"name": "SolrInputDocument",
					"description": "The SolrInputDocument class"
				},
				"class.solrdocument": {
					"tokens": [
						"SolrDocument"
					],
					"id": "class.solrdocument",
					"name": "SolrDocument",
					"description": "The SolrDocument class"
				},
				"class.solrdocumentfield": {
					"tokens": [
						"SolrDocumentField"
					],
					"id": "class.solrdocumentfield",
					"name": "SolrDocumentField",
					"description": "The SolrDocumentField class"
				},
				"class.solrobject": {
					"tokens": [
						"SolrObject"
					],
					"id": "class.solrobject",
					"name": "SolrObject",
					"description": "The SolrObject class"
				},
				"class.solrclient": {
					"tokens": [
						"SolrClient"
					],
					"id": "class.solrclient",
					"name": "SolrClient",
					"description": "The SolrClient class"
				},
				"class.solrresponse": {
					"tokens": [
						"SolrResponse"
					],
					"id": "class.solrresponse",
					"name": "SolrResponse",
					"description": "The SolrResponse class"
				},
				"class.solrqueryresponse": {
					"tokens": [
						"SolrQueryResponse"
					],
					"id": "class.solrqueryresponse",
					"name": "SolrQueryResponse",
					"description": "The SolrQueryResponse class"
				},
				"class.solrupdateresponse": {
					"tokens": [
						"SolrUpdateResponse"
					],
					"id": "class.solrupdateresponse",
					"name": "SolrUpdateResponse",
					"description": "The SolrUpdateResponse class"
				},
				"class.solrpingresponse": {
					"tokens": [
						"SolrPingResponse"
					],
					"id": "class.solrpingresponse",
					"name": "SolrPingResponse",
					"description": "The SolrPingResponse class"
				},
				"class.solrgenericresponse": {
					"tokens": [
						"SolrGenericResponse"
					],
					"id": "class.solrgenericresponse",
					"name": "SolrGenericResponse",
					"description": "The SolrGenericResponse class"
				},
				"class.solrparams": {
					"tokens": [
						"SolrParams"
					],
					"id": "class.solrparams",
					"name": "SolrParams",
					"description": "The SolrParams class"
				},
				"class.solrmodifiableparams": {
					"tokens": [
						"SolrModifiableParams"
					],
					"id": "class.solrmodifiableparams",
					"name": "SolrModifiableParams",
					"description": "The SolrModifiableParams class"
				},
				"class.solrquery": {
					"tokens": [
						"SolrQuery"
					],
					"id": "class.solrquery",
					"name": "SolrQuery",
					"description": "The SolrQuery class"
				},
				"class.solrdismaxquery": {
					"tokens": [
						"SolrDisMaxQuery"
					],
					"id": "class.solrdismaxquery",
					"name": "SolrDisMaxQuery",
					"description": "The SolrDisMaxQuery class"
				},
				"class.solrcollapsefunction": {
					"tokens": [
						"SolrCollapseFunction"
					],
					"id": "class.solrcollapsefunction",
					"name": "SolrCollapseFunction",
					"description": "The SolrCollapseFunction class"
				},
				"class.solrexception": {
					"tokens": [
						"SolrException"
					],
					"id": "class.solrexception",
					"name": "SolrException",
					"description": "The SolrException class"
				},
				"class.solrclientexception": {
					"tokens": [
						"SolrClientException"
					],
					"id": "class.solrclientexception",
					"name": "SolrClientException",
					"description": "The SolrClientException class"
				},
				"class.solrserverexception": {
					"tokens": [
						"SolrServerException"
					],
					"id": "class.solrserverexception",
					"name": "SolrServerException",
					"description": "The SolrServerException class"
				},
				"class.solrillegalargumentexception": {
					"tokens": [
						"SolrIllegalArgumentException"
					],
					"id": "class.solrillegalargumentexception",
					"name": "SolrIllegalArgumentException",
					"description": "The SolrIllegalArgumentException class"
				},
				"class.solrillegaloperationexception": {
					"tokens": [
						"SolrIllegalOperationException"
					],
					"id": "class.solrillegaloperationexception",
					"name": "SolrIllegalOperationException",
					"description": "The SolrIllegalOperationException class"
				},
				"class.solrmissingmandatoryparameterexception": {
					"tokens": [
						"SolrMissingMandatoryParameterException"
					],
					"id": "class.solrmissingmandatoryparameterexception",
					"name": "SolrMissingMandatoryParameterException",
					"description": "The SolrMissingMandatoryParameterException class"
				},
				"class.sphinxclient": {
					"tokens": [
						"SphinxClient"
					],
					"id": "class.sphinxclient",
					"name": "SphinxClient",
					"description": "The SphinxClient class"
				},
				"class.sessionhandler": {
					"tokens": [
						"SessionHandler"
					],
					"id": "class.sessionhandler",
					"name": "SessionHandler",
					"description": "The SessionHandler class"
				},
				"class.sessionhandlerinterface": {
					"tokens": [
						"SessionHandlerInterface"
					],
					"id": "class.sessionhandlerinterface",
					"name": "SessionHandlerInterface",
					"description": "The SessionHandlerInterface class"
				},
				"class.quickhashintset": {
					"tokens": [
						"QuickHashIntSet"
					],
					"id": "class.quickhashintset",
					"name": "QuickHashIntSet",
					"description": "The QuickHashIntSet class"
				},
				"class.quickhashinthash": {
					"tokens": [
						"QuickHashIntHash"
					],
					"id": "class.quickhashinthash",
					"name": "QuickHashIntHash",
					"description": "The QuickHashIntHash class"
				},
				"class.quickhashstringinthash": {
					"tokens": [
						"QuickHashStringIntHash"
					],
					"id": "class.quickhashstringinthash",
					"name": "QuickHashStringIntHash",
					"description": "The QuickHashStringIntHash class"
				},
				"class.quickhashintstringhash": {
					"tokens": [
						"QuickHashIntStringHash"
					],
					"id": "class.quickhashintstringhash",
					"name": "QuickHashIntStringHash",
					"description": "The QuickHashIntStringHash class"
				},
				"class.reflection": {
					"tokens": [
						"Reflection"
					],
					"id": "class.reflection",
					"name": "Reflection",
					"description": "The Reflection class"
				},
				"class.reflectionclass": {
					"tokens": [
						"ReflectionClass"
					],
					"id": "class.reflectionclass",
					"name": "ReflectionClass",
					"description": "The ReflectionClass class"
				},
				"class.reflectionzendextension": {
					"tokens": [
						"ReflectionZendExtension"
					],
					"id": "class.reflectionzendextension",
					"name": "ReflectionZendExtension",
					"description": "The ReflectionZendExtension class"
				},
				"class.reflectionextension": {
					"tokens": [
						"ReflectionExtension"
					],
					"id": "class.reflectionextension",
					"name": "ReflectionExtension",
					"description": "The ReflectionExtension class"
				},
				"class.reflectionfunction": {
					"tokens": [
						"ReflectionFunction"
					],
					"id": "class.reflectionfunction",
					"name": "ReflectionFunction",
					"description": "The ReflectionFunction class"
				},
				"class.reflectionfunctionabstract": {
					"tokens": [
						"ReflectionFunctionAbstract"
					],
					"id": "class.reflectionfunctionabstract",
					"name": "ReflectionFunctionAbstract",
					"description": "The ReflectionFunctionAbstract class"
				},
				"class.reflectionmethod": {
					"tokens": [
						"ReflectionMethod"
					],
					"id": "class.reflectionmethod",
					"name": "ReflectionMethod",
					"description": "The ReflectionMethod class"
				},
				"class.reflectionobject": {
					"tokens": [
						"ReflectionObject"
					],
					"id": "class.reflectionobject",
					"name": "ReflectionObject",
					"description": "The ReflectionObject class"
				},
				"class.reflectionparameter": {
					"tokens": [
						"ReflectionParameter"
					],
					"id": "class.reflectionparameter",
					"name": "ReflectionParameter",
					"description": "The ReflectionParameter class"
				},
				"class.reflectionproperty": {
					"tokens": [
						"ReflectionProperty"
					],
					"id": "class.reflectionproperty",
					"name": "ReflectionProperty",
					"description": "The ReflectionProperty class"
				},
				"class.reflectiontype": {
					"tokens": [
						"ReflectionType"
					],
					"id": "class.reflectiontype",
					"name": "ReflectionType",
					"description": "The ReflectionType class"
				},
				"class.reflectiongenerator": {
					"tokens": [
						"ReflectionGenerator"
					],
					"id": "class.reflectiongenerator",
					"name": "ReflectionGenerator",
					"description": "The ReflectionGenerator class"
				},
				"class.reflector": {
					"tokens": [
						"Reflector"
					],
					"id": "class.reflector",
					"name": "Reflector",
					"description": "The Reflector interface"
				},
				"class.reflectionexception": {
					"tokens": [
						"ReflectionException"
					],
					"id": "class.reflectionexception",
					"name": "ReflectionException",
					"description": "The ReflectionException class"
				},
				"class.oauth": {
					"tokens": [
						"OAuth"
					],
					"id": "class.oauth",
					"name": "OAuth",
					"description": "The OAuth class"
				},
				"class.oauthprovider": {
					"tokens": [
						"OAuthProvider"
					],
					"id": "class.oauthprovider",
					"name": "OAuthProvider",
					"description": "The OAuthProvider class"
				},
				"class.oauthexception": {
					"tokens": [
						"OAuthException"
					],
					"id": "class.oauthexception",
					"name": "OAuthException",
					"description": "OAuthException class"
				},
				"class.soapclient": {
					"tokens": [
						"SoapClient"
					],
					"id": "class.soapclient",
					"name": "SoapClient",
					"description": "The SoapClient class"
				},
				"class.soapserver": {
					"tokens": [
						"SoapServer"
					],
					"id": "class.soapserver",
					"name": "SoapServer",
					"description": "The SoapServer class"
				},
				"class.soapfault": {
					"tokens": [
						"SoapFault"
					],
					"id": "class.soapfault",
					"name": "SoapFault",
					"description": "The SoapFault class"
				},
				"class.soapheader": {
					"tokens": [
						"SoapHeader"
					],
					"id": "class.soapheader",
					"name": "SoapHeader",
					"description": "The SoapHeader class"
				},
				"class.soapparam": {
					"tokens": [
						"SoapParam"
					],
					"id": "class.soapparam",
					"name": "SoapParam",
					"description": "The SoapParam class"
				},
				"class.soapvar": {
					"tokens": [
						"SoapVar"
					],
					"id": "class.soapvar",
					"name": "SoapVar",
					"description": "The SoapVar class"
				},
				"class.yar-server": {
					"tokens": [
						"Yar_Server",
						"YarServer"
					],
					"id": "class.yar-server",
					"name": "Yar_Server",
					"description": "The Yar_Server class"
				},
				"class.yar-client": {
					"tokens": [
						"Yar_Client",
						"YarClient"
					],
					"id": "class.yar-client",
					"name": "Yar_Client",
					"description": "The Yar_Client class"
				},
				"class.yar-concurrent-client": {
					"tokens": [
						"Yar_Concurrent_Client",
						"YarConcurrent_Client"
					],
					"id": "class.yar-concurrent-client",
					"name": "Yar_Concurrent_Client",
					"description": "The Yar_Concurrent_Client class"
				},
				"class.yar-server-exception": {
					"tokens": [
						"Yar_Server_Exception",
						"YarServer_Exception"
					],
					"id": "class.yar-server-exception",
					"name": "Yar_Server_Exception",
					"description": "The Yar_Server_Exception class"
				},
				"class.yar-client-exception": {
					"tokens": [
						"Yar_Client_Exception",
						"YarClient_Exception"
					],
					"id": "class.yar-client-exception",
					"name": "Yar_Client_Exception",
					"description": "The Yar_Client_Exception class"
				},
				"class.com": {
					"tokens": [
						"COM"
					],
					"id": "class.com",
					"name": "COM",
					"description": "The COM class"
				},
				"class.dotnet": {
					"tokens": [
						"DOTNET"
					],
					"id": "class.dotnet",
					"name": "DOTNET",
					"description": "The DOTNET class"
				},
				"class.variant": {
					"tokens": [
						"VARIANT"
					],
					"id": "class.variant",
					"name": "VARIANT",
					"description": "VARIANT class"
				},
				"class.domattr": {
					"tokens": [
						"DOMAttr"
					],
					"id": "class.domattr",
					"name": "DOMAttr",
					"description": "The DOMAttr class"
				},
				"class.domcdatasection": {
					"tokens": [
						"DOMCdataSection"
					],
					"id": "class.domcdatasection",
					"name": "DOMCdataSection",
					"description": "The DOMCdataSection class"
				},
				"class.domcharacterdata": {
					"tokens": [
						"DOMCharacterData"
					],
					"id": "class.domcharacterdata",
					"name": "DOMCharacterData",
					"description": "The DOMCharacterData class"
				},
				"class.domcomment": {
					"tokens": [
						"DOMComment"
					],
					"id": "class.domcomment",
					"name": "DOMComment",
					"description": "The DOMComment class"
				},
				"class.domdocument": {
					"tokens": [
						"DOMDocument"
					],
					"id": "class.domdocument",
					"name": "DOMDocument",
					"description": "The DOMDocument class"
				},
				"class.domdocumentfragment": {
					"tokens": [
						"DOMDocumentFragment"
					],
					"id": "class.domdocumentfragment",
					"name": "DOMDocumentFragment",
					"description": "The DOMDocumentFragment class"
				},
				"class.domdocumenttype": {
					"tokens": [
						"DOMDocumentType"
					],
					"id": "class.domdocumenttype",
					"name": "DOMDocumentType",
					"description": "The DOMDocumentType class"
				},
				"class.domelement": {
					"tokens": [
						"DOMElement"
					],
					"id": "class.domelement",
					"name": "DOMElement",
					"description": "The DOMElement class"
				},
				"class.domentity": {
					"tokens": [
						"DOMEntity"
					],
					"id": "class.domentity",
					"name": "DOMEntity",
					"description": "The DOMEntity class"
				},
				"class.domentityreference": {
					"tokens": [
						"DOMEntityReference"
					],
					"id": "class.domentityreference",
					"name": "DOMEntityReference",
					"description": "The DOMEntityReference class"
				},
				"class.domimplementation": {
					"tokens": [
						"DOMImplementation"
					],
					"id": "class.domimplementation",
					"name": "DOMImplementation",
					"description": "The DOMImplementation class"
				},
				"class.domnamednodemap": {
					"tokens": [
						"DOMNamedNodeMap"
					],
					"id": "class.domnamednodemap",
					"name": "DOMNamedNodeMap",
					"description": "The DOMNamedNodeMap class"
				},
				"class.domnode": {
					"tokens": [
						"DOMNode"
					],
					"id": "class.domnode",
					"name": "DOMNode",
					"description": "The DOMNode class"
				},
				"class.domnodelist": {
					"tokens": [
						"DOMNodeList"
					],
					"id": "class.domnodelist",
					"name": "DOMNodeList",
					"description": "The DOMNodeList class"
				},
				"class.domnotation": {
					"tokens": [
						"DOMNotation"
					],
					"id": "class.domnotation",
					"name": "DOMNotation",
					"description": "The DOMNotation class"
				},
				"class.domprocessinginstruction": {
					"tokens": [
						"DOMProcessingInstruction"
					],
					"id": "class.domprocessinginstruction",
					"name": "DOMProcessingInstruction",
					"description": "The DOMProcessingInstruction class"
				},
				"class.domtext": {
					"tokens": [
						"DOMText"
					],
					"id": "class.domtext",
					"name": "DOMText",
					"description": "The DOMText class"
				},
				"class.domxpath": {
					"tokens": [
						"DOMXPath"
					],
					"id": "class.domxpath",
					"name": "DOMXPath",
					"description": "The DOMXPath class"
				},
				"class.libxmlerror": {
					"tokens": [
						"libXMLError"
					],
					"id": "class.libxmlerror",
					"name": "libXMLError",
					"description": "The libXMLError class"
				},
				"class.simplexmlelement": {
					"tokens": [
						"SimpleXMLElement"
					],
					"id": "class.simplexmlelement",
					"name": "SimpleXMLElement",
					"description": "The SimpleXMLElement class"
				},
				"class.simplexmliterator": {
					"tokens": [
						"SimpleXMLIterator"
					],
					"id": "class.simplexmliterator",
					"name": "SimpleXMLIterator",
					"description": "The SimpleXMLIterator class"
				},
				"class.xmldiff-base": {
					"tokens": [
						"XMLDiff\\Base"
					],
					"id": "class.xmldiff-base",
					"name": "XMLDiff\\Base",
					"description": "The XMLDiff\\Base class"
				},
				"class.xmldiff-dom": {
					"tokens": [
						"XMLDiff\\DOM"
					],
					"id": "class.xmldiff-dom",
					"name": "XMLDiff\\DOM",
					"description": "The XMLDiff\\DOM class"
				},
				"class.xmldiff-memory": {
					"tokens": [
						"XMLDiff\\Memory"
					],
					"id": "class.xmldiff-memory",
					"name": "XMLDiff\\Memory",
					"description": "The XMLDiff\\Memory class"
				},
				"class.xmldiff-file": {
					"tokens": [
						"XMLDiff\\File"
					],
					"id": "class.xmldiff-file",
					"name": "XMLDiff\\File",
					"description": "The XMLDiff\\File class"
				},
				"class.xmlreader": {
					"tokens": [
						"XMLReader"
					],
					"id": "class.xmlreader",
					"name": "XMLReader",
					"description": "The XMLReader class"
				},
				"class.xsltprocessor": {
					"tokens": [
						"XSLTProcessor"
					],
					"id": "class.xsltprocessor",
					"name": "XSLTProcessor",
					"description": "The XSLTProcessor class"
				}
			}
		},
		"exception": {
			"label": "Exceptions",
			"elements": {
				"class.exception": {
					"tokens": [
						"Exception"
					],
					"id": "class.exception",
					"name": "Exception",
					"description": "Exception"
				},
				"class.errorexception": {
					"tokens": [
						"ErrorException"
					],
					"id": "class.errorexception",
					"name": "ErrorException",
					"description": "ErrorException"
				},
				"class.arithmeticerror": {
					"tokens": [
						"ArithmeticError"
					],
					"id": "class.arithmeticerror",
					"name": "ArithmeticError",
					"description": "ArithmeticError"
				},
				"class.assertionerror": {
					"tokens": [
						"AssertionError"
					],
					"id": "class.assertionerror",
					"name": "AssertionError",
					"description": "AssertionError"
				},
				"class.divisionbyzeroerror": {
					"tokens": [
						"DivisionByZeroError"
					],
					"id": "class.divisionbyzeroerror",
					"name": "DivisionByZeroError",
					"description": "DivisionByZeroError"
				},
				"class.parseerror": {
					"tokens": [
						"ParseError"
					],
					"id": "class.parseerror",
					"name": "ParseError",
					"description": "ParseError"
				},
				"class.typeerror": {
					"tokens": [
						"TypeError"
					],
					"id": "class.typeerror",
					"name": "TypeError",
					"description": "TypeError"
				},
				"class.pharexception": {
					"tokens": [
						"PharException"
					],
					"id": "class.pharexception",
					"name": "PharException",
					"description": "The PharException class"
				},
				"class.pdoexception": {
					"tokens": [
						"PDOException"
					],
					"id": "class.pdoexception",
					"name": "PDOException",
					"description": "The PDOException class"
				},
				"class.haruexception": {
					"tokens": [
						"HaruException"
					],
					"id": "class.haruexception",
					"name": "HaruException",
					"description": "The HaruException class"
				},
				"class.badfunctioncallexception": {
					"tokens": [
						"BadFunctionCallException"
					],
					"id": "class.badfunctioncallexception",
					"name": "BadFunctionCallException",
					"description": "The BadFunctionCallException class"
				},
				"class.badmethodcallexception": {
					"tokens": [
						"BadMethodCallException"
					],
					"id": "class.badmethodcallexception",
					"name": "BadMethodCallException",
					"description": "The BadMethodCallException class"
				},
				"class.domainexception": {
					"tokens": [
						"DomainException"
					],
					"id": "class.domainexception",
					"name": "DomainException",
					"description": "The DomainException class"
				},
				"class.invalidargumentexception": {
					"tokens": [
						"InvalidArgumentException"
					],
					"id": "class.invalidargumentexception",
					"name": "InvalidArgumentException",
					"description": "The InvalidArgumentException class"
				},
				"class.lengthexception": {
					"tokens": [
						"LengthException"
					],
					"id": "class.lengthexception",
					"name": "LengthException",
					"description": "The LengthException class"
				},
				"class.logicexception": {
					"tokens": [
						"LogicException"
					],
					"id": "class.logicexception",
					"name": "LogicException",
					"description": "The LogicException class"
				},
				"class.outofboundsexception": {
					"tokens": [
						"OutOfBoundsException"
					],
					"id": "class.outofboundsexception",
					"name": "OutOfBoundsException",
					"description": "The OutOfBoundsException class"
				},
				"class.outofrangeexception": {
					"tokens": [
						"OutOfRangeException"
					],
					"id": "class.outofrangeexception",
					"name": "OutOfRangeException",
					"description": "The OutOfRangeException class"
				},
				"class.overflowexception": {
					"tokens": [
						"OverflowException"
					],
					"id": "class.overflowexception",
					"name": "OverflowException",
					"description": "The OverflowException class"
				},
				"class.rangeexception": {
					"tokens": [
						"RangeException"
					],
					"id": "class.rangeexception",
					"name": "RangeException",
					"description": "The RangeException class"
				},
				"class.runtimeexception": {
					"tokens": [
						"RuntimeException"
					],
					"id": "class.runtimeexception",
					"name": "RuntimeException",
					"description": "The RuntimeException class"
				},
				"class.underflowexception": {
					"tokens": [
						"UnderflowException"
					],
					"id": "class.underflowexception",
					"name": "UnderflowException",
					"description": "The UnderflowException class"
				},
				"class.unexpectedvalueexception": {
					"tokens": [
						"UnexpectedValueException"
					],
					"id": "class.unexpectedvalueexception",
					"name": "UnexpectedValueException",
					"description": "The UnexpectedValueException class"
				},
				"class.snmpexception": {
					"tokens": [
						"SNMPException"
					],
					"id": "class.snmpexception",
					"name": "SNMPException",
					"description": "The SNMPException class"
				},
				"class.domexception": {
					"tokens": [
						"DOMException"
					],
					"id": "class.domexception",
					"name": "DOMException",
					"description": "The DOMException class"
				}
			}
		},
		"extension": {
			"label": "Extensions",
			"elements": {
				"book.apc": {
					"tokens": [
						"APC"
					],
					"id": "book.apc",
					"name": "APC",
					"description": "Alternative PHP Cache"
				},
				"book.apcu": {
					"tokens": [
						"APCu"
					],
					"id": "book.apcu",
					"name": "APCu",
					"description": "APC User Cache"
				},
				"book.apd": {
					"tokens": [
						"APD"
					],
					"id": "book.apd",
					"name": "APD",
					"description": "Advanced PHP debugger"
				},
				"book.bcompiler": {
					"tokens": [
						"bcompiler"
					],
					"id": "book.bcompiler",
					"name": "bcompiler",
					"description": "PHP bytecode Compiler"
				},
				"book.blenc": {
					"tokens": [
						"BLENC"
					],
					"id": "book.blenc",
					"name": "BLENC",
					"description": "Blenc - BLowfish ENCoder for PHP source scripts"
				},
				"book.errorfunc": {
					"tokens": [
						"Error Handling"
					],
					"id": "book.errorfunc",
					"name": "Error Handling",
					"description": "Error Handling and Logging"
				},
				"book.htscanner": {
					"tokens": [
						"htscanner"
					],
					"id": "book.htscanner",
					"name": "htscanner",
					"description": "htaccess-like support for all SAPIs"
				},
				"book.inclued": {
					"tokens": [
						"inclued"
					],
					"id": "book.inclued",
					"name": "inclued",
					"description": "Inclusion hierarchy viewer"
				},
				"book.memtrack": {
					"tokens": [
						"Memtrack"
					],
					"id": "book.memtrack",
					"name": "Memtrack",
					"description": "Memtrack"
				},
				"book.outcontrol": {
					"tokens": [
						"Output Control"
					],
					"id": "book.outcontrol",
					"name": "Output Control",
					"description": "Output Buffering Control"
				},
				"book.info": {
					"tokens": [
						"PHP Options/Info"
					],
					"id": "book.info",
					"name": "PHP Options/Info",
					"description": "PHP Options and Information"
				},
				"book.scream": {
					"tokens": [
						"scream"
					],
					"id": "book.scream",
					"name": "scream",
					"description": "Break the silence operator"
				},
				"book.uopz": {
					"tokens": [
						"uopz"
					],
					"id": "book.uopz",
					"name": "uopz",
					"description": "uopz"
				},
				"book.weakref": {
					"tokens": [
						"Weakref"
					],
					"id": "book.weakref",
					"name": "Weakref",
					"description": "Weak References"
				},
				"book.wincache": {
					"tokens": [
						"WinCache"
					],
					"id": "book.wincache",
					"name": "WinCache",
					"description": "Windows Cache for PHP"
				},
				"book.xhprof": {
					"tokens": [
						"Xhprof"
					],
					"id": "book.xhprof",
					"name": "Xhprof",
					"description": "Hierarchical Profiler"
				},
				"book.id3": {
					"tokens": [
						"ID3"
					],
					"id": "book.id3",
					"name": "ID3",
					"description": "ID3 Tags"
				},
				"book.oggvorbis": {
					"tokens": [
						"oggvorbis"
					],
					"id": "book.oggvorbis",
					"name": "oggvorbis",
					"description": "OGG/Vorbis"
				},
				"book.openal": {
					"tokens": [
						"OpenAL"
					],
					"id": "book.openal",
					"name": "OpenAL",
					"description": "OpenAL Audio Bindings"
				},
				"book.kadm5": {
					"tokens": [
						"KADM5"
					],
					"id": "book.kadm5",
					"name": "KADM5",
					"description": "Kerberos V"
				},
				"book.ncurses": {
					"tokens": [
						"Ncurses"
					],
					"id": "book.ncurses",
					"name": "Ncurses",
					"description": "Ncurses Terminal Screen Control"
				},
				"book.readline": {
					"tokens": [
						"Readline"
					],
					"id": "book.readline",
					"name": "Readline",
					"description": "GNU Readline"
				},
				"book.lzf": {
					"tokens": [
						"LZF"
					],
					"id": "book.lzf",
					"name": "LZF",
					"description": "LZF"
				},
				"book.rar": {
					"tokens": [
						"Rar"
					],
					"id": "book.rar",
					"name": "Rar",
					"description": "Rar Archiving"
				},
				"book.zlib": {
					"tokens": [
						"Zlib"
					],
					"id": "book.zlib",
					"name": "Zlib",
					"description": "Zlib Compression"
				},
				"book.mcve": {
					"tokens": [
						"MCVE"
					],
					"id": "book.mcve",
					"name": "MCVE",
					"description": "MCVE (Monetra) Payment"
				},
				"book.spplus": {
					"tokens": [
						"SPPLUS"
					],
					"id": "book.spplus",
					"name": "SPPLUS",
					"description": "SPPLUS Payment System"
				},
				"book.crack": {
					"tokens": [
						"Crack"
					],
					"id": "book.crack",
					"name": "Crack",
					"description": "Cracklib"
				},
				"book.hash": {
					"tokens": [
						"Hash"
					],
					"id": "book.hash",
					"name": "Hash",
					"description": "HASH Message Digest Framework"
				},
				"book.dba": {
					"tokens": [
						"DBA"
					],
					"id": "book.dba",
					"name": "DBA",
					"description": "Database (dbm-style) Abstraction Layer"
				},
				"book.uodbc": {
					"tokens": [
						"ODBC"
					],
					"id": "book.uodbc",
					"name": "ODBC",
					"description": "ODBC (Unified)"
				},
				"ref.pdo-cubrid": {
					"tokens": [
						"CUBRID (PDO)"
					],
					"id": "ref.pdo-cubrid",
					"name": "CUBRID (PDO)",
					"description": "CUBRID Functions (PDO_CUBRID)"
				},
				"ref.pdo-dblib": {
					"tokens": [
						"MS SQL Server (PDO)"
					],
					"id": "ref.pdo-dblib",
					"name": "MS SQL Server (PDO)",
					"description": "Microsoft SQL Server and Sybase Functions (PDO_DBLIB)"
				},
				"ref.pdo-firebird": {
					"tokens": [
						"Firebird (PDO)"
					],
					"id": "ref.pdo-firebird",
					"name": "Firebird (PDO)",
					"description": "Firebird Functions (PDO_FIREBIRD)"
				},
				"ref.pdo-ibm": {
					"tokens": [
						"IBM (PDO)"
					],
					"id": "ref.pdo-ibm",
					"name": "IBM (PDO)",
					"description": "IBM Functions (PDO_IBM)"
				},
				"ref.pdo-informix": {
					"tokens": [
						"Informix (PDO)"
					],
					"id": "ref.pdo-informix",
					"name": "Informix (PDO)",
					"description": "Informix Functions (PDO_INFORMIX)"
				},
				"ref.pdo-mysql": {
					"tokens": [
						"MySQL (PDO)"
					],
					"id": "ref.pdo-mysql",
					"name": "MySQL (PDO)",
					"description": "MySQL Functions (PDO_MYSQL)"
				},
				"ref.pdo-sqlsrv": {
					"tokens": [
						"MS SQL Server (PDO)"
					],
					"id": "ref.pdo-sqlsrv",
					"name": "MS SQL Server (PDO)",
					"description": "Microsoft SQL Server Functions (PDO_SQLSRV)"
				},
				"ref.pdo-oci": {
					"tokens": [
						"Oracle (PDO)"
					],
					"id": "ref.pdo-oci",
					"name": "Oracle (PDO)",
					"description": "Oracle Functions (PDO_OCI)"
				},
				"ref.pdo-odbc": {
					"tokens": [
						"ODBC and DB2 (PDO)"
					],
					"id": "ref.pdo-odbc",
					"name": "ODBC and DB2 (PDO)",
					"description": "ODBC and DB2 Functions (PDO_ODBC)"
				},
				"ref.pdo-pgsql": {
					"tokens": [
						"PostgreSQL (PDO)"
					],
					"id": "ref.pdo-pgsql",
					"name": "PostgreSQL (PDO)",
					"description": "PostgreSQL Functions (PDO_PGSQL)"
				},
				"ref.pdo-sqlite": {
					"tokens": [
						"SQLite (PDO)"
					],
					"id": "ref.pdo-sqlite",
					"name": "SQLite (PDO)",
					"description": "SQLite Functions (PDO_SQLITE)"
				},
				"ref.pdo-4d": {
					"tokens": [
						"4D (PDO)"
					],
					"id": "ref.pdo-4d",
					"name": "4D (PDO)",
					"description": "4D Functions (PDO_4D)"
				},
				"book.pdo": {
					"tokens": [
						"PDO"
					],
					"id": "book.pdo",
					"name": "PDO",
					"description": "PHP Data Objects"
				},
				"book.cubrid": {
					"tokens": [
						"CUBRID"
					],
					"id": "book.cubrid",
					"name": "CUBRID",
					"description": "CUBRID"
				},
				"book.ibm-db2": {
					"tokens": [
						"IBM DB2"
					],
					"id": "book.ibm-db2",
					"name": "IBM DB2",
					"description": "IBM DB2, Cloudscape and Apache Derby"
				},
				"book.ingres": {
					"tokens": [
						"Ingres"
					],
					"id": "book.ingres",
					"name": "Ingres",
					"description": "Ingres DBMS, EDBC, and Enterprise Access Gateways"
				},
				"book.mongo": {
					"tokens": [
						"Mongo"
					],
					"id": "book.mongo",
					"name": "Mongo",
					"description": "MongoDB driver (legacy)"
				},
				"mongodb.tutorial": {
					"tokens": [
						"Tutorials"
					],
					"id": "mongodb.tutorial",
					"name": "Tutorials",
					"description": "Tutorials"
				},
				"mongodb.architecture": {
					"tokens": [
						"Driver Architecture and Internals"
					],
					"id": "mongodb.architecture",
					"name": "Driver Architecture and Internals",
					"description": "Explains the driver architecure, and special features"
				},
				"book.mongodb": {
					"tokens": [
						"MongoDB\\Driver"
					],
					"id": "book.mongodb",
					"name": "MongoDB\\Driver",
					"description": "MongoDB driver classes"
				},
				"book.bson": {
					"tokens": [
						"MongoDB\\Driver\\BSON"
					],
					"id": "book.bson",
					"name": "MongoDB\\Driver\\BSON",
					"description": "BSON type classes and serialization functions"
				},
				"mongodb.exceptions": {
					"tokens": [
						"MongoDB\\Driver\\Exception"
					],
					"id": "mongodb.exceptions",
					"name": "MongoDB\\Driver\\Exception",
					"description": "Exception classes"
				},
				"set.mongodb": {
					"tokens": [
						"MongoDB"
					],
					"id": "set.mongodb",
					"name": "MongoDB",
					"description": "MongoDB driver"
				},
				"book.mssql": {
					"tokens": [
						"Mssql"
					],
					"id": "book.mssql",
					"name": "Mssql",
					"description": "Microsoft SQL Server"
				},
				"book.mysqli": {
					"tokens": [
						"MySQLi"
					],
					"id": "book.mysqli",
					"name": "MySQLi",
					"description": "MySQL Improved Extension"
				},
				"book.mysql": {
					"tokens": [
						"MySQL (Original)"
					],
					"id": "book.mysql",
					"name": "MySQL (Original)",
					"description": "Original MySQL API"
				},
				"book.mysqlnd": {
					"tokens": [
						"Mysqlnd"
					],
					"id": "book.mysqlnd",
					"name": "Mysqlnd",
					"description": "MySQL Native Driver"
				},
				"book.mysqlnd-ms": {
					"tokens": [
						"mysqlnd_ms",
						"mysqlndms"
					],
					"id": "book.mysqlnd-ms",
					"name": "mysqlnd_ms",
					"description": "Mysqlnd replication and load balancing plugin"
				},
				"book.mysqlnd-qc": {
					"tokens": [
						"mysqlnd_qc",
						"mysqlndqc"
					],
					"id": "book.mysqlnd-qc",
					"name": "mysqlnd_qc",
					"description": "Mysqlnd query result cache plugin"
				},
				"book.mysqlnd-uh": {
					"tokens": [
						"mysqlnd_uh",
						"mysqlnduh"
					],
					"id": "book.mysqlnd-uh",
					"name": "mysqlnd_uh",
					"description": "Mysqlnd user handler plugin"
				},
				"book.mysqlnd-mux": {
					"tokens": [
						"mysqlnd_mux",
						"mysqlndmux"
					],
					"id": "book.mysqlnd-mux",
					"name": "mysqlnd_mux",
					"description": "Mysqlnd connection multiplexing plugin"
				},
				"book.mysqlnd-memcache": {
					"tokens": [
						"mysqlnd_memcache",
						"mysqlndmemcache"
					],
					"id": "book.mysqlnd-memcache",
					"name": "mysqlnd_memcache",
					"description": "Mysqlnd Memcache plugin"
				},
				"set.mysqlinfo": {
					"tokens": [
						"MySQL"
					],
					"id": "set.mysqlinfo",
					"name": "MySQL",
					"description": "MySQL Drivers and Plugins"
				},
				"book.oci8": {
					"tokens": [
						"OCI8"
					],
					"id": "book.oci8",
					"name": "OCI8",
					"description": "Oracle OCI8"
				},
				"book.paradox": {
					"tokens": [
						"Paradox"
					],
					"id": "book.paradox",
					"name": "Paradox",
					"description": "Paradox File Access"
				},
				"book.sqlite3": {
					"tokens": [
						"SQLite3"
					],
					"id": "book.sqlite3",
					"name": "SQLite3",
					"description": "SQLite3"
				},
				"book.sqlsrv": {
					"tokens": [
						"SQLSRV"
					],
					"id": "book.sqlsrv",
					"name": "SQLSRV",
					"description": "Microsoft SQL Server Driver for PHP"
				},
				"book.tokyo-tyrant": {
					"tokens": [
						"tokyo_tyrant",
						"tokyotyrant"
					],
					"id": "book.tokyo-tyrant",
					"name": "tokyo_tyrant",
					"description": "tokyo_tyrant"
				},
				"book.datetime": {
					"tokens": [
						"Date/Time"
					],
					"id": "book.datetime",
					"name": "Date/Time",
					"description": "Date and Time"
				},
				"book.hrtime": {
					"tokens": [
						"HRTime"
					],
					"id": "book.hrtime",
					"name": "HRTime",
					"description": "High resolution timing"
				},
				"book.fileinfo": {
					"tokens": [
						"Fileinfo"
					],
					"id": "book.fileinfo",
					"name": "Fileinfo",
					"description": "File Information"
				},
				"book.proctitle": {
					"tokens": [
						"Proctitle"
					],
					"id": "book.proctitle",
					"name": "Proctitle",
					"description": "Proctitle"
				},
				"book.enchant": {
					"tokens": [
						"Enchant"
					],
					"id": "book.enchant",
					"name": "Enchant",
					"description": "Enchant spelling library"
				},
				"book.gender": {
					"tokens": [
						"Gender"
					],
					"id": "book.gender",
					"name": "Gender",
					"description": "Determine gender of firstnames"
				},
				"book.intl": {
					"tokens": [
						"intl"
					],
					"id": "book.intl",
					"name": "intl",
					"description": "Internationalization Functions"
				},
				"book.recode": {
					"tokens": [
						"Recode"
					],
					"id": "book.recode",
					"name": "Recode",
					"description": "GNU Recode"
				},
				"book.cairo": {
					"tokens": [
						"Cairo"
					],
					"id": "book.cairo",
					"name": "Cairo",
					"description": "Cairo"
				},
				"book.exif": {
					"tokens": [
						"Exif"
					],
					"id": "book.exif",
					"name": "Exif",
					"description": "Exchangeable image information"
				},
				"book.image": {
					"tokens": [
						"GD"
					],
					"id": "book.image",
					"name": "GD",
					"description": "Image Processing and GD"
				},
				"book.gmagick": {
					"tokens": [
						"Gmagick"
					],
					"id": "book.gmagick",
					"name": "Gmagick",
					"description": "Gmagick"
				},
				"book.imagick": {
					"tokens": [
						"ImageMagick"
					],
					"id": "book.imagick",
					"name": "ImageMagick",
					"description": "Image Processing (ImageMagick)"
				},
				"book.cyrus": {
					"tokens": [
						"Cyrus"
					],
					"id": "book.cyrus",
					"name": "Cyrus",
					"description": "Cyrus IMAP administration"
				},
				"book.imap": {
					"tokens": [
						"IMAP"
					],
					"id": "book.imap",
					"name": "IMAP",
					"description": "IMAP, POP3 and NNTP"
				},
				"book.bc": {
					"tokens": [
						"BC Math"
					],
					"id": "book.bc",
					"name": "BC Math",
					"description": "BCMath Arbitrary Precision Mathematics"
				},
				"book.gmp": {
					"tokens": [
						"GMP"
					],
					"id": "book.gmp",
					"name": "GMP",
					"description": "GNU Multiple Precision"
				},
				"book.lapack": {
					"tokens": [
						"Lapack"
					],
					"id": "book.lapack",
					"name": "Lapack",
					"description": "Lapack"
				},
				"book.math": {
					"tokens": [
						"Math"
					],
					"id": "book.math",
					"name": "Math",
					"description": "Mathematical Functions"
				},
				"book.trader": {
					"tokens": [
						"Trader"
					],
					"id": "book.trader",
					"name": "Trader",
					"description": "Technical Analysis for Traders"
				},
				"book.fdf": {
					"tokens": [
						"FDF"
					],
					"id": "book.fdf",
					"name": "FDF",
					"description": "Forms Data Format"
				},
				"book.gnupg": {
					"tokens": [
						"GnuPG"
					],
					"id": "book.gnupg",
					"name": "GnuPG",
					"description": "GNU Privacy Guard"
				},
				"book.haru": {
					"tokens": [
						"haru"
					],
					"id": "book.haru",
					"name": "haru",
					"description": "Haru PDF"
				},
				"book.ming": {
					"tokens": [
						"Ming"
					],
					"id": "book.ming",
					"name": "Ming",
					"description": "Ming (flash)"
				},
				"book.ps": {
					"tokens": [
						"PS"
					],
					"id": "book.ps",
					"name": "PS",
					"description": "PostScript document creation"
				},
				"book.rpmreader": {
					"tokens": [
						"RPM Reader"
					],
					"id": "book.rpmreader",
					"name": "RPM Reader",
					"description": "RPM Header Reading"
				},
				"book.eio": {
					"tokens": [
						"Eio"
					],
					"id": "book.eio",
					"name": "Eio",
					"description": "Eio"
				},
				"book.ev": {
					"tokens": [
						"Ev"
					],
					"id": "book.ev",
					"name": "Ev",
					"description": "Ev"
				},
				"book.libevent": {
					"tokens": [
						"Libevent"
					],
					"id": "book.libevent",
					"name": "Libevent",
					"description": "Libevent"
				},
				"book.pcntl": {
					"tokens": [
						"PCNTL"
					],
					"id": "book.pcntl",
					"name": "PCNTL",
					"description": "Process Control"
				},
				"book.exec": {
					"tokens": [
						"Program execution"
					],
					"id": "book.exec",
					"name": "Program execution",
					"description": "System program execution"
				},
				"book.pthreads": {
					"tokens": [
						"pthreads"
					],
					"id": "book.pthreads",
					"name": "pthreads",
					"description": "pthreads"
				},
				"book.sem": {
					"tokens": [
						"Semaphore"
					],
					"id": "book.sem",
					"name": "Semaphore",
					"description": "Semaphore, Shared Memory and IPC"
				},
				"book.sync": {
					"tokens": [
						"Sync"
					],
					"id": "book.sync",
					"name": "Sync",
					"description": "Sync"
				},
				"book.geoip": {
					"tokens": [
						"GeoIP"
					],
					"id": "book.geoip",
					"name": "GeoIP",
					"description": "Geo IP Location"
				},
				"book.fann": {
					"tokens": [
						"FANN"
					],
					"id": "book.fann",
					"name": "FANN",
					"description": "FANN (Fast Artificial Neural Network)"
				},
				"book.json": {
					"tokens": [
						"JSON"
					],
					"id": "book.json",
					"name": "JSON",
					"description": "JavaScript Object Notation"
				},
				"book.judy": {
					"tokens": [
						"Judy"
					],
					"id": "book.judy",
					"name": "Judy",
					"description": "Judy Arrays"
				},
				"book.lua": {
					"tokens": [
						"Lua"
					],
					"id": "book.lua",
					"name": "Lua",
					"description": "Lua"
				},
				"book.misc": {
					"tokens": [
						"Misc."
					],
					"id": "book.misc",
					"name": "Misc.",
					"description": "Miscellaneous Functions"
				},
				"book.spl": {
					"tokens": [
						"SPL"
					],
					"id": "book.spl",
					"name": "SPL",
					"description": "Standard PHP Library (SPL)"
				},
				"book.spl-types": {
					"tokens": [
						"SPL Types"
					],
					"id": "book.spl-types",
					"name": "SPL Types",
					"description": "SPL Type Handling"
				},
				"book.v8js": {
					"tokens": [
						"V8js"
					],
					"id": "book.v8js",
					"name": "V8js",
					"description": "V8 Javascript Engine Integration"
				},
				"book.yaml": {
					"tokens": [
						"Yaml"
					],
					"id": "book.yaml",
					"name": "Yaml",
					"description": "YAML Data Serialization"
				},
				"book.yaf": {
					"tokens": [
						"Yaf"
					],
					"id": "book.yaf",
					"name": "Yaf",
					"description": "Yet Another Framework"
				},
				"book.taint": {
					"tokens": [
						"Taint"
					],
					"id": "book.taint",
					"name": "Taint",
					"description": "Taint"
				},
				"book.chdb": {
					"tokens": [
						"chdb"
					],
					"id": "book.chdb",
					"name": "chdb",
					"description": "Constant hash database"
				},
				"book.curl": {
					"tokens": [
						"cURL"
					],
					"id": "book.curl",
					"name": "cURL",
					"description": "Client URL Library"
				},
				"book.event": {
					"tokens": [
						"Event"
					],
					"id": "book.event",
					"name": "Event",
					"description": "Event"
				},
				"book.fam": {
					"tokens": [
						"FAM"
					],
					"id": "book.fam",
					"name": "FAM",
					"description": "File Alteration Monitor"
				},
				"book.gearman": {
					"tokens": [
						"Gearman"
					],
					"id": "book.gearman",
					"name": "Gearman",
					"description": "Gearman"
				},
				"book.net-gopher": {
					"tokens": [
						"Gopher"
					],
					"id": "book.net-gopher",
					"name": "Gopher",
					"description": "Net Gopher"
				},
				"book.gupnp": {
					"tokens": [
						"Gupnp"
					],
					"id": "book.gupnp",
					"name": "Gupnp",
					"description": "Gupnp"
				},
				"book.ldap": {
					"tokens": [
						"LDAP"
					],
					"id": "book.ldap",
					"name": "LDAP",
					"description": "Lightweight Directory Access Protocol"
				},
				"book.memcached": {
					"tokens": [
						"Memcached"
					],
					"id": "book.memcached",
					"name": "Memcached",
					"description": "Memcached"
				},
				"book.rrd": {
					"tokens": [
						"RRD"
					],
					"id": "book.rrd",
					"name": "RRD",
					"description": "RRDtool"
				},
				"book.sam": {
					"tokens": [
						"SAM"
					],
					"id": "book.sam",
					"name": "SAM",
					"description": "Simple Asynchronous Messaging"
				},
				"book.ssh2": {
					"tokens": [
						"SSH2"
					],
					"id": "book.ssh2",
					"name": "SSH2",
					"description": "Secure Shell2"
				},
				"book.stomp": {
					"tokens": [
						"Stomp"
					],
					"id": "book.stomp",
					"name": "Stomp",
					"description": "Stomp Client"
				},
				"book.svm": {
					"tokens": [
						"SVM"
					],
					"id": "book.svm",
					"name": "SVM",
					"description": "Support Vector Machine"
				},
				"book.svn": {
					"tokens": [
						"SVN"
					],
					"id": "book.svn",
					"name": "SVN",
					"description": "Subversion"
				},
				"book.tcpwrap": {
					"tokens": [
						"TCP"
					],
					"id": "book.tcpwrap",
					"name": "TCP",
					"description": "TCP Wrappers"
				},
				"book.varnish": {
					"tokens": [
						"Varnish"
					],
					"id": "book.varnish",
					"name": "Varnish",
					"description": "Varnish"
				},
				"book.zmq": {
					"tokens": [
						"0MQ messaging"
					],
					"id": "book.zmq",
					"name": "0MQ messaging",
					"description": "ZMQ"
				},
				"book.solr": {
					"tokens": [
						"Solr"
					],
					"id": "book.solr",
					"name": "Solr",
					"description": "Apache Solr"
				},
				"book.sphinx": {
					"tokens": [
						"Sphinx"
					],
					"id": "book.sphinx",
					"name": "Sphinx",
					"description": "Sphinx Client"
				},
				"book.swish": {
					"tokens": [
						"Swish"
					],
					"id": "book.swish",
					"name": "Swish",
					"description": "Swish Indexing"
				},
				"book.iisfunc": {
					"tokens": [
						"IIS"
					],
					"id": "book.iisfunc",
					"name": "IIS",
					"description": "IIS Administration"
				},
				"book.msession": {
					"tokens": [
						"Msession"
					],
					"id": "book.msession",
					"name": "Msession",
					"description": "Mohawk Software Session Handler Functions"
				},
				"book.session": {
					"tokens": [
						"Sessions"
					],
					"id": "book.session",
					"name": "Sessions",
					"description": "Session Handling"
				},
				"book.session-pgsql": {
					"tokens": [
						"Session PgSQL"
					],
					"id": "book.session-pgsql",
					"name": "Session PgSQL",
					"description": "PostgreSQL Session Save Handler"
				},
				"book.bbcode": {
					"tokens": [
						"BBCode"
					],
					"id": "book.bbcode",
					"name": "BBCode",
					"description": "Bulletin Board Code"
				},
				"book.pcre": {
					"tokens": [
						"PCRE"
					],
					"id": "book.pcre",
					"name": "PCRE",
					"description": "Regular Expressions (Perl-Compatible)"
				},
				"book.regex": {
					"tokens": [
						"POSIX Regex"
					],
					"id": "book.regex",
					"name": "POSIX Regex",
					"description": "Regular Expression (POSIX Extended)"
				},
				"book.ssdeep": {
					"tokens": [
						"ssdeep"
					],
					"id": "book.ssdeep",
					"name": "ssdeep",
					"description": "ssdeep Fuzzy Hashing"
				},
				"book.classobj": {
					"tokens": [
						"Classes/Objects"
					],
					"id": "book.classobj",
					"name": "Classes/Objects",
					"description": "Class/Object Information"
				},
				"book.ctype": {
					"tokens": [
						"Ctype"
					],
					"id": "book.ctype",
					"name": "Ctype",
					"description": "Character type checking"
				},
				"book.filter": {
					"tokens": [
						"Filter"
					],
					"id": "book.filter",
					"name": "Filter",
					"description": "Data Filtering"
				},
				"book.quickhash": {
					"tokens": [
						"Quickhash"
					],
					"id": "book.quickhash",
					"name": "Quickhash",
					"description": "Quickhash"
				},
				"book.reflection": {
					"tokens": [
						"Reflection"
					],
					"id": "book.reflection",
					"name": "Reflection",
					"description": "Reflection"
				},
				"book.soap": {
					"tokens": [
						"SOAP"
					],
					"id": "book.soap",
					"name": "SOAP",
					"description": "SOAP"
				},
				"book.yar": {
					"tokens": [
						"Yar"
					],
					"id": "book.yar",
					"name": "Yar",
					"description": "Yet Another RPC Framework"
				},
				"book.com": {
					"tokens": [
						"COM"
					],
					"id": "book.com",
					"name": "COM",
					"description": "COM and .Net (Windows)"
				},
				"book.dom": {
					"tokens": [
						"DOM"
					],
					"id": "book.dom",
					"name": "DOM",
					"description": "Document Object Model"
				},
				"book.sdo": {
					"tokens": [
						"SDO"
					],
					"id": "book.sdo",
					"name": "SDO",
					"description": "Service Data Objects"
				},
				"book.sdodasrel": {
					"tokens": [
						"SDO-DAS-Relational"
					],
					"id": "book.sdodasrel",
					"name": "SDO-DAS-Relational",
					"description": "SDO Relational Data Access Service"
				},
				"book.sdo-das-xml": {
					"tokens": [
						"SDO DAS XML"
					],
					"id": "book.sdo-das-xml",
					"name": "SDO DAS XML",
					"description": "SDO XML Data Access Service"
				},
				"book.xmldiff": {
					"tokens": [
						"XMLDiff"
					],
					"id": "book.xmldiff",
					"name": "XMLDiff",
					"description": "XML diff and merge"
				},
				"internals2.counter.counter-class": {
					"tokens": [
						"Counter"
					],
					"id": "internals2.counter.counter-class",
					"name": "Counter",
					"description": "The Counter class"
				},
				"internals2.counter.basic-interface": {
					"tokens": [
						"Basic"
					],
					"id": "internals2.counter.basic-interface",
					"name": "Basic",
					"description": "The basic interface"
				},
				"internals2.counter.extended-interface": {
					"tokens": [
						"Extended"
					],
					"id": "internals2.counter.extended-interface",
					"name": "Extended",
					"description": "The extended interface"
				},
				"faq": {
					"tokens": [
						"FAQ"
					],
					"id": "faq",
					"name": "FAQ",
					"description": "FAQ: Frequently Asked Questions"
				}
			}
		},
		"general": {
			"label": "Other Matches",
			"elements": {
				"features.commandline.options": {
					"tokens": [
						"Options"
					],
					"id": "features.commandline.options",
					"name": "Options",
					"description": "Command line options"
				},
				"features.commandline.usage": {
					"tokens": [
						"Usage"
					],
					"id": "features.commandline.usage",
					"name": "Usage",
					"description": "Executing PHP files"
				},
				"features.commandline.io-streams": {
					"tokens": [
						"I/O streams"
					],
					"id": "features.commandline.io-streams",
					"name": "I/O streams",
					"description": "Input/output streams"
				},
				"features.commandline": {
					"tokens": [
						"Command line usage"
					],
					"id": "features.commandline",
					"name": "Command line usage",
					"description": "Using PHP from the command line"
				},
				"mongodb.overview": {
					"tokens": [
						"Architecture"
					],
					"id": "mongodb.overview",
					"name": "Architecture",
					"description": "Architecture Overview"
				},
				"mongodb.persistence": {
					"tokens": [
						"Persisting Data"
					],
					"id": "mongodb.persistence",
					"name": "Persisting Data",
					"description": "Serialisation and deserialisation of PHP variables into MongoDB"
				},
				"pthreads.modifiers": {
					"tokens": [
						"Modifiers"
					],
					"id": "pthreads.modifiers",
					"name": "Modifiers",
					"description": "Method Modifiers"
				},
				"reference.pcre.pattern.syntax": {
					"tokens": [
						"PCRE regex syntax"
					],
					"id": "reference.pcre.pattern.syntax",
					"name": "PCRE regex syntax",
					"description": "Pattern Syntax"
				},
				"reference.pcre.pattern.modifiers": {
					"tokens": [
						"Possible modifiers in regex patterns"
					],
					"id": "reference.pcre.pattern.modifiers",
					"name": "Possible modifiers in regex patterns",
					"description": "Pattern Modifiers"
				},
				"reference.pcre.pattern.differences": {
					"tokens": [
						"Differences From Perl"
					],
					"id": "reference.pcre.pattern.differences",
					"name": "Differences From Perl",
					"description": "Perl Differences"
				},
				"faq.general": {
					"tokens": [
						"General Information"
					],
					"id": "faq.general",
					"name": "General Information",
					"description": "General Information"
				},
				"faq.mailinglist": {
					"tokens": [
						"Mailing lists"
					],
					"id": "faq.mailinglist",
					"name": "Mailing lists",
					"description": "Mailing lists"
				},
				"faq.obtaining": {
					"tokens": [
						"Obtaining PHP"
					],
					"id": "faq.obtaining",
					"name": "Obtaining PHP",
					"description": "Obtaining PHP"
				},
				"faq.databases": {
					"tokens": [
						"Database issues"
					],
					"id": "faq.databases",
					"name": "Database issues",
					"description": "Database issues"
				},
				"faq.installation": {
					"tokens": [
						"Installation"
					],
					"id": "faq.installation",
					"name": "Installation",
					"description": "Installation"
				},
				"faq.build": {
					"tokens": [
						"Build Problems"
					],
					"id": "faq.build",
					"name": "Build Problems",
					"description": "Build Problems"
				},
				"faq.using": {
					"tokens": [
						"Using PHP"
					],
					"id": "faq.using",
					"name": "Using PHP",
					"description": "Using PHP"
				},
				"faq.passwords": {
					"tokens": [
						"Password Hashing"
					],
					"id": "faq.passwords",
					"name": "Password Hashing",
					"description": "Safe Password Hashing"
				},
				"faq.html": {
					"tokens": [
						"PHP and HTML"
					],
					"id": "faq.html",
					"name": "PHP and HTML",
					"description": "PHP and HTML"
				},
				"faq.com": {
					"tokens": [
						"PHP and COM"
					],
					"id": "faq.com",
					"name": "PHP and COM",
					"description": "PHP and COM"
				},
				"faq.migration5": {
					"tokens": [
						"Migrating from PHP 4 to PHP 5"
					],
					"id": "faq.migration5",
					"name": "Migrating from PHP 4 to PHP 5",
					"description": "Migrating from PHP 4 to PHP 5"
				},
				"faq.misc": {
					"tokens": [
						"Miscellaneous Questions"
					],
					"id": "faq.misc",
					"name": "Miscellaneous Questions",
					"description": "Miscellaneous Questions"
				}
			}
		}
	},
	"time": 1467738478737
}